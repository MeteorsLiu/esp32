package esp_driver_i2s

import (
	"github.com/goplus/lib/c"
	_ "unsafe"
)

/**
 * @brief I2S slot configuration for TDM mode
 */

type I2sTdmSlotConfigT struct {
	DataBitWidth I2sDataBitWidthT
	SlotBitWidth I2sSlotBitWidthT
	SlotMode     I2sSlotModeT
	SlotMask     I2sTdmSlotMaskT
	WsWidth      c.Uint32T
	WsPol        bool
	BitShift     bool
	LeftAlign    bool
	BigEndian    bool
	BitOrderLsb  bool
	SkipMask     bool
	TotalSlot    c.Uint32T
}

/**
 * @brief I2S clock configuration for TDM mode
 */

type I2sTdmClkConfigT struct {
	SampleRateHz c.Uint32T
	ClkSrc       I2sClockSrcT
	ExtClkFreqHz c.Uint32T
	MclkMultiple I2sMclkMultipleT
	BclkDiv      c.Uint32T
}

/**
 * @brief I2S TDM mode GPIO pins configuration
 */

type I2sTdmGpioConfigT struct {
	Mclk        GpioNumT
	Bclk        GpioNumT
	Ws          GpioNumT
	Dout        GpioNumT
	Din         GpioNumT
	InvertFlags struct {
		MclkInv c.Uint32T
		BclkInv c.Uint32T
		WsInv   c.Uint32T
	}
}

/**
 * @brief I2S TDM mode major configuration that including clock/slot/GPIO configuration
 */

type I2sTdmConfigT struct {
	ClkCfg  I2sTdmClkConfigT
	SlotCfg I2sTdmSlotConfigT
	GpioCfg I2sTdmGpioConfigT
}

/**
 * @brief Initialize I2S channel to TDM mode
 * @note  Only allowed to be called when the channel state is REGISTERED, (i.e., channel has been allocated, but not initialized)
 *        and the state will be updated to READY if initialization success, otherwise the state will return to REGISTERED.
 *
 * @param[in]   handle      I2S channel handler
 * @param[in]   tdm_cfg     Configurations for TDM mode, including clock, slot and GPIO
 *                          The clock configuration can be generated by the helper macro `I2S_TDM_CLK_DEFAULT_CONFIG`
 *                          The slot configuration can be generated by the helper macro `I2S_TDM_PHILIPS_SLOT_DEFAULT_CONFIG`,
 *                          `I2S_TDM_PCM_SHORT_SLOT_DEFAULT_CONFIG`, `I2S_TDM_PCM_LONG_SLOT_DEFAULT_CONFIG` or `I2S_TDM_MSB_SLOT_DEFAULT_CONFIG`
 *
 * @return
 *      - ESP_OK    Initialize successfully
 *      - ESP_ERR_NO_MEM        No memory for storing the channel information
 *      - ESP_ERR_INVALID_ARG   NULL pointer or invalid configuration
 *      - ESP_ERR_INVALID_STATE This channel is not registered
 */
//go:linkname I2sChannelInitTdmMode C.i2s_channel_init_tdm_mode
func I2sChannelInitTdmMode(handle I2sChanHandleT, tdm_cfg *I2sTdmConfigT) EspErrT

/**
 * @brief Reconfigure the I2S clock for TDM mode
 * @note  Only allowed to be called when the channel state is READY, i.e., channel has been initialized, but not started
 *        this function won't change the state. `i2s_channel_disable` should be called before calling this function if I2S has started.
 * @note  The input channel handle has to be initialized to TDM mode, i.e., `i2s_channel_init_tdm_mode` has been called before reconfiguring
 *
 * @param[in]   handle      I2S channel handler
 * @param[in]   clk_cfg     Standard mode clock configuration, can be generated by `I2S_TDM_CLK_DEFAULT_CONFIG`
 * @return
 *      - ESP_OK    Set clock successfully
 *      - ESP_ERR_INVALID_ARG   NULL pointer, invalid configuration or not TDM mode
 *      - ESP_ERR_INVALID_STATE This channel is not initialized or not stopped
 */
//go:linkname I2sChannelReconfigTdmClock C.i2s_channel_reconfig_tdm_clock
func I2sChannelReconfigTdmClock(handle I2sChanHandleT, clk_cfg *I2sTdmClkConfigT) EspErrT

/**
 * @brief Reconfigure the I2S slot for TDM mode
 * @note  Only allowed to be called when the channel state is READY, i.e., channel has been initialized, but not started
 *        this function won't change the state. `i2s_channel_disable` should be called before calling this function if I2S has started.
 * @note  The input channel handle has to be initialized to TDM mode, i.e., `i2s_channel_init_tdm_mode` has been called before reconfiguring
 *
 * @param[in]   handle      I2S channel handler
 * @param[in]   slot_cfg    Standard mode slot configuration, can be generated by `I2S_TDM_PHILIPS_SLOT_DEFAULT_CONFIG`,
 *                          `I2S_TDM_PCM_SHORT_SLOT_DEFAULT_CONFIG`, `I2S_TDM_PCM_LONG_SLOT_DEFAULT_CONFIG` or `I2S_TDM_MSB_SLOT_DEFAULT_CONFIG`.
 * @return
 *      - ESP_OK    Set clock successfully
 *      - ESP_ERR_NO_MEM        No memory for DMA buffer
 *      - ESP_ERR_INVALID_ARG   NULL pointer, invalid configuration  or not TDM mode
 *      - ESP_ERR_INVALID_STATE This channel is not initialized or not stopped
 */
//go:linkname I2sChannelReconfigTdmSlot C.i2s_channel_reconfig_tdm_slot
func I2sChannelReconfigTdmSlot(handle I2sChanHandleT, slot_cfg *I2sTdmSlotConfigT) EspErrT

/**
 * @brief Reconfigure the I2S GPIO for TDM mode
 * @note  Only allowed to be called when the channel state is READY, i.e., channel has been initialized, but not started
 *        this function won't change the state. `i2s_channel_disable` should be called before calling this function if I2S has started.
 * @note  The input channel handle has to be initialized to TDM mode, i.e., `i2s_channel_init_tdm_mode` has been called before reconfiguring
 *
 * @param[in]   handle      I2S channel handler
 * @param[in]   gpio_cfg    Standard mode GPIO configuration, specified by user
 * @return
 *      - ESP_OK    Set clock successfully
 *      - ESP_ERR_INVALID_ARG   NULL pointer, invalid configuration  or not TDM mode
 *      - ESP_ERR_INVALID_STATE This channel is not initialized or not stopped
 */
//go:linkname I2sChannelReconfigTdmGpio C.i2s_channel_reconfig_tdm_gpio
func I2sChannelReconfigTdmGpio(handle I2sChanHandleT, gpio_cfg *I2sTdmGpioConfigT) EspErrT
