package esp_adc

import (
	"github.com/goplus/lib/c"
	_ "unsafe"
)

const X_NEWLIB_VERSION_H__ = 1
const X_NEWLIB_VERSION = "4.3.0"
const X__NEWLIB__ = 4
const X__NEWLIB_MINOR__ = 3
const X__NEWLIB_PATCHLEVEL__ = 0
const X_DEFAULT_SOURCE = 1
const X_POSIX_SOURCE = 1
const X_ATFILE_SOURCE = 1
const X__ATFILE_VISIBLE = 1
const X__BSD_VISIBLE = 1
const X__GNU_VISIBLE = 0
const X__ISO_C_VISIBLE = 2011
const X__LARGEFILE_VISIBLE = 0
const X__MISC_VISIBLE = 1
const X__POSIX_VISIBLE = 200809
const X__SVID_VISIBLE = 1
const X__XSI_VISIBLE = 0
const X__SSP_FORTIFY_LEVEL = 0
const X_POSIX_THREADS = 1
const X_POSIX_TIMEOUTS = 1
const X_POSIX_TIMERS = 1
const X_UNIX98_THREAD_MUTEX_ATTRIBUTES = 1
const X__have_longlong64 = 1
const X__have_long32 = 1
const X___int8_t_defined = 1
const X___int16_t_defined = 1
const X___int32_t_defined = 1
const X___int64_t_defined = 1
const X___int_least8_t_defined = 1
const X___int_least16_t_defined = 1
const X___int_least32_t_defined = 1
const X___int_least64_t_defined = 1
const X__GNUCLIKE_ASM = 3
const X__GNUCLIKE___TYPEOF = 1
const X__GNUCLIKE___SECTION = 1
const X__GNUCLIKE_CTOR_SECTION_HANDLING = 1
const X__GNUCLIKE_BUILTIN_CONSTANT_P = 1
const X__GNUCLIKE_BUILTIN_VARARGS = 1
const X__GNUCLIKE_BUILTIN_STDARG = 1
const X__GNUCLIKE_BUILTIN_VAALIST = 1
const X__GNUC_VA_LIST_COMPATIBILITY = 1
const X__GNUCLIKE_BUILTIN_NEXT_ARG = 1
const X__GNUCLIKE_BUILTIN_MEMCPY = 1
const X__CC_SUPPORTS_INLINE = 1
const X__CC_SUPPORTS___INLINE = 1
const X__CC_SUPPORTS___INLINE__ = 1
const X__CC_SUPPORTS___FUNC__ = 1
const X__CC_SUPPORTS_WARNING = 1
const X__CC_SUPPORTS_VARADIC_XXX = 1
const X__CC_SUPPORTS_DYNAMIC_ARRAY_INIT = 1
const X__INT8 = "hh"
const X__INT16 = "h"
const X__INT64 = "ll"
const X__FAST8 = "hh"
const X__FAST16 = "h"
const X__FAST64 = "ll"
const X__LEAST8 = "hh"
const X__LEAST16 = "h"
const X__LEAST64 = "ll"
const X__int8_t_defined = 1
const X__int16_t_defined = 1
const X__int32_t_defined = 1
const X__int64_t_defined = 1
const X__int_least8_t_defined = 1
const X__int_least16_t_defined = 1
const X__int_least32_t_defined = 1
const X__int_least64_t_defined = 1
const X__int_fast8_t_defined = 1
const X__int_fast16_t_defined = 1
const X__int_fast32_t_defined = 1
const X__int_fast64_t_defined = 1
const X__bool_true_false_are_defined = 1
const True = 1
const False = 0
const X__NEWLIB_H__ = 1
const X_ATEXIT_DYNAMIC_ALLOC = 1
const X_FSEEK_OPTIMIZATION = 1
const X_FVWRITE_IN_STREAMIO = 1
const X_HAVE_INITFINI_ARRAY = 1
const X_HAVE_LONG_DOUBLE = 1
const X_ICONV_ENABLED = 1
const X_MB_LEN_MAX = 1
const X_NANO_MALLOC = 1
const X_REENT_CHECK_VERIFY = 1
const X_RETARGETABLE_LOCKING = 1
const X_UNBUF_STREAM_OPT = 1
const X_WANT_IO_C99_FORMATS = 1
const X_WANT_IO_LONG_LONG = 1
const X_WANT_IO_POS_ARGS = 1
const X_WANT_REENT_BACKWARD_BINARY_COMPAT = 1
const X_WANT_REENT_SMALL = 1
const X_WANT_USE_GDTOA = 1
const X__OBSOLETE_MATH_DEFAULT = 1
const X__BUFSIZ__ = 128
const X__RAND_MAX = 0x7fffffff
const X_NULL = 0
const CONFIG_SOC_CAPS_ECO_VER_MAX = 102
const CONFIG_SOC_ADC_SUPPORTED = 1
const CONFIG_SOC_ANA_CMPR_SUPPORTED = 1
const CONFIG_SOC_DEDICATED_GPIO_SUPPORTED = 1
const CONFIG_SOC_UART_SUPPORTED = 1
const CONFIG_SOC_GDMA_SUPPORTED = 1
const CONFIG_SOC_AHB_GDMA_SUPPORTED = 1
const CONFIG_SOC_ASYNC_MEMCPY_SUPPORTED = 1
const CONFIG_SOC_PCNT_SUPPORTED = 1
const CONFIG_SOC_MCPWM_SUPPORTED = 1
const CONFIG_SOC_TWAI_SUPPORTED = 1
const CONFIG_SOC_PHY_SUPPORTED = 1
const CONFIG_SOC_BT_SUPPORTED = 1
const CONFIG_SOC_GPTIMER_SUPPORTED = 1
const CONFIG_SOC_IEEE802154_SUPPORTED = 1
const CONFIG_SOC_IEEE802154_BLE_ONLY = 1
const CONFIG_SOC_USB_SERIAL_JTAG_SUPPORTED = 1
const CONFIG_SOC_TEMP_SENSOR_SUPPORTED = 1
const CONFIG_SOC_SUPPORTS_SECURE_DL_MODE = 1
const CONFIG_SOC_EFUSE_KEY_PURPOSE_FIELD = 1
const CONFIG_SOC_EFUSE_SUPPORTED = 1
const CONFIG_SOC_RTC_FAST_MEM_SUPPORTED = 1
const CONFIG_SOC_RTC_MEM_SUPPORTED = 1
const CONFIG_SOC_I2S_SUPPORTED = 1
const CONFIG_SOC_SDM_SUPPORTED = 1
const CONFIG_SOC_ETM_SUPPORTED = 1
const CONFIG_SOC_RMT_SUPPORTED = 1
const CONFIG_SOC_PARLIO_SUPPORTED = 1
const CONFIG_SOC_GPSPI_SUPPORTED = 1
const CONFIG_SOC_LEDC_SUPPORTED = 1
const CONFIG_SOC_I2C_SUPPORTED = 1
const CONFIG_SOC_SYSTIMER_SUPPORTED = 1
const CONFIG_SOC_SUPPORT_COEXISTENCE = 1
const CONFIG_SOC_AES_SUPPORTED = 1
const CONFIG_SOC_MPI_SUPPORTED = 1
const CONFIG_SOC_SHA_SUPPORTED = 1
const CONFIG_SOC_HMAC_SUPPORTED = 1
const CONFIG_SOC_DIG_SIGN_SUPPORTED = 1
const CONFIG_SOC_ECC_SUPPORTED = 1
const CONFIG_SOC_ECC_EXTENDED_MODES_SUPPORTED = 1
const CONFIG_SOC_ECDSA_SUPPORTED = 1
const CONFIG_SOC_FLASH_ENC_SUPPORTED = 1
const CONFIG_SOC_SECURE_BOOT_SUPPORTED = 1
const CONFIG_SOC_BOD_SUPPORTED = 1
const CONFIG_SOC_APM_SUPPORTED = 1
const CONFIG_SOC_PMU_SUPPORTED = 1
const CONFIG_SOC_LP_TIMER_SUPPORTED = 1
const CONFIG_SOC_LP_AON_SUPPORTED = 1
const CONFIG_SOC_PAU_SUPPORTED = 1
const CONFIG_SOC_CLK_TREE_SUPPORTED = 1
const CONFIG_SOC_ASSIST_DEBUG_SUPPORTED = 1
const CONFIG_SOC_WDT_SUPPORTED = 1
const CONFIG_SOC_SPI_FLASH_SUPPORTED = 1
const CONFIG_SOC_RNG_SUPPORTED = 1
const CONFIG_SOC_LIGHT_SLEEP_SUPPORTED = 1
const CONFIG_SOC_DEEP_SLEEP_SUPPORTED = 1
const CONFIG_SOC_MODEM_CLOCK_SUPPORTED = 1
const CONFIG_SOC_PM_SUPPORTED = 1
const CONFIG_SOC_XTAL_SUPPORT_32M = 1
const CONFIG_SOC_XTAL_CLOCK_PATH_DEPENDS_ON_TOP_DOMAIN = 1
const CONFIG_SOC_AES_SUPPORT_DMA = 1
const CONFIG_SOC_AES_GDMA = 1
const CONFIG_SOC_AES_SUPPORT_AES_128 = 1
const CONFIG_SOC_AES_SUPPORT_AES_256 = 1
const CONFIG_SOC_AES_SUPPORT_PSEUDO_ROUND_FUNCTION = 1
const CONFIG_SOC_ADC_DIG_CTRL_SUPPORTED = 1
const CONFIG_SOC_ADC_DIG_IIR_FILTER_SUPPORTED = 1
const CONFIG_SOC_ADC_MONITOR_SUPPORTED = 1
const CONFIG_SOC_ADC_DMA_SUPPORTED = 1
const CONFIG_SOC_ADC_PERIPH_NUM = 1
const CONFIG_SOC_ADC_MAX_CHANNEL_NUM = 5
const CONFIG_SOC_ADC_ATTEN_NUM = 4
const CONFIG_SOC_ADC_DIGI_CONTROLLER_NUM = 1
const CONFIG_SOC_ADC_PATT_LEN_MAX = 8
const CONFIG_SOC_ADC_DIGI_MAX_BITWIDTH = 12
const CONFIG_SOC_ADC_DIGI_MIN_BITWIDTH = 12
const CONFIG_SOC_ADC_DIGI_IIR_FILTER_NUM = 2
const CONFIG_SOC_ADC_DIGI_MONITOR_NUM = 2
const CONFIG_SOC_ADC_DIGI_RESULT_BYTES = 4
const CONFIG_SOC_ADC_DIGI_DATA_BYTES_PER_CONV = 4
const CONFIG_SOC_ADC_SAMPLE_FREQ_THRES_HIGH = 83333
const CONFIG_SOC_ADC_SAMPLE_FREQ_THRES_LOW = 611
const CONFIG_SOC_ADC_RTC_MIN_BITWIDTH = 12
const CONFIG_SOC_ADC_RTC_MAX_BITWIDTH = 12
const CONFIG_SOC_ADC_CALIBRATION_V1_SUPPORTED = 1
const CONFIG_SOC_ADC_SELF_HW_CALI_SUPPORTED = 1
const CONFIG_SOC_ADC_CALIB_CHAN_COMPENS_SUPPORTED = 1
const CONFIG_SOC_ADC_TEMPERATURE_SHARE_INTR = 1
const CONFIG_SOC_ADC_SHARED_POWER = 1
const CONFIG_SOC_BROWNOUT_RESET_SUPPORTED = 1
const CONFIG_SOC_SHARED_IDCACHE_SUPPORTED = 1
const CONFIG_SOC_CACHE_FREEZE_SUPPORTED = 1
const CONFIG_SOC_CPU_CORES_NUM = 1
const CONFIG_SOC_CPU_INTR_NUM = 32
const CONFIG_SOC_CPU_HAS_FLEXIBLE_INTC = 1
const CONFIG_SOC_INT_PLIC_SUPPORTED = 1
const CONFIG_SOC_CPU_HAS_CSR_PC = 1
const CONFIG_SOC_CPU_BREAKPOINTS_NUM = 4
const CONFIG_SOC_CPU_WATCHPOINTS_NUM = 4
const CONFIG_SOC_CPU_WATCHPOINT_MAX_REGION_SIZE = 0x80000000
const CONFIG_SOC_CPU_HAS_PMA = 1
const CONFIG_SOC_CPU_IDRAM_SPLIT_USING_PMP = 1
const CONFIG_SOC_CPU_PMP_REGION_GRANULARITY = 4
const CONFIG_SOC_MMU_PAGE_SIZE_CONFIGURABLE = 1
const CONFIG_SOC_MMU_PAGE_SIZE_8KB_SUPPORTED = 1
const CONFIG_SOC_MMU_PERIPH_NUM = 1
const CONFIG_SOC_MMU_LINEAR_ADDRESS_REGION_NUM = 1
const CONFIG_SOC_MMU_DI_VADDR_SHARED = 1
const CONFIG_SOC_DS_SIGNATURE_MAX_BIT_LEN = 3072
const CONFIG_SOC_DS_KEY_PARAM_MD_IV_LENGTH = 16
const CONFIG_SOC_DS_KEY_CHECK_MAX_WAIT_US = 1100
const CONFIG_SOC_AHB_GDMA_VERSION = 1
const CONFIG_SOC_GDMA_NUM_GROUPS_MAX = 1
const CONFIG_SOC_GDMA_PAIRS_PER_GROUP_MAX = 3
const CONFIG_SOC_GDMA_SUPPORT_ETM = 1
const CONFIG_SOC_GDMA_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_ETM_GROUPS = 1
const CONFIG_SOC_ETM_CHANNELS_PER_GROUP = 50
const CONFIG_SOC_ETM_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_GPIO_PORT = 1
const CONFIG_SOC_GPIO_PIN_COUNT = 28
const CONFIG_SOC_GPIO_SUPPORT_PIN_GLITCH_FILTER = 1
const CONFIG_SOC_GPIO_FLEX_GLITCH_FILTER_NUM = 8
const CONFIG_SOC_GPIO_SUPPORT_PIN_HYS_FILTER = 1
const CONFIG_SOC_GPIO_SUPPORT_PIN_HYS_CTRL_BY_EFUSE = 1
const CONFIG_SOC_GPIO_SUPPORT_ETM = 1
const CONFIG_SOC_GPIO_SUPPORT_RTC_INDEPENDENT = 1
const CONFIG_SOC_LP_IO_CLOCK_IS_INDEPENDENT = 1
const CONFIG_SOC_GPIO_IN_RANGE_MAX = 27
const CONFIG_SOC_GPIO_OUT_RANGE_MAX = 27
const CONFIG_SOC_GPIO_VALID_DIGITAL_IO_PAD_MASK = 0x000000000FFF807F
const CONFIG_SOC_GPIO_SUPPORT_FORCE_HOLD = 1
const CONFIG_SOC_GPIO_SUPPORT_HOLD_IO_IN_DSLP = 1
const CONFIG_SOC_GPIO_SUPPORT_HOLD_SINGLE_IO_IN_DSLP = 1
const CONFIG_SOC_GPIO_CLOCKOUT_BY_GPIO_MATRIX = 1
const CONFIG_SOC_CLOCKOUT_HAS_SOURCE_GATE = 1
const CONFIG_SOC_GPIO_CLOCKOUT_CHANNEL_NUM = 3
const CONFIG_SOC_RTCIO_PIN_COUNT = 8
const CONFIG_SOC_RTCIO_HOLD_SUPPORTED = 1
const CONFIG_SOC_DEDIC_GPIO_OUT_CHANNELS_NUM = 8
const CONFIG_SOC_DEDIC_GPIO_IN_CHANNELS_NUM = 8
const CONFIG_SOC_DEDIC_PERIPH_ALWAYS_ENABLE = 1
const CONFIG_SOC_ANA_CMPR_NUM = 1
const CONFIG_SOC_ANA_CMPR_INTR_SHARE_WITH_GPIO = 1
const CONFIG_SOC_I2C_NUM = 2
const CONFIG_SOC_HP_I2C_NUM = 2
const CONFIG_SOC_I2C_FIFO_LEN = 32
const CONFIG_SOC_I2C_CMD_REG_NUM = 8
const CONFIG_SOC_I2C_SUPPORT_SLAVE = 1
const CONFIG_SOC_I2C_SUPPORT_HW_FSM_RST = 1
const CONFIG_SOC_I2C_SUPPORT_HW_CLR_BUS = 1
const CONFIG_SOC_I2C_SUPPORT_XTAL = 1
const CONFIG_SOC_I2C_SUPPORT_RTC = 1
const CONFIG_SOC_I2C_SUPPORT_10BIT_ADDR = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_BROADCAST = 1
const CONFIG_SOC_I2C_SLAVE_CAN_GET_STRETCH_CAUSE = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_I2CRAM_ACCESS = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_SLAVE_UNMATCH = 1
const CONFIG_SOC_I2C_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_I2S_NUM = 1
const CONFIG_SOC_I2S_HW_VERSION_2 = 1
const CONFIG_SOC_I2S_SUPPORTS_ETM = 1
const CONFIG_SOC_I2S_SUPPORTS_XTAL = 1
const CONFIG_SOC_I2S_SUPPORTS_PLL_F96M = 1
const CONFIG_SOC_I2S_SUPPORTS_PLL_F64M = 1
const CONFIG_SOC_I2S_SUPPORTS_PCM = 1
const CONFIG_SOC_I2S_SUPPORTS_PDM = 1
const CONFIG_SOC_I2S_SUPPORTS_PDM_TX = 1
const CONFIG_SOC_I2S_PDM_MAX_TX_LINES = 2
const CONFIG_SOC_I2S_SUPPORTS_TDM = 1
const CONFIG_SOC_I2S_TDM_FULL_DATA_WIDTH = 1
const CONFIG_SOC_I2S_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_LEDC_SUPPORT_PLL_DIV_CLOCK = 1
const CONFIG_SOC_LEDC_SUPPORT_XTAL_CLOCK = 1
const CONFIG_SOC_LEDC_TIMER_NUM = 4
const CONFIG_SOC_LEDC_CHANNEL_NUM = 6
const CONFIG_SOC_LEDC_TIMER_BIT_WIDTH = 20
const CONFIG_SOC_LEDC_SUPPORT_FADE_STOP = 1
const CONFIG_SOC_LEDC_GAMMA_CURVE_FADE_SUPPORTED = 1
const CONFIG_SOC_LEDC_GAMMA_CURVE_FADE_RANGE_MAX = 16
const CONFIG_SOC_LEDC_FADE_PARAMS_BIT_WIDTH = 10
const CONFIG_SOC_LEDC_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MPU_MIN_REGION_SIZE = 0x20000000
const CONFIG_SOC_MPU_REGIONS_MAX_NUM = 8
const CONFIG_SOC_PCNT_GROUPS = 1
const CONFIG_SOC_PCNT_UNITS_PER_GROUP = 4
const CONFIG_SOC_PCNT_CHANNELS_PER_UNIT = 2
const CONFIG_SOC_PCNT_THRES_POINT_PER_UNIT = 2
const CONFIG_SOC_PCNT_SUPPORT_RUNTIME_THRES_UPDATE = 1
const CONFIG_SOC_PCNT_SUPPORT_STEP_NOTIFY = 1
const CONFIG_SOC_PCNT_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_RMT_GROUPS = 1
const CONFIG_SOC_RMT_TX_CANDIDATES_PER_GROUP = 2
const CONFIG_SOC_RMT_RX_CANDIDATES_PER_GROUP = 2
const CONFIG_SOC_RMT_CHANNELS_PER_GROUP = 4
const CONFIG_SOC_RMT_MEM_WORDS_PER_CHANNEL = 48
const CONFIG_SOC_RMT_SUPPORT_RX_PINGPONG = 1
const CONFIG_SOC_RMT_SUPPORT_RX_DEMODULATION = 1
const CONFIG_SOC_RMT_SUPPORT_TX_ASYNC_STOP = 1
const CONFIG_SOC_RMT_SUPPORT_TX_LOOP_COUNT = 1
const CONFIG_SOC_RMT_SUPPORT_TX_LOOP_AUTO_STOP = 1
const CONFIG_SOC_RMT_SUPPORT_TX_SYNCHRO = 1
const CONFIG_SOC_RMT_SUPPORT_TX_CARRIER_DATA_ONLY = 1
const CONFIG_SOC_RMT_SUPPORT_XTAL = 1
const CONFIG_SOC_RMT_SUPPORT_RC_FAST = 1
const CONFIG_SOC_RMT_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MCPWM_GROUPS = 1
const CONFIG_SOC_MCPWM_TIMERS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_OPERATORS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_COMPARATORS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_GENERATORS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_TRIGGERS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_GPIO_FAULTS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_CAPTURE_TIMERS_PER_GROUP = 1
const CONFIG_SOC_MCPWM_CAPTURE_CHANNELS_PER_TIMER = 3
const CONFIG_SOC_MCPWM_GPIO_SYNCHROS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_SWSYNC_CAN_PROPAGATE = 1
const CONFIG_SOC_MCPWM_SUPPORT_ETM = 1
const CONFIG_SOC_MCPWM_CAPTURE_CLK_FROM_GROUP = 1
const CONFIG_SOC_MCPWM_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_PARLIO_GROUPS = 1
const CONFIG_SOC_PARLIO_TX_UNITS_PER_GROUP = 1
const CONFIG_SOC_PARLIO_RX_UNITS_PER_GROUP = 1
const CONFIG_SOC_PARLIO_TX_UNIT_MAX_DATA_WIDTH = 8
const CONFIG_SOC_PARLIO_RX_UNIT_MAX_DATA_WIDTH = 8
const CONFIG_SOC_PARLIO_TX_CLK_SUPPORT_GATING = 1
const CONFIG_SOC_PARLIO_RX_CLK_SUPPORT_GATING = 1
const CONFIG_SOC_PARLIO_RX_CLK_SUPPORT_OUTPUT = 1
const CONFIG_SOC_PARLIO_TRANS_BIT_ALIGN = 1
const CONFIG_SOC_PARLIO_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MPI_MEM_BLOCKS_NUM = 4
const CONFIG_SOC_MPI_OPERATIONS_NUM = 3
const CONFIG_SOC_RSA_MAX_BIT_LEN = 3072
const CONFIG_SOC_SHA_DMA_MAX_BUFFER_SIZE = 3968
const CONFIG_SOC_SHA_SUPPORT_DMA = 1
const CONFIG_SOC_SHA_SUPPORT_RESUME = 1
const CONFIG_SOC_SHA_GDMA = 1
const CONFIG_SOC_SHA_SUPPORT_SHA1 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA224 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA256 = 1
const CONFIG_SOC_SDM_GROUPS = 1
const CONFIG_SOC_SDM_CHANNELS_PER_GROUP = 4
const CONFIG_SOC_SDM_CLK_SUPPORT_PLL_F48M = 1
const CONFIG_SOC_SDM_CLK_SUPPORT_XTAL = 1
const CONFIG_SOC_SPI_PERIPH_NUM = 2
const CONFIG_SOC_SPI_MAX_CS_NUM = 6
const CONFIG_SOC_SPI_MAXIMUM_BUFFER_SIZE = 64
const CONFIG_SOC_SPI_SUPPORT_DDRCLK = 1
const CONFIG_SOC_SPI_SLAVE_SUPPORT_SEG_TRANS = 1
const CONFIG_SOC_SPI_SUPPORT_CD_SIG = 1
const CONFIG_SOC_SPI_SUPPORT_CONTINUOUS_TRANS = 1
const CONFIG_SOC_SPI_SUPPORT_SLAVE_HD_VER2 = 1
const CONFIG_SOC_SPI_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_XTAL = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_PLL_F48M = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_RC_FAST = 1
const CONFIG_SOC_SPI_SCT_SUPPORTED = 1
const CONFIG_SOC_SPI_SCT_REG_NUM = 14
const CONFIG_SOC_SPI_SCT_BUFFER_NUM_MAX = 1
const CONFIG_SOC_SPI_SCT_CONF_BITLEN_MAX = 0x3FFFA
const CONFIG_SOC_MEMSPI_IS_INDEPENDENT = 1
const CONFIG_SOC_SPI_MAX_PRE_DIVIDER = 16
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_WAIT_IDLE = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_SUSPEND = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_RESUME = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_IDLE_INTR = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_SW_SUSPEND = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_CHECK_SUS = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_WRAP = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_64M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_32M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_16M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_FLASH_CLK_SRC_IS_INDEPENDENT = 1
const CONFIG_SOC_SYSTIMER_COUNTER_NUM = 2
const CONFIG_SOC_SYSTIMER_ALARM_NUM = 3
const CONFIG_SOC_SYSTIMER_BIT_WIDTH_LO = 32
const CONFIG_SOC_SYSTIMER_BIT_WIDTH_HI = 20
const CONFIG_SOC_SYSTIMER_FIXED_DIVIDER = 1
const CONFIG_SOC_SYSTIMER_SUPPORT_RC_FAST = 1
const CONFIG_SOC_SYSTIMER_INT_LEVEL = 1
const CONFIG_SOC_SYSTIMER_ALARM_MISS_COMPENSATE = 1
const CONFIG_SOC_SYSTIMER_SUPPORT_ETM = 1
const CONFIG_SOC_LP_TIMER_BIT_WIDTH_LO = 32
const CONFIG_SOC_LP_TIMER_BIT_WIDTH_HI = 16
const CONFIG_SOC_TIMER_GROUPS = 2
const CONFIG_SOC_TIMER_GROUP_TIMERS_PER_GROUP = 1
const CONFIG_SOC_TIMER_GROUP_COUNTER_BIT_WIDTH = 54
const CONFIG_SOC_TIMER_GROUP_SUPPORT_XTAL = 1
const CONFIG_SOC_TIMER_GROUP_SUPPORT_RC_FAST = 1
const CONFIG_SOC_TIMER_GROUP_TOTAL_TIMERS = 2
const CONFIG_SOC_TIMER_SUPPORT_ETM = 1
const CONFIG_SOC_TIMER_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MWDT_SUPPORT_XTAL = 1
const CONFIG_SOC_MWDT_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_TWAI_CONTROLLER_NUM = 1
const CONFIG_SOC_TWAI_CLK_SUPPORT_XTAL = 1
const CONFIG_SOC_TWAI_BRP_MIN = 2
const CONFIG_SOC_TWAI_BRP_MAX = 32768
const CONFIG_SOC_TWAI_SUPPORTS_RX_STATUS = 1
const CONFIG_SOC_TWAI_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_EFUSE_DIS_PAD_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_USB_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_DIRECT_BOOT = 1
const CONFIG_SOC_EFUSE_SOFT_DIS_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_ICACHE = 1
const CONFIG_SOC_EFUSE_BLOCK9_KEY_PURPOSE_QUIRK = 1
const CONFIG_SOC_EFUSE_ECDSA_USE_HARDWARE_K = 1
const CONFIG_SOC_EFUSE_ECDSA_KEY = 1
const CONFIG_SOC_SECURE_BOOT_V2_RSA = 1
const CONFIG_SOC_SECURE_BOOT_V2_ECC = 1
const CONFIG_SOC_EFUSE_SECURE_BOOT_KEY_DIGESTS = 3
const CONFIG_SOC_EFUSE_REVOKE_BOOT_KEY_DIGESTS = 1
const CONFIG_SOC_SUPPORT_SECURE_BOOT_REVOKE_KEY = 1
const CONFIG_SOC_FLASH_ENCRYPTED_XTS_AES_BLOCK_MAX = 64
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES = 1
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES_128 = 1
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES_SUPPORT_PSEUDO_ROUND = 1
const CONFIG_SOC_APM_CTRL_FILTER_SUPPORTED = 1
const CONFIG_SOC_CRYPTO_DPA_PROTECTION_SUPPORTED = 1
const CONFIG_SOC_ECC_CONSTANT_TIME_POINT_MUL = 1
const CONFIG_SOC_ECDSA_USES_MPI = 1
const CONFIG_SOC_UART_NUM = 2
const CONFIG_SOC_UART_HP_NUM = 2
const CONFIG_SOC_UART_FIFO_LEN = 128
const CONFIG_SOC_UART_BITRATE_MAX = 5000000
const CONFIG_SOC_UART_SUPPORT_RTC_CLK = 1
const CONFIG_SOC_UART_SUPPORT_XTAL_CLK = 1
const CONFIG_SOC_UART_SUPPORT_WAKEUP_INT = 1
const CONFIG_SOC_UART_SUPPORT_FSM_TX_WAIT_SEND = 1
const CONFIG_SOC_UART_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_COEX_HW_PTI = 1
const CONFIG_SOC_EXTERNAL_COEX_ADVANCE = 1
const CONFIG_SOC_PHY_DIG_REGS_MEM_SIZE = 21
const CONFIG_SOC_PM_SUPPORT_BT_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_EXT1_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_EXT1_WAKEUP_MODE_PER_PIN = 1
const CONFIG_SOC_PM_SUPPORT_CPU_PD = 1
const CONFIG_SOC_PM_SUPPORT_MODEM_PD = 1
const CONFIG_SOC_PM_SUPPORT_XTAL32K_PD = 1
const CONFIG_SOC_PM_SUPPORT_RC32K_PD = 1
const CONFIG_SOC_PM_SUPPORT_RC_FAST_PD = 1
const CONFIG_SOC_PM_SUPPORT_VDDSDIO_PD = 1
const CONFIG_SOC_PM_SUPPORT_TOP_PD = 1
const CONFIG_SOC_PM_PAU_LINK_NUM = 4
const CONFIG_SOC_PM_PAU_REGDMA_LINK_MULTI_ADDR = 1
const CONFIG_SOC_PM_PAU_REGDMA_LINK_WIFIMAC = 1
const CONFIG_SOC_PM_PAU_REGDMA_UPDATE_CACHE_BEFORE_WAIT_COMPARE = 1
const CONFIG_SOC_PM_RETENTION_MODULE_NUM = 32
const CONFIG_SOC_EXT_MEM_CACHE_TAG_IN_CPU_DOMAIN = 1
const CONFIG_SOC_PM_CPU_RETENTION_BY_SW = 1
const CONFIG_SOC_PM_MODEM_RETENTION_BY_REGDMA = 1
const CONFIG_SOC_PM_SUPPORT_DEEPSLEEP_CHECK_STUB_ONLY = 1
const CONFIG_SOC_PM_RETENTION_SW_TRIGGER_REGDMA = 1
const CONFIG_SOC_CLK_RC_FAST_SUPPORT_CALIBRATION = 1
const CONFIG_SOC_CLK_XTAL32K_SUPPORTED = 1
const CONFIG_SOC_CLK_OSC_SLOW_SUPPORTED = 1
const CONFIG_SOC_CLK_RC32K_SUPPORTED = 1
const CONFIG_SOC_CLK_LP_FAST_SUPPORT_LP_PLL = 1
const CONFIG_SOC_MODEM_CLOCK_IS_INDEPENDENT = 1
const CONFIG_SOC_RCC_IS_INDEPENDENT = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_FAST_RC = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_XTAL = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_INTR_SUPPORT = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_ETM = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_UNDER_PD_TOP_DOMAIN = 1
const CONFIG_SOC_RNG_CLOCK_IS_INDEPENDENT = 1
const CONFIG_SOC_BLE_SUPPORTED = 1
const CONFIG_SOC_BLE_MESH_SUPPORTED = 1
const CONFIG_SOC_ESP_NIMBLE_CONTROLLER = 1
const CONFIG_SOC_BLE_50_SUPPORTED = 1
const CONFIG_SOC_BLE_DEVICE_PRIVACY_SUPPORTED = 1
const CONFIG_SOC_BLE_POWER_CONTROL_SUPPORTED = 1
const CONFIG_SOC_BLE_MULTI_CONN_OPTIMIZATION = 1
const CONFIG_SOC_BLE_PERIODIC_ADV_ENH_SUPPORTED = 1
const CONFIG_SOC_BLE_CTE_SUPPORTED = 1
const CONFIG_SOC_DEBUG_HAVE_OCD_STUB_BINS = 1
const CONFIG_IDF_CMAKE = 1
const CONFIG_IDF_TOOLCHAIN = "gcc"
const CONFIG_IDF_TOOLCHAIN_GCC = 1
const CONFIG_IDF_TARGET_ARCH_RISCV = 1
const CONFIG_IDF_TARGET_ARCH = "riscv"
const CONFIG_IDF_TARGET = "esp32h2"
const CONFIG_IDF_INIT_VERSION = "5.4.2"
const CONFIG_IDF_TARGET_ESP32H2 = 1
const CONFIG_IDF_FIRMWARE_CHIP_ID = 0x0010
const CONFIG_APP_BUILD_TYPE_APP_2NDBOOT = 1
const CONFIG_APP_BUILD_GENERATE_BINARIES = 1
const CONFIG_APP_BUILD_BOOTLOADER = 1
const CONFIG_APP_BUILD_USE_FLASH_SECTIONS = 1
const CONFIG_BOOTLOADER_COMPILE_TIME_DATE = 1
const CONFIG_BOOTLOADER_PROJECT_VER = 1
const CONFIG_BOOTLOADER_OFFSET_IN_FLASH = 0x0
const CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_SIZE = 1
const CONFIG_BOOTLOADER_LOG_LEVEL_INFO = 1
const CONFIG_BOOTLOADER_LOG_LEVEL = 3
const CONFIG_BOOTLOADER_LOG_TIMESTAMP_SOURCE_CPU_TICKS = 1
const CONFIG_BOOTLOADER_FLASH_XMC_SUPPORT = 1
const CONFIG_BOOTLOADER_REGION_PROTECTION_ENABLE = 1
const CONFIG_BOOTLOADER_WDT_ENABLE = 1
const CONFIG_BOOTLOADER_WDT_TIME_MS = 9000
const CONFIG_BOOTLOADER_RESERVE_RTC_SIZE = 0x0
const CONFIG_SECURE_BOOT_V2_RSA_SUPPORTED = 1
const CONFIG_SECURE_BOOT_V2_ECC_SUPPORTED = 1
const CONFIG_SECURE_BOOT_V2_PREFERRED = 1
const CONFIG_SECURE_ROM_DL_MODE_ENABLED = 1
const CONFIG_APP_COMPILE_TIME_DATE = 1
const CONFIG_APP_RETRIEVE_LEN_ELF_SHA = 9
const CONFIG_ESP_ROM_HAS_CRC_LE = 1
const CONFIG_ESP_ROM_HAS_CRC_BE = 1
const CONFIG_ESP_ROM_UART_CLK_IS_XTAL = 1
const CONFIG_ESP_ROM_USB_SERIAL_DEVICE_NUM = 3
const CONFIG_ESP_ROM_HAS_RETARGETABLE_LOCKING = 1
const CONFIG_ESP_ROM_GET_CLK_FREQ = 1
const CONFIG_ESP_ROM_HAS_HAL_WDT = 1
const CONFIG_ESP_ROM_HAS_HAL_SYSTIMER = 1
const CONFIG_ESP_ROM_HAS_HEAP_TLSF = 1
const CONFIG_ESP_ROM_TLSF_CHECK_PATCH = 1
const CONFIG_ESP_ROM_MULTI_HEAP_WALK_PATCH = 1
const CONFIG_ESP_ROM_HAS_LAYOUT_TABLE = 1
const CONFIG_ESP_ROM_HAS_SPI_FLASH = 1
const CONFIG_ESP_ROM_WITHOUT_REGI2C = 1
const CONFIG_ESP_ROM_HAS_NEWLIB = 1
const CONFIG_ESP_ROM_HAS_NEWLIB_NANO_FORMAT = 1
const CONFIG_ESP_ROM_HAS_NEWLIB_NANO_PRINTF_FLOAT_BUG = 1
const CONFIG_ESP_ROM_WDT_INIT_PATCH = 1
const CONFIG_ESP_ROM_NEEDS_SET_CACHE_MMU_SIZE = 1
const CONFIG_ESP_ROM_RAM_APP_NEEDS_MMU_INIT = 1
const CONFIG_ESP_ROM_HAS_SW_FLOAT = 1
const CONFIG_ESP_ROM_HAS_VERSION = 1
const CONFIG_ESP_ROM_SUPPORT_DEEP_SLEEP_WAKEUP_STUB = 1
const CONFIG_ESP_ROM_HAS_OUTPUT_PUTC_FUNC = 1
const CONFIG_BOOT_ROM_LOG_ALWAYS_ON = 1
const CONFIG_ESPTOOLPY_FLASHMODE_DIO = 1
const CONFIG_ESPTOOLPY_FLASH_SAMPLE_MODE_STR = 1
const CONFIG_ESPTOOLPY_FLASHMODE = "dio"
const CONFIG_ESPTOOLPY_FLASHFREQ_64M = 1
const CONFIG_ESPTOOLPY_FLASHFREQ = "48m"
const CONFIG_ESPTOOLPY_FLASHSIZE_2MB = 1
const CONFIG_ESPTOOLPY_FLASHSIZE = "2MB"
const CONFIG_ESPTOOLPY_BEFORE_RESET = 1
const CONFIG_ESPTOOLPY_BEFORE = "default_reset"
const CONFIG_ESPTOOLPY_AFTER_RESET = 1
const CONFIG_ESPTOOLPY_AFTER = "hard_reset"
const CONFIG_ESPTOOLPY_MONITOR_BAUD = 115200
const CONFIG_PARTITION_TABLE_SINGLE_APP = 1
const CONFIG_PARTITION_TABLE_CUSTOM_FILENAME = "partitions.csv"
const CONFIG_PARTITION_TABLE_FILENAME = "partitions_singleapp.csv"
const CONFIG_PARTITION_TABLE_OFFSET = 0x8000
const CONFIG_PARTITION_TABLE_MD5 = 1
const CONFIG_COMPILER_OPTIMIZATION_DEBUG = 1
const CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE = 1
const CONFIG_COMPILER_ASSERT_NDEBUG_EVALUATE = 1
const CONFIG_COMPILER_FLOAT_LIB_FROM_GCCLIB = 1
const CONFIG_COMPILER_OPTIMIZATION_ASSERTION_LEVEL = 2
const CONFIG_COMPILER_HIDE_PATHS_MACROS = 1
const CONFIG_COMPILER_STACK_CHECK_MODE_NONE = 1
const CONFIG_COMPILER_DISABLE_DEFAULT_ERRORS = 1
const CONFIG_COMPILER_RT_LIB_GCCLIB = 1
const CONFIG_COMPILER_RT_LIB_NAME = "gcc"
const CONFIG_COMPILER_ORPHAN_SECTIONS_WARNING = 1
const CONFIG_APPTRACE_DEST_NONE = 1
const CONFIG_APPTRACE_DEST_UART_NONE = 1
const CONFIG_APPTRACE_UART_TASK_PRIO = 1
const CONFIG_APPTRACE_LOCK_ENABLE = 1
const CONFIG_EFUSE_MAX_BLK_LEN = 256
const CONFIG_ESP_TLS_USING_MBEDTLS = 1
const CONFIG_ESP_TLS_USE_DS_PERIPHERAL = 1
const CONFIG_ESP_COEX_ENABLED = 1
const CONFIG_ESP_ERR_TO_NAME_LOOKUP = 1
const CONFIG_GPTIMER_ISR_HANDLER_IN_IRAM = 1
const CONFIG_GPTIMER_OBJ_CACHE_SAFE = 1
const CONFIG_SPI_MASTER_ISR_IN_IRAM = 1
const CONFIG_SPI_SLAVE_ISR_IN_IRAM = 1
const CONFIG_USJ_ENABLE_USB_SERIAL_JTAG = 1
const CONFIG_ETH_ENABLED = 1
const CONFIG_ETH_USE_SPI_ETHERNET = 1
const CONFIG_ESP_EVENT_POST_FROM_ISR = 1
const CONFIG_ESP_EVENT_POST_FROM_IRAM_ISR = 1
const CONFIG_ESP_GDBSTUB_ENABLED = 1
const CONFIG_ESP_GDBSTUB_SUPPORT_TASKS = 1
const CONFIG_ESP_GDBSTUB_MAX_TASKS = 32
const CONFIG_ESPHID_TASK_SIZE_BT = 2048
const CONFIG_ESPHID_TASK_SIZE_BLE = 4096
const CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS = 1
const CONFIG_ESP_HTTP_CLIENT_EVENT_POST_TIMEOUT = 2000
const CONFIG_HTTPD_MAX_REQ_HDR_LEN = 512
const CONFIG_HTTPD_MAX_URI_LEN = 512
const CONFIG_HTTPD_ERR_RESP_NO_DELAY = 1
const CONFIG_HTTPD_PURGE_BUF_LEN = 32
const CONFIG_HTTPD_SERVER_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP_HTTPS_OTA_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP_HTTPS_SERVER_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP32H2_REV_MIN_0 = 1
const CONFIG_ESP32H2_REV_MIN_FULL = 0
const CONFIG_ESP_REV_MIN_FULL = 0
const CONFIG_ESP32H2_REV_MAX_FULL = 199
const CONFIG_ESP_REV_MAX_FULL = 199
const CONFIG_ESP_EFUSE_BLOCK_REV_MIN_FULL = 0
const CONFIG_ESP_EFUSE_BLOCK_REV_MAX_FULL = 99
const CONFIG_ESP_MAC_ADDR_UNIVERSE_BT = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_IEEE802154 = 1
const CONFIG_ESP_MAC_UNIVERSAL_MAC_ADDRESSES_TWO = 1
const CONFIG_ESP_MAC_UNIVERSAL_MAC_ADDRESSES = 2
const CONFIG_ESP32H2_UNIVERSAL_MAC_ADDRESSES_TWO = 1
const CONFIG_ESP32H2_UNIVERSAL_MAC_ADDRESSES = 2
const CONFIG_ESP_SLEEP_FLASH_LEAKAGE_WORKAROUND = 1
const CONFIG_ESP_SLEEP_GPIO_RESET_WORKAROUND = 1
const CONFIG_ESP_SLEEP_WAIT_FLASH_READY_EXTRA_DELAY = 0
const CONFIG_ESP_SLEEP_GPIO_ENABLE_INTERNAL_RESISTORS = 1
const CONFIG_RTC_CLK_SRC_INT_RC = 1
const CONFIG_RTC_CLK_CAL_CYCLES = 1024
const CONFIG_GDMA_CTRL_FUNC_IN_IRAM = 1
const CONFIG_GDMA_ISR_HANDLER_IN_IRAM = 1
const CONFIG_GDMA_OBJ_DRAM_SAFE = 1
const CONFIG_XTAL_FREQ_32 = 1
const CONFIG_XTAL_FREQ = 32
const CONFIG_ESP_SPI_BUS_LOCK_ISR_FUNCS_IN_IRAM = 1
const CONFIG_ESP_NETIF_IP_LOST_TIMER_INTERVAL = 120
const CONFIG_ESP_NETIF_TCPIP_LWIP = 1
const CONFIG_ESP_NETIF_USES_TCPIP_WITH_BSD_API = 1
const CONFIG_ESP_NETIF_REPORT_DATA_TRAFFIC = 1
const CONFIG_ESP_PHY_ENABLED = 1
const CONFIG_ESP_PHY_CALIBRATION_AND_DATA_STORAGE = 1
const CONFIG_ESP_PHY_MAX_WIFI_TX_POWER = 20
const CONFIG_ESP_PHY_MAX_TX_POWER = 20
const CONFIG_ESP_PHY_RF_CAL_PARTIAL = 1
const CONFIG_ESP_PHY_CALIBRATION_MODE = 0
const CONFIG_PM_POWER_DOWN_CPU_IN_LIGHT_SLEEP = 1
const CONFIG_ESP_CRYPTO_DPA_PROTECTION_AT_STARTUP = 1
const CONFIG_ESP_CRYPTO_DPA_PROTECTION_LEVEL_LOW = 1
const CONFIG_ESP_CRYPTO_DPA_PROTECTION_LEVEL = 1
const CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ_96 = 1
const CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ = 96
const CONFIG_ESP_SYSTEM_PANIC_PRINT_REBOOT = 1
const CONFIG_ESP_SYSTEM_PANIC_REBOOT_DELAY_SECONDS = 0
const CONFIG_ESP_SYSTEM_SINGLE_CORE_MODE = 1
const CONFIG_ESP_SYSTEM_RTC_FAST_MEM_AS_HEAP_DEPCHECK = 1
const CONFIG_ESP_SYSTEM_ALLOW_RTC_FAST_MEM_AS_HEAP = 1
const CONFIG_ESP_SYSTEM_PMP_IDRAM_SPLIT = 1
const CONFIG_ESP_SYSTEM_EVENT_QUEUE_SIZE = 32
const CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE = 2304
const CONFIG_ESP_MAIN_TASK_STACK_SIZE = 3584
const CONFIG_ESP_MAIN_TASK_AFFINITY_CPU0 = 1
const CONFIG_ESP_MAIN_TASK_AFFINITY = 0x0
const CONFIG_ESP_MINIMAL_SHARED_STACK_SIZE = 2048
const CONFIG_ESP_CONSOLE_UART_DEFAULT = 1
const CONFIG_ESP_CONSOLE_SECONDARY_USB_SERIAL_JTAG = 1
const CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG_ENABLED = 1
const CONFIG_ESP_CONSOLE_UART = 1
const CONFIG_ESP_CONSOLE_UART_NUM = 0
const CONFIG_ESP_CONSOLE_ROM_SERIAL_PORT_NUM = 0
const CONFIG_ESP_CONSOLE_UART_BAUDRATE = 115200
const CONFIG_ESP_INT_WDT = 1
const CONFIG_ESP_INT_WDT_TIMEOUT_MS = 300
const CONFIG_ESP_TASK_WDT_EN = 1
const CONFIG_ESP_TASK_WDT_INIT = 1
const CONFIG_ESP_TASK_WDT_TIMEOUT_S = 5
const CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU0 = 1
const CONFIG_ESP_DEBUG_OCDAWARE = 1
const CONFIG_ESP_SYSTEM_CHECK_INT_LEVEL_4 = 1
const CONFIG_ESP_BROWNOUT_DET = 1
const CONFIG_ESP_BROWNOUT_DET_LVL_SEL_0 = 1
const CONFIG_ESP_BROWNOUT_DET_LVL = 0
const CONFIG_ESP_SYSTEM_BROWNOUT_INTR = 1
const CONFIG_ESP_SYSTEM_HW_STACK_GUARD = 1
const CONFIG_ESP_SYSTEM_BBPLL_RECALIB = 1
const CONFIG_ESP_SYSTEM_HW_PC_RECORD = 1
const CONFIG_ESP_IPC_TASK_STACK_SIZE = 1024
const CONFIG_ESP_TIME_FUNCS_USE_RTC_TIMER = 1
const CONFIG_ESP_TIME_FUNCS_USE_ESP_TIMER = 1
const CONFIG_ESP_TIMER_TASK_STACK_SIZE = 3584
const CONFIG_ESP_TIMER_INTERRUPT_LEVEL = 1
const CONFIG_ESP_TIMER_TASK_AFFINITY = 0x0
const CONFIG_ESP_TIMER_TASK_AFFINITY_CPU0 = 1
const CONFIG_ESP_TIMER_ISR_AFFINITY_CPU0 = 1
const CONFIG_ESP_TIMER_IMPL_SYSTIMER = 1
const CONFIG_ESP_COREDUMP_ENABLE_TO_NONE = 1
const CONFIG_FATFS_VOLUME_COUNT = 2
const CONFIG_FATFS_LFN_NONE = 1
const CONFIG_FATFS_SECTOR_4096 = 1
const CONFIG_FATFS_CODEPAGE_437 = 1
const CONFIG_FATFS_CODEPAGE = 437
const CONFIG_FATFS_FS_LOCK = 0
const CONFIG_FATFS_TIMEOUT_MS = 10000
const CONFIG_FATFS_PER_FILE_CACHE = 1
const CONFIG_FATFS_USE_STRFUNC_NONE = 1
const CONFIG_FATFS_VFS_FSTAT_BLKSIZE = 0
const CONFIG_FATFS_LINK_LOCK = 1
const CONFIG_FATFS_DONT_TRUST_FREE_CLUSTER_CNT = 0
const CONFIG_FATFS_DONT_TRUST_LAST_ALLOC = 0
const CONFIG_FREERTOS_UNICORE = 1
const CONFIG_FREERTOS_HZ = 100
const CONFIG_FREERTOS_OPTIMIZED_SCHEDULER = 1
const CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY = 1
const CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS = 1
const CONFIG_FREERTOS_IDLE_TASK_STACKSIZE = 1536
const CONFIG_FREERTOS_MAX_TASK_NAME_LEN = 16
const CONFIG_FREERTOS_USE_TIMERS = 1
const CONFIG_FREERTOS_TIMER_SERVICE_TASK_NAME = "Tmr Svc"
const CONFIG_FREERTOS_TIMER_TASK_NO_AFFINITY = 1
const CONFIG_FREERTOS_TIMER_SERVICE_TASK_CORE_AFFINITY = 0x7FFFFFFF
const CONFIG_FREERTOS_TIMER_TASK_PRIORITY = 1
const CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH = 2048
const CONFIG_FREERTOS_TIMER_QUEUE_LENGTH = 10
const CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE = 0
const CONFIG_FREERTOS_TASK_NOTIFICATION_ARRAY_ENTRIES = 1
const CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER = 1
const CONFIG_FREERTOS_TLSP_DELETION_CALLBACKS = 1
const CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER = 1
const CONFIG_FREERTOS_ISR_STACKSIZE = 1536
const CONFIG_FREERTOS_INTERRUPT_BACKTRACE = 1
const CONFIG_FREERTOS_TICK_SUPPORT_SYSTIMER = 1
const CONFIG_FREERTOS_CORETIMER_SYSTIMER_LVL1 = 1
const CONFIG_FREERTOS_SYSTICK_USES_SYSTIMER = 1
const CONFIG_FREERTOS_PORT = 1
const CONFIG_FREERTOS_NO_AFFINITY = 0x7FFFFFFF
const CONFIG_FREERTOS_SUPPORT_STATIC_ALLOCATION = 1
const CONFIG_FREERTOS_DEBUG_OCDAWARE = 1
const CONFIG_FREERTOS_ENABLE_TASK_SNAPSHOT = 1
const CONFIG_FREERTOS_PLACE_SNAPSHOT_FUNS_INTO_FLASH = 1
const CONFIG_FREERTOS_NUMBER_OF_CORES = 1
const CONFIG_HAL_ASSERTION_EQUALS_SYSTEM = 1
const CONFIG_HAL_DEFAULT_ASSERTION_LEVEL = 2
const CONFIG_HAL_SYSTIMER_USE_ROM_IMPL = 1
const CONFIG_HAL_WDT_USE_ROM_IMPL = 1
const CONFIG_HAL_SPI_MASTER_FUNC_IN_IRAM = 1
const CONFIG_HAL_SPI_SLAVE_FUNC_IN_IRAM = 1
const CONFIG_HEAP_POISONING_DISABLED = 1
const CONFIG_HEAP_TRACING_OFF = 1
const CONFIG_HEAP_TLSF_USE_ROM_IMPL = 1
const CONFIG_IEEE802154_ENABLED = 1
const CONFIG_IEEE802154_RX_BUFFER_SIZE = 20
const CONFIG_IEEE802154_CCA_ED = 1
const CONFIG_IEEE802154_CCA_MODE = 1
const CONFIG_IEEE802154_PENDING_TABLE_SIZE = 20
const CONFIG_IEEE802154_TIMING_OPTIMIZATION = 1
const CONFIG_LOG_DEFAULT_LEVEL_INFO = 1
const CONFIG_LOG_DEFAULT_LEVEL = 3
const CONFIG_LOG_MAXIMUM_EQUALS_DEFAULT = 1
const CONFIG_LOG_MAXIMUM_LEVEL = 3
const CONFIG_LOG_DYNAMIC_LEVEL_CONTROL = 1
const CONFIG_LOG_TAG_LEVEL_IMPL_CACHE_AND_LINKED_LIST = 1
const CONFIG_LOG_TAG_LEVEL_CACHE_BINARY_MIN_HEAP = 1
const CONFIG_LOG_TAG_LEVEL_IMPL_CACHE_SIZE = 31
const CONFIG_LOG_TIMESTAMP_SOURCE_RTOS = 1
const CONFIG_LWIP_ENABLE = 1
const CONFIG_LWIP_LOCAL_HOSTNAME = "espressif"
const CONFIG_LWIP_TCPIP_TASK_PRIO = 18
const CONFIG_LWIP_DNS_SUPPORT_MDNS_QUERIES = 1
const CONFIG_LWIP_TIMERS_ONDEMAND = 1
const CONFIG_LWIP_ND6 = 1
const CONFIG_LWIP_MAX_SOCKETS = 10
const CONFIG_LWIP_SO_REUSE = 1
const CONFIG_LWIP_SO_REUSE_RXTOALL = 1
const CONFIG_LWIP_IP_DEFAULT_TTL = 64
const CONFIG_LWIP_IP4_FRAG = 1
const CONFIG_LWIP_IP6_FRAG = 1
const CONFIG_LWIP_IP_REASS_MAX_PBUFS = 10
const CONFIG_LWIP_ESP_GRATUITOUS_ARP = 1
const CONFIG_LWIP_GARP_TMR_INTERVAL = 60
const CONFIG_LWIP_ESP_MLDV6_REPORT = 1
const CONFIG_LWIP_MLDV6_TMR_INTERVAL = 40
const CONFIG_LWIP_TCPIP_RECVMBOX_SIZE = 32
const CONFIG_LWIP_DHCP_DOES_ARP_CHECK = 1
const CONFIG_LWIP_DHCP_DISABLE_VENDOR_CLASS_ID = 1
const CONFIG_LWIP_DHCP_OPTIONS_LEN = 68
const CONFIG_LWIP_NUM_NETIF_CLIENT_DATA = 0
const CONFIG_LWIP_DHCP_COARSE_TIMER_SECS = 1
const CONFIG_LWIP_DHCPS = 1
const CONFIG_LWIP_DHCPS_LEASE_UNIT = 60
const CONFIG_LWIP_DHCPS_MAX_STATION_NUM = 8
const CONFIG_LWIP_DHCPS_STATIC_ENTRIES = 1
const CONFIG_LWIP_DHCPS_ADD_DNS = 1
const CONFIG_LWIP_IPV4 = 1
const CONFIG_LWIP_IPV6 = 1
const CONFIG_LWIP_IPV6_NUM_ADDRESSES = 3
const CONFIG_LWIP_NETIF_LOOPBACK = 1
const CONFIG_LWIP_LOOPBACK_MAX_PBUFS = 8
const CONFIG_LWIP_MAX_ACTIVE_TCP = 16
const CONFIG_LWIP_MAX_LISTENING_TCP = 16
const CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION = 1
const CONFIG_LWIP_TCP_MAXRTX = 12
const CONFIG_LWIP_TCP_SYNMAXRTX = 12
const CONFIG_LWIP_TCP_MSS = 1440
const CONFIG_LWIP_TCP_TMR_INTERVAL = 250
const CONFIG_LWIP_TCP_MSL = 60000
const CONFIG_LWIP_TCP_FIN_WAIT_TIMEOUT = 20000
const CONFIG_LWIP_TCP_SND_BUF_DEFAULT = 5760
const CONFIG_LWIP_TCP_WND_DEFAULT = 5760
const CONFIG_LWIP_TCP_RECVMBOX_SIZE = 6
const CONFIG_LWIP_TCP_ACCEPTMBOX_SIZE = 6
const CONFIG_LWIP_TCP_QUEUE_OOSEQ = 1
const CONFIG_LWIP_TCP_OOSEQ_TIMEOUT = 6
const CONFIG_LWIP_TCP_OOSEQ_MAX_PBUFS = 4
const CONFIG_LWIP_TCP_OVERSIZE_MSS = 1
const CONFIG_LWIP_TCP_RTO_TIME = 1500
const CONFIG_LWIP_MAX_UDP_PCBS = 16
const CONFIG_LWIP_UDP_RECVMBOX_SIZE = 6
const CONFIG_LWIP_CHECKSUM_CHECK_ICMP = 1
const CONFIG_LWIP_TCPIP_TASK_STACK_SIZE = 3072
const CONFIG_LWIP_TCPIP_TASK_AFFINITY_NO_AFFINITY = 1
const CONFIG_LWIP_TCPIP_TASK_AFFINITY = 0x7FFFFFFF
const CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE = 3
const CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS = 5
const CONFIG_LWIP_IPV6_ND6_NUM_PREFIXES = 5
const CONFIG_LWIP_IPV6_ND6_NUM_ROUTERS = 3
const CONFIG_LWIP_IPV6_ND6_NUM_DESTINATIONS = 10
const CONFIG_LWIP_ICMP = 1
const CONFIG_LWIP_MAX_RAW_PCBS = 16
const CONFIG_LWIP_SNTP_MAX_SERVERS = 1
const CONFIG_LWIP_SNTP_UPDATE_DELAY = 3600000
const CONFIG_LWIP_SNTP_STARTUP_DELAY = 1
const CONFIG_LWIP_SNTP_MAXIMUM_STARTUP_DELAY = 5000
const CONFIG_LWIP_DNS_MAX_HOST_IP = 1
const CONFIG_LWIP_DNS_MAX_SERVERS = 3
const CONFIG_LWIP_BRIDGEIF_MAX_PORTS = 7
const CONFIG_LWIP_ESP_LWIP_ASSERT = 1
const CONFIG_LWIP_HOOK_TCP_ISN_DEFAULT = 1
const CONFIG_LWIP_HOOK_IP6_ROUTE_NONE = 1
const CONFIG_LWIP_HOOK_ND6_GET_GW_NONE = 1
const CONFIG_LWIP_HOOK_IP6_SELECT_SRC_ADDR_NONE = 1
const CONFIG_LWIP_HOOK_NETCONN_EXT_RESOLVE_NONE = 1
const CONFIG_LWIP_HOOK_DNS_EXT_RESOLVE_NONE = 1
const CONFIG_LWIP_HOOK_IP6_INPUT_DEFAULT = 1
const CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC = 1
const CONFIG_MBEDTLS_ASYMMETRIC_CONTENT_LEN = 1
const CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN = 16384
const CONFIG_MBEDTLS_SSL_OUT_CONTENT_LEN = 4096
const CONFIG_MBEDTLS_SSL_KEEP_PEER_CERTIFICATE = 1
const CONFIG_MBEDTLS_PKCS7_C = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_FULL = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_MAX_CERTS = 200
const CONFIG_MBEDTLS_HARDWARE_AES = 1
const CONFIG_MBEDTLS_AES_USE_INTERRUPT = 1
const CONFIG_MBEDTLS_AES_INTERRUPT_LEVEL = 0
const CONFIG_MBEDTLS_GCM_SUPPORT_NON_AES_CIPHER = 1
const CONFIG_MBEDTLS_HARDWARE_MPI = 1
const CONFIG_MBEDTLS_LARGE_KEY_SOFTWARE_MPI = 1
const CONFIG_MBEDTLS_MPI_USE_INTERRUPT = 1
const CONFIG_MBEDTLS_MPI_INTERRUPT_LEVEL = 0
const CONFIG_MBEDTLS_HARDWARE_SHA = 1
const CONFIG_MBEDTLS_HARDWARE_ECC = 1
const CONFIG_MBEDTLS_ECC_OTHER_CURVES_SOFT_FALLBACK = 1
const CONFIG_MBEDTLS_ROM_MD5 = 1
const CONFIG_MBEDTLS_HARDWARE_ECDSA_VERIFY = 1
const CONFIG_MBEDTLS_HAVE_TIME = 1
const CONFIG_MBEDTLS_ECDSA_DETERMINISTIC = 1
const CONFIG_MBEDTLS_SHA1_C = 1
const CONFIG_MBEDTLS_SHA512_C = 1
const CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT = 1
const CONFIG_MBEDTLS_TLS_SERVER = 1
const CONFIG_MBEDTLS_TLS_CLIENT = 1
const CONFIG_MBEDTLS_TLS_ENABLED = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_RSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA = 1
const CONFIG_MBEDTLS_SSL_RENEGOTIATION = 1
const CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 = 1
const CONFIG_MBEDTLS_SSL_ALPN = 1
const CONFIG_MBEDTLS_CLIENT_SSL_SESSION_TICKETS = 1
const CONFIG_MBEDTLS_SERVER_SSL_SESSION_TICKETS = 1
const CONFIG_MBEDTLS_AES_C = 1
const CONFIG_MBEDTLS_CCM_C = 1
const CONFIG_MBEDTLS_GCM_C = 1
const CONFIG_MBEDTLS_PEM_PARSE_C = 1
const CONFIG_MBEDTLS_PEM_WRITE_C = 1
const CONFIG_MBEDTLS_X509_CRL_PARSE_C = 1
const CONFIG_MBEDTLS_X509_CSR_PARSE_C = 1
const CONFIG_MBEDTLS_ECP_C = 1
const CONFIG_MBEDTLS_PK_PARSE_EC_EXTENDED = 1
const CONFIG_MBEDTLS_PK_PARSE_EC_COMPRESSED = 1
const CONFIG_MBEDTLS_ECDH_C = 1
const CONFIG_MBEDTLS_ECDSA_C = 1
const CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED = 1
const CONFIG_MBEDTLS_ECP_NIST_OPTIM = 1
const CONFIG_MBEDTLS_ERROR_STRINGS = 1
const CONFIG_MBEDTLS_FS_IO = 1
const CONFIG_MQTT_PROTOCOL_311 = 1
const CONFIG_MQTT_TRANSPORT_SSL = 1
const CONFIG_MQTT_TRANSPORT_WEBSOCKET = 1
const CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE = 1
const CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF = 1
const CONFIG_NEWLIB_STDIN_LINE_ENDING_CR = 1
const CONFIG_NEWLIB_TIME_SYSCALL_USE_RTC_HRT = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_0 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_1 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_2 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_PATCH_VERSION = 1
const CONFIG_PTHREAD_TASK_PRIO_DEFAULT = 5
const CONFIG_PTHREAD_TASK_STACK_SIZE_DEFAULT = 3072
const CONFIG_PTHREAD_STACK_MIN = 768
const CONFIG_PTHREAD_TASK_NAME_DEFAULT = "pthread"
const CONFIG_MMU_PAGE_SIZE_32KB = 1
const CONFIG_MMU_PAGE_MODE = "32KB"
const CONFIG_MMU_PAGE_SIZE = 0x8000
const CONFIG_SPI_FLASH_BROWNOUT_RESET_XMC = 1
const CONFIG_SPI_FLASH_BROWNOUT_RESET = 1
const CONFIG_SPI_FLASH_SUSPEND_TSUS_VAL_US = 50
const CONFIG_SPI_FLASH_ROM_DRIVER_PATCH = 1
const CONFIG_SPI_FLASH_DANGEROUS_WRITE_ABORTS = 1
const CONFIG_SPI_FLASH_YIELD_DURING_ERASE = 1
const CONFIG_SPI_FLASH_ERASE_YIELD_DURATION_MS = 20
const CONFIG_SPI_FLASH_ERASE_YIELD_TICKS = 1
const CONFIG_SPI_FLASH_WRITE_CHUNK_SIZE = 8192
const CONFIG_SPI_FLASH_VENDOR_XMC_SUPPORTED = 1
const CONFIG_SPI_FLASH_ENABLE_ENCRYPTED_READ_WRITE = 1
const CONFIG_SPIFFS_MAX_PARTITIONS = 3
const CONFIG_SPIFFS_CACHE = 1
const CONFIG_SPIFFS_CACHE_WR = 1
const CONFIG_SPIFFS_PAGE_CHECK = 1
const CONFIG_SPIFFS_GC_MAX_RUNS = 10
const CONFIG_SPIFFS_PAGE_SIZE = 256
const CONFIG_SPIFFS_OBJ_NAME_LEN = 32
const CONFIG_SPIFFS_USE_MAGIC = 1
const CONFIG_SPIFFS_USE_MAGIC_LENGTH = 1
const CONFIG_SPIFFS_META_LENGTH = 4
const CONFIG_SPIFFS_USE_MTIME = 1
const CONFIG_WS_TRANSPORT = 1
const CONFIG_WS_BUFFER_SIZE = 1024
const CONFIG_UNITY_ENABLE_FLOAT = 1
const CONFIG_UNITY_ENABLE_DOUBLE = 1
const CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER = 1
const CONFIG_VFS_SUPPORT_IO = 1
const CONFIG_VFS_SUPPORT_DIR = 1
const CONFIG_VFS_SUPPORT_SELECT = 1
const CONFIG_VFS_SUPPRESS_SELECT_DEBUG_OUTPUT = 1
const CONFIG_VFS_SUPPORT_TERMIOS = 1
const CONFIG_VFS_MAX_COUNT = 8
const CONFIG_VFS_SEMIHOSTFS_MAX_MOUNT_POINTS = 1
const CONFIG_VFS_INITIALIZE_DEV_NULL = 1
const CONFIG_WL_SECTOR_SIZE_4096 = 1
const CONFIG_WL_SECTOR_SIZE = 4096
const CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES = 16
const CONFIG_WIFI_PROV_AUTOSTOP_TIMEOUT = 30
const X_ATEXIT_SIZE = 32
const X_REENT_EMERGENCY_SIZE = 25
const X_REENT_ASCTIME_SIZE = 26
const X_REENT_SIGNAL_SIZE = 24
const EXIT_FAILURE = 1
const EXIT_SUCCESS = 0
const X__SLBF = 0x0001
const X__SNBF = 0x0002
const X__SRD = 0x0004
const X__SWR = 0x0008
const X__SRW = 0x0010
const X__SEOF = 0x0020
const X__SERR = 0x0040
const X__SMBF = 0x0080
const X__SAPP = 0x0100
const X__SSTR = 0x0200
const X__SOPT = 0x0400
const X__SNPT = 0x0800
const X__SOFF = 0x1000
const X__SORD = 0x2000
const X__SL64 = 0x8000
const X__SNLK = 0x0001
const X__SWID = 0x2000
const X_IOFBF = 0
const X_IOLBF = 1
const X_IONBF = 2
const FOPEN_MAX = 20
const FILENAME_MAX = 1024
const P_tmpdir = "/tmp"
const SEEK_SET = 0
const SEEK_CUR = 1
const SEEK_END = 2
const TMP_MAX = 26
const L_ctermid = 16
const ESP_OK = 0
const ESP_ERR_NO_MEM = 0x101
const ESP_ERR_INVALID_ARG = 0x102
const ESP_ERR_INVALID_STATE = 0x103
const ESP_ERR_INVALID_SIZE = 0x104
const ESP_ERR_NOT_FOUND = 0x105
const ESP_ERR_NOT_SUPPORTED = 0x106
const ESP_ERR_TIMEOUT = 0x107
const ESP_ERR_INVALID_RESPONSE = 0x108
const ESP_ERR_INVALID_CRC = 0x109
const ESP_ERR_INVALID_VERSION = 0x10A
const ESP_ERR_INVALID_MAC = 0x10B
const ESP_ERR_NOT_FINISHED = 0x10C
const ESP_ERR_NOT_ALLOWED = 0x10D
const ESP_ERR_WIFI_BASE = 0x3000
const ESP_ERR_MESH_BASE = 0x4000
const ESP_ERR_FLASH_BASE = 0x6000
const ESP_ERR_HW_CRYPTO_BASE = 0xc000
const ESP_ERR_MEMPROT_BASE = 0xd000
const SOC_CAPS_ECO_VER_MAX = 102
const SOC_ADC_SUPPORTED = 1
const SOC_ANA_CMPR_SUPPORTED = 1
const SOC_DEDICATED_GPIO_SUPPORTED = 1
const SOC_UART_SUPPORTED = 1
const SOC_GDMA_SUPPORTED = 1
const SOC_AHB_GDMA_SUPPORTED = 1
const SOC_ASYNC_MEMCPY_SUPPORTED = 1
const SOC_PCNT_SUPPORTED = 1
const SOC_MCPWM_SUPPORTED = 1
const SOC_TWAI_SUPPORTED = 1
const SOC_PHY_SUPPORTED = 1
const SOC_BT_SUPPORTED = 1
const SOC_GPTIMER_SUPPORTED = 1
const SOC_IEEE802154_SUPPORTED = 1
const SOC_IEEE802154_BLE_ONLY = 1
const SOC_USB_SERIAL_JTAG_SUPPORTED = 1
const SOC_TEMP_SENSOR_SUPPORTED = 1
const SOC_SUPPORTS_SECURE_DL_MODE = 1
const SOC_EFUSE_KEY_PURPOSE_FIELD = 1
const SOC_EFUSE_SUPPORTED = 1
const SOC_RTC_FAST_MEM_SUPPORTED = 1
const SOC_RTC_MEM_SUPPORTED = 1
const SOC_I2S_SUPPORTED = 1
const SOC_SDM_SUPPORTED = 1
const SOC_ETM_SUPPORTED = 1
const SOC_RMT_SUPPORTED = 1
const SOC_PARLIO_SUPPORTED = 1
const SOC_GPSPI_SUPPORTED = 1
const SOC_LEDC_SUPPORTED = 1
const SOC_I2C_SUPPORTED = 1
const SOC_SYSTIMER_SUPPORTED = 1
const SOC_SUPPORT_COEXISTENCE = 1
const SOC_AES_SUPPORTED = 1
const SOC_MPI_SUPPORTED = 1
const SOC_SHA_SUPPORTED = 1
const SOC_HMAC_SUPPORTED = 1
const SOC_DIG_SIGN_SUPPORTED = 1
const SOC_ECC_SUPPORTED = 1
const SOC_ECC_EXTENDED_MODES_SUPPORTED = 1
const SOC_ECDSA_SUPPORTED = 1
const SOC_FLASH_ENC_SUPPORTED = 1
const SOC_SECURE_BOOT_SUPPORTED = 1
const SOC_BOD_SUPPORTED = 1
const SOC_APM_SUPPORTED = 1
const SOC_PMU_SUPPORTED = 1
const SOC_LP_TIMER_SUPPORTED = 1
const SOC_LP_AON_SUPPORTED = 1
const SOC_PAU_SUPPORTED = 1
const SOC_CLK_TREE_SUPPORTED = 1
const SOC_ASSIST_DEBUG_SUPPORTED = 1
const SOC_WDT_SUPPORTED = 1
const SOC_SPI_FLASH_SUPPORTED = 1
const SOC_RNG_SUPPORTED = 1
const SOC_LIGHT_SLEEP_SUPPORTED = 1
const SOC_DEEP_SLEEP_SUPPORTED = 1
const SOC_MODEM_CLOCK_SUPPORTED = 1
const SOC_PM_SUPPORTED = 1
const SOC_XTAL_SUPPORT_32M = 1
const SOC_XTAL_CLOCK_PATH_DEPENDS_ON_TOP_DOMAIN = 1
const SOC_ADC_DIG_CTRL_SUPPORTED = 1
const SOC_ADC_DIG_IIR_FILTER_SUPPORTED = 1
const SOC_ADC_MONITOR_SUPPORTED = 1
const SOC_ADC_DMA_SUPPORTED = 1
const SOC_ADC_SAMPLE_FREQ_THRES_HIGH = 83333
const SOC_ADC_SAMPLE_FREQ_THRES_LOW = 611
const SOC_ADC_SHARED_POWER = 1
const SOC_BROWNOUT_RESET_SUPPORTED = 1
const SOC_SHARED_IDCACHE_SUPPORTED = 1
const SOC_CACHE_FREEZE_SUPPORTED = 1
const SOC_CPU_INTR_NUM = 32
const SOC_CPU_HAS_FLEXIBLE_INTC = 1
const SOC_INT_PLIC_SUPPORTED = 1
const SOC_CPU_HAS_CSR_PC = 1
const SOC_CPU_BREAKPOINTS_NUM = 4
const SOC_CPU_WATCHPOINTS_NUM = 4
const SOC_CPU_WATCHPOINT_MAX_REGION_SIZE = 0x80000000
const SOC_CPU_HAS_PMA = 1
const SOC_CPU_IDRAM_SPLIT_USING_PMP = 1
const SOC_CPU_PMP_REGION_GRANULARITY = 4
const SOC_GDMA_PAIRS_PER_GROUP_MAX = 3
const SOC_GDMA_SUPPORT_ETM = 1
const SOC_GDMA_SUPPORT_SLEEP_RETENTION = 1
const SOC_ETM_CHANNELS_PER_GROUP = 50
const SOC_ETM_SUPPORT_SLEEP_RETENTION = 1
const SOC_GPIO_PIN_COUNT = 28
const SOC_GPIO_SUPPORT_PIN_GLITCH_FILTER = 1
const SOC_GPIO_FLEX_GLITCH_FILTER_NUM = 8
const SOC_GPIO_SUPPORT_PIN_HYS_FILTER = 1
const SOC_GPIO_SUPPORT_PIN_HYS_CTRL_BY_EFUSE = 1
const SOC_GPIO_SUPPORT_ETM = 1
const SOC_GPIO_IN_RANGE_MAX = 27
const SOC_GPIO_OUT_RANGE_MAX = 27
const SOC_I2S_SUPPORT_SLEEP_RETENTION = 1
const SOC_MPU_CONFIGURABLE_REGIONS_SUPPORTED = 0
const SOC_MPU_REGIONS_MAX_NUM = 8
const SOC_MPU_REGION_RO_SUPPORTED = 0
const SOC_MPU_REGION_WO_SUPPORTED = 0
const SOC_PCNT_UNITS_PER_GROUP = 4
const SOC_PCNT_CHANNELS_PER_UNIT = 2
const SOC_PCNT_THRES_POINT_PER_UNIT = 2
const SOC_PCNT_SUPPORT_RUNTIME_THRES_UPDATE = 1
const SOC_PCNT_SUPPORT_STEP_NOTIFY = 1
const SOC_PCNT_SUPPORT_SLEEP_RETENTION = 1
const SOC_RMT_TX_CANDIDATES_PER_GROUP = 2
const SOC_RMT_RX_CANDIDATES_PER_GROUP = 2
const SOC_RMT_CHANNELS_PER_GROUP = 4
const SOC_RMT_MEM_WORDS_PER_CHANNEL = 48
const SOC_RMT_SUPPORT_RX_PINGPONG = 1
const SOC_RMT_SUPPORT_RX_DEMODULATION = 1
const SOC_RMT_SUPPORT_TX_ASYNC_STOP = 1
const SOC_RMT_SUPPORT_TX_LOOP_COUNT = 1
const SOC_RMT_SUPPORT_TX_LOOP_AUTO_STOP = 1
const SOC_RMT_SUPPORT_TX_SYNCHRO = 1
const SOC_RMT_SUPPORT_TX_CARRIER_DATA_ONLY = 1
const SOC_RMT_SUPPORT_XTAL = 1
const SOC_RMT_SUPPORT_RC_FAST = 1
const SOC_RMT_SUPPORT_SLEEP_RETENTION = 1
const SOC_PARLIO_TX_UNIT_MAX_DATA_WIDTH = 8
const SOC_PARLIO_RX_UNIT_MAX_DATA_WIDTH = 8
const SOC_PARLIO_TX_CLK_SUPPORT_GATING = 1
const SOC_PARLIO_RX_CLK_SUPPORT_GATING = 1
const SOC_PARLIO_RX_CLK_SUPPORT_OUTPUT = 1
const SOC_PARLIO_TRANS_BIT_ALIGN = 1
const SOC_PARLIO_SUPPORT_SLEEP_RETENTION = 1
const SOC_SDM_CHANNELS_PER_GROUP = 4
const SOC_SDM_CLK_SUPPORT_PLL_F48M = 1
const SOC_SDM_CLK_SUPPORT_XTAL = 1
const SOC_SPI_PERIPH_NUM = 2
const SOC_SPI_MAX_CS_NUM = 6
const SOC_SPI_MAXIMUM_BUFFER_SIZE = 64
const SOC_SPI_SUPPORT_DDRCLK = 1
const SOC_SPI_SLAVE_SUPPORT_SEG_TRANS = 1
const SOC_SPI_SUPPORT_CD_SIG = 1
const SOC_SPI_SUPPORT_CONTINUOUS_TRANS = 1
const SOC_SPI_SUPPORT_SLAVE_HD_VER2 = 1
const SOC_SPI_SUPPORT_SLEEP_RETENTION = 1
const SOC_SPI_SUPPORT_CLK_XTAL = 1
const SOC_SPI_SUPPORT_CLK_PLL_F48M = 1
const SOC_SPI_SUPPORT_CLK_RC_FAST = 1
const SOC_SPI_SCT_SUPPORTED = 1
const SOC_SPI_SCT_REG_NUM = 14
const SOC_SPI_SCT_CONF_BITLEN_MAX = 0x3FFFA
const SOC_MEMSPI_IS_INDEPENDENT = 1
const SOC_SPI_MAX_PRE_DIVIDER = 16
const SOC_MEMSPI_SRC_FREQ_64M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_32M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_16M_SUPPORTED = 1
const SOC_MEMSPI_FLASH_CLK_SRC_IS_INDEPENDENT = 1
const SOC_SYSTIMER_COUNTER_NUM = 2
const SOC_SYSTIMER_ALARM_NUM = 3
const SOC_SYSTIMER_BIT_WIDTH_LO = 32
const SOC_SYSTIMER_BIT_WIDTH_HI = 20
const SOC_SYSTIMER_FIXED_DIVIDER = 1
const SOC_SYSTIMER_SUPPORT_RC_FAST = 1
const SOC_SYSTIMER_INT_LEVEL = 1
const SOC_SYSTIMER_ALARM_MISS_COMPENSATE = 1
const SOC_SYSTIMER_SUPPORT_ETM = 1
const SOC_LP_TIMER_BIT_WIDTH_LO = 32
const SOC_LP_TIMER_BIT_WIDTH_HI = 16
const SOC_TWAI_CLK_SUPPORT_XTAL = 1
const SOC_TWAI_BRP_MIN = 2
const SOC_TWAI_BRP_MAX = 32768
const SOC_TWAI_SUPPORTS_RX_STATUS = 1
const SOC_TWAI_SUPPORT_SLEEP_RETENTION = 1
const SOC_EFUSE_DIS_PAD_JTAG = 1
const SOC_EFUSE_DIS_USB_JTAG = 1
const SOC_EFUSE_DIS_DIRECT_BOOT = 1
const SOC_EFUSE_SOFT_DIS_JTAG = 1
const SOC_EFUSE_DIS_ICACHE = 1
const SOC_EFUSE_BLOCK9_KEY_PURPOSE_QUIRK = 1
const SOC_EFUSE_ECDSA_USE_HARDWARE_K = 1
const SOC_EFUSE_ECDSA_KEY = 1
const SOC_SECURE_BOOT_V2_RSA = 1
const SOC_SECURE_BOOT_V2_ECC = 1
const SOC_EFUSE_SECURE_BOOT_KEY_DIGESTS = 3
const SOC_EFUSE_REVOKE_BOOT_KEY_DIGESTS = 1
const SOC_SUPPORT_SECURE_BOOT_REVOKE_KEY = 1
const SOC_FLASH_ENCRYPTION_XTS_AES = 1
const SOC_FLASH_ENCRYPTION_XTS_AES_128 = 1
const SOC_FLASH_ENCRYPTION_XTS_AES_SUPPORT_PSEUDO_ROUND = 1
const SOC_APM_CTRL_FILTER_SUPPORTED = 1
const SOC_CRYPTO_DPA_PROTECTION_SUPPORTED = 1
const SOC_ECC_CONSTANT_TIME_POINT_MUL = 1
const SOC_RCC_IS_INDEPENDENT = 1
const SOC_CLK_RC_FAST_FREQ_APPROX = 8500000
const SOC_CLK_RC_SLOW_FREQ_APPROX = 136000
const SOC_CLK_RC32K_FREQ_APPROX = 32768
const SOC_CLK_XTAL32K_FREQ_APPROX = 32768
const SOC_CLK_OSC_SLOW_FREQ_APPROX = 32768
const BIT31 = 0x80000000
const BIT30 = 0x40000000
const BIT29 = 0x20000000
const BIT28 = 0x10000000
const BIT27 = 0x08000000
const BIT26 = 0x04000000
const BIT25 = 0x02000000
const BIT24 = 0x01000000
const BIT23 = 0x00800000
const BIT22 = 0x00400000
const BIT21 = 0x00200000
const BIT20 = 0x00100000
const BIT19 = 0x00080000
const BIT18 = 0x00040000
const BIT17 = 0x00020000
const BIT16 = 0x00010000
const BIT15 = 0x00008000
const BIT14 = 0x00004000
const BIT13 = 0x00002000
const BIT12 = 0x00001000
const BIT11 = 0x00000800
const BIT10 = 0x00000400
const BIT9 = 0x00000200
const BIT8 = 0x00000100
const BIT7 = 0x00000080
const BIT6 = 0x00000040
const BIT5 = 0x00000020
const BIT4 = 0x00000010
const BIT3 = 0x00000008
const BIT2 = 0x00000004
const BIT1 = 0x00000002
const BIT0 = 0x00000001
const DR_REG_UART_BASE = 0x60000000
const DR_REG_UART1_BASE = 0x60001000
const DR_REG_SPI0_BASE = 0x60002000
const DR_REG_SPI1_BASE = 0x60003000
const DR_REG_I2C_EXT0_BASE = 0x60004000
const DR_REG_I2C_EXT1_BASE = 0x60005000
const DR_REG_UHCI0_BASE = 0x60006000
const DR_REG_RMT_BASE = 0x60007000
const DR_REG_LEDC_BASE = 0x60008000
const DR_REG_TIMERGROUP0_BASE = 0x60009000
const DR_REG_TIMERGROUP1_BASE = 0x6000A000
const DR_REG_SYSTIMER_BASE = 0x6000B000
const DR_REG_TWAI_BASE = 0x6000C000
const DR_REG_I2S_BASE = 0x6000D000
const DR_REG_APB_SARADC_BASE = 0x6000E000
const DR_REG_USB_SERIAL_JTAG_BASE = 0x6000F000
const DR_REG_INTERRUPT_MATRIX_BASE = 0x60010000
const DR_REG_PCNT_BASE = 0x60012000
const DR_REG_SOC_ETM_BASE = 0x60013000
const DR_REG_MCPWM_BASE = 0x60014000
const DR_REG_PARL_IO_BASE = 0x60015000
const DR_REG_PVT_MONITOR_BASE = 0x60019000
const DR_REG_GDMA_BASE = 0x60080000
const DR_REG_SPI2_BASE = 0x60081000
const DR_REG_AES_BASE = 0x60088000
const DR_REG_SHA_BASE = 0x60089000
const DR_REG_RSA_BASE = 0x6008A000
const DR_REG_ECC_MULT_BASE = 0x6008B000
const DR_REG_DS_BASE = 0x6008C000
const DR_REG_HMAC_BASE = 0x6008D000
const DR_REG_ECDSA_BASE = 0x6008E000
const DR_REG_IO_MUX_BASE = 0x60090000
const DR_REG_MEM_MONITOR_BASE = 0x60092000
const DR_REG_PAU_BASE = 0x60093000
const DR_REG_LPPERI_BASE = 0x600B2800
const DR_REG_GPIO_BASE = 0x60091000
const DR_REG_GPIO_EXT_BASE = 0x60091f00
const DR_REG_MEM_ACS_MONITOR_BASE = 0x60092000
const DR_REG_REGDMA_BASE = 0x60093000
const DR_REG_HP_SYSTEM_BASE = 0x60095000
const DR_REG_PCR_BASE = 0x60096000
const DR_REG_TEE_BASE = 0x60098000
const DR_REG_HP_APM_BASE = 0x60099000
const DR_REG_LP_APM0_BASE = 0x60099800
const DR_REG_MISC_BASE = 0x6009F000
const DR_REG_I2C_ANA_MST_BASE = 0x600AD800
const DR_REG_PMU_BASE = 0x600B0000
const DR_REG_LP_CLKRST_BASE = 0x600B0400
const DR_REG_EFUSE_BASE = 0x600B0800
const DR_REG_LP_TIMER_BASE = 0x600B0C00
const DR_REG_LP_AON_BASE = 0x600B1000
const DR_REG_LP_WDT_BASE = 0x600B1C00
const DR_REG_LP_IO_BASE = 0x600B2000
const DR_REG_LP_ANALOG_PERI_BASE = 0x600B2C00
const DR_REG_LP_APM_BASE = 0x600B3800
const DR_REG_OTP_DEBUG_BASE = 0x600B3C00
const DR_REG_TRACE_BASE = 0x600C0000
const DR_REG_ASSIST_DEBUG_BASE = 0x600C2000
const DR_REG_INTPRI_BASE = 0x600C5000
const DR_REG_CACHE_BASE = 0x600C8000
const PWDET_CONF_REG = 0x600A0810
const IEEE802154_REG_BASE = 0x600A3000
const SOC_IROM_LOW = 0x42000000
const SOC_IROM_MASK_LOW = 0x40000000
const SOC_IROM_MASK_HIGH = 0x40020000
const SOC_DROM_MASK_LOW = 0x40000000
const SOC_DROM_MASK_HIGH = 0x40020000
const SOC_IRAM_LOW = 0x40800000
const SOC_IRAM_HIGH = 0x40850000
const SOC_DRAM_LOW = 0x40800000
const SOC_DRAM_HIGH = 0x40850000
const SOC_RTC_IRAM_LOW = 0x50000000
const SOC_RTC_IRAM_HIGH = 0x50001000
const SOC_RTC_DRAM_LOW = 0x50000000
const SOC_RTC_DRAM_HIGH = 0x50001000
const SOC_RTC_DATA_LOW = 0x50000000
const SOC_RTC_DATA_HIGH = 0x50001000
const SOC_DIRAM_IRAM_LOW = 0x40800000
const SOC_DIRAM_IRAM_HIGH = 0x40850000
const SOC_DIRAM_DRAM_LOW = 0x40800000
const SOC_DIRAM_DRAM_HIGH = 0x40850000
const SOC_DMA_LOW = 0x40800000
const SOC_DMA_HIGH = 0x40850000
const SOC_BYTE_ACCESSIBLE_LOW = 0x40800000
const SOC_BYTE_ACCESSIBLE_HIGH = 0x40850000
const SOC_MEM_INTERNAL_LOW = 0x40800000
const SOC_MEM_INTERNAL_HIGH = 0x40850000
const SOC_MEM_INTERNAL_LOW1 = 0x40800000
const SOC_MEM_INTERNAL_HIGH1 = 0x40850000
const SOC_PERIPHERAL_LOW = 0x60000000
const SOC_PERIPHERAL_HIGH = 0x60100000
const SOC_CPU_SUBSYSTEM_LOW = 0x20000000
const SOC_CPU_SUBSYSTEM_HIGH = 0x30000000
const SOC_ROM_STACK_START = 0x4084f380
const SOC_ROM_STACK_SIZE = 0x2000
const ETS_T1_WDT_INUM = 24
const ETS_CACHEERR_INUM = 25
const ETS_MEMPROT_ERR_INUM = 26
const ETS_ASSIST_DEBUG_INUM = 27
const ETS_MAX_INUM = 31
const ETS_SLC_INUM = 1
const ETS_UART0_INUM = 5
const ETS_UART1_INUM = 5
const ETS_SPI2_INUM = 1
const ETS_GPIO_INUM = 4
const ETS_INVALID_INUM = 0
const SOC_INTERRUPT_LEVEL_MEDIUM = 4
const ADC1_GPIO1_CHANNEL = 0
const ADC1_CHANNEL_0_GPIO_NUM = 1
const ADC1_GPIO2_CHANNEL = 1
const ADC1_CHANNEL_1_GPIO_NUM = 2
const ADC1_GPIO3_CHANNEL = 2
const ADC1_CHANNEL_2_GPIO_NUM = 3
const ADC1_GPIO4_CHANNEL = 3
const ADC1_CHANNEL_3_GPIO_NUM = 4
const ADC1_GPIO5_CHANNEL = 4
const ADC1_CHANNEL_4_GPIO_NUM = 5
const APB_SARADC_SARADC_START_FORCE_S = 0
const APB_SARADC_SARADC_START_S = 1
const APB_SARADC_SARADC_SAR_CLK_GATED_S = 6
const APB_SARADC_SARADC_SAR_CLK_DIV_S = 7
const APB_SARADC_SARADC_SAR_PATT_LEN_S = 15
const APB_SARADC_SARADC_SAR_PATT_P_CLEAR_S = 23
const APB_SARADC_SARADC_XPD_SAR_FORCE_S = 27
const APB_SARADC_SARADC2_PWDET_DRV_S = 29
const APB_SARADC_SARADC_WAIT_ARB_CYCLE_S = 30
const APB_SARADC_SARADC_MEAS_NUM_LIMIT_S = 0
const APB_SARADC_SARADC_MAX_MEAS_NUM_S = 1
const APB_SARADC_SARADC_SAR1_INV_S = 9
const APB_SARADC_SARADC_SAR2_INV_S = 10
const APB_SARADC_SARADC_TIMER_TARGET_S = 12
const APB_SARADC_SARADC_TIMER_EN_S = 24
const APB_SARADC_APB_SARADC_FILTER_FACTOR1_S = 26
const APB_SARADC_APB_SARADC_FILTER_FACTOR0_S = 29
const APB_SARADC_SARADC_XPD_WAIT_S = 0
const APB_SARADC_SARADC_RSTB_WAIT_S = 8
const APB_SARADC_SARADC_STANDBY_WAIT_S = 16
const APB_SARADC_SARADC_SAR1_STATUS_S = 0
const APB_SARADC_SARADC_SAR2_STATUS_S = 0
const APB_SARADC_SARADC_SAR_PATT_TAB1_S = 0
const APB_SARADC_SARADC_SAR_PATT_TAB2_S = 0
const APB_SARADC_SARADC_ONETIME_ATTEN_S = 23
const APB_SARADC_SARADC_ONETIME_CHANNEL_S = 25
const APB_SARADC_SARADC_ONETIME_START_S = 29
const APB_SARADC_SARADC2_ONETIME_SAMPLE_S = 30
const APB_SARADC_SARADC1_ONETIME_SAMPLE_S = 31
const APB_SARADC_ADC_ARB_APB_FORCE_S = 2
const APB_SARADC_ADC_ARB_RTC_FORCE_S = 3
const APB_SARADC_ADC_ARB_WIFI_FORCE_S = 4
const APB_SARADC_ADC_ARB_GRANT_FORCE_S = 5
const APB_SARADC_ADC_ARB_APB_PRIORITY_S = 6
const APB_SARADC_ADC_ARB_RTC_PRIORITY_S = 8
const APB_SARADC_ADC_ARB_WIFI_PRIORITY_S = 10
const APB_SARADC_ADC_ARB_FIX_PRIORITY_S = 12
const APB_SARADC_APB_SARADC_FILTER_CHANNEL1_S = 18
const APB_SARADC_APB_SARADC_FILTER_CHANNEL0_S = 22
const APB_SARADC_APB_SARADC_FILTER_RESET_S = 31
const APB_SARADC_APB_SARADC1_DATA_S = 0
const APB_SARADC_APB_SARADC2_DATA_S = 0
const APB_SARADC_APB_SARADC_THRES0_CHANNEL_S = 0
const APB_SARADC_APB_SARADC_THRES0_HIGH_S = 5
const APB_SARADC_APB_SARADC_THRES0_LOW_S = 18
const APB_SARADC_APB_SARADC_THRES1_CHANNEL_S = 0
const APB_SARADC_APB_SARADC_THRES1_HIGH_S = 5
const APB_SARADC_APB_SARADC_THRES1_LOW_S = 18
const APB_SARADC_APB_SARADC_THRES_ALL_EN_S = 27
const APB_SARADC_APB_SARADC_THRES1_EN_S = 30
const APB_SARADC_APB_SARADC_THRES0_EN_S = 31
const APB_SARADC_APB_SARADC_TSENS_INT_ENA_S = 25
const APB_SARADC_APB_SARADC_THRES1_LOW_INT_ENA_S = 26
const APB_SARADC_APB_SARADC_THRES0_LOW_INT_ENA_S = 27
const APB_SARADC_APB_SARADC_THRES1_HIGH_INT_ENA_S = 28
const APB_SARADC_APB_SARADC_THRES0_HIGH_INT_ENA_S = 29
const APB_SARADC_APB_SARADC2_DONE_INT_ENA_S = 30
const APB_SARADC_APB_SARADC1_DONE_INT_ENA_S = 31
const APB_SARADC_APB_SARADC_TSENS_INT_RAW_S = 25
const APB_SARADC_APB_SARADC_THRES1_LOW_INT_RAW_S = 26
const APB_SARADC_APB_SARADC_THRES0_LOW_INT_RAW_S = 27
const APB_SARADC_APB_SARADC_THRES1_HIGH_INT_RAW_S = 28
const APB_SARADC_APB_SARADC_THRES0_HIGH_INT_RAW_S = 29
const APB_SARADC_APB_SARADC2_DONE_INT_RAW_S = 30
const APB_SARADC_APB_SARADC1_DONE_INT_RAW_S = 31
const APB_SARADC_APB_SARADC_TSENS_INT_ST_S = 25
const APB_SARADC_APB_SARADC_THRES1_LOW_INT_ST_S = 26
const APB_SARADC_APB_SARADC_THRES0_LOW_INT_ST_S = 27
const APB_SARADC_APB_SARADC_THRES1_HIGH_INT_ST_S = 28
const APB_SARADC_APB_SARADC_THRES0_HIGH_INT_ST_S = 29
const APB_SARADC_APB_SARADC2_DONE_INT_ST_S = 30
const APB_SARADC_APB_SARADC1_DONE_INT_ST_S = 31
const APB_SARADC_APB_SARADC_TSENS_INT_CLR_S = 25
const APB_SARADC_APB_SARADC_THRES1_LOW_INT_CLR_S = 26
const APB_SARADC_APB_SARADC_THRES0_LOW_INT_CLR_S = 27
const APB_SARADC_APB_SARADC_THRES1_HIGH_INT_CLR_S = 28
const APB_SARADC_APB_SARADC_THRES0_HIGH_INT_CLR_S = 29
const APB_SARADC_APB_SARADC2_DONE_INT_CLR_S = 30
const APB_SARADC_APB_SARADC1_DONE_INT_CLR_S = 31
const APB_SARADC_APB_ADC_EOF_NUM_S = 0
const APB_SARADC_APB_ADC_RESET_FSM_S = 30
const APB_SARADC_APB_ADC_TRANS_S = 31
const APB_SARADC_CLKM_DIV_NUM_S = 0
const APB_SARADC_CLKM_DIV_B_S = 8
const APB_SARADC_CLKM_DIV_A_S = 14
const APB_SARADC_CLK_EN_S = 20
const APB_SARADC_CLK_SEL_S = 21
const APB_SARADC_TSENS_OUT_S = 0
const APB_SARADC_TSENS_IN_INV_S = 13
const APB_SARADC_TSENS_CLK_DIV_S = 14
const APB_SARADC_TSENS_PU_S = 22
const APB_SARADC_TSENS_XPD_WAIT_S = 0
const APB_SARADC_TSENS_XPD_FORCE_S = 12
const APB_SARADC_TSENS_CLK_INV_S = 14
const APB_SARADC_TSENS_CLK_SEL_S = 15
const APB_SARADC_APB_SARADC_CALI_CFG_S = 0
const APB_SARADC_WAKEUP_TH_LOW_S = 0
const APB_SARADC_WAKEUP_TH_HIGH_S = 8
const APB_SARADC_WAKEUP_OVER_UPPER_TH_S = 16
const APB_SARADC_WAKEUP_MODE_S = 17
const APB_SARADC_WAKEUP_EN_S = 18
const APB_SARADC_TSENS_SAMPLE_RATE_S = 0
const APB_SARADC_TSENS_SAMPLE_EN_S = 16
const APB_SARADC_DATE_S = 0
const PMU_HP_ACTIVE_VDD_SPI_PD_EN_S = 21
const PMU_HP_ACTIVE_HP_MEM_DSLP_S = 22
const PMU_HP_ACTIVE_PD_HP_MEM_PD_EN_S = 23
const PMU_HP_ACTIVE_PD_HP_WIFI_PD_EN_S = 27
const PMU_HP_ACTIVE_PD_HP_CPU_PD_EN_S = 29
const PMU_HP_ACTIVE_PD_HP_AON_PD_EN_S = 30
const PMU_HP_ACTIVE_PD_TOP_PD_EN_S = 31
const PMU_HP_ACTIVE_DIG_ICG_FUNC_EN_S = 0
const PMU_HP_ACTIVE_DIG_ICG_APB_EN_S = 0
const PMU_HP_ACTIVE_DIG_ICG_MODEM_CODE_S = 30
const PMU_HP_ACTIVE_UART_WAKEUP_EN_S = 24
const PMU_HP_ACTIVE_LP_PAD_HOLD_ALL_S = 25
const PMU_HP_ACTIVE_HP_PAD_HOLD_ALL_S = 26
const PMU_HP_ACTIVE_DIG_PAD_SLP_SEL_S = 27
const PMU_HP_ACTIVE_DIG_PAUSE_WDT_S = 28
const PMU_HP_ACTIVE_DIG_CPU_STALL_S = 29
const PMU_HP_ACTIVE_I2C_ISO_EN_S = 26
const PMU_HP_ACTIVE_I2C_RETENTION_S = 27
const PMU_HP_ACTIVE_XPD_BB_I2C_S = 28
const PMU_HP_ACTIVE_XPD_BBPLL_I2C_S = 29
const PMU_HP_ACTIVE_XPD_BBPLL_S = 30
const PMU_HP_ACTIVE_XPD_TRX_S = 24
const PMU_HP_ACTIVE_XPD_BIAS_S = 25
const PMU_HP_ACTIVE_PD_CUR_S = 30
const PMU_HP_ACTIVE_BIAS_SLEEP_S = 31
const PMU_HP_SLEEP2ACTIVE_BACKUP_MODEM_CLK_CODE_S = 4
const PMU_HP_MODEM2ACTIVE_BACKUP_MODEM_CLK_CODE_S = 6
const PMU_HP_ACTIVE_RETENTION_MODE_S = 10
const PMU_HP_SLEEP2ACTIVE_RETENTION_EN_S = 11
const PMU_HP_MODEM2ACTIVE_RETENTION_EN_S = 12
const PMU_HP_SLEEP2ACTIVE_BACKUP_CLK_SEL_S = 14
const PMU_HP_MODEM2ACTIVE_BACKUP_CLK_SEL_S = 16
const PMU_HP_SLEEP2ACTIVE_BACKUP_MODE_S = 20
const PMU_HP_MODEM2ACTIVE_BACKUP_MODE_S = 23
const PMU_HP_SLEEP2ACTIVE_BACKUP_EN_S = 29
const PMU_HP_MODEM2ACTIVE_BACKUP_EN_S = 30
const PMU_HP_ACTIVE_BACKUP_ICG_FUNC_EN_S = 0
const PMU_HP_ACTIVE_DIG_SYS_CLK_NO_DIV_S = 26
const PMU_HP_ACTIVE_ICG_SYS_CLOCK_EN_S = 27
const PMU_HP_ACTIVE_SYS_CLK_SLP_SEL_S = 28
const PMU_HP_ACTIVE_ICG_SLP_SEL_S = 29
const PMU_HP_ACTIVE_DIG_SYS_CLK_SEL_S = 30
const PMU_HP_ACTIVE_HP_POWER_DET_BYPASS_S = 0
const PMU_LP_DBIAS_VOL_S = 4
const PMU_HP_DBIAS_VOL_S = 9
const PMU_DIG_REGULATOR0_DBIAS_SEL_S = 14
const PMU_DIG_DBIAS_INIT_S = 15
const PMU_HP_ACTIVE_HP_REGULATOR_SLP_MEM_XPD_S = 16
const PMU_HP_ACTIVE_HP_REGULATOR_SLP_LOGIC_XPD_S = 17
const PMU_HP_ACTIVE_HP_REGULATOR_XPD_S = 18
const PMU_HP_ACTIVE_HP_REGULATOR_SLP_MEM_DBIAS_S = 19
const PMU_HP_ACTIVE_HP_REGULATOR_SLP_LOGIC_DBIAS_S = 23
const PMU_HP_ACTIVE_HP_REGULATOR_DBIAS_S = 27
const PMU_HP_ACTIVE_HP_REGULATOR_DRV_B_S = 8
const PMU_HP_ACTIVE_XPD_XTAL_S = 31
const PMU_HP_MODEM_VDD_SPI_PD_EN_S = 21
const PMU_HP_MODEM_HP_MEM_DSLP_S = 22
const PMU_HP_MODEM_PD_HP_MEM_PD_EN_S = 23
const PMU_HP_MODEM_PD_HP_WIFI_PD_EN_S = 27
const PMU_HP_MODEM_PD_HP_CPU_PD_EN_S = 29
const PMU_HP_MODEM_PD_HP_AON_PD_EN_S = 30
const PMU_HP_MODEM_PD_TOP_PD_EN_S = 31
const PMU_HP_MODEM_DIG_ICG_FUNC_EN_S = 0
const PMU_HP_MODEM_DIG_ICG_APB_EN_S = 0
const PMU_HP_MODEM_DIG_ICG_MODEM_CODE_S = 30
const PMU_HP_MODEM_UART_WAKEUP_EN_S = 24
const PMU_HP_MODEM_LP_PAD_HOLD_ALL_S = 25
const PMU_HP_MODEM_HP_PAD_HOLD_ALL_S = 26
const PMU_HP_MODEM_DIG_PAD_SLP_SEL_S = 27
const PMU_HP_MODEM_DIG_PAUSE_WDT_S = 28
const PMU_HP_MODEM_DIG_CPU_STALL_S = 29
const PMU_HP_MODEM_I2C_ISO_EN_S = 26
const PMU_HP_MODEM_I2C_RETENTION_S = 27
const PMU_HP_MODEM_XPD_BB_I2C_S = 28
const PMU_HP_MODEM_XPD_BBPLL_I2C_S = 29
const PMU_HP_MODEM_XPD_BBPLL_S = 30
const PMU_HP_MODEM_XPD_TRX_S = 24
const PMU_HP_MODEM_XPD_BIAS_S = 25
const PMU_HP_MODEM_PD_CUR_S = 30
const PMU_HP_MODEM_BIAS_SLEEP_S = 31
const PMU_HP_SLEEP2MODEM_BACKUP_MODEM_CLK_CODE_S = 4
const PMU_HP_MODEM_RETENTION_MODE_S = 10
const PMU_HP_SLEEP2MODEM_RETENTION_EN_S = 11
const PMU_HP_SLEEP2MODEM_BACKUP_CLK_SEL_S = 14
const PMU_HP_SLEEP2MODEM_BACKUP_MODE_S = 20
const PMU_HP_SLEEP2MODEM_BACKUP_EN_S = 29
const PMU_HP_MODEM_BACKUP_ICG_FUNC_EN_S = 0
const PMU_HP_MODEM_DIG_SYS_CLK_NO_DIV_S = 26
const PMU_HP_MODEM_ICG_SYS_CLOCK_EN_S = 27
const PMU_HP_MODEM_SYS_CLK_SLP_SEL_S = 28
const PMU_HP_MODEM_ICG_SLP_SEL_S = 29
const PMU_HP_MODEM_DIG_SYS_CLK_SEL_S = 30
const PMU_HP_MODEM_HP_POWER_DET_BYPASS_S = 0
const PMU_HP_MODEM_HP_REGULATOR_SLP_MEM_XPD_S = 16
const PMU_HP_MODEM_HP_REGULATOR_SLP_LOGIC_XPD_S = 17
const PMU_HP_MODEM_HP_REGULATOR_XPD_S = 18
const PMU_HP_MODEM_HP_REGULATOR_SLP_MEM_DBIAS_S = 19
const PMU_HP_MODEM_HP_REGULATOR_SLP_LOGIC_DBIAS_S = 23
const PMU_HP_MODEM_HP_REGULATOR_DBIAS_S = 27
const PMU_HP_MODEM_HP_REGULATOR_DRV_B_S = 8
const PMU_HP_MODEM_XPD_XTAL_S = 31
const PMU_HP_SLEEP_VDD_SPI_PD_EN_S = 21
const PMU_HP_SLEEP_HP_MEM_DSLP_S = 22
const PMU_HP_SLEEP_PD_HP_MEM_PD_EN_S = 23
const PMU_HP_SLEEP_PD_HP_WIFI_PD_EN_S = 27
const PMU_HP_SLEEP_PD_HP_CPU_PD_EN_S = 29
const PMU_HP_SLEEP_PD_HP_AON_PD_EN_S = 30
const PMU_HP_SLEEP_PD_TOP_PD_EN_S = 31
const PMU_HP_SLEEP_DIG_ICG_FUNC_EN_S = 0
const PMU_HP_SLEEP_DIG_ICG_APB_EN_S = 0
const PMU_HP_SLEEP_DIG_ICG_MODEM_CODE_S = 30
const PMU_HP_SLEEP_UART_WAKEUP_EN_S = 24
const PMU_HP_SLEEP_LP_PAD_HOLD_ALL_S = 25
const PMU_HP_SLEEP_HP_PAD_HOLD_ALL_S = 26
const PMU_HP_SLEEP_DIG_PAD_SLP_SEL_S = 27
const PMU_HP_SLEEP_DIG_PAUSE_WDT_S = 28
const PMU_HP_SLEEP_DIG_CPU_STALL_S = 29
const PMU_HP_SLEEP_I2C_ISO_EN_S = 26
const PMU_HP_SLEEP_I2C_RETENTION_S = 27
const PMU_HP_SLEEP_XPD_BB_I2C_S = 28
const PMU_HP_SLEEP_XPD_BBPLL_I2C_S = 29
const PMU_HP_SLEEP_XPD_BBPLL_S = 30
const PMU_HP_SLEEP_XPD_TRX_S = 24
const PMU_HP_SLEEP_XPD_BIAS_S = 25
const PMU_HP_SLEEP_PD_CUR_S = 30
const PMU_HP_SLEEP_BIAS_SLEEP_S = 31
const PMU_HP_MODEM2SLEEP_BACKUP_MODEM_CLK_CODE_S = 6
const PMU_HP_ACTIVE2SLEEP_BACKUP_MODEM_CLK_CODE_S = 8
const PMU_HP_SLEEP_RETENTION_MODE_S = 10
const PMU_HP_MODEM2SLEEP_RETENTION_EN_S = 12
const PMU_HP_ACTIVE2SLEEP_RETENTION_EN_S = 13
const PMU_HP_MODEM2SLEEP_BACKUP_CLK_SEL_S = 16
const PMU_HP_ACTIVE2SLEEP_BACKUP_CLK_SEL_S = 18
const PMU_HP_MODEM2SLEEP_BACKUP_MODE_S = 23
const PMU_HP_ACTIVE2SLEEP_BACKUP_MODE_S = 26
const PMU_HP_MODEM2SLEEP_BACKUP_EN_S = 30
const PMU_HP_ACTIVE2SLEEP_BACKUP_EN_S = 31
const PMU_HP_SLEEP_BACKUP_ICG_FUNC_EN_S = 0
const PMU_HP_SLEEP_DIG_SYS_CLK_NO_DIV_S = 26
const PMU_HP_SLEEP_ICG_SYS_CLOCK_EN_S = 27
const PMU_HP_SLEEP_SYS_CLK_SLP_SEL_S = 28
const PMU_HP_SLEEP_ICG_SLP_SEL_S = 29
const PMU_HP_SLEEP_DIG_SYS_CLK_SEL_S = 30
const PMU_HP_SLEEP_HP_POWER_DET_BYPASS_S = 0
const PMU_HP_SLEEP_HP_REGULATOR_SLP_MEM_XPD_S = 16
const PMU_HP_SLEEP_HP_REGULATOR_SLP_LOGIC_XPD_S = 17
const PMU_HP_SLEEP_HP_REGULATOR_XPD_S = 18
const PMU_HP_SLEEP_HP_REGULATOR_SLP_MEM_DBIAS_S = 19
const PMU_HP_SLEEP_HP_REGULATOR_SLP_LOGIC_DBIAS_S = 23
const PMU_HP_SLEEP_HP_REGULATOR_DBIAS_S = 27
const PMU_HP_SLEEP_HP_REGULATOR_DRV_B_S = 8
const PMU_HP_SLEEP_XPD_XTAL_S = 31
const PMU_HP_SLEEP_LP_REGULATOR_SLP_XPD_S = 21
const PMU_HP_SLEEP_LP_REGULATOR_XPD_S = 22
const PMU_HP_SLEEP_LP_REGULATOR_SLP_DBIAS_S = 23
const PMU_HP_SLEEP_LP_REGULATOR_DBIAS_S = 27
const PMU_HP_SLEEP_LP_REGULATOR_DRV_B_S = 28
const PMU_HP_SLEEP_LP_DCDC_RESERVE_S = 0
const PMU_HP_SLEEP_BOD_SOURCE_SEL_S = 27
const PMU_HP_SLEEP_VDDBAT_MODE_S = 28
const PMU_HP_SLEEP_LP_MEM_DSLP_S = 30
const PMU_HP_SLEEP_PD_LP_PERI_PD_EN_S = 31
const PMU_HP_SLEEP_XPD_LPPLL_S = 27
const PMU_HP_SLEEP_XPD_XTAL32K_S = 28
const PMU_HP_SLEEP_XPD_RC32K_S = 29
const PMU_HP_SLEEP_XPD_FOSC_CLK_S = 30
const PMU_HP_SLEEP_PD_OSC_CLK_S = 31
const PMU_LP_SLEEP_LP_BIAS_RESERVE_S = 0
const PMU_LP_SLEEP_LP_REGULATOR_SLP_XPD_S = 21
const PMU_LP_SLEEP_LP_REGULATOR_XPD_S = 22
const PMU_LP_SLEEP_LP_REGULATOR_SLP_DBIAS_S = 23
const PMU_LP_SLEEP_LP_REGULATOR_DBIAS_S = 27
const PMU_LP_SLEEP_LP_REGULATOR_DRV_B_S = 28
const PMU_LP_SLEEP_XPD_XTAL_S = 31
const PMU_LP_SLEEP_BOD_SOURCE_SEL_S = 27
const PMU_LP_SLEEP_VDDBAT_MODE_S = 28
const PMU_LP_SLEEP_LP_MEM_DSLP_S = 30
const PMU_LP_SLEEP_PD_LP_PERI_PD_EN_S = 31
const PMU_LP_SLEEP_XPD_LPPLL_S = 27
const PMU_LP_SLEEP_XPD_XTAL32K_S = 28
const PMU_LP_SLEEP_XPD_RC32K_S = 29
const PMU_LP_SLEEP_XPD_FOSC_CLK_S = 30
const PMU_LP_SLEEP_PD_OSC_CLK_S = 31
const PMU_LP_SLEEP_XPD_BIAS_S = 25
const PMU_LP_SLEEP_PD_CUR_S = 30
const PMU_LP_SLEEP_BIAS_SLEEP_S = 31
const PMU_TIE_LOW_GLOBAL_BBPLL_ICG_S = 0
const PMU_TIE_LOW_GLOBAL_XTAL_ICG_S = 1
const PMU_TIE_LOW_I2C_RETENTION_S = 2
const PMU_TIE_LOW_XPD_BB_I2C_S = 3
const PMU_TIE_LOW_XPD_BBPLL_I2C_S = 4
const PMU_TIE_LOW_XPD_BBPLL_S = 5
const PMU_TIE_LOW_XPD_XTAL_S = 6
const PMU_TIE_HIGH_GLOBAL_BBPLL_ICG_S = 25
const PMU_TIE_HIGH_GLOBAL_XTAL_ICG_S = 26
const PMU_TIE_HIGH_I2C_RETENTION_S = 27
const PMU_TIE_HIGH_XPD_BB_I2C_S = 28
const PMU_TIE_HIGH_XPD_BBPLL_I2C_S = 29
const PMU_TIE_HIGH_XPD_BBPLL_S = 30
const PMU_TIE_HIGH_XPD_XTAL_S = 31
const PMU_UPDATE_DIG_ICG_SWITCH_S = 28
const PMU_TIE_LOW_ICG_SLP_SEL_S = 29
const PMU_TIE_HIGH_ICG_SLP_SEL_S = 30
const PMU_UPDATE_DIG_SYS_CLK_SEL_S = 31
const PMU_UPDATE_DIG_ICG_FUNC_EN_S = 31
const PMU_UPDATE_DIG_ICG_APB_EN_S = 31
const PMU_UPDATE_DIG_ICG_MODEM_EN_S = 31
const PMU_TIE_LOW_LP_ROOTCLK_SEL_S = 30
const PMU_TIE_HIGH_LP_ROOTCLK_SEL_S = 31
const PMU_TIE_HIGH_LP_PAD_HOLD_ALL_S = 28
const PMU_TIE_LOW_LP_PAD_HOLD_ALL_S = 29
const PMU_TIE_HIGH_HP_PAD_HOLD_ALL_S = 30
const PMU_TIE_LOW_HP_PAD_HOLD_ALL_S = 31
const PMU_TIE_HIGH_I2C_ISO_EN_S = 30
const PMU_TIE_LOW_I2C_ISO_EN_S = 31
const PMU_DG_HP_POWERDOWN_TIMER_S = 5
const PMU_DG_HP_POWERUP_TIMER_S = 14
const PMU_DG_HP_WAIT_TIMER_S = 23
const PMU_DG_LP_POWERDOWN_TIMER_S = 9
const PMU_DG_LP_POWERUP_TIMER_S = 16
const PMU_DG_LP_WAIT_TIMER_S = 23
const PMU_FORCE_TOP_RESET_S = 0
const PMU_FORCE_TOP_ISO_S = 1
const PMU_FORCE_TOP_PU_S = 2
const PMU_FORCE_TOP_NO_RESET_S = 3
const PMU_FORCE_TOP_NO_ISO_S = 4
const PMU_FORCE_TOP_PD_S = 5
const PMU_PD_TOP_MASK_S = 6
const PMU_PD_TOP_PD_MASK_S = 27
const PMU_FORCE_HP_AON_RESET_S = 0
const PMU_FORCE_HP_AON_ISO_S = 1
const PMU_FORCE_HP_AON_PU_S = 2
const PMU_FORCE_HP_AON_NO_RESET_S = 3
const PMU_FORCE_HP_AON_NO_ISO_S = 4
const PMU_FORCE_HP_AON_PD_S = 5
const PMU_PD_HP_AON_MASK_S = 6
const PMU_PD_HP_AON_PD_MASK_S = 27
const PMU_FORCE_HP_CPU_RESET_S = 0
const PMU_FORCE_HP_CPU_ISO_S = 1
const PMU_FORCE_HP_CPU_PU_S = 2
const PMU_FORCE_HP_CPU_NO_RESET_S = 3
const PMU_FORCE_HP_CPU_NO_ISO_S = 4
const PMU_FORCE_HP_CPU_PD_S = 5
const PMU_PD_HP_CPU_MASK_S = 6
const PMU_PD_HP_CPU_PD_MASK_S = 27
const PMU_HP_PERI_RESERVE_S = 0
const PMU_FORCE_HP_WIFI_RESET_S = 0
const PMU_FORCE_HP_WIFI_ISO_S = 1
const PMU_FORCE_HP_WIFI_PU_S = 2
const PMU_FORCE_HP_WIFI_NO_RESET_S = 3
const PMU_FORCE_HP_WIFI_NO_ISO_S = 4
const PMU_FORCE_HP_WIFI_PD_S = 5
const PMU_PD_HP_WIFI_MASK_S = 6
const PMU_PD_HP_WIFI_PD_MASK_S = 27
const PMU_FORCE_LP_PERI_RESET_S = 0
const PMU_FORCE_LP_PERI_ISO_S = 1
const PMU_FORCE_LP_PERI_PU_S = 2
const PMU_FORCE_LP_PERI_NO_RESET_S = 3
const PMU_FORCE_LP_PERI_NO_ISO_S = 4
const PMU_FORCE_LP_PERI_PD_S = 5
const PMU_FORCE_HP_MEM_ISO_S = 0
const PMU_FORCE_HP_MEM_PD_S = 4
const PMU_FORCE_HP_MEM_NO_ISO_S = 24
const PMU_FORCE_HP_MEM_PU_S = 28
const PMU_PD_HP_MEM2_PD_MASK_S = 0
const PMU_PD_HP_MEM1_PD_MASK_S = 5
const PMU_PD_HP_MEM0_PD_MASK_S = 10
const PMU_PD_HP_MEM2_MASK_S = 17
const PMU_PD_HP_MEM1_MASK_S = 22
const PMU_PD_HP_MEM0_MASK_S = 27
const PMU_FORCE_HP_PAD_NO_ISO_ALL_S = 0
const PMU_FORCE_HP_PAD_ISO_ALL_S = 1
const PMU_VDD_SPI_PWR_WAIT_S = 18
const PMU_VDD_SPI_PWR_SW_S = 29
const PMU_VDD_SPI_PWR_SEL_SW_S = 31
const PMU_WAIT_XTL_STABLE_S = 0
const PMU_WAIT_PLL_STABLE_S = 16
const PMU_SLEEP_REQ_S = 31
const PMU_SLEEP_REJECT_ENA_S = 0
const PMU_SLP_REJECT_EN_S = 31
const PMU_WAKEUP_ENA_S = 0
const PMU_LP_MIN_SLP_VAL_S = 0
const PMU_HP_MIN_SLP_VAL_S = 8
const PMU_SLEEP_PRT_SEL_S = 16
const PMU_SLP_REJECT_CAUSE_CLR_S = 31
const PMU_MODEM_WAIT_TARGET_S = 0
const PMU_LP_ANA_WAIT_TARGET_S = 24
const PMU_SOC_WAKEUP_WAIT_S = 0
const PMU_SOC_WAKEUP_WAIT_CFG_S = 30
const PMU_ANA_WAIT_TARGET_S = 16
const PMU_WAKEUP_CAUSE_S = 0
const PMU_REJECT_CAUSE_S = 0
const PMU_I2C_POR_WAIT_TARGET_S = 0
const PMU_MODIFY_ICG_CNTL_WAIT_S = 0
const PMU_SWITCH_ICG_CNTL_WAIT_S = 8
const PMU_POR_DONE_S = 31
const PMU_XPD_PERIF_I2C_S = 27
const PMU_XPD_RFTX_I2C_S = 28
const PMU_XPD_RFRX_I2C_S = 29
const PMU_XPD_RFPLL_S = 30
const PMU_XPD_FORCE_RFPLL_S = 31
const PMU_VDDBAT_MODE_S = 0
const PMU_VDDBAT_SW_UPDATE_S = 31
const PMU_BACKUP_SYS_CLK_NO_DIV_S = 31
const PMU_LP_CPU_EXC_INT_RAW_S = 27
const PMU_SDIO_IDLE_INT_RAW_S = 28
const PMU_SW_INT_RAW_S = 29
const PMU_SOC_SLEEP_REJECT_INT_RAW_S = 30
const PMU_SOC_WAKEUP_INT_RAW_S = 31
const PMU_LP_CPU_EXC_INT_ST_S = 27
const PMU_SDIO_IDLE_INT_ST_S = 28
const PMU_SW_INT_ST_S = 29
const PMU_SOC_SLEEP_REJECT_INT_ST_S = 30
const PMU_SOC_WAKEUP_INT_ST_S = 31
const PMU_LP_CPU_EXC_INT_ENA_S = 27
const PMU_SDIO_IDLE_INT_ENA_S = 28
const PMU_SW_INT_ENA_S = 29
const PMU_SOC_SLEEP_REJECT_INT_ENA_S = 30
const PMU_SOC_WAKEUP_INT_ENA_S = 31
const PMU_LP_CPU_EXC_INT_CLR_S = 27
const PMU_SDIO_IDLE_INT_CLR_S = 28
const PMU_SW_INT_CLR_S = 29
const PMU_SOC_SLEEP_REJECT_INT_CLR_S = 30
const PMU_SOC_WAKEUP_INT_CLR_S = 31
const PMU_LP_CPU_WAKEUP_INT_RAW_S = 20
const PMU_MODEM_SWITCH_ACTIVE_END_INT_RAW_S = 21
const PMU_SLEEP_SWITCH_ACTIVE_END_INT_RAW_S = 22
const PMU_SLEEP_SWITCH_MODEM_END_INT_RAW_S = 23
const PMU_MODEM_SWITCH_SLEEP_END_INT_RAW_S = 24
const PMU_ACTIVE_SWITCH_SLEEP_END_INT_RAW_S = 25
const PMU_MODEM_SWITCH_ACTIVE_START_INT_RAW_S = 26
const PMU_SLEEP_SWITCH_ACTIVE_START_INT_RAW_S = 27
const PMU_SLEEP_SWITCH_MODEM_START_INT_RAW_S = 28
const PMU_MODEM_SWITCH_SLEEP_START_INT_RAW_S = 29
const PMU_ACTIVE_SWITCH_SLEEP_START_INT_RAW_S = 30
const PMU_HP_SW_TRIGGER_INT_RAW_S = 31
const PMU_LP_CPU_WAKEUP_INT_ST_S = 20
const PMU_MODEM_SWITCH_ACTIVE_END_INT_ST_S = 21
const PMU_SLEEP_SWITCH_ACTIVE_END_INT_ST_S = 22
const PMU_SLEEP_SWITCH_MODEM_END_INT_ST_S = 23
const PMU_MODEM_SWITCH_SLEEP_END_INT_ST_S = 24
const PMU_ACTIVE_SWITCH_SLEEP_END_INT_ST_S = 25
const PMU_MODEM_SWITCH_ACTIVE_START_INT_ST_S = 26
const PMU_SLEEP_SWITCH_ACTIVE_START_INT_ST_S = 27
const PMU_SLEEP_SWITCH_MODEM_START_INT_ST_S = 28
const PMU_MODEM_SWITCH_SLEEP_START_INT_ST_S = 29
const PMU_ACTIVE_SWITCH_SLEEP_START_INT_ST_S = 30
const PMU_HP_SW_TRIGGER_INT_ST_S = 31
const PMU_LP_CPU_WAKEUP_INT_ENA_S = 20
const PMU_MODEM_SWITCH_ACTIVE_END_INT_ENA_S = 21
const PMU_SLEEP_SWITCH_ACTIVE_END_INT_ENA_S = 22
const PMU_SLEEP_SWITCH_MODEM_END_INT_ENA_S = 23
const PMU_MODEM_SWITCH_SLEEP_END_INT_ENA_S = 24
const PMU_ACTIVE_SWITCH_SLEEP_END_INT_ENA_S = 25
const PMU_MODEM_SWITCH_ACTIVE_START_INT_ENA_S = 26
const PMU_SLEEP_SWITCH_ACTIVE_START_INT_ENA_S = 27
const PMU_SLEEP_SWITCH_MODEM_START_INT_ENA_S = 28
const PMU_MODEM_SWITCH_SLEEP_START_INT_ENA_S = 29
const PMU_ACTIVE_SWITCH_SLEEP_START_INT_ENA_S = 30
const PMU_HP_SW_TRIGGER_INT_ENA_S = 31
const PMU_LP_CPU_WAKEUP_INT_CLR_S = 20
const PMU_MODEM_SWITCH_ACTIVE_END_INT_CLR_S = 21
const PMU_SLEEP_SWITCH_ACTIVE_END_INT_CLR_S = 22
const PMU_SLEEP_SWITCH_MODEM_END_INT_CLR_S = 23
const PMU_MODEM_SWITCH_SLEEP_END_INT_CLR_S = 24
const PMU_ACTIVE_SWITCH_SLEEP_END_INT_CLR_S = 25
const PMU_MODEM_SWITCH_ACTIVE_START_INT_CLR_S = 26
const PMU_SLEEP_SWITCH_ACTIVE_START_INT_CLR_S = 27
const PMU_SLEEP_SWITCH_MODEM_START_INT_CLR_S = 28
const PMU_MODEM_SWITCH_SLEEP_START_INT_CLR_S = 29
const PMU_ACTIVE_SWITCH_SLEEP_START_INT_CLR_S = 30
const PMU_HP_SW_TRIGGER_INT_CLR_S = 31
const PMU_LP_CPU_WAITI_RDY_S = 0
const PMU_LP_CPU_STALL_RDY_S = 1
const PMU_LP_CPU_FORCE_STALL_S = 18
const PMU_LP_CPU_SLP_WAITI_FLAG_EN_S = 19
const PMU_LP_CPU_SLP_STALL_FLAG_EN_S = 20
const PMU_LP_CPU_SLP_STALL_WAIT_S = 21
const PMU_LP_CPU_SLP_STALL_EN_S = 29
const PMU_LP_CPU_SLP_RESET_EN_S = 30
const PMU_LP_CPU_SLP_BYPASS_INTR_EN_S = 31
const PMU_LP_CPU_WAKEUP_EN_S = 0
const PMU_LP_CPU_SLEEP_REQ_S = 31
const PMU_LP_TRIGGER_HP_S = 30
const PMU_HP_TRIGGER_LP_S = 31
const PMU_DIG_REGULATOR_EN_CAL_S = 31
const PMU_MAIN_LAST_ST_STATE_S = 11
const PMU_MAIN_TAR_ST_STATE_S = 18
const PMU_MAIN_CUR_ST_STATE_S = 25
const PMU_BACKUP_ST_STATE_S = 13
const PMU_LP_PWR_ST_STATE_S = 18
const PMU_HP_PWR_ST_STATE_S = 23
const PMU_STABLE_XPD_BBPLL_STATE_S = 0
const PMU_STABLE_XPD_XTAL_STATE_S = 1
const PMU_SYS_CLK_SLP_SEL_STATE_S = 15
const PMU_SYS_CLK_SEL_STATE_S = 16
const PMU_SYS_CLK_NO_DIV_STATE_S = 18
const PMU_ICG_SYS_CLK_EN_STATE_S = 19
const PMU_ICG_MODEM_SWITCH_STATE_S = 20
const PMU_ICG_MODEM_CODE_STATE_S = 21
const PMU_ICG_SLP_SEL_STATE_S = 23
const PMU_ICG_GLOBAL_XTAL_STATE_S = 24
const PMU_ICG_GLOBAL_PLL_STATE_S = 25
const PMU_ANA_I2C_ISO_EN_STATE_S = 26
const PMU_ANA_I2C_RETENTION_STATE_S = 27
const PMU_ANA_XPD_BB_I2C_STATE_S = 28
const PMU_ANA_XPD_BBPLL_I2C_STATE_S = 29
const PMU_ANA_XPD_BBPLL_STATE_S = 30
const PMU_ANA_XPD_XTAL_STATE_S = 31
const PMU_ICG_FUNC_EN_STATE_S = 0
const PMU_ICG_APB_EN_STATE_S = 0
const PMU_STABLE_VDD_SPI_PWR_DRV_S = 31
const PMU_PMU_DATE_S = 0
const PMU_CLK_EN_S = 31
const REGI2C_ANA_CALI_PD_WORKAROUND = 1
const REGI2C_ANA_CALI_BYTE_NUM = 8
const I2C_SAR_ADC = 0x69
const I2C_SAR_ADC_HOSTID = 0
const ADC_SAR1_SAMPLE_CYCLE_ADDR = 0x2
const ADC_SAR1_SAMPLE_CYCLE_ADDR_MSB = 0x2
const ADC_SAR1_SAMPLE_CYCLE_ADDR_LSB = 0x0
const ADC_SAR1_DREF_ADDR = 0x2
const ADC_SAR1_DREF_ADDR_MSB = 0x6
const ADC_SAR1_DREF_ADDR_LSB = 0x4
const ADC_SAR2_DREF_ADDR = 0x5
const ADC_SAR2_DREF_ADDR_MSB = 0x6
const ADC_SAR2_DREF_ADDR_LSB = 0x4
const ADC_SAR1_INITIAL_CODE_HIGH_ADDR = 0x1
const ADC_SAR1_INITIAL_CODE_HIGH_ADDR_MSB = 0x3
const ADC_SAR1_INITIAL_CODE_HIGH_ADDR_LSB = 0x0
const ADC_SAR1_INITIAL_CODE_LOW_ADDR = 0x0
const ADC_SAR1_INITIAL_CODE_LOW_ADDR_MSB = 0x7
const ADC_SAR1_INITIAL_CODE_LOW_ADDR_LSB = 0x0
const I2C_SARADC_TSENS_DAC = 0x6
const I2C_SARADC_TSENS_DAC_MSB = 3
const I2C_SARADC_TSENS_DAC_LSB = 0
const I2C_SARADC_DTEST = 7
const I2C_SARADC_DTEST_MSB = 1
const I2C_SARADC_DTEST_LSB = 0
const I2C_SARADC_ENT_SAR = 7
const I2C_SARADC_ENT_SAR_MSB = 3
const I2C_SARADC_ENT_SAR_LSB = 1
const I2C_SARADC_EN_TOUT_SAR1_BUS = 7
const I2C_SARADC_EN_TOUT_SAR1_BUS_MSB = 5
const I2C_SARADC_EN_TOUT_SAR1_BUS_LSB = 5
const I2C_SARADC_SAR1_INIT_CODE_LSB = 0
const I2C_SARADC_SAR1_INIT_CODE_LSB_MSB = 7
const I2C_SARADC_SAR1_INIT_CODE_LSB_LSB = 0
const I2C_SARADC_SAR1_INIT_CODE_MSB = 1
const I2C_SARADC_SAR1_INIT_CODE_MSB_MSB = 3
const I2C_SARADC_SAR1_INIT_CODE_MSB_LSB = 0
const I2C_SARADC_SAR2_INIT_CODE_LSB = 3
const I2C_SARADC_SAR2_INIT_CODE_LSB_MSB = 7
const I2C_SARADC_SAR2_INIT_CODE_LSB_LSB = 0
const I2C_SARADC_SAR2_INIT_CODE_MSB = 4
const I2C_SARADC_SAR2_INIT_CODE_MSB_MSB = 3
const I2C_SARADC_SAR2_INIT_CODE_MSB_LSB = 0
const ADC_SAR1_ENCAL_GND_ADDR = 0x8
const ADC_SAR1_ENCAL_GND_ADDR_MSB = 0x1
const ADC_SAR1_ENCAL_GND_ADDR_LSB = 0x1
const ADC_LL_CLKM_DIV_NUM_DEFAULT = 19
const ADC_LL_CLKM_DIV_B_DEFAULT = 1
const ADC_LL_CLKM_DIV_A_DEFAULT = 0
const ADC_LL_DEFAULT_CONV_LIMIT_EN = 0
const ADC_LL_DEFAULT_CONV_LIMIT_NUM = 10
const ADC_LL_POWER_MANAGE_SUPPORTED = 1
const GDMA_IN_DONE_CH0_INT_RAW_S = 0
const GDMA_IN_SUC_EOF_CH0_INT_RAW_S = 1
const GDMA_IN_ERR_EOF_CH0_INT_RAW_S = 2
const GDMA_IN_DSCR_ERR_CH0_INT_RAW_S = 3
const GDMA_IN_DSCR_EMPTY_CH0_INT_RAW_S = 4
const GDMA_INFIFO_OVF_CH0_INT_RAW_S = 5
const GDMA_INFIFO_UDF_CH0_INT_RAW_S = 6
const GDMA_IN_DONE_CH0_INT_ST_S = 0
const GDMA_IN_SUC_EOF_CH0_INT_ST_S = 1
const GDMA_IN_ERR_EOF_CH0_INT_ST_S = 2
const GDMA_IN_DSCR_ERR_CH0_INT_ST_S = 3
const GDMA_IN_DSCR_EMPTY_CH0_INT_ST_S = 4
const GDMA_INFIFO_OVF_CH0_INT_ST_S = 5
const GDMA_INFIFO_UDF_CH0_INT_ST_S = 6
const GDMA_IN_DONE_CH0_INT_ENA_S = 0
const GDMA_IN_SUC_EOF_CH0_INT_ENA_S = 1
const GDMA_IN_ERR_EOF_CH0_INT_ENA_S = 2
const GDMA_IN_DSCR_ERR_CH0_INT_ENA_S = 3
const GDMA_IN_DSCR_EMPTY_CH0_INT_ENA_S = 4
const GDMA_INFIFO_OVF_CH0_INT_ENA_S = 5
const GDMA_INFIFO_UDF_CH0_INT_ENA_S = 6
const GDMA_IN_DONE_CH0_INT_CLR_S = 0
const GDMA_IN_SUC_EOF_CH0_INT_CLR_S = 1
const GDMA_IN_ERR_EOF_CH0_INT_CLR_S = 2
const GDMA_IN_DSCR_ERR_CH0_INT_CLR_S = 3
const GDMA_IN_DSCR_EMPTY_CH0_INT_CLR_S = 4
const GDMA_INFIFO_OVF_CH0_INT_CLR_S = 5
const GDMA_INFIFO_UDF_CH0_INT_CLR_S = 6
const GDMA_IN_DONE_CH1_INT_RAW_S = 0
const GDMA_IN_SUC_EOF_CH1_INT_RAW_S = 1
const GDMA_IN_ERR_EOF_CH1_INT_RAW_S = 2
const GDMA_IN_DSCR_ERR_CH1_INT_RAW_S = 3
const GDMA_IN_DSCR_EMPTY_CH1_INT_RAW_S = 4
const GDMA_INFIFO_OVF_CH1_INT_RAW_S = 5
const GDMA_INFIFO_UDF_CH1_INT_RAW_S = 6
const GDMA_IN_DONE_CH1_INT_ST_S = 0
const GDMA_IN_SUC_EOF_CH1_INT_ST_S = 1
const GDMA_IN_ERR_EOF_CH1_INT_ST_S = 2
const GDMA_IN_DSCR_ERR_CH1_INT_ST_S = 3
const GDMA_IN_DSCR_EMPTY_CH1_INT_ST_S = 4
const GDMA_INFIFO_OVF_CH1_INT_ST_S = 5
const GDMA_INFIFO_UDF_CH1_INT_ST_S = 6
const GDMA_IN_DONE_CH1_INT_ENA_S = 0
const GDMA_IN_SUC_EOF_CH1_INT_ENA_S = 1
const GDMA_IN_ERR_EOF_CH1_INT_ENA_S = 2
const GDMA_IN_DSCR_ERR_CH1_INT_ENA_S = 3
const GDMA_IN_DSCR_EMPTY_CH1_INT_ENA_S = 4
const GDMA_INFIFO_OVF_CH1_INT_ENA_S = 5
const GDMA_INFIFO_UDF_CH1_INT_ENA_S = 6
const GDMA_IN_DONE_CH1_INT_CLR_S = 0
const GDMA_IN_SUC_EOF_CH1_INT_CLR_S = 1
const GDMA_IN_ERR_EOF_CH1_INT_CLR_S = 2
const GDMA_IN_DSCR_ERR_CH1_INT_CLR_S = 3
const GDMA_IN_DSCR_EMPTY_CH1_INT_CLR_S = 4
const GDMA_INFIFO_OVF_CH1_INT_CLR_S = 5
const GDMA_INFIFO_UDF_CH1_INT_CLR_S = 6
const GDMA_IN_DONE_CH2_INT_RAW_S = 0
const GDMA_IN_SUC_EOF_CH2_INT_RAW_S = 1
const GDMA_IN_ERR_EOF_CH2_INT_RAW_S = 2
const GDMA_IN_DSCR_ERR_CH2_INT_RAW_S = 3
const GDMA_IN_DSCR_EMPTY_CH2_INT_RAW_S = 4
const GDMA_INFIFO_OVF_CH2_INT_RAW_S = 5
const GDMA_INFIFO_UDF_CH2_INT_RAW_S = 6
const GDMA_IN_DONE_CH2_INT_ST_S = 0
const GDMA_IN_SUC_EOF_CH2_INT_ST_S = 1
const GDMA_IN_ERR_EOF_CH2_INT_ST_S = 2
const GDMA_IN_DSCR_ERR_CH2_INT_ST_S = 3
const GDMA_IN_DSCR_EMPTY_CH2_INT_ST_S = 4
const GDMA_INFIFO_OVF_CH2_INT_ST_S = 5
const GDMA_INFIFO_UDF_CH2_INT_ST_S = 6
const GDMA_IN_DONE_CH2_INT_ENA_S = 0
const GDMA_IN_SUC_EOF_CH2_INT_ENA_S = 1
const GDMA_IN_ERR_EOF_CH2_INT_ENA_S = 2
const GDMA_IN_DSCR_ERR_CH2_INT_ENA_S = 3
const GDMA_IN_DSCR_EMPTY_CH2_INT_ENA_S = 4
const GDMA_INFIFO_OVF_CH2_INT_ENA_S = 5
const GDMA_INFIFO_UDF_CH2_INT_ENA_S = 6
const GDMA_IN_DONE_CH2_INT_CLR_S = 0
const GDMA_IN_SUC_EOF_CH2_INT_CLR_S = 1
const GDMA_IN_ERR_EOF_CH2_INT_CLR_S = 2
const GDMA_IN_DSCR_ERR_CH2_INT_CLR_S = 3
const GDMA_IN_DSCR_EMPTY_CH2_INT_CLR_S = 4
const GDMA_INFIFO_OVF_CH2_INT_CLR_S = 5
const GDMA_INFIFO_UDF_CH2_INT_CLR_S = 6
const GDMA_OUT_DONE_CH0_INT_RAW_S = 0
const GDMA_OUT_EOF_CH0_INT_RAW_S = 1
const GDMA_OUT_DSCR_ERR_CH0_INT_RAW_S = 2
const GDMA_OUT_TOTAL_EOF_CH0_INT_RAW_S = 3
const GDMA_OUTFIFO_OVF_CH0_INT_RAW_S = 4
const GDMA_OUTFIFO_UDF_CH0_INT_RAW_S = 5
const GDMA_OUT_DONE_CH0_INT_ST_S = 0
const GDMA_OUT_EOF_CH0_INT_ST_S = 1
const GDMA_OUT_DSCR_ERR_CH0_INT_ST_S = 2
const GDMA_OUT_TOTAL_EOF_CH0_INT_ST_S = 3
const GDMA_OUTFIFO_OVF_CH0_INT_ST_S = 4
const GDMA_OUTFIFO_UDF_CH0_INT_ST_S = 5
const GDMA_OUT_DONE_CH0_INT_ENA_S = 0
const GDMA_OUT_EOF_CH0_INT_ENA_S = 1
const GDMA_OUT_DSCR_ERR_CH0_INT_ENA_S = 2
const GDMA_OUT_TOTAL_EOF_CH0_INT_ENA_S = 3
const GDMA_OUTFIFO_OVF_CH0_INT_ENA_S = 4
const GDMA_OUTFIFO_UDF_CH0_INT_ENA_S = 5
const GDMA_OUT_DONE_CH0_INT_CLR_S = 0
const GDMA_OUT_EOF_CH0_INT_CLR_S = 1
const GDMA_OUT_DSCR_ERR_CH0_INT_CLR_S = 2
const GDMA_OUT_TOTAL_EOF_CH0_INT_CLR_S = 3
const GDMA_OUTFIFO_OVF_CH0_INT_CLR_S = 4
const GDMA_OUTFIFO_UDF_CH0_INT_CLR_S = 5
const GDMA_OUT_DONE_CH1_INT_RAW_S = 0
const GDMA_OUT_EOF_CH1_INT_RAW_S = 1
const GDMA_OUT_DSCR_ERR_CH1_INT_RAW_S = 2
const GDMA_OUT_TOTAL_EOF_CH1_INT_RAW_S = 3
const GDMA_OUTFIFO_OVF_CH1_INT_RAW_S = 4
const GDMA_OUTFIFO_UDF_CH1_INT_RAW_S = 5
const GDMA_OUT_DONE_CH1_INT_ST_S = 0
const GDMA_OUT_EOF_CH1_INT_ST_S = 1
const GDMA_OUT_DSCR_ERR_CH1_INT_ST_S = 2
const GDMA_OUT_TOTAL_EOF_CH1_INT_ST_S = 3
const GDMA_OUTFIFO_OVF_CH1_INT_ST_S = 4
const GDMA_OUTFIFO_UDF_CH1_INT_ST_S = 5
const GDMA_OUT_DONE_CH1_INT_ENA_S = 0
const GDMA_OUT_EOF_CH1_INT_ENA_S = 1
const GDMA_OUT_DSCR_ERR_CH1_INT_ENA_S = 2
const GDMA_OUT_TOTAL_EOF_CH1_INT_ENA_S = 3
const GDMA_OUTFIFO_OVF_CH1_INT_ENA_S = 4
const GDMA_OUTFIFO_UDF_CH1_INT_ENA_S = 5
const GDMA_OUT_DONE_CH1_INT_CLR_S = 0
const GDMA_OUT_EOF_CH1_INT_CLR_S = 1
const GDMA_OUT_DSCR_ERR_CH1_INT_CLR_S = 2
const GDMA_OUT_TOTAL_EOF_CH1_INT_CLR_S = 3
const GDMA_OUTFIFO_OVF_CH1_INT_CLR_S = 4
const GDMA_OUTFIFO_UDF_CH1_INT_CLR_S = 5
const GDMA_OUT_DONE_CH2_INT_RAW_S = 0
const GDMA_OUT_EOF_CH2_INT_RAW_S = 1
const GDMA_OUT_DSCR_ERR_CH2_INT_RAW_S = 2
const GDMA_OUT_TOTAL_EOF_CH2_INT_RAW_S = 3
const GDMA_OUTFIFO_OVF_CH2_INT_RAW_S = 4
const GDMA_OUTFIFO_UDF_CH2_INT_RAW_S = 5
const GDMA_OUT_DONE_CH2_INT_ST_S = 0
const GDMA_OUT_EOF_CH2_INT_ST_S = 1
const GDMA_OUT_DSCR_ERR_CH2_INT_ST_S = 2
const GDMA_OUT_TOTAL_EOF_CH2_INT_ST_S = 3
const GDMA_OUTFIFO_OVF_CH2_INT_ST_S = 4
const GDMA_OUTFIFO_UDF_CH2_INT_ST_S = 5
const GDMA_OUT_DONE_CH2_INT_ENA_S = 0
const GDMA_OUT_EOF_CH2_INT_ENA_S = 1
const GDMA_OUT_DSCR_ERR_CH2_INT_ENA_S = 2
const GDMA_OUT_TOTAL_EOF_CH2_INT_ENA_S = 3
const GDMA_OUTFIFO_OVF_CH2_INT_ENA_S = 4
const GDMA_OUTFIFO_UDF_CH2_INT_ENA_S = 5
const GDMA_OUT_DONE_CH2_INT_CLR_S = 0
const GDMA_OUT_EOF_CH2_INT_CLR_S = 1
const GDMA_OUT_DSCR_ERR_CH2_INT_CLR_S = 2
const GDMA_OUT_TOTAL_EOF_CH2_INT_CLR_S = 3
const GDMA_OUTFIFO_OVF_CH2_INT_CLR_S = 4
const GDMA_OUTFIFO_UDF_CH2_INT_CLR_S = 5
const GDMA_AHB_TESTMODE_S = 0
const GDMA_AHB_TESTADDR_S = 4
const GDMA_AHBM_RST_INTER_S = 0
const GDMA_ARB_PRI_DIS_S = 2
const GDMA_CLK_EN_S = 3
const GDMA_DATE_S = 0
const GDMA_IN_RST_CH0_S = 0
const GDMA_IN_LOOP_TEST_CH0_S = 1
const GDMA_INDSCR_BURST_EN_CH0_S = 2
const GDMA_IN_DATA_BURST_EN_CH0_S = 3
const GDMA_MEM_TRANS_EN_CH0_S = 4
const GDMA_IN_ETM_EN_CH0_S = 5
const GDMA_IN_CHECK_OWNER_CH0_S = 12
const GDMA_INFIFO_FULL_CH0_S = 0
const GDMA_INFIFO_EMPTY_CH0_S = 1
const GDMA_INFIFO_CNT_CH0_S = 2
const GDMA_IN_REMAIN_UNDER_1B_CH0_S = 23
const GDMA_IN_REMAIN_UNDER_2B_CH0_S = 24
const GDMA_IN_REMAIN_UNDER_3B_CH0_S = 25
const GDMA_IN_REMAIN_UNDER_4B_CH0_S = 26
const GDMA_IN_BUF_HUNGRY_CH0_S = 27
const GDMA_INFIFO_RDATA_CH0_S = 0
const GDMA_INFIFO_POP_CH0_S = 12
const GDMA_INLINK_ADDR_CH0_S = 0
const GDMA_INLINK_AUTO_RET_CH0_S = 20
const GDMA_INLINK_STOP_CH0_S = 21
const GDMA_INLINK_START_CH0_S = 22
const GDMA_INLINK_RESTART_CH0_S = 23
const GDMA_INLINK_PARK_CH0_S = 24
const GDMA_INLINK_DSCR_ADDR_CH0_S = 0
const GDMA_IN_DSCR_STATE_CH0_S = 18
const GDMA_IN_STATE_CH0_S = 20
const GDMA_IN_SUC_EOF_DES_ADDR_CH0_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH0_S = 0
const GDMA_INLINK_DSCR_CH0_S = 0
const GDMA_INLINK_DSCR_BF0_CH0_S = 0
const GDMA_INLINK_DSCR_BF1_CH0_S = 0
const GDMA_RX_PRI_CH0_S = 0
const GDMA_PERI_IN_SEL_CH0_S = 0
const GDMA_OUT_RST_CH0_S = 0
const GDMA_OUT_LOOP_TEST_CH0_S = 1
const GDMA_OUT_AUTO_WRBACK_CH0_S = 2
const GDMA_OUT_EOF_MODE_CH0_S = 3
const GDMA_OUTDSCR_BURST_EN_CH0_S = 4
const GDMA_OUT_DATA_BURST_EN_CH0_S = 5
const GDMA_OUT_ETM_EN_CH0_S = 6
const GDMA_OUT_CHECK_OWNER_CH0_S = 12
const GDMA_OUTFIFO_FULL_CH0_S = 0
const GDMA_OUTFIFO_EMPTY_CH0_S = 1
const GDMA_OUTFIFO_CNT_CH0_S = 2
const GDMA_OUT_REMAIN_UNDER_1B_CH0_S = 23
const GDMA_OUT_REMAIN_UNDER_2B_CH0_S = 24
const GDMA_OUT_REMAIN_UNDER_3B_CH0_S = 25
const GDMA_OUT_REMAIN_UNDER_4B_CH0_S = 26
const GDMA_OUTFIFO_WDATA_CH0_S = 0
const GDMA_OUTFIFO_PUSH_CH0_S = 9
const GDMA_OUTLINK_ADDR_CH0_S = 0
const GDMA_OUTLINK_STOP_CH0_S = 20
const GDMA_OUTLINK_START_CH0_S = 21
const GDMA_OUTLINK_RESTART_CH0_S = 22
const GDMA_OUTLINK_PARK_CH0_S = 23
const GDMA_OUTLINK_DSCR_ADDR_CH0_S = 0
const GDMA_OUT_DSCR_STATE_CH0_S = 18
const GDMA_OUT_STATE_CH0_S = 20
const GDMA_OUT_EOF_DES_ADDR_CH0_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH0_S = 0
const GDMA_OUTLINK_DSCR_CH0_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH0_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH0_S = 0
const GDMA_TX_PRI_CH0_S = 0
const GDMA_PERI_OUT_SEL_CH0_S = 0
const GDMA_IN_RST_CH1_S = 0
const GDMA_IN_LOOP_TEST_CH1_S = 1
const GDMA_INDSCR_BURST_EN_CH1_S = 2
const GDMA_IN_DATA_BURST_EN_CH1_S = 3
const GDMA_MEM_TRANS_EN_CH1_S = 4
const GDMA_IN_ETM_EN_CH1_S = 5
const GDMA_IN_CHECK_OWNER_CH1_S = 12
const GDMA_INFIFO_FULL_CH1_S = 0
const GDMA_INFIFO_EMPTY_CH1_S = 1
const GDMA_INFIFO_CNT_CH1_S = 2
const GDMA_IN_REMAIN_UNDER_1B_CH1_S = 23
const GDMA_IN_REMAIN_UNDER_2B_CH1_S = 24
const GDMA_IN_REMAIN_UNDER_3B_CH1_S = 25
const GDMA_IN_REMAIN_UNDER_4B_CH1_S = 26
const GDMA_IN_BUF_HUNGRY_CH1_S = 27
const GDMA_INFIFO_RDATA_CH1_S = 0
const GDMA_INFIFO_POP_CH1_S = 12
const GDMA_INLINK_ADDR_CH1_S = 0
const GDMA_INLINK_AUTO_RET_CH1_S = 20
const GDMA_INLINK_STOP_CH1_S = 21
const GDMA_INLINK_START_CH1_S = 22
const GDMA_INLINK_RESTART_CH1_S = 23
const GDMA_INLINK_PARK_CH1_S = 24
const GDMA_INLINK_DSCR_ADDR_CH1_S = 0
const GDMA_IN_DSCR_STATE_CH1_S = 18
const GDMA_IN_STATE_CH1_S = 20
const GDMA_IN_SUC_EOF_DES_ADDR_CH1_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH1_S = 0
const GDMA_INLINK_DSCR_CH1_S = 0
const GDMA_INLINK_DSCR_BF0_CH1_S = 0
const GDMA_INLINK_DSCR_BF1_CH1_S = 0
const GDMA_RX_PRI_CH1_S = 0
const GDMA_PERI_IN_SEL_CH1_S = 0
const GDMA_OUT_RST_CH1_S = 0
const GDMA_OUT_LOOP_TEST_CH1_S = 1
const GDMA_OUT_AUTO_WRBACK_CH1_S = 2
const GDMA_OUT_EOF_MODE_CH1_S = 3
const GDMA_OUTDSCR_BURST_EN_CH1_S = 4
const GDMA_OUT_DATA_BURST_EN_CH1_S = 5
const GDMA_OUT_ETM_EN_CH1_S = 6
const GDMA_OUT_CHECK_OWNER_CH1_S = 12
const GDMA_OUTFIFO_FULL_CH1_S = 0
const GDMA_OUTFIFO_EMPTY_CH1_S = 1
const GDMA_OUTFIFO_CNT_CH1_S = 2
const GDMA_OUT_REMAIN_UNDER_1B_CH1_S = 23
const GDMA_OUT_REMAIN_UNDER_2B_CH1_S = 24
const GDMA_OUT_REMAIN_UNDER_3B_CH1_S = 25
const GDMA_OUT_REMAIN_UNDER_4B_CH1_S = 26
const GDMA_OUTFIFO_WDATA_CH1_S = 0
const GDMA_OUTFIFO_PUSH_CH1_S = 9
const GDMA_OUTLINK_ADDR_CH1_S = 0
const GDMA_OUTLINK_STOP_CH1_S = 20
const GDMA_OUTLINK_START_CH1_S = 21
const GDMA_OUTLINK_RESTART_CH1_S = 22
const GDMA_OUTLINK_PARK_CH1_S = 23
const GDMA_OUTLINK_DSCR_ADDR_CH1_S = 0
const GDMA_OUT_DSCR_STATE_CH1_S = 18
const GDMA_OUT_STATE_CH1_S = 20
const GDMA_OUT_EOF_DES_ADDR_CH1_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH1_S = 0
const GDMA_OUTLINK_DSCR_CH1_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH1_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH1_S = 0
const GDMA_TX_PRI_CH1_S = 0
const GDMA_PERI_OUT_SEL_CH1_S = 0
const GDMA_IN_RST_CH2_S = 0
const GDMA_IN_LOOP_TEST_CH2_S = 1
const GDMA_INDSCR_BURST_EN_CH2_S = 2
const GDMA_IN_DATA_BURST_EN_CH2_S = 3
const GDMA_MEM_TRANS_EN_CH2_S = 4
const GDMA_IN_ETM_EN_CH2_S = 5
const GDMA_IN_CHECK_OWNER_CH2_S = 12
const GDMA_INFIFO_FULL_CH2_S = 0
const GDMA_INFIFO_EMPTY_CH2_S = 1
const GDMA_INFIFO_CNT_CH2_S = 2
const GDMA_IN_REMAIN_UNDER_1B_CH2_S = 23
const GDMA_IN_REMAIN_UNDER_2B_CH2_S = 24
const GDMA_IN_REMAIN_UNDER_3B_CH2_S = 25
const GDMA_IN_REMAIN_UNDER_4B_CH2_S = 26
const GDMA_IN_BUF_HUNGRY_CH2_S = 27
const GDMA_INFIFO_RDATA_CH2_S = 0
const GDMA_INFIFO_POP_CH2_S = 12
const GDMA_INLINK_ADDR_CH2_S = 0
const GDMA_INLINK_AUTO_RET_CH2_S = 20
const GDMA_INLINK_STOP_CH2_S = 21
const GDMA_INLINK_START_CH2_S = 22
const GDMA_INLINK_RESTART_CH2_S = 23
const GDMA_INLINK_PARK_CH2_S = 24
const GDMA_INLINK_DSCR_ADDR_CH2_S = 0
const GDMA_IN_DSCR_STATE_CH2_S = 18
const GDMA_IN_STATE_CH2_S = 20
const GDMA_IN_SUC_EOF_DES_ADDR_CH2_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH2_S = 0
const GDMA_INLINK_DSCR_CH2_S = 0
const GDMA_INLINK_DSCR_BF0_CH2_S = 0
const GDMA_INLINK_DSCR_BF1_CH2_S = 0
const GDMA_RX_PRI_CH2_S = 0
const GDMA_PERI_IN_SEL_CH2_S = 0
const GDMA_OUT_RST_CH2_S = 0
const GDMA_OUT_LOOP_TEST_CH2_S = 1
const GDMA_OUT_AUTO_WRBACK_CH2_S = 2
const GDMA_OUT_EOF_MODE_CH2_S = 3
const GDMA_OUTDSCR_BURST_EN_CH2_S = 4
const GDMA_OUT_DATA_BURST_EN_CH2_S = 5
const GDMA_OUT_ETM_EN_CH2_S = 6
const GDMA_OUT_CHECK_OWNER_CH2_S = 12
const GDMA_OUTFIFO_FULL_CH2_S = 0
const GDMA_OUTFIFO_EMPTY_CH2_S = 1
const GDMA_OUTFIFO_CNT_CH2_S = 2
const GDMA_OUT_REMAIN_UNDER_1B_CH2_S = 23
const GDMA_OUT_REMAIN_UNDER_2B_CH2_S = 24
const GDMA_OUT_REMAIN_UNDER_3B_CH2_S = 25
const GDMA_OUT_REMAIN_UNDER_4B_CH2_S = 26
const GDMA_OUTFIFO_WDATA_CH2_S = 0
const GDMA_OUTFIFO_PUSH_CH2_S = 9
const GDMA_OUTLINK_ADDR_CH2_S = 0
const GDMA_OUTLINK_STOP_CH2_S = 20
const GDMA_OUTLINK_START_CH2_S = 21
const GDMA_OUTLINK_RESTART_CH2_S = 22
const GDMA_OUTLINK_PARK_CH2_S = 23
const GDMA_OUTLINK_DSCR_ADDR_CH2_S = 0
const GDMA_OUT_DSCR_STATE_CH2_S = 18
const GDMA_OUT_STATE_CH2_S = 20
const GDMA_OUT_EOF_DES_ADDR_CH2_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH2_S = 0
const GDMA_OUTLINK_DSCR_CH2_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH2_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH2_S = 0
const GDMA_TX_PRI_CH2_S = 0
const GDMA_PERI_OUT_SEL_CH2_S = 0
const GPIO_EVT_CH0_RISE_EDGE = 1
const GPIO_EVT_CH1_RISE_EDGE = 2
const GPIO_EVT_CH2_RISE_EDGE = 3
const GPIO_EVT_CH3_RISE_EDGE = 4
const GPIO_EVT_CH4_RISE_EDGE = 5
const GPIO_EVT_CH5_RISE_EDGE = 6
const GPIO_EVT_CH6_RISE_EDGE = 7
const GPIO_EVT_CH7_RISE_EDGE = 8
const GPIO_EVT_CH0_FALL_EDGE = 9
const GPIO_EVT_CH1_FALL_EDGE = 10
const GPIO_EVT_CH2_FALL_EDGE = 11
const GPIO_EVT_CH3_FALL_EDGE = 12
const GPIO_EVT_CH4_FALL_EDGE = 13
const GPIO_EVT_CH5_FALL_EDGE = 14
const GPIO_EVT_CH6_FALL_EDGE = 15
const GPIO_EVT_CH7_FALL_EDGE = 16
const GPIO_EVT_CH0_ANY_EDGE = 17
const GPIO_EVT_CH1_ANY_EDGE = 18
const GPIO_EVT_CH2_ANY_EDGE = 19
const GPIO_EVT_CH3_ANY_EDGE = 20
const GPIO_EVT_CH4_ANY_EDGE = 21
const GPIO_EVT_CH5_ANY_EDGE = 22
const GPIO_EVT_CH6_ANY_EDGE = 23
const GPIO_EVT_CH7_ANY_EDGE = 24
const LEDC_EVT_DUTY_CHNG_END_CH0 = 25
const LEDC_EVT_DUTY_CHNG_END_CH1 = 26
const LEDC_EVT_DUTY_CHNG_END_CH2 = 27
const LEDC_EVT_DUTY_CHNG_END_CH3 = 28
const LEDC_EVT_DUTY_CHNG_END_CH4 = 29
const LEDC_EVT_DUTY_CHNG_END_CH5 = 30
const LEDC_EVT_OVF_CNT_PLS_CH0 = 31
const LEDC_EVT_OVF_CNT_PLS_CH1 = 32
const LEDC_EVT_OVF_CNT_PLS_CH2 = 33
const LEDC_EVT_OVF_CNT_PLS_CH3 = 34
const LEDC_EVT_OVF_CNT_PLS_CH4 = 35
const LEDC_EVT_OVF_CNT_PLS_CH5 = 36
const LEDC_EVT_TIME_OVF_TIMER0 = 37
const LEDC_EVT_TIME_OVF_TIMER1 = 38
const LEDC_EVT_TIME_OVF_TIMER2 = 39
const LEDC_EVT_TIME_OVF_TIMER3 = 40
const LEDC_EVT_TIMER0_CMP = 41
const LEDC_EVT_TIMER1_CMP = 42
const LEDC_EVT_TIMER2_CMP = 43
const LEDC_EVT_TIMER3_CMP = 44
const PCNT_EVT_CNT_EQ_THRESH = 45
const PCNT_EVT_CNT_EQ_LMT = 46
const PCNT_EVT_CNT_EQ_ZERO = 47
const TIMER0_EVT_CNT_CMP_TIMER0 = 48
const TIMER1_EVT_CNT_CMP_TIMER0 = 49
const SYSTIMER_EVT_CNT_CMP0 = 50
const SYSTIMER_EVT_CNT_CMP1 = 51
const SYSTIMER_EVT_CNT_CMP2 = 52
const RMT_EVT_TX_END = 53
const RMT_EVT_TX_LOOP = 54
const RMT_EVT_RX_END = 55
const RMT_EVT_TX_THRESH = 56
const RMT_EVT_RX_THRESH = 57
const MCPWM_EVT_TIMER0_STOP = 58
const MCPWM_EVT_TIMER1_STOP = 59
const MCPWM_EVT_TIMER2_STOP = 60
const MCPWM_EVT_TIMER0_TEZ = 61
const MCPWM_EVT_TIMER1_TEZ = 62
const MCPWM_EVT_TIMER2_TEZ = 63
const MCPWM_EVT_TIMER0_TEP = 64
const MCPWM_EVT_TIMER1_TEP = 65
const MCPWM_EVT_TIMER2_TEP = 66
const MCPWM_EVT_OP0_TEA = 67
const MCPWM_EVT_OP1_TEA = 68
const MCPWM_EVT_OP2_TEA = 69
const MCPWM_EVT_OP0_TEB = 70
const MCPWM_EVT_OP1_TEB = 71
const MCPWM_EVT_OP2_TEB = 72
const MCPWM_EVT_F0 = 73
const MCPWM_EVT_F1 = 74
const MCPWM_EVT_F2 = 75
const MCPWM_EVT_F0_CLR = 76
const MCPWM_EVT_F1_CLR = 77
const MCPWM_EVT_F2_CLR = 78
const MCPWM_EVT_TZ0_CBC = 79
const MCPWM_EVT_TZ1_CBC = 80
const MCPWM_EVT_TZ2_CBC = 81
const MCPWM_EVT_TZ0_OST = 82
const MCPWM_EVT_TZ1_OST = 83
const MCPWM_EVT_TZ2_OST = 84
const MCPWM_EVT_CAP0 = 85
const MCPWM_EVT_CAP1 = 86
const MCPWM_EVT_CAP2 = 87
const ADC_EVT_CONV_CMPLT0 = 88
const ADC_EVT_EQ_ABOVE_THRESH0 = 89
const ADC_EVT_EQ_ABOVE_THRESH1 = 90
const ADC_EVT_EQ_BELOW_THRESH0 = 91
const ADC_EVT_EQ_BELOW_THRESH1 = 92
const ADC_EVT_RESULT_DONE0 = 93
const ADC_EVT_STOPPED0 = 94
const ADC_EVT_STARTED0 = 95
const REGDMA_EVT_DONE0 = 96
const REGDMA_EVT_DONE1 = 97
const REGDMA_EVT_DONE2 = 98
const REGDMA_EVT_DONE3 = 99
const REGDMA_EVT_ERR0 = 100
const REGDMA_EVT_ERR1 = 101
const REGDMA_EVT_ERR2 = 102
const REGDMA_EVT_ERR3 = 103
const PDMA_EVT_TX_DONE = 104
const PDMA_EVT_OUT_EOF = 105
const PDMA_EVT_IN_SUC_EOF = 106
const PDMA_EVT_FULL_OR_EMPTY = 107
const PDMA_EVT_ALL_DONE = 108
const PDMA_EVT_RX_DONE = 109
const TMPSNSR_EVT_OVER_LIMIT = 110
const UART_EVT_REC_DATA_OVF0 = 111
const UART_EVT_REC_DATA_OVF1 = 112
const UART_EVT_TX_DONE0 = 113
const UART_EVT_TX_DONE1 = 114
const UART_EVT_TIMEOUT0 = 115
const UART_EVT_TIMEOUT1 = 116
const UART_EVT_ERR0 = 117
const UART_EVT_ERR1 = 118
const UART_EVT_CTS0 = 119
const UART_EVT_CTS1 = 120
const UART_EVT_TX_EMPTY0 = 121
const UART_EVT_TX_EMPTY1 = 122
const UART_EVT_AT_PATTERNS0 = 123
const UART_EVT_AT_PATTERNS1 = 124
const SPI_EVT_STOPPED = 125
const I2S_EVT_RX_DONE = 126
const I2S_EVT_TX_DONE = 127
const I2S_EVT_X_WORDS_RECEIVED = 128
const I2S_EVT_X_WORDS_SENT = 129
const I2C_EVT_TRANS_DONE = 130
const LCDCAM_EVT_TRANS_DONE = 131
const CAN_EVT_TRANS_DONE = 132
const ULP_EVT_ERR_INTR = 133
const ULP_EVT_START_INTR = 134
const RTC_EVT_TICK = 135
const RTC_EVT_OVF = 136
const RTC_EVT_CMP = 137
const GDMA_EVT_IN_DONE_CH0 = 138
const GDMA_EVT_IN_DONE_CH1 = 139
const GDMA_EVT_IN_DONE_CH2 = 140
const GDMA_EVT_IN_SUC_EOF_CH0 = 141
const GDMA_EVT_IN_SUC_EOF_CH1 = 142
const GDMA_EVT_IN_SUC_EOF_CH2 = 143
const GDMA_EVT_IN_FIFO_EMPTY_CH0 = 144
const GDMA_EVT_IN_FIFO_EMPTY_CH1 = 145
const GDMA_EVT_IN_FIFO_EMPTY_CH2 = 146
const GDMA_EVT_IN_FIFO_FULL_CH0 = 147
const GDMA_EVT_IN_FIFO_FULL_CH1 = 148
const GDMA_EVT_IN_FIFO_FULL_CH2 = 149
const GDMA_EVT_OUT_DONE_CH0 = 150
const GDMA_EVT_OUT_DONE_CH1 = 151
const GDMA_EVT_OUT_DONE_CH2 = 152
const GDMA_EVT_OUT_EOF_CH0 = 153
const GDMA_EVT_OUT_EOF_CH1 = 154
const GDMA_EVT_OUT_EOF_CH2 = 155
const GDMA_EVT_OUT_TOTAL_EOF_CH0 = 156
const GDMA_EVT_OUT_TOTAL_EOF_CH1 = 157
const GDMA_EVT_OUT_TOTAL_EOF_CH2 = 158
const GDMA_EVT_OUT_FIFO_EMPTY_CH0 = 159
const GDMA_EVT_OUT_FIFO_EMPTY_CH1 = 160
const GDMA_EVT_OUT_FIFO_EMPTY_CH2 = 161
const GDMA_EVT_OUT_FIFO_FULL_CH0 = 162
const GDMA_EVT_OUT_FIFO_FULL_CH1 = 163
const GDMA_EVT_OUT_FIFO_FULL_CH2 = 164
const PMU_EVT_SLEEP_WEEKUP = 165
const GPIO_TASK_CH0_SET = 1
const GPIO_TASK_CH1_SET = 2
const GPIO_TASK_CH2_SET = 3
const GPIO_TASK_CH3_SET = 4
const GPIO_TASK_CH4_SET = 5
const GPIO_TASK_CH5_SET = 6
const GPIO_TASK_CH6_SET = 7
const GPIO_TASK_CH7_SET = 8
const GPIO_TASK_CH0_CLEAR = 9
const GPIO_TASK_CH1_CLEAR = 10
const GPIO_TASK_CH2_CLEAR = 11
const GPIO_TASK_CH3_CLEAR = 12
const GPIO_TASK_CH4_CLEAR = 13
const GPIO_TASK_CH5_CLEAR = 14
const GPIO_TASK_CH6_CLEAR = 15
const GPIO_TASK_CH7_CLEAR = 16
const GPIO_TASK_CH0_TOGGLE = 17
const GPIO_TASK_CH1_TOGGLE = 18
const GPIO_TASK_CH2_TOGGLE = 19
const GPIO_TASK_CH3_TOGGLE = 20
const GPIO_TASK_CH4_TOGGLE = 21
const GPIO_TASK_CH5_TOGGLE = 22
const GPIO_TASK_CH6_TOGGLE = 23
const GPIO_TASK_CH7_TOGGLE = 24
const LEDC_TASK_TIMER0_RES_UPDATE = 25
const LEDC_TASK_TIMER1_RES_UPDATE = 26
const LEDC_TASK_TIMER2_RES_UPDATE = 27
const LEDC_TASK_TIMER3_RES_UPDATE = 28
const LEDC_TASK_RESERVED0 = 29
const LEDC_TASK_RESERVED1 = 30
const LEDC_TASK_DUTY_SCALE_UPDATE_CH0 = 31
const LEDC_TASK_DUTY_SCALE_UPDATE_CH1 = 32
const LEDC_TASK_DUTY_SCALE_UPDATE_CH2 = 33
const LEDC_TASK_DUTY_SCALE_UPDATE_CH3 = 34
const LEDC_TASK_DUTY_SCALE_UPDATE_CH4 = 35
const LEDC_TASK_DUTY_SCALE_UPDATE_CH5 = 36
const LEDC_TASK_TIMER0_CAP = 37
const LEDC_TASK_TIMER1_CAP = 38
const LEDC_TASK_TIMER2_CAP = 39
const LEDC_TASK_TIMER3_CAP = 40
const LEDC_TASK_SIG_OUT_DIS_CH0 = 41
const LEDC_TASK_SIG_OUT_DIS_CH1 = 42
const LEDC_TASK_SIG_OUT_DIS_CH2 = 43
const LEDC_TASK_SIG_OUT_DIS_CH3 = 44
const LEDC_TASK_SIG_OUT_DIS_CH4 = 45
const LEDC_TASK_SIG_OUT_DIS_CH5 = 46
const LEDC_TASK_OVF_CNT_RST_CH0 = 47
const LEDC_TASK_OVF_CNT_RST_CH1 = 48
const LEDC_TASK_OVF_CNT_RST_CH2 = 49
const LEDC_TASK_OVF_CNT_RST_CH3 = 50
const LEDC_TASK_OVF_CNT_RST_CH4 = 51
const LEDC_TASK_OVF_CNT_RST_CH5 = 52
const LEDC_TASK_TIMER0_RST = 53
const LEDC_TASK_TIMER1_RST = 54
const LEDC_TASK_TIMER2_RST = 55
const LEDC_TASK_TIMER3_RST = 56
const LEDC_TASK_TIMER0_RESUME = 57
const LEDC_TASK_TIMER1_RESUME = 58
const LEDC_TASK_TIMER2_RESUME = 59
const LEDC_TASK_TIMER3_RESUME = 60
const LEDC_TASK_TIMER0_PAUSE = 61
const LEDC_TASK_TIMER1_PAUSE = 62
const LEDC_TASK_TIMER2_PAUSE = 63
const LEDC_TASK_TIMER3_PAUSE = 64
const LEDC_TASK_GAMMA_RESTART_CH0 = 65
const LEDC_TASK_GAMMA_RESTART_CH1 = 66
const LEDC_TASK_GAMMA_RESTART_CH2 = 67
const LEDC_TASK_GAMMA_RESTART_CH3 = 68
const LEDC_TASK_GAMMA_RESTART_CH4 = 69
const LEDC_TASK_GAMMA_RESTART_CH5 = 70
const LEDC_TASK_GAMMA_PAUSE_CH0 = 71
const LEDC_TASK_GAMMA_PAUSE_CH1 = 72
const LEDC_TASK_GAMMA_PAUSE_CH2 = 73
const LEDC_TASK_GAMMA_PAUSE_CH3 = 74
const LEDC_TASK_GAMMA_PAUSE_CH4 = 75
const LEDC_TASK_GAMMA_PAUSE_CH5 = 76
const LEDC_TASK_GAMMA_RESUME_CH0 = 77
const LEDC_TASK_GAMMA_RESUME_CH1 = 78
const LEDC_TASK_GAMMA_RESUME_CH2 = 79
const LEDC_TASK_GAMMA_RESUME_CH3 = 80
const LEDC_TASK_GAMMA_RESUME_CH4 = 81
const LEDC_TASK_GAMMA_RESUME_CH5 = 82
const PCNT_TASK_START = 83
const PCNT_TASK_STOP = 84
const PCNT_TASK_CNT_INC = 85
const PCNT_TASK_CNT_DEC = 86
const PCNT_TASK_CNT_RST = 87
const TIMER0_TASK_CNT_START_TIMER0 = 88
const TIMER1_TASK_CNT_START_TIMER0 = 89
const TIMER0_TASK_ALARM_START_TIMER0 = 90
const TIMER1_TASK_ALARM_START_TIMER0 = 91
const TIMER0_TASK_CNT_STOP_TIMER0 = 92
const TIMER1_TASK_CNT_STOP_TIMER0 = 93
const TIMER0_TASK_CNT_RELOAD_TIMER0 = 94
const TIMER1_TASK_CNT_RELOAD_TIMER0 = 95
const TIMER0_TASK_CNT_CAP_TIMER0 = 96
const TIMER1_TASK_CNT_CAP_TIMER0 = 97
const RMT_TASK_TX_START = 98
const RMT_TASK_TX_STOP = 99
const RMT_TASK_RX_DONE = 100
const RMT_TASK_RX_START = 101
const MCPWM_TASK_CMPR0_A_UP = 102
const MCPWM_TASK_CMPR1_A_UP = 103
const MCPWM_TASK_CMPR2_A_UP = 104
const MCPWM_TASK_CMPR0_B_UP = 105
const MCPWM_TASK_CMPR1_B_UP = 106
const MCPWM_TASK_CMPR2_B_UP = 107
const MCPWM_TASK_GEN_STOP = 108
const MCPWM_TASK_TIMER0_SYN = 109
const MCPWM_TASK_TIMER1_SYN = 110
const MCPWM_TASK_TIMER2_SYN = 111
const MCPWM_TASK_TIMER0_PERIOD_UP = 112
const MCPWM_TASK_TIMER1_PERIOD_UP = 113
const MCPWM_TASK_TIMER2_PERIOD_UP = 114
const MCPWM_TASK_TZ0_OST = 115
const MCPWM_TASK_TZ1_OST = 116
const MCPWM_TASK_TZ2_OST = 117
const MCPWM_TASK_CLR0_OST = 118
const MCPWM_TASK_CLR1_OST = 119
const MCPWM_TASK_CLR2_OST = 120
const MCPWM_TASK_CAP0 = 121
const MCPWM_TASK_CAP1 = 122
const MCPWM_TASK_CAP2 = 123
const ADC_TASK_SAMPLE0 = 124
const ADC_TASK_SAMPLE1 = 125
const ADC_TASK_START0 = 126
const ADC_TASK_STOP0 = 127
const REGDMA_TASK_START0 = 128
const REGDMA_TASK_START1 = 129
const REGDMA_TASK_START2 = 130
const REGDMA_TASK_START3 = 131
const PDMA_TASK_START_TX = 132
const PDMA_TASK_START_RX = 133
const PDMA_TASK_STOP = 134
const TMPSNSR_TASK_START_SAMPLE = 135
const TMPSNSR_TASK_STOP_SAMPLE = 136
const UART_TASK_TX_START0 = 137
const UART_TASK_TX_START1 = 138
const UART_TASK_TX_STOP0 = 139
const UART_TASK_TX_STOP1 = 140
const UART_TASK_RX_START0 = 141
const UART_TASK_RX_START1 = 142
const UART_TASK_RX_STOP0 = 143
const UART_TASK_RX_STOP1 = 144
const SPI_TASK_TX_START = 145
const SPI_TASK_SLAVE_HD = 146
const SPI_TASK_STOP = 147
const I2S_TASK_START_RX = 148
const I2S_TASK_START_TX = 149
const I2S_TASK_STOP_RX = 150
const I2S_TASK_STOP_TX = 151
const I2C_TASK_START_TRANS = 152
const CAN_TASK_TRANS_START = 153
const ULP_TASK_WAKEUP_CPU = 154
const RTC_TASK_START = 155
const RTC_TASK_STOP = 156
const RTC_TASK_CLR = 157
const RTC_TASK_TRIGGERFLW = 158
const GDMA_TASK_IN_START_CH0 = 159
const GDMA_TASK_IN_START_CH1 = 160
const GDMA_TASK_IN_START_CH2 = 161
const GDMA_TASK_OUT_START_CH0 = 162
const GDMA_TASK_OUT_START_CH1 = 163
const GDMA_TASK_OUT_START_CH2 = 164
const PMU_TASK_SLEEP_REQ = 165
const GDMA_LL_CHANNEL_MAX_PRIORITY = 5
const GDMA_LL_AHB_GROUP_START_ID = 0
const GDMA_LL_AHB_NUM_GROUPS = 1
const GDMA_LL_AHB_PAIRS_PER_GROUP = 3
const GDMA_LL_AHB_DESC_ALIGNMENT = 4
const GDMA_LL_AHB_RX_BURST_NEEDS_ALIGNMENT = 1
const STACK_OVERHEAD_CHECKER = 0
const STACK_OVERHEAD_OPTIMIZATION = 0
const STACK_OVERHEAD_APPTRACE = 0
const STACK_OVERHEAD_WATCHPOINT = 0
const ConfigUSE_PORT_OPTIMISED_TASK_SELECTION = 1
const ConfigMAX_API_CALL_INTERRUPT_PRIORITY = 0
const ConfigUSE_NEWLIB_REENTRANT = 1
const ConfigINCLUDE_FREERTOS_TASK_C_ADDITIONS_H = 1
const INCLUDE_xTaskDelayUntil = 1
const INCLUDE_uxTaskGetStackHighWaterMark2 = 1
const ConfigUSE_PREEMPTION = 1
const ConfigUSE_TIME_SLICING = 1
const ConfigUSE_16_BIT_TICKS = 0
const ConfigIDLE_SHOULD_YIELD = 0
const ConfigKERNEL_INTERRUPT_PRIORITY = 1
const ConfigUSE_MUTEXES = 1
const ConfigUSE_RECURSIVE_MUTEXES = 1
const ConfigUSE_COUNTING_SEMAPHORES = 1
const ConfigUSE_QUEUE_SETS = 1
const ConfigUSE_TASK_NOTIFICATIONS = 1
const ConfigENABLE_BACKWARD_COMPATIBILITY = 0
const ConfigSUPPORT_STATIC_ALLOCATION = 1
const ConfigSUPPORT_DYNAMIC_ALLOCATION = 1
const ConfigAPPLICATION_ALLOCATED_HEAP = 1
const ConfigSTACK_ALLOCATION_FROM_SEPARATE_HEAP = 0
const ConfigUSE_IDLE_HOOK = 0
const ConfigUSE_TICK_HOOK = 0
const ConfigCHECK_FOR_STACK_OVERFLOW = 2
const ConfigRECORD_STACK_HIGH_ADDRESS = 1
const ConfigUSE_CO_ROUTINES = 0
const ConfigMAX_CO_ROUTINE_PRIORITIES = 2
const ConfigUSE_TIMERS = 1
const INCLUDE_vTaskPrioritySet = 1
const INCLUDE_uxTaskPriorityGet = 1
const INCLUDE_vTaskDelete = 1
const INCLUDE_vTaskSuspend = 1
const INCLUDE_vTaskDelay = 1
const INCLUDE_xTaskGetIdleTaskHandle = 1
const INCLUDE_xTaskAbortDelay = 1
const INCLUDE_xSemaphoreGetMutexHolder = 1
const INCLUDE_xTaskGetHandle = 1
const INCLUDE_uxTaskGetStackHighWaterMark = 1
const INCLUDE_eTaskGetState = 1
const INCLUDE_xTaskResumeFromISR = 1
const INCLUDE_xTimerPendFunctionCall = 1
const INCLUDE_xTaskGetSchedulerState = 1
const INCLUDE_xTaskGetCurrentTaskHandle = 1
const ConfigTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS = 1
const ConfigCHECK_MUTEX_GIVEN_BY_OWNER = 1
const PdFREERTOS_ERRNO_NONE = 0
const PdFREERTOS_ERRNO_ENOENT = 2
const PdFREERTOS_ERRNO_EINTR = 4
const PdFREERTOS_ERRNO_EIO = 5
const PdFREERTOS_ERRNO_ENXIO = 6
const PdFREERTOS_ERRNO_EBADF = 9
const PdFREERTOS_ERRNO_EAGAIN = 11
const PdFREERTOS_ERRNO_EWOULDBLOCK = 11
const PdFREERTOS_ERRNO_ENOMEM = 12
const PdFREERTOS_ERRNO_EACCES = 13
const PdFREERTOS_ERRNO_EFAULT = 14
const PdFREERTOS_ERRNO_EBUSY = 16
const PdFREERTOS_ERRNO_EEXIST = 17
const PdFREERTOS_ERRNO_EXDEV = 18
const PdFREERTOS_ERRNO_ENODEV = 19
const PdFREERTOS_ERRNO_ENOTDIR = 20
const PdFREERTOS_ERRNO_EISDIR = 21
const PdFREERTOS_ERRNO_EINVAL = 22
const PdFREERTOS_ERRNO_ENOSPC = 28
const PdFREERTOS_ERRNO_ESPIPE = 29
const PdFREERTOS_ERRNO_EROFS = 30
const PdFREERTOS_ERRNO_EUNATCH = 42
const PdFREERTOS_ERRNO_EBADE = 50
const PdFREERTOS_ERRNO_EFTYPE = 79
const PdFREERTOS_ERRNO_ENMFILE = 89
const PdFREERTOS_ERRNO_ENOTEMPTY = 90
const PdFREERTOS_ERRNO_ENAMETOOLONG = 91
const PdFREERTOS_ERRNO_EOPNOTSUPP = 95
const PdFREERTOS_ERRNO_ENOBUFS = 105
const PdFREERTOS_ERRNO_ENOPROTOOPT = 109
const PdFREERTOS_ERRNO_EADDRINUSE = 112
const PdFREERTOS_ERRNO_ETIMEDOUT = 116
const PdFREERTOS_ERRNO_EINPROGRESS = 119
const PdFREERTOS_ERRNO_EALREADY = 120
const PdFREERTOS_ERRNO_EADDRNOTAVAIL = 125
const PdFREERTOS_ERRNO_EISCONN = 127
const PdFREERTOS_ERRNO_ENOTCONN = 128
const PdFREERTOS_ERRNO_ENOMEDIUM = 135
const PdFREERTOS_ERRNO_EILSEQ = 138
const PdFREERTOS_ERRNO_ECANCELED = 140
const PdFREERTOS_LITTLE_ENDIAN = 0
const PdFREERTOS_BIG_ENDIAN = 1
const PORT_OFFSET_PX_STACK = 0x30
const CORE_ID_SIZE = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_ENA_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_ENA_S = 1
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_ENA_S = 2
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_ENA_S = 3
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_ENA_S = 4
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_ENA_S = 5
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_ENA_S = 6
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_ENA_S = 7
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_ENA_S = 8
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_ENA_S = 9
const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_ENA_S = 10
const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_ENA_S = 11
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_RAW_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_RAW_S = 1
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_RAW_S = 2
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_RAW_S = 3
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_RAW_S = 4
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_RAW_S = 5
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_RAW_S = 6
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_RAW_S = 7
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_RAW_S = 8
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_RAW_S = 9
const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_RAW_S = 10
const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_RAW_S = 11
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_RLS_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_RLS_S = 1
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_RLS_S = 2
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_RLS_S = 3
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_RLS_S = 4
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_RLS_S = 5
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_RLS_S = 6
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_RLS_S = 7
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_RLS_S = 8
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_RLS_S = 9
const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_RLS_S = 10
const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_RLS_S = 11
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_CLR_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_CLR_S = 1
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_CLR_S = 2
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_CLR_S = 3
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_CLR_S = 4
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_CLR_S = 5
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_CLR_S = 6
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_CLR_S = 7
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_CLR_S = 8
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_CLR_S = 9
const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_CLR_S = 10
const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_CLR_S = 11
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MIN_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MAX_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MIN_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MAX_S = 0
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MIN_S = 0
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MAX_S = 0
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MIN_S = 0
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MAX_S = 0
const ASSIST_DEBUG_CORE_0_AREA_PC_S = 0
const ASSIST_DEBUG_CORE_0_AREA_SP_S = 0
const ASSIST_DEBUG_CORE_0_SP_MIN_S = 0
const ASSIST_DEBUG_CORE_0_SP_MAX_S = 0
const ASSIST_DEBUG_CORE_0_SP_PC_S = 0
const ASSIST_DEBUG_CORE_0_RCD_RECORDEN_S = 0
const ASSIST_DEBUG_CORE_0_RCD_PDEBUGEN_S = 1
const ASSIST_DEBUG_CORE_0_RCD_PDEBUGPC_S = 0
const ASSIST_DEBUG_CORE_0_RCD_PDEBUGSP_S = 0
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_ADDR_0_S = 0
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_WR_0_S = 24
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_LOADSTORE_0_S = 25
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_ADDR_1_S = 0
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_WR_1_S = 24
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_LOADSTORE_1_S = 25
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_ADDR_0_S = 0
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_WR_0_S = 24
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_BYTEEN_0_S = 25
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_PC_0_S = 0
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_ADDR_1_S = 0
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_WR_1_S = 24
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_BYTEEN_1_S = 25
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_PC_1_S = 0
const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_LIMIT_CYCLE_0_S = 0
const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_LIMIT_CYCLE_1_S = 0
const ASSIST_DEBUG_CORE_0_LASTPC_BEFORE_EXC_S = 0
const ASSIST_DEBUG_CORE_0_DEBUG_MODE_S = 0
const ASSIST_DEBUG_CORE_0_DEBUG_MODULE_ACTIVE_S = 1
const ASSIST_DEBUG_CLK_EN_S = 0
const ASSIST_DEBUG_ASSIST_DEBUG_DATE_S = 0
const INTMTX_CORE0_PMU_INTR_MAP_S = 0
const INTMTX_CORE0_EFUSE_INTR_MAP_S = 0
const INTMTX_CORE0_LP_RTC_TIMER_INTR_MAP_S = 0
const INTMTX_CORE0_LP_BLE_TIMER_INTR_MAP_S = 0
const INTMTX_CORE0_LP_WDT_INTR_MAP_S = 0
const INTMTX_CORE0_LP_PERI_TIMEOUT_INTR_MAP_S = 0
const INTMTX_CORE0_LP_APM_M0_INTR_MAP_S = 0
const INTMTX_CORE0_CPU_INTR_FROM_CPU_0_MAP_S = 0
const INTMTX_CORE0_CPU_INTR_FROM_CPU_1_MAP_S = 0
const INTMTX_CORE0_CPU_INTR_FROM_CPU_2_MAP_S = 0
const INTMTX_CORE0_CPU_INTR_FROM_CPU_3_MAP_S = 0
const INTMTX_CORE0_ASSIST_DEBUG_INTR_MAP_S = 0
const INTMTX_CORE0_TRACE_INTR_MAP_S = 0
const INTMTX_CORE0_CACHE_INTR_MAP_S = 0
const INTMTX_CORE0_CPU_PERI_TIMEOUT_INTR_MAP_S = 0
const INTMTX_CORE0_BT_MAC_INTR_MAP_S = 0
const INTMTX_CORE0_BT_BB_INTR_MAP_S = 0
const INTMTX_CORE0_BT_BB_NMI_MAP_S = 0
const INTMTX_CORE0_COEX_INTR_MAP_S = 0
const INTMTX_CORE0_BLE_TIMER_INTR_MAP_S = 0
const INTMTX_CORE0_BLE_SEC_INTR_MAP_S = 0
const INTMTX_CORE0_ZB_MAC_INTR_MAP_S = 0
const INTMTX_CORE0_GPIO_INTERRUPT_PRO_MAP_S = 0
const INTMTX_CORE0_GPIO_INTERRUPT_PRO_NMI_MAP_S = 0
const INTMTX_CORE0_PAU_INTR_MAP_S = 0
const INTMTX_CORE0_HP_PERI_TIMEOUT_INTR_MAP_S = 0
const INTMTX_CORE0_HP_APM_M0_INTR_MAP_S = 0
const INTMTX_CORE0_HP_APM_M1_INTR_MAP_S = 0
const INTMTX_CORE0_HP_APM_M2_INTR_MAP_S = 0
const INTMTX_CORE0_HP_APM_M3_INTR_MAP_S = 0
const INTMTX_CORE0_MSPI_INTR_MAP_S = 0
const INTMTX_CORE0_I2S_INTR_MAP_S = 0
const INTMTX_CORE0_UHCI0_INTR_MAP_S = 0
const INTMTX_CORE0_UART0_INTR_MAP_S = 0
const INTMTX_CORE0_UART1_INTR_MAP_S = 0
const INTMTX_CORE0_LEDC_INTR_MAP_S = 0
const INTMTX_CORE0_CAN0_INTR_MAP_S = 0
const INTMTX_CORE0_USB_INTR_MAP_S = 0
const INTMTX_CORE0_RMT_INTR_MAP_S = 0
const INTMTX_CORE0_I2C_EXT0_INTR_MAP_S = 0
const INTMTX_CORE0_I2C_EXT1_INTR_MAP_S = 0
const INTMTX_CORE0_TG0_T0_INTR_MAP_S = 0
const INTMTX_CORE0_TG0_WDT_INTR_MAP_S = 0
const INTMTX_CORE0_TG1_T0_INTR_MAP_S = 0
const INTMTX_CORE0_TG1_WDT_INTR_MAP_S = 0
const INTMTX_CORE0_SYSTIMER_TARGET0_INTR_MAP_S = 0
const INTMTX_CORE0_SYSTIMER_TARGET1_INTR_MAP_S = 0
const INTMTX_CORE0_SYSTIMER_TARGET2_INTR_MAP_S = 0
const INTMTX_CORE0_APB_ADC_INTR_MAP_S = 0
const INTMTX_CORE0_PWM_INTR_MAP_S = 0
const INTMTX_CORE0_PCNT_INTR_MAP_S = 0
const INTMTX_CORE0_PARL_IO_TX_INTR_MAP_S = 0
const INTMTX_CORE0_PARL_IO_RX_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_IN_CH0_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_IN_CH1_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_IN_CH2_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_OUT_CH0_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_OUT_CH1_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_OUT_CH2_INTR_MAP_S = 0
const INTMTX_CORE0_GPSPI2_INTR_MAP_S = 0
const INTMTX_CORE0_AES_INTR_MAP_S = 0
const INTMTX_CORE0_SHA_INTR_MAP_S = 0
const INTMTX_CORE0_RSA_INTR_MAP_S = 0
const INTMTX_CORE0_ECC_INTR_MAP_S = 0
const INTMTX_CORE0_ECDSA_INTR_MAP_S = 0
const INTMTX_CORE0_INT_STATUS_0_S = 0
const INTMTX_CORE0_INT_STATUS_1_S = 0
const INTMTX_CORE0_INT_STATUS_2_S = 0
const INTMTX_CORE0_REG_CLK_EN_S = 0
const INTMTX_CORE0_INTERRUPT_REG_DATE_S = 0
const PLIC_CPU_MXINT_ENABLE = 0xFFFFFFFF
const PLIC_CPU_MXINT_ENABLE_V = 0xFFFFFFFF
const PLIC_CPU_MXINT_ENABLE_S = 0
const PLIC_CPU_MXINT_TYPE = 0xFFFFFFFF
const PLIC_CPU_MXINT_TYPE_V = 0xFFFFFFFF
const PLIC_CPU_MXINT_TYPE_S = 0
const PLIC_CPU_MXINT_CLEAR = 0xFFFFFFFF
const PLIC_CPU_MXINT_CLEAR_V = 0xFFFFFFFF
const PLIC_CPU_MXINT_CLEAR_S = 0
const PLIC_CPU_EIP_STATUS = 0xFFFFFFFF
const PLIC_CPU_EIP_STATUS_V = 0xFFFFFFFF
const PLIC_CPU_EIP_STATUS_S = 0
const PLIC_CPU_MXINT0_PRI = 0x0000000F
const PLIC_CPU_MXINT0_PRI_V = 0xF
const PLIC_CPU_MXINT0_PRI_S = 0
const PLIC_CPU_MXINT1_PRI = 0x0000000F
const PLIC_CPU_MXINT1_PRI_V = 0xF
const PLIC_CPU_MXINT1_PRI_S = 0
const PLIC_CPU_MXINT2_PRI = 0x0000000F
const PLIC_CPU_MXINT2_PRI_V = 0xF
const PLIC_CPU_MXINT2_PRI_S = 0
const PLIC_CPU_MXINT3_PRI = 0x0000000F
const PLIC_CPU_MXINT3_PRI_V = 0xF
const PLIC_CPU_MXINT3_PRI_S = 0
const PLIC_CPU_MXINT4_PRI = 0x0000000F
const PLIC_CPU_MXINT4_PRI_V = 0xF
const PLIC_CPU_MXINT4_PRI_S = 0
const PLIC_CPU_MXINT5_PRI = 0x0000000F
const PLIC_CPU_MXINT5_PRI_V = 0xF
const PLIC_CPU_MXINT5_PRI_S = 0
const PLIC_CPU_MXINT6_PRI = 0x0000000F
const PLIC_CPU_MXINT6_PRI_V = 0xF
const PLIC_CPU_MXINT6_PRI_S = 0
const PLIC_CPU_MXINT7_PRI = 0x0000000F
const PLIC_CPU_MXINT7_PRI_V = 0xF
const PLIC_CPU_MXINT7_PRI_S = 0
const PLIC_CPU_MXINT8_PRI = 0x0000000F
const PLIC_CPU_MXINT8_PRI_V = 0xF
const PLIC_CPU_MXINT8_PRI_S = 0
const PLIC_CPU_MXINT9_PRI = 0x0000000F
const PLIC_CPU_MXINT9_PRI_V = 0xF
const PLIC_CPU_MXINT9_PRI_S = 0
const PLIC_CPU_MXINT10_PRI = 0x0000000F
const PLIC_CPU_MXINT10_PRI_V = 0xF
const PLIC_CPU_MXINT10_PRI_S = 0
const PLIC_CPU_MXINT11_PRI = 0x0000000F
const PLIC_CPU_MXINT11_PRI_V = 0xF
const PLIC_CPU_MXINT11_PRI_S = 0
const PLIC_CPU_MXINT12_PRI = 0x0000000F
const PLIC_CPU_MXINT12_PRI_V = 0xF
const PLIC_CPU_MXINT12_PRI_S = 0
const PLIC_CPU_MXINT13_PRI = 0x0000000F
const PLIC_CPU_MXINT13_PRI_V = 0xF
const PLIC_CPU_MXINT13_PRI_S = 0
const PLIC_CPU_MXINT14_PRI = 0x0000000F
const PLIC_CPU_MXINT14_PRI_V = 0xF
const PLIC_CPU_MXINT14_PRI_S = 0
const PLIC_CPU_MXINT15_PRI = 0x0000000F
const PLIC_CPU_MXINT15_PRI_V = 0xF
const PLIC_CPU_MXINT15_PRI_S = 0
const PLIC_CPU_MXINT16_PRI = 0x0000000F
const PLIC_CPU_MXINT16_PRI_V = 0xF
const PLIC_CPU_MXINT16_PRI_S = 0
const PLIC_CPU_MXINT17_PRI = 0x0000000F
const PLIC_CPU_MXINT17_PRI_V = 0xF
const PLIC_CPU_MXINT17_PRI_S = 0
const PLIC_CPU_MXINT18_PRI = 0x0000000F
const PLIC_CPU_MXINT18_PRI_V = 0xF
const PLIC_CPU_MXINT18_PRI_S = 0
const PLIC_CPU_MXINT19_PRI = 0x0000000F
const PLIC_CPU_MXINT19_PRI_V = 0xF
const PLIC_CPU_MXINT19_PRI_S = 0
const PLIC_CPU_MXINT20_PRI = 0x0000000F
const PLIC_CPU_MXINT20_PRI_V = 0xF
const PLIC_CPU_MXINT20_PRI_S = 0
const PLIC_CPU_MXINT21_PRI = 0x0000000F
const PLIC_CPU_MXINT21_PRI_V = 0xF
const PLIC_CPU_MXINT21_PRI_S = 0
const PLIC_CPU_MXINT22_PRI = 0x0000000F
const PLIC_CPU_MXINT22_PRI_V = 0xF
const PLIC_CPU_MXINT22_PRI_S = 0
const PLIC_CPU_MXINT23_PRI = 0x0000000F
const PLIC_CPU_MXINT23_PRI_V = 0xF
const PLIC_CPU_MXINT23_PRI_S = 0
const PLIC_CPU_MXINT24_PRI = 0x0000000F
const PLIC_CPU_MXINT24_PRI_V = 0xF
const PLIC_CPU_MXINT24_PRI_S = 0
const PLIC_CPU_MXINT25_PRI = 0x0000000F
const PLIC_CPU_MXINT25_PRI_V = 0xF
const PLIC_CPU_MXINT25_PRI_S = 0
const PLIC_CPU_MXINT26_PRI = 0x0000000F
const PLIC_CPU_MXINT26_PRI_V = 0xF
const PLIC_CPU_MXINT26_PRI_S = 0
const PLIC_CPU_MXINT27_PRI = 0x0000000F
const PLIC_CPU_MXINT27_PRI_V = 0xF
const PLIC_CPU_MXINT27_PRI_S = 0
const PLIC_CPU_MXINT28_PRI = 0x0000000F
const PLIC_CPU_MXINT28_PRI_V = 0xF
const PLIC_CPU_MXINT28_PRI_S = 0
const PLIC_CPU_MXINT29_PRI = 0x0000000F
const PLIC_CPU_MXINT29_PRI_V = 0xF
const PLIC_CPU_MXINT29_PRI_S = 0
const PLIC_CPU_MXINT30_PRI = 0x0000000F
const PLIC_CPU_MXINT30_PRI_V = 0xF
const PLIC_CPU_MXINT30_PRI_S = 0
const PLIC_CPU_MXINT31_PRI = 0x0000000F
const PLIC_CPU_MXINT31_PRI_V = 0xF
const PLIC_CPU_MXINT31_PRI_S = 0
const PLIC_CPU_MXINT_THRESH = 0x000000FF
const PLIC_CPU_MXINT_THRESH_V = 0xFF
const PLIC_CPU_MXINT_THRESH_S = 0
const PLIC_CPU_MXINT_CLAIM = 0xFFFFFFFF
const PLIC_CPU_MXINT_CLAIM_V = 0xFFFFFFFF
const PLIC_CPU_MXINT_CLAIM_S = 0
const PLIC_CPU_UXINT_ENABLE = 0xFFFFFFFF
const PLIC_CPU_UXINT_ENABLE_V = 0xFFFFFFFF
const PLIC_CPU_UXINT_ENABLE_S = 0
const PLIC_CPU_UXINT_TYPE = 0xFFFFFFFF
const PLIC_CPU_UXINT_TYPE_V = 0xFFFFFFFF
const PLIC_CPU_UXINT_TYPE_S = 0
const PLIC_CPU_UXINT_CLEAR = 0xFFFFFFFF
const PLIC_CPU_UXINT_CLEAR_V = 0xFFFFFFFF
const PLIC_CPU_UXINT_CLEAR_S = 0
const PLIC_CPU_UXINT0_PRI = 0x0000000F
const PLIC_CPU_UXINT0_PRI_V = 0xF
const PLIC_CPU_UXINT0_PRI_S = 0
const PLIC_CPU_UXINT1_PRI = 0x0000000F
const PLIC_CPU_UXINT1_PRI_V = 0xF
const PLIC_CPU_UXINT1_PRI_S = 0
const PLIC_CPU_UXINT2_PRI = 0x0000000F
const PLIC_CPU_UXINT2_PRI_V = 0xF
const PLIC_CPU_UXINT2_PRI_S = 0
const PLIC_CPU_UXINT3_PRI = 0x0000000F
const PLIC_CPU_UXINT3_PRI_V = 0xF
const PLIC_CPU_UXINT3_PRI_S = 0
const PLIC_CPU_UXINT4_PRI = 0x0000000F
const PLIC_CPU_UXINT4_PRI_V = 0xF
const PLIC_CPU_UXINT4_PRI_S = 0
const PLIC_CPU_UXINT5_PRI = 0x0000000F
const PLIC_CPU_UXINT5_PRI_V = 0xF
const PLIC_CPU_UXINT5_PRI_S = 0
const PLIC_CPU_UXINT6_PRI = 0x0000000F
const PLIC_CPU_UXINT6_PRI_V = 0xF
const PLIC_CPU_UXINT6_PRI_S = 0
const PLIC_CPU_UXINT7_PRI = 0x0000000F
const PLIC_CPU_UXINT7_PRI_V = 0xF
const PLIC_CPU_UXINT7_PRI_S = 0
const PLIC_CPU_UXINT8_PRI = 0x0000000F
const PLIC_CPU_UXINT8_PRI_V = 0xF
const PLIC_CPU_UXINT8_PRI_S = 0
const PLIC_CPU_UXINT9_PRI = 0x0000000F
const PLIC_CPU_UXINT9_PRI_V = 0xF
const PLIC_CPU_UXINT9_PRI_S = 0
const PLIC_CPU_UXINT10_PRI = 0x0000000F
const PLIC_CPU_UXINT10_PRI_V = 0xF
const PLIC_CPU_UXINT10_PRI_S = 0
const PLIC_CPU_UXINT11_PRI = 0x0000000F
const PLIC_CPU_UXINT11_PRI_V = 0xF
const PLIC_CPU_UXINT11_PRI_S = 0
const PLIC_CPU_UXINT12_PRI = 0x0000000F
const PLIC_CPU_UXINT12_PRI_V = 0xF
const PLIC_CPU_UXINT12_PRI_S = 0
const PLIC_CPU_UXINT13_PRI = 0x0000000F
const PLIC_CPU_UXINT13_PRI_V = 0xF
const PLIC_CPU_UXINT13_PRI_S = 0
const PLIC_CPU_UXINT14_PRI = 0x0000000F
const PLIC_CPU_UXINT14_PRI_V = 0xF
const PLIC_CPU_UXINT14_PRI_S = 0
const PLIC_CPU_UXINT15_PRI = 0x0000000F
const PLIC_CPU_UXINT15_PRI_V = 0xF
const PLIC_CPU_UXINT15_PRI_S = 0
const PLIC_CPU_UXINT16_PRI = 0x0000000F
const PLIC_CPU_UXINT16_PRI_V = 0xF
const PLIC_CPU_UXINT16_PRI_S = 0
const PLIC_CPU_UXINT17_PRI = 0x0000000F
const PLIC_CPU_UXINT17_PRI_V = 0xF
const PLIC_CPU_UXINT17_PRI_S = 0
const PLIC_CPU_UXINT18_PRI = 0x0000000F
const PLIC_CPU_UXINT18_PRI_V = 0xF
const PLIC_CPU_UXINT18_PRI_S = 0
const PLIC_CPU_UXINT19_PRI = 0x0000000F
const PLIC_CPU_UXINT19_PRI_V = 0xF
const PLIC_CPU_UXINT19_PRI_S = 0
const PLIC_CPU_UXINT20_PRI = 0x0000000F
const PLIC_CPU_UXINT20_PRI_V = 0xF
const PLIC_CPU_UXINT20_PRI_S = 0
const PLIC_CPU_UXINT21_PRI = 0x0000000F
const PLIC_CPU_UXINT21_PRI_V = 0xF
const PLIC_CPU_UXINT21_PRI_S = 0
const PLIC_CPU_UXINT22_PRI = 0x0000000F
const PLIC_CPU_UXINT22_PRI_V = 0xF
const PLIC_CPU_UXINT22_PRI_S = 0
const PLIC_CPU_UXINT23_PRI = 0x0000000F
const PLIC_CPU_UXINT23_PRI_V = 0xF
const PLIC_CPU_UXINT23_PRI_S = 0
const PLIC_CPU_UXINT24_PRI = 0x0000000F
const PLIC_CPU_UXINT24_PRI_V = 0xF
const PLIC_CPU_UXINT24_PRI_S = 0
const PLIC_CPU_UXINT25_PRI = 0x0000000F
const PLIC_CPU_UXINT25_PRI_V = 0xF
const PLIC_CPU_UXINT25_PRI_S = 0
const PLIC_CPU_UXINT26_PRI = 0x0000000F
const PLIC_CPU_UXINT26_PRI_V = 0xF
const PLIC_CPU_UXINT26_PRI_S = 0
const PLIC_CPU_UXINT27_PRI = 0x0000000F
const PLIC_CPU_UXINT27_PRI_V = 0xF
const PLIC_CPU_UXINT27_PRI_S = 0
const PLIC_CPU_UXINT28_PRI = 0x0000000F
const PLIC_CPU_UXINT28_PRI_V = 0xF
const PLIC_CPU_UXINT28_PRI_S = 0
const PLIC_CPU_UXINT29_PRI = 0x0000000F
const PLIC_CPU_UXINT29_PRI_V = 0xF
const PLIC_CPU_UXINT29_PRI_S = 0
const PLIC_CPU_UXINT30_PRI = 0x0000000F
const PLIC_CPU_UXINT30_PRI_V = 0xF
const PLIC_CPU_UXINT30_PRI_S = 0
const PLIC_CPU_UXINT31_PRI = 0x0000000F
const PLIC_CPU_UXINT31_PRI_V = 0xF
const PLIC_CPU_UXINT31_PRI_S = 0
const PLIC_CPU_UXINT_THRESH = 0x000000FF
const PLIC_CPU_UXINT_THRESH_V = 0xFF
const PLIC_CPU_UXINT_THRESH_S = 0
const PLIC_CPU_UXINT_CLAIM = 0xFFFFFFFF
const PLIC_CPU_UXINT_CLAIM_V = 0xFFFFFFFF
const PLIC_CPU_UXINT_CLAIM_S = 0
const ARG_MAX = 65536
const CHILD_MAX = 40
const LINK_MAX = 32767
const MAX_CANON = 255
const MAX_INPUT = 255
const NAME_MAX = 255
const NGROUPS_MAX = 16
const OPEN_MAX = 64
const PATH_MAX = 1024
const PIPE_BUF = 512
const IOV_MAX = 1024
const BC_BASE_MAX = 99
const BC_DIM_MAX = 2048
const BC_SCALE_MAX = 99
const BC_STRING_MAX = 1000
const COLL_WEIGHTS_MAX = 0
const EXPR_NEST_MAX = 32
const LINE_MAX = 2048
const RE_DUP_MAX = 255
const X_LITTLE_ENDIAN = 1234
const X_BIG_ENDIAN = 4321
const X_PDP_ENDIAN = 3412
const X_QUAD_HIGHWORD = 1
const X_QUAD_LOWWORD = 0
const NBBY = 8
const MSTATUS_UIE = 0x00000001
const MSTATUS_SIE = 0x00000002
const MSTATUS_HIE = 0x00000004
const MSTATUS_MIE = 0x00000008
const MSTATUS_UPIE = 0x00000010
const MSTATUS_SPIE = 0x00000020
const MSTATUS_HPIE = 0x00000040
const MSTATUS_MPIE = 0x00000080
const MSTATUS_SPP = 0x00000100
const MSTATUS_VS = 0x00000600
const MSTATUS_MPP = 0x00001800
const MSTATUS_FS = 0x00006000
const MSTATUS_XS = 0x00018000
const MSTATUS_MPRV = 0x00020000
const MSTATUS_SUM = 0x00040000
const MSTATUS_MXR = 0x00080000
const MSTATUS_TVM = 0x00100000
const MSTATUS_TW = 0x00200000
const MSTATUS_TSR = 0x00400000
const MSTATUS32_SD = 0x80000000
const MSTATUS_UXL = 0x0000000300000000
const MSTATUS_SXL = 0x0000000C00000000
const MSTATUS64_SD = 0x8000000000000000
const MEXSTATUS_SOFT_RST = 0x00000003
const MEXSTATUS_LPMD = 0x0000000C
const MEXSTATUS_WFFEN = 0x00000010
const MEXSTATUS_EXPT_VLD = 0x00000020
const MEXSTATUS_LOCKUP = 0x00000040
const MEXSTATUS_NMISTS = 0x00000080
const MEXSTATUS_BUSEER = 0x00000100
const SSTATUS_UIE = 0x00000001
const SSTATUS_SIE = 0x00000002
const SSTATUS_UPIE = 0x00000010
const SSTATUS_SPIE = 0x00000020
const SSTATUS_SPP = 0x00000100
const SSTATUS_VS = 0x00000600
const SSTATUS_FS = 0x00006000
const SSTATUS_XS = 0x00018000
const SSTATUS_SUM = 0x00040000
const SSTATUS_MXR = 0x00080000
const SSTATUS32_SD = 0x80000000
const SSTATUS_UXL = 0x0000000300000000
const SSTATUS64_SD = 0x8000000000000000
const USTATUS_UIE = 0x00000001
const USTATUS_UPIE = 0x00000010
const DCSR_CAUSE_NONE = 0
const DCSR_CAUSE_SWBP = 1
const DCSR_CAUSE_HWBP = 2
const DCSR_CAUSE_DEBUGINT = 3
const DCSR_CAUSE_STEP = 4
const DCSR_CAUSE_HALT = 5
const DCSR_CAUSE_GROUP = 6
const MCONTROL_TYPE_NONE = 0
const MCONTROL_TYPE_MATCH = 2
const MCONTROL_ACTION_DEBUG_EXCEPTION = 0
const MCONTROL_ACTION_DEBUG_MODE = 1
const MCONTROL_ACTION_TRACE_START = 2
const MCONTROL_ACTION_TRACE_STOP = 3
const MCONTROL_ACTION_TRACE_EMIT = 4
const MCONTROL_MATCH_EQUAL = 0
const MCONTROL_MATCH_NAPOT = 1
const MCONTROL_MATCH_GE = 2
const MCONTROL_MATCH_LT = 3
const MCONTROL_MATCH_MASK_LOW = 4
const MCONTROL_MATCH_MASK_HIGH = 5
const PRV_U = 0
const PRV_S = 1
const PRV_H = 2
const PRV_M = 3
const SATP32_MODE = 0x80000000
const SATP32_ASID = 0x7FC00000
const SATP32_PPN = 0x003FFFFF
const SATP64_MODE = 0xF000000000000000
const SATP64_ASID = 0x0FFFF00000000000
const SATP64_PPN = 0x00000FFFFFFFFFFF
const SATP_MODE_OFF = 0
const SATP_MODE_SV32 = 1
const SATP_MODE_SV39 = 8
const SATP_MODE_SV48 = 9
const SATP_MODE_SV57 = 10
const SATP_MODE_SV64 = 11
const PMP_R = 0x01
const PMP_W = 0x02
const PMP_X = 0x04
const PMP_A = 0x18
const PMP_L = 0x80
const PMP_SHIFT = 2
const PMP_TOR = 0x08
const PMP_NA4 = 0x10
const PMP_NAPOT = 0x18
const IRQ_U_SOFT = 0
const IRQ_S_SOFT = 1
const IRQ_H_SOFT = 2
const IRQ_M_SOFT = 3
const IRQ_U_TIMER = 4
const IRQ_S_TIMER = 5
const IRQ_H_TIMER = 6
const IRQ_M_TIMER = 7
const IRQ_U_EXT = 8
const IRQ_S_EXT = 9
const IRQ_H_EXT = 10
const IRQ_M_EXT = 11
const IRQ_COP = 12
const IRQ_HOST = 13
const DEFAULT_RSTVEC = 0x00001000
const CLINT_BASE = 0x02000000
const CLINT_SIZE = 0x000c0000
const EXT_IO_BASE = 0x40000000
const DRAM_BASE = 0x80000000
const PTE_V = 0x001
const PTE_R = 0x002
const PTE_W = 0x004
const PTE_X = 0x008
const PTE_U = 0x010
const PTE_G = 0x020
const PTE_A = 0x040
const PTE_D = 0x080
const PTE_SOFT = 0x300
const PTE_PPN_SHIFT = 10
const RISCV_PGLEVEL_BITS = 10
const RISCV_PGSHIFT = 12
const CSR_PMACFG0 = 0xBC0
const CSR_PMAADDR0 = 0xBD0
const PMA_SHIFT = 2
const PMA_TOR = 0x40000000
const PMA_NA4 = 0x80000000
const PMA_NAPOT = 0xC0000000
const CSR_PMPCFG0 = 0x3A0
const CSR_PMPADDR0 = 0x3B0
const PMPADDR_ALL = 0xFFFFFFFF
const MEXSTATUS = 0x7E1
const MHINT = 0x7C5
const LDPC0 = 0xBE0
const LDPC1 = 0xBE1
const STPC0 = 0xBF0
const STPC1 = 0xBF1
const STPC2 = 0xBF2
const RVHAL_INTR_ENABLE_THRESH = 1
const MTVEC_MODE_CSR = 1
const RV_EXTERNAL_INT_COUNT = 32
const RV_EXTERNAL_INT_OFFSET = 0
const CSR_PCER_MACHINE = 0x7e0
const CSR_PCMR_MACHINE = 0x7e1
const CSR_PCCR_MACHINE = 0x7e2
const RVHAL_EXCM_LEVEL = 4
const ESP_CPU_INTR_DESC_FLAG_SPECIAL = 0x01
const ESP_CPU_INTR_DESC_FLAG_RESVD = 0x02
const SPINLOCK_FREE = 0xB33FFFFF
const SPINLOCK_NO_WAIT = 0
const SPINLOCK_OWNER_ID_0 = 0xCDCD
const SPINLOCK_OWNER_ID_1 = 0xABAB
const ESP_IDF_VERSION_MAJOR = 5
const ESP_IDF_VERSION_MINOR = 4
const ESP_IDF_VERSION_PATCH = 2
const X_LIBC_LIMITS_H_ = 1
const NL_ARGMAX = 32
const X_POSIX2_RE_DUP_MAX = 255
const CHAR_MIN = 0
const PortCRITICAL_NESTING_IN_TCB = 0
const PortBYTE_ALIGNMENT = 16
const PortTICK_TYPE_IS_ATOMIC = 1
const PortUSING_MPU_WRAPPERS = 0
const PortNUM_CONFIGURABLE_REGIONS = 1
const PortHAS_STACK_OVERFLOW_CHECKING = 0
const ConfigUSE_C_RUNTIME_TLS_SUPPORT = 1
const INCLUDE_xQueueGetMutexHolder = 0
const ConfigUSE_DAEMON_TASK_STARTUP_HOOK = 0
const ConfigUSE_APPLICATION_TASK_TAG = 0
const ConfigUSE_ALTERNATIVE_API = 0
const ConfigASSERT_DEFINED = 1
const ConfigPRECONDITION_DEFINED = 0
const ConfigUSE_MINI_LIST_ITEM = 1
const ConfigGENERATE_RUN_TIME_STATS = 0
const ConfigUSE_MALLOC_FAILED_HOOK = 0
const ConfigEXPECTED_IDLE_TIME_BEFORE_SLEEP = 2
const ConfigINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS = 0
const ConfigUSE_STATS_FORMATTING_FUNCTIONS = 0
const ConfigUSE_TRACE_FACILITY = 0
const ConfigUSE_POSIX_ERRNO = 0
const ConfigUSE_SB_COMPLETED_CALLBACK = 0
const ConfigINITIAL_TICK_COUNT = 0
const ConfigUSE_TASK_FPU_SUPPORT = 1
const ConfigENABLE_MPU = 0
const ConfigENABLE_FPU = 1
const ConfigENABLE_MVE = 0
const ConfigENABLE_TRUSTZONE = 1
const ConfigRUN_FREERTOS_SECURE_ONLY = 0
const ConfigRUN_ADDITIONAL_TESTS = 0
const TskKERNEL_VERSION_NUMBER = "V10.5.1"
const TskKERNEL_VERSION_MAJOR = 10
const TskKERNEL_VERSION_MINOR = 5
const TskKERNEL_VERSION_BUILD = 1
const ADC_DMA_DESC_ALIGN = 4

type X__int8T c.Char
type X__uint8T c.Char
type X__int16T int16
type X__uint16T uint16
type X__int32T c.Int
type X__uint32T c.Uint
type X__int64T c.LongLong
type X__uint64T c.UlongLong
type X__intLeast8T c.Char
type X__uintLeast8T c.Char
type X__intLeast16T int16
type X__uintLeast16T uint16
type X__intLeast32T c.Int
type X__uintLeast32T c.Uint
type X__intLeast64T c.LongLong
type X__uintLeast64T c.UlongLong
type X__intmaxT c.LongLong
type X__uintmaxT c.UlongLong
type X__intptrT c.Int
type X__uintptrT c.Uint
type PtrdiffT c.Int
type WcharT c.Int

type MaxAlignT struct {
	X__clangMaxAlignNonce1 c.LongLong
	X__clangMaxAlignNonce2 c.Double
}
type IntLeast8T X__intLeast8T
type UintLeast8T X__uintLeast8T
type IntLeast16T X__intLeast16T
type UintLeast16T X__uintLeast16T
type IntLeast32T X__intLeast32T
type UintLeast32T X__uintLeast32T
type IntLeast64T X__intLeast64T
type UintLeast64T X__uintLeast64T
type IntFast8T c.Char
type UintFast8T c.Char
type IntFast16T int16
type UintFast16T uint16
type IntFast32T c.Int
type UintFast32T c.Uint
type IntFast64T c.LongLong
type UintFast64T c.UlongLong
type X__gnucVaList c.Pointer
type WintT c.Uint
type X__blkcntT c.Long
type X__blksizeT c.Long
type X__fsblkcntT X__uint64T
type X__fsfilcntT X__uint32T
type X_offT c.Long
type X__pidT c.Int
type X__devT int16
type X__uidT uint16
type X__gidT uint16
type X__idT X__uint32T
type X__inoT uint16
type X__modeT X__uint32T
type X_off64T c.LongLong
type X__offT X_offT
type X__loffT X_off64T
type X__keyT c.Long
type X_fposT c.Long
type X__sizeT c.Uint
type X_ssizeT c.Int
type X__ssizeT X_ssizeT

type X_mbstateT struct {
	X__count c.Int
	X__value struct {
		X__wch WintT
	}
}
type X_iconvT c.Pointer
type X__clockT c.Ulong
type X__timeT X__intLeast64T
type X__clockidT c.Ulong
type X__daddrT c.Long
type X__timerT c.Ulong
type X__saFamilyT X__uint8T
type X__socklenT X__uint32T
type X__nlItem c.Int
type X__nlinkT uint16
type X__susecondsT c.Long
type X__usecondsT c.Ulong
type X__vaList c.Pointer
type X__ULong c.Ulong

type X__lock struct {
	Unused [8]uint8
}
type X_LOCKT *X__lock
type X_lockT X_LOCKT
type X_flockT X_LOCKT

type X_reent struct {
	Unused [8]uint8
}

type X__localeT struct {
	Unused [8]uint8
}

type X_Bigint struct {
	X_next   *X_Bigint
	X_k      c.Int
	X_maxwds c.Int
	X_sign   c.Int
	X_wds    c.Int
	X_x      [1]X__ULong
}

type X__tm struct {
	X__tmSec   c.Int
	X__tmMin   c.Int
	X__tmHour  c.Int
	X__tmMday  c.Int
	X__tmMon   c.Int
	X__tmYear  c.Int
	X__tmWday  c.Int
	X__tmYday  c.Int
	X__tmIsdst c.Int
}

type X_onExitArgs struct {
	X_fnargs    [32]c.Pointer
	X_dsoHandle [32]c.Pointer
	X_fntypes   X__ULong
	X_isCxa     X__ULong
}

type X_atexit struct {
	X_next          *X_atexit
	X_ind           c.Int
	X_fns           [32]c.Pointer
	X_onExitArgsPtr *X_onExitArgs
}

type X__sbuf struct {
	X_base *c.Char
	X_size c.Int
}

type X__sFILE struct {
	X_p       *c.Char
	X_r       c.Int
	X_w       c.Int
	X_flags   int16
	X_file    int16
	X_bf      X__sbuf
	X_lbfsize c.Int
	X_data    *X_reent
	X_cookie  c.Pointer
	X_read    c.Pointer
	X_write   c.Pointer
	X_seek    c.Pointer
	X_close   c.Pointer
	X_ub      X__sbuf
	X_up      *c.Char
	X_ur      c.Int
	X_ubuf    [3]c.Char
	X_nbuf    [1]c.Char
	X_lb      X__sbuf
	X_blksize c.Int
	X_offset  X_offT
	X_lock    X_flockT
	X_mbstate X_mbstateT
	X_flags2  c.Int
}
type X__FILE X__sFILE

type X_glue struct {
	X_next  *X_glue
	X_niobs c.Int
	X_iobs  *X__FILE
}

type X_rand48 struct {
	X_seed     [3]uint16
	X_mult     [3]uint16
	X_add      uint16
	X_randNext c.UlongLong
}

type X_mprec struct {
	X_result   *X_Bigint
	X_resultK  c.Int
	X_p5s      *X_Bigint
	X_freelist **X_Bigint
}

type X_miscReent struct {
	X_strtokLast     *c.Char
	X_mblenState     X_mbstateT
	X_wctombState    X_mbstateT
	X_mbtowcState    X_mbstateT
	X_l64aBuf        [8]c.Char
	X_getdateErr     c.Int
	X_mbrlenState    X_mbstateT
	X_mbrtowcState   X_mbstateT
	X_mbsrtowcsState X_mbstateT
	X_wcrtombState   X_mbstateT
	X_wcsrtombsState X_mbstateT
}

type DivT struct {
	Quot c.Int
	Rem  c.Int
}

type LdivT struct {
	Quot c.Long
	Rem  c.Long
}

type LldivT struct {
	Quot c.LongLong
	Rem  c.LongLong
}

// llgo:type C
type X__comparFnT func(c.Pointer, c.Pointer) c.Int
type FposT X_fposT
type OffT X__offT
type EspErrT c.Int
type SocRootClkT c.Int

const (
	SOC_ROOT_CLK_INT_RC_FAST  SocRootClkT = 0
	SOC_ROOT_CLK_INT_RC_SLOW  SocRootClkT = 1
	SOC_ROOT_CLK_EXT_XTAL     SocRootClkT = 2
	SOC_ROOT_CLK_EXT_XTAL32K  SocRootClkT = 3
	SOC_ROOT_CLK_INT_RC32K    SocRootClkT = 4
	SOC_ROOT_CLK_EXT_OSC_SLOW SocRootClkT = 5
)

type SocCpuClkSrcT c.Int

const (
	SOC_CPU_CLK_SRC_XTAL      SocCpuClkSrcT = 0
	SOC_CPU_CLK_SRC_PLL       SocCpuClkSrcT = 1
	SOC_CPU_CLK_SRC_RC_FAST   SocCpuClkSrcT = 2
	SOC_CPU_CLK_SRC_FLASH_PLL SocCpuClkSrcT = 3
	SOC_CPU_CLK_SRC_INVALID   SocCpuClkSrcT = 4
)

type SocRtcSlowClkSrcT c.Int

const (
	SOC_RTC_SLOW_CLK_SRC_RC_SLOW  SocRtcSlowClkSrcT = 0
	SOC_RTC_SLOW_CLK_SRC_XTAL32K  SocRtcSlowClkSrcT = 1
	SOC_RTC_SLOW_CLK_SRC_RC32K    SocRtcSlowClkSrcT = 2
	SOC_RTC_SLOW_CLK_SRC_OSC_SLOW SocRtcSlowClkSrcT = 3
	SOC_RTC_SLOW_CLK_SRC_INVALID  SocRtcSlowClkSrcT = 4
)

type SocRtcFastClkSrcT c.Int

const (
	SOC_RTC_FAST_CLK_SRC_RC_FAST  SocRtcFastClkSrcT = 0
	SOC_RTC_FAST_CLK_SRC_XTAL_D2  SocRtcFastClkSrcT = 1
	SOC_RTC_FAST_CLK_SRC_XTAL_DIV SocRtcFastClkSrcT = 1
	SOC_RTC_FAST_CLK_SRC_LP_PLL   SocRtcFastClkSrcT = 2
	SOC_RTC_FAST_CLK_SRC_INVALID  SocRtcFastClkSrcT = 3
)

type SocLpPllClkSrcT c.Int

const (
	SOC_LP_PLL_CLK_SRC_RC32K   SocLpPllClkSrcT = 0
	SOC_LP_PLL_CLK_SRC_XTAL32K SocLpPllClkSrcT = 1
	SOC_LP_PLL_CLK_SRC_INVALID SocLpPllClkSrcT = 2
)

type SocXtalFreqT c.Int

const SOC_XTAL_FREQ_32M SocXtalFreqT = 32

type SocModuleClkT c.Int

const (
	SOC_MOD_CLK_CPU      SocModuleClkT = 1
	SOC_MOD_CLK_RTC_FAST SocModuleClkT = 2
	SOC_MOD_CLK_RTC_SLOW SocModuleClkT = 3
	SOC_MOD_CLK_PLL_F48M SocModuleClkT = 4
	SOC_MOD_CLK_PLL_F64M SocModuleClkT = 5
	SOC_MOD_CLK_PLL_F96M SocModuleClkT = 6
	SOC_MOD_CLK_XTAL32K  SocModuleClkT = 7
	SOC_MOD_CLK_RC_FAST  SocModuleClkT = 8
	SOC_MOD_CLK_XTAL     SocModuleClkT = 9
	SOC_MOD_CLK_INVALID  SocModuleClkT = 10
)

type SocPeriphSystimerClkSrcT c.Int

const (
	SYSTIMER_CLK_SRC_XTAL    SocPeriphSystimerClkSrcT = 9
	SYSTIMER_CLK_SRC_RC_FAST SocPeriphSystimerClkSrcT = 8
	SYSTIMER_CLK_SRC_DEFAULT SocPeriphSystimerClkSrcT = 9
)

type SocPeriphGptimerClkSrcT c.Int

const (
	GPTIMER_CLK_SRC_PLL_F48M SocPeriphGptimerClkSrcT = 4
	GPTIMER_CLK_SRC_RC_FAST  SocPeriphGptimerClkSrcT = 8
	GPTIMER_CLK_SRC_XTAL     SocPeriphGptimerClkSrcT = 9
	GPTIMER_CLK_SRC_DEFAULT  SocPeriphGptimerClkSrcT = 4
)

type SocPeriphTgClkSrcLegacyT c.Int

const (
	TIMER_SRC_CLK_PLL_F48M SocPeriphTgClkSrcLegacyT = 4
	TIMER_SRC_CLK_XTAL     SocPeriphTgClkSrcLegacyT = 9
	TIMER_SRC_CLK_DEFAULT  SocPeriphTgClkSrcLegacyT = 4
)

type SocPeriphRmtClkSrcT c.Int

const (
	RMT_CLK_SRC_RC_FAST SocPeriphRmtClkSrcT = 8
	RMT_CLK_SRC_XTAL    SocPeriphRmtClkSrcT = 9
	RMT_CLK_SRC_DEFAULT SocPeriphRmtClkSrcT = 9
)

type SocPeriphRmtClkSrcLegacyT c.Int

const (
	RMT_BASECLK_XTAL    SocPeriphRmtClkSrcLegacyT = 9
	RMT_BASECLK_DEFAULT SocPeriphRmtClkSrcLegacyT = 9
)

type SocPeriphTemperatureSensorClkSrcT c.Int

const (
	TEMPERATURE_SENSOR_CLK_SRC_XTAL    SocPeriphTemperatureSensorClkSrcT = 9
	TEMPERATURE_SENSOR_CLK_SRC_RC_FAST SocPeriphTemperatureSensorClkSrcT = 8
	TEMPERATURE_SENSOR_CLK_SRC_DEFAULT SocPeriphTemperatureSensorClkSrcT = 9
)

type SocPeriphUartClkSrcLegacyT c.Int

const (
	UART_SCLK_PLL_F48M SocPeriphUartClkSrcLegacyT = 4
	UART_SCLK_RTC      SocPeriphUartClkSrcLegacyT = 8
	UART_SCLK_XTAL     SocPeriphUartClkSrcLegacyT = 9
	UART_SCLK_DEFAULT  SocPeriphUartClkSrcLegacyT = 4
)

type SocPeriphMcpwmTimerClkSrcT c.Int

const (
	MCPWM_TIMER_CLK_SRC_PLL96M  SocPeriphMcpwmTimerClkSrcT = 6
	MCPWM_TIMER_CLK_SRC_XTAL    SocPeriphMcpwmTimerClkSrcT = 9
	MCPWM_TIMER_CLK_SRC_DEFAULT SocPeriphMcpwmTimerClkSrcT = 6
)

type SocPeriphMcpwmCaptureClkSrcT c.Int

const (
	MCPWM_CAPTURE_CLK_SRC_PLL96M  SocPeriphMcpwmCaptureClkSrcT = 6
	MCPWM_CAPTURE_CLK_SRC_XTAL    SocPeriphMcpwmCaptureClkSrcT = 9
	MCPWM_CAPTURE_CLK_SRC_DEFAULT SocPeriphMcpwmCaptureClkSrcT = 6
)

type SocPeriphMcpwmCarrierClkSrcT c.Int

const (
	MCPWM_CARRIER_CLK_SRC_PLL96M  SocPeriphMcpwmCarrierClkSrcT = 6
	MCPWM_CARRIER_CLK_SRC_XTAL    SocPeriphMcpwmCarrierClkSrcT = 9
	MCPWM_CARRIER_CLK_SRC_DEFAULT SocPeriphMcpwmCarrierClkSrcT = 6
)

type SocPeriphI2sClkSrcT c.Int

const (
	I2S_CLK_SRC_DEFAULT  SocPeriphI2sClkSrcT = 6
	I2S_CLK_SRC_PLL_96M  SocPeriphI2sClkSrcT = 6
	I2S_CLK_SRC_PLL_64M  SocPeriphI2sClkSrcT = 5
	I2S_CLK_SRC_XTAL     SocPeriphI2sClkSrcT = 9
	I2S_CLK_SRC_EXTERNAL SocPeriphI2sClkSrcT = -1
)

type SocPeriphI2cClkSrcT c.Int

const (
	I2C_CLK_SRC_XTAL    SocPeriphI2cClkSrcT = 9
	I2C_CLK_SRC_RC_FAST SocPeriphI2cClkSrcT = 8
	I2C_CLK_SRC_DEFAULT SocPeriphI2cClkSrcT = 9
)

type SocPeriphSpiClkSrcT c.Int

const (
	SPI_CLK_SRC_DEFAULT  SocPeriphSpiClkSrcT = 4
	SPI_CLK_SRC_PLL_F48M SocPeriphSpiClkSrcT = 4
	SPI_CLK_SRC_XTAL     SocPeriphSpiClkSrcT = 9
	SPI_CLK_SRC_RC_FAST  SocPeriphSpiClkSrcT = 8
)

type SocPeriphSdmClkSrcT c.Int

const (
	SDM_CLK_SRC_XTAL     SocPeriphSdmClkSrcT = 9
	SDM_CLK_SRC_PLL_F48M SocPeriphSdmClkSrcT = 4
	SDM_CLK_SRC_DEFAULT  SocPeriphSdmClkSrcT = 4
)

type SocPeriphAnaCmprClkSrcT c.Int

const (
	ANA_CMPR_CLK_SRC_XTAL     SocPeriphAnaCmprClkSrcT = 9
	ANA_CMPR_CLK_SRC_PLL_F48M SocPeriphAnaCmprClkSrcT = 4
	ANA_CMPR_CLK_SRC_DEFAULT  SocPeriphAnaCmprClkSrcT = 4
)

type SocPeriphGlitchFilterClkSrcT c.Int

const (
	GLITCH_FILTER_CLK_SRC_XTAL     SocPeriphGlitchFilterClkSrcT = 9
	GLITCH_FILTER_CLK_SRC_PLL_F48M SocPeriphGlitchFilterClkSrcT = 4
	GLITCH_FILTER_CLK_SRC_DEFAULT  SocPeriphGlitchFilterClkSrcT = 4
)

type SocPeriphTwaiClkSrcT c.Int

const (
	TWAI_CLK_SRC_XTAL    SocPeriphTwaiClkSrcT = 9
	TWAI_CLK_SRC_DEFAULT SocPeriphTwaiClkSrcT = 9
)

type SocPeriphAdcDigiClkSrcT c.Int

const (
	ADC_DIGI_CLK_SRC_XTAL     SocPeriphAdcDigiClkSrcT = 9
	ADC_DIGI_CLK_SRC_PLL_F96M SocPeriphAdcDigiClkSrcT = 6
	ADC_DIGI_CLK_SRC_RC_FAST  SocPeriphAdcDigiClkSrcT = 8
	ADC_DIGI_CLK_SRC_DEFAULT  SocPeriphAdcDigiClkSrcT = 6
)

type SocPeriphMwdtClkSrcT c.Int

const (
	MWDT_CLK_SRC_XTAL     SocPeriphMwdtClkSrcT = 9
	MWDT_CLK_SRC_PLL_F48M SocPeriphMwdtClkSrcT = 4
	MWDT_CLK_SRC_RC_FAST  SocPeriphMwdtClkSrcT = 8
	MWDT_CLK_SRC_DEFAULT  SocPeriphMwdtClkSrcT = 9
)

type SocPeriphLedcClkSrcLegacyT c.Int

const (
	LEDC_AUTO_CLK        SocPeriphLedcClkSrcLegacyT = 0
	LEDC_USE_PLL_DIV_CLK SocPeriphLedcClkSrcLegacyT = 6
	LEDC_USE_RC_FAST_CLK SocPeriphLedcClkSrcLegacyT = 8
	LEDC_USE_XTAL_CLK    SocPeriphLedcClkSrcLegacyT = 9
	LEDC_USE_RTC8M_CLK   SocPeriphLedcClkSrcLegacyT = 8
)

type SocPeriphParlioClkSrcT c.Int

const (
	PARLIO_CLK_SRC_XTAL     SocPeriphParlioClkSrcT = 9
	PARLIO_CLK_SRC_PLL_F96M SocPeriphParlioClkSrcT = 6
	PARLIO_CLK_SRC_RC_FAST  SocPeriphParlioClkSrcT = 8
	PARLIO_CLK_SRC_EXTERNAL SocPeriphParlioClkSrcT = -1
	PARLIO_CLK_SRC_DEFAULT  SocPeriphParlioClkSrcT = 6
)

type SocPeriphMspiClkSrcT c.Int

const (
	MSPI_CLK_SRC_XTAL        SocPeriphMspiClkSrcT = 9
	MSPI_CLK_SRC_RC_FAST     SocPeriphMspiClkSrcT = 8
	MSPI_CLK_SRC_PLL_F64M    SocPeriphMspiClkSrcT = 5
	MSPI_CLK_SRC_PLL_F48M    SocPeriphMspiClkSrcT = 4
	MSPI_CLK_SRC_DEFAULT     SocPeriphMspiClkSrcT = 5
	MSPI_CLK_SRC_ROM_DEFAULT SocPeriphMspiClkSrcT = 9
)

type SocClkoutSigIdT c.Int

const (
	CLKOUT_SIG_XTAL    SocClkoutSigIdT = 5
	CLKOUT_SIG_CPU     SocClkoutSigIdT = 16
	CLKOUT_SIG_AHB     SocClkoutSigIdT = 17
	CLKOUT_SIG_APB     SocClkoutSigIdT = 18
	CLKOUT_SIG_XTAL32K SocClkoutSigIdT = 21
	CLKOUT_SIG_EXT32K  SocClkoutSigIdT = 22
	CLKOUT_SIG_RC_FAST SocClkoutSigIdT = 23
	CLKOUT_SIG_RC_32K  SocClkoutSigIdT = 24
	CLKOUT_SIG_RC_SLOW SocClkoutSigIdT = 25
	CLKOUT_SIG_INVALID SocClkoutSigIdT = 255
)

type AdcUnitT c.Int

const (
	ADC_UNIT_1 AdcUnitT = 0
	ADC_UNIT_2 AdcUnitT = 1
)

type AdcChannelT c.Int

const (
	ADC_CHANNEL_0 AdcChannelT = 0
	ADC_CHANNEL_1 AdcChannelT = 1
	ADC_CHANNEL_2 AdcChannelT = 2
	ADC_CHANNEL_3 AdcChannelT = 3
	ADC_CHANNEL_4 AdcChannelT = 4
	ADC_CHANNEL_5 AdcChannelT = 5
	ADC_CHANNEL_6 AdcChannelT = 6
	ADC_CHANNEL_7 AdcChannelT = 7
	ADC_CHANNEL_8 AdcChannelT = 8
	ADC_CHANNEL_9 AdcChannelT = 9
)

type AdcAttenT c.Int

const (
	ADC_ATTEN_DB_0   AdcAttenT = 0
	ADC_ATTEN_DB_2_5 AdcAttenT = 1
	ADC_ATTEN_DB_6   AdcAttenT = 2
	ADC_ATTEN_DB_12  AdcAttenT = 3
	ADC_ATTEN_DB_11  AdcAttenT = 3
)

type AdcBitwidthT c.Int

const (
	ADC_BITWIDTH_DEFAULT AdcBitwidthT = 0
	ADC_BITWIDTH_9       AdcBitwidthT = 9
	ADC_BITWIDTH_10      AdcBitwidthT = 10
	ADC_BITWIDTH_11      AdcBitwidthT = 11
	ADC_BITWIDTH_12      AdcBitwidthT = 12
	ADC_BITWIDTH_13      AdcBitwidthT = 13
)

type AdcUlpModeT c.Int

const (
	ADC_ULP_MODE_DISABLE AdcUlpModeT = 0
	ADC_ULP_MODE_FSM     AdcUlpModeT = 1
	ADC_ULP_MODE_RISCV   AdcUlpModeT = 2
)

type AdcDigiConvertModeT c.Int

const (
	ADC_CONV_SINGLE_UNIT_1 AdcDigiConvertModeT = 1
	ADC_CONV_SINGLE_UNIT_2 AdcDigiConvertModeT = 2
	ADC_CONV_BOTH_UNIT     AdcDigiConvertModeT = 3
	ADC_CONV_ALTER_UNIT    AdcDigiConvertModeT = 7
)

type AdcDigiOutputFormatT c.Int

const (
	ADC_DIGI_OUTPUT_FORMAT_TYPE1 AdcDigiOutputFormatT = 0
	ADC_DIGI_OUTPUT_FORMAT_TYPE2 AdcDigiOutputFormatT = 1
)

type AdcOneshotClkSrcT SocPeriphAdcDigiClkSrcT
type AdcContinuousClkSrcT SocPeriphAdcDigiClkSrcT

/**
 * @brief ADC digital controller pattern configuration
 */

type AdcDigiPatternConfigT struct {
	Atten    c.Uint8T
	Channel  c.Uint8T
	Unit     c.Uint8T
	BitWidth c.Uint8T
}
type AdcDigiIirFilterT c.Int

const (
	ADC_DIGI_IIR_FILTER_0 AdcDigiIirFilterT = 0
	ADC_DIGI_IIR_FILTER_1 AdcDigiIirFilterT = 1
)

type AdcDigiIirFilterCoeffT c.Int

const (
	ADC_DIGI_IIR_FILTER_COEFF_2  AdcDigiIirFilterCoeffT = 0
	ADC_DIGI_IIR_FILTER_COEFF_4  AdcDigiIirFilterCoeffT = 1
	ADC_DIGI_IIR_FILTER_COEFF_8  AdcDigiIirFilterCoeffT = 2
	ADC_DIGI_IIR_FILTER_COEFF_16 AdcDigiIirFilterCoeffT = 3
	ADC_DIGI_IIR_FILTER_COEFF_32 AdcDigiIirFilterCoeffT = 4
	ADC_DIGI_IIR_FILTER_COEFF_64 AdcDigiIirFilterCoeffT = 5
)

type AdcMonitorIdT c.Int

const (
	ADC_MONITOR_0 AdcMonitorIdT = 0
	ADC_MONITOR_1 AdcMonitorIdT = 1
)

type AdcMonitorModeT c.Int

const (
	ADC_MONITOR_MODE_HIGH AdcMonitorModeT = 0
	ADC_MONITOR_MODE_LOW  AdcMonitorModeT = 1
)

/**
 * @brief ADC digital controller (DMA mode) output data format.
 *        Used to analyze the acquired ADC (DMA) data.
 */

type AdcDigiOutputDataT struct {
	Unused [8]uint8
}
type AdcBitsWidthT c.Int

const (
	ADC_WIDTH_BIT_12 AdcBitsWidthT = 12
	ADC_WIDTH_MAX    AdcBitsWidthT = 13
)

type Adc1ChannelT c.Int

const (
	ADC1_CHANNEL_0   Adc1ChannelT = 0
	ADC1_CHANNEL_1   Adc1ChannelT = 1
	ADC1_CHANNEL_2   Adc1ChannelT = 2
	ADC1_CHANNEL_3   Adc1ChannelT = 3
	ADC1_CHANNEL_4   Adc1ChannelT = 4
	ADC1_CHANNEL_5   Adc1ChannelT = 5
	ADC1_CHANNEL_6   Adc1ChannelT = 6
	ADC1_CHANNEL_MAX Adc1ChannelT = 7
)

/**
 * @brief ADC DMA driver configuration
 */

type AdcDigiInitConfigS struct {
	MaxStoreBufSize c.Uint32T
	ConvNumEachIntr c.Uint32T
	Adc1ChanMask    c.Uint32T
	Adc2ChanMask    c.Uint32T
}
type AdcDigiInitConfigT AdcDigiInitConfigS

/**
 * @brief ADC digital controller settings
 */

type AdcDigiConfigurationT struct {
	ConvLimitEn  bool
	ConvLimitNum c.Uint32T
	PatternNum   c.Uint32T
	AdcPattern   *AdcDigiPatternConfigT
	SampleFreqHz c.Uint32T
	ConvMode     AdcDigiConvertModeT
	Format       AdcDigiOutputFormatT
}

// llgo:type C
type IntrHandlerT func(c.Pointer)

type IntrHandleDataT struct {
	Unused [8]uint8
}
type IntrHandleT *IntrHandleDataT
type EspIntrCpuAffinityT c.Int

const (
	ESP_INTR_CPU_AFFINITY_AUTO EspIntrCpuAffinityT = 0
	ESP_INTR_CPU_AFFINITY_0    EspIntrCpuAffinityT = 1
	ESP_INTR_CPU_AFFINITY_1    EspIntrCpuAffinityT = 2
)

type DmaDescriptorS struct {
	Unused [8]uint8
}
type DmaDescriptorT DmaDescriptorS
type DmaDescriptorAlign4T DmaDescriptorT

type DmaDescriptorAlign8S struct {
	Unused [8]uint8
}
type DmaDescriptorAlign8T DmaDescriptorAlign8S
type AdcHalWorkModeT c.Int

const (
	ADC_HAL_SINGLE_READ_MODE     AdcHalWorkModeT = 0
	ADC_HAL_CONTINUOUS_READ_MODE AdcHalWorkModeT = 1
	ADC_HAL_PWDET_MODE           AdcHalWorkModeT = 2
	ADC_HAL_LP_MODE              AdcHalWorkModeT = 3
)

/** Group: Configure Register */
/** Type of saradc_ctrl register
 *  digital saradc configure register
 */

type ApbSaradcCtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_ctrl2 register
 *  digital saradc configure register
 */

type ApbSaradcCtrl2RegT struct {
	Val c.Uint32T
}

/** Type of saradc_filter_ctrl1 register
 *  digital saradc configure register
 */

type ApbSaradcFilterCtrl1RegT struct {
	Val c.Uint32T
}

/** Type of saradc_fsm_wait register
 *  digital saradc configure register
 */

type ApbSaradcFsmWaitRegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar1_status register
 *  digital saradc configure register
 */

type ApbSaradcSar1StatusRegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar2_status register
 *  digital saradc configure register
 */

type ApbSaradcSar2StatusRegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar_patt_tab1 register
 *  digital saradc configure register
 */

type ApbSaradcSarPattTab1RegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar_patt_tab2 register
 *  digital saradc configure register
 */

type ApbSaradcSarPattTab2RegT struct {
	Val c.Uint32T
}

/** Type of saradc_onetime_sample register
 *  digital saradc configure register
 */

type ApbSaradcOnetimeSampleRegT struct {
	Val c.Uint32T
}

/** Type of saradc_arb_ctrl register
 *  digital saradc configure register
 */

type ApbSaradcArbCtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_filter_ctrl0 register
 *  digital saradc configure register
 */

type ApbSaradcFilterCtrl0RegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar1data_status register
 *  digital saradc configure register
 */

type ApbSaradcSar1dataStatusRegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar2data_status register
 *  digital saradc configure register
 */

type ApbSaradcSar2dataStatusRegT struct {
	Val c.Uint32T
}

/** Type of saradc_thres0_ctrl register
 *  digital saradc configure register
 */

type ApbSaradcThres0CtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_thres1_ctrl register
 *  digital saradc configure register
 */

type ApbSaradcThres1CtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_thres_ctrl register
 *  digital saradc configure register
 */

type ApbSaradcThresCtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_int_ena register
 *  digital saradc int register
 */

type ApbSaradcIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of saradc_int_raw register
 *  digital saradc int register
 */

type ApbSaradcIntRawRegT struct {
	Val c.Uint32T
}

/** Type of saradc_int_st register
 *  digital saradc int register
 */

type ApbSaradcIntStRegT struct {
	Val c.Uint32T
}

/** Type of saradc_int_clr register
 *  digital saradc int register
 */

type ApbSaradcIntClrRegT struct {
	Val c.Uint32T
}

/** Type of saradc_dma_conf register
 *  digital saradc configure register
 */

type ApbSaradcDmaConfRegT struct {
	Val c.Uint32T
}

/** Type of saradc_clkm_conf register
 *  digital saradc configure register
 */

type ApbSaradcClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of saradc_apb_tsens_ctrl register
 *  digital tsens configure register
 */

type ApbSaradcApbTsensCtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_tsens_ctrl2 register
 *  digital tsens configure register
 */

type ApbSaradcTsensCtrl2RegT struct {
	Val c.Uint32T
}

/** Type of saradc_cali register
 *  digital saradc configure register
 */

type ApbSaradcCaliRegT struct {
	Val c.Uint32T
}

/** Type of tsens_wake register
 *  digital tsens configure register
 */

type ApbTsensWakeRegT struct {
	Val c.Uint32T
}

/** Type of tsens_sample register
 *  digital tsens configure register
 */

type ApbTsensSampleRegT struct {
	Val c.Uint32T
}

/** Type of saradc_ctrl_date register
 *  version
 */

type ApbSaradcCtrlDateRegT struct {
	Val c.Uint32T
}

type ApbSaradcDevT struct {
	SaradcCtrl           ApbSaradcCtrlRegT
	SaradcCtrl2          ApbSaradcCtrl2RegT
	SaradcFilterCtrl1    ApbSaradcFilterCtrl1RegT
	SaradcFsmWait        ApbSaradcFsmWaitRegT
	SaradcSar1Status     ApbSaradcSar1StatusRegT
	SaradcSar2Status     ApbSaradcSar2StatusRegT
	SaradcSarPattTab1    ApbSaradcSarPattTab1RegT
	SaradcSarPattTab2    ApbSaradcSarPattTab2RegT
	SaradcOnetimeSample  ApbSaradcOnetimeSampleRegT
	SaradcArbCtrl        ApbSaradcArbCtrlRegT
	SaradcFilterCtrl0    ApbSaradcFilterCtrl0RegT
	SaradcSar1dataStatus ApbSaradcSar1dataStatusRegT
	SaradcSar2dataStatus ApbSaradcSar2dataStatusRegT
	SaradcThres0Ctrl     ApbSaradcThres0CtrlRegT
	SaradcThres1Ctrl     ApbSaradcThres1CtrlRegT
	SaradcThresCtrl      ApbSaradcThresCtrlRegT
	SaradcIntEna         ApbSaradcIntEnaRegT
	SaradcIntRaw         ApbSaradcIntRawRegT
	SaradcIntSt          ApbSaradcIntStRegT
	SaradcIntClr         ApbSaradcIntClrRegT
	SaradcDmaConf        ApbSaradcDmaConfRegT
	SaradcClkmConf       ApbSaradcClkmConfRegT
	SaradcApbTsensCtrl   ApbSaradcApbTsensCtrlRegT
	SaradcTsensCtrl2     ApbSaradcTsensCtrl2RegT
	SaradcCali           ApbSaradcCaliRegT
	TsensWake            ApbTsensWakeRegT
	TsensSample          ApbTsensSampleRegT
	Reserved06c          [228]c.Uint32T
	SaradcCtrlDate       ApbSaradcCtrlDateRegT
}

/** Group: Configuration Register */
/** Type of uart0_conf register
 *  UART0 configuration register
 */

type PcrUart0ConfRegT struct {
	Val c.Uint32T
}

/** Type of uart0_sclk_conf register
 *  UART0_SCLK configuration register
 */

type PcrUart0SclkConfRegT struct {
	Val c.Uint32T
}

/** Type of uart0_pd_ctrl register
 *  UART0 power control register
 */

type PcrUart0PdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of uart1_conf register
 *  UART1 configuration register
 */

type PcrUart1ConfRegT struct {
	Val c.Uint32T
}

/** Type of uart1_sclk_conf register
 *  UART1_SCLK configuration register
 */

type PcrUart1SclkConfRegT struct {
	Val c.Uint32T
}

/** Type of uart1_pd_ctrl register
 *  UART1 power control register
 */

type PcrUart1PdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of mspi_conf register
 *  MSPI configuration register
 */

type PcrMspiConfRegT struct {
	Val c.Uint32T
}

/** Type of mspi_clk_conf register
 *  MSPI_CLK configuration register
 */

type PcrMspiClkConfRegT struct {
	Val c.Uint32T
}

/** Type of i2c_conf register
 *  I2C configuration register
 */

type PcrI2cConfRegT struct {
	Val c.Uint32T
}

/** Type of i2c_sclk_conf register
 *  I2C_SCLK configuration register
 */

type PcrI2cSclkConfRegT struct {
	Val c.Uint32T
}

/** Type of uhci_conf register
 *  UHCI configuration register
 */

type PcrUhciConfRegT struct {
	Val c.Uint32T
}

/** Type of rmt_conf register
 *  RMT configuration register
 */

type PcrRmtConfRegT struct {
	Val c.Uint32T
}

/** Type of rmt_sclk_conf register
 *  RMT_SCLK configuration register
 */

type PcrRmtSclkConfRegT struct {
	Val c.Uint32T
}

/** Type of ledc_conf register
 *  LEDC configuration register
 */

type PcrLedcConfRegT struct {
	Val c.Uint32T
}

/** Type of ledc_sclk_conf register
 *  LEDC_SCLK configuration register
 */

type PcrLedcSclkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup0_conf register
 *  TIMERGROUP0 configuration register
 */

type PcrTimergroup0ConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup0_timer_clk_conf register
 *  TIMERGROUP0_TIMER_CLK configuration register
 */

type PcrTimergroup0TimerClkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup0_wdt_clk_conf register
 *  TIMERGROUP0_WDT_CLK configuration register
 */

type PcrTimergroup0WdtClkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup1_conf register
 *  TIMERGROUP1 configuration register
 */

type PcrTimergroup1ConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup1_timer_clk_conf register
 *  TIMERGROUP1_TIMER_CLK configuration register
 */

type PcrTimergroup1TimerClkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup1_wdt_clk_conf register
 *  TIMERGROUP1_WDT_CLK configuration register
 */

type PcrTimergroup1WdtClkConfRegT struct {
	Val c.Uint32T
}

/** Type of systimer_conf register
 *  SYSTIMER configuration register
 */

type PcrSystimerConfRegT struct {
	Val c.Uint32T
}

/** Type of systimer_func_clk_conf register
 *  SYSTIMER_FUNC_CLK configuration register
 */

type PcrSystimerFuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of twai0_conf register
 *  TWAI0 configuration register
 */

type PcrTwai0ConfRegT struct {
	Val c.Uint32T
}

/** Type of twai0_func_clk_conf register
 *  TWAI0_FUNC_CLK configuration register
 */

type PcrTwai0FuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_conf register
 *  I2S configuration register
 */

type PcrI2sConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_tx_clkm_conf register
 *  I2S_TX_CLKM configuration register
 */

type PcrI2sTxClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_tx_clkm_div_conf register
 *  I2S_TX_CLKM_DIV configuration register
 */

type PcrI2sTxClkmDivConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_rx_clkm_conf register
 *  I2S_RX_CLKM configuration register
 */

type PcrI2sRxClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_rx_clkm_div_conf register
 *  I2S_RX_CLKM_DIV configuration register
 */

type PcrI2sRxClkmDivConfRegT struct {
	Val c.Uint32T
}

/** Type of saradc_conf register
 *  SARADC configuration register
 */

type PcrSaradcConfRegT struct {
	Val c.Uint32T
}

/** Type of saradc_clkm_conf register
 *  SARADC_CLKM configuration register
 */

type PcrSaradcClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of tsens_clk_conf register
 *  TSENS_CLK configuration register
 */

type PcrTsensClkConfRegT struct {
	Val c.Uint32T
}

/** Type of usb_device_conf register
 *  USB_DEVICE configuration register
 */

type PcrUsbDeviceConfRegT struct {
	Val c.Uint32T
}

/** Type of intmtx_conf register
 *  INTMTX configuration register
 */

type PcrIntmtxConfRegT struct {
	Val c.Uint32T
}

/** Type of pcnt_conf register
 *  PCNT configuration register
 */

type PcrPcntConfRegT struct {
	Val c.Uint32T
}

/** Type of etm_conf register
 *  ETM configuration register
 */

type PcrEtmConfRegT struct {
	Val c.Uint32T
}

/** Type of pwm_conf register
 *  PWM configuration register
 */

type PcrPwmConfRegT struct {
	Val c.Uint32T
}

/** Type of pwm_clk_conf register
 *  PWM_CLK configuration register
 */

type PcrPwmClkConfRegT struct {
	Val c.Uint32T
}

/** Type of parl_io_conf register
 *  PARL_IO configuration register
 */

type PcrParlIoConfRegT struct {
	Val c.Uint32T
}

/** Type of parl_clk_rx_conf register
 *  PARL_CLK_RX configuration register
 */

type PcrParlClkRxConfRegT struct {
	Val c.Uint32T
}

/** Type of parl_clk_tx_conf register
 *  PARL_CLK_TX configuration register
 */

type PcrParlClkTxConfRegT struct {
	Val c.Uint32T
}

/** Type of pvt_monitor_conf register
 *  PVT_MONITOR configuration register
 */

type PcrPvtMonitorConfRegT struct {
	Val c.Uint32T
}

/** Type of pvt_monitor_func_clk_conf register
 *  PVT_MONITOR function clock configuration register
 */

type PcrPvtMonitorFuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of gdma_conf register
 *  GDMA configuration register
 */

type PcrGdmaConfRegT struct {
	Val c.Uint32T
}

/** Type of spi2_conf register
 *  SPI2 configuration register
 */

type PcrSpi2ConfRegT struct {
	Val c.Uint32T
}

/** Type of spi2_clkm_conf register
 *  SPI2_CLKM configuration register
 */

type PcrSpi2ClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of aes_conf register
 *  AES configuration register
 */

type PcrAesConfRegT struct {
	Val c.Uint32T
}

/** Type of sha_conf register
 *  SHA configuration register
 */

type PcrShaConfRegT struct {
	Val c.Uint32T
}

/** Type of rsa_conf register
 *  RSA configuration register
 */

type PcrRsaConfRegT struct {
	Val c.Uint32T
}

/** Type of rsa_pd_ctrl register
 *  RSA power control register
 */

type PcrRsaPdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of ecc_conf register
 *  ECC configuration register
 */

type PcrEccConfRegT struct {
	Val c.Uint32T
}

/** Type of ecc_pd_ctrl register
 *  ECC power control register
 */

type PcrEccPdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of ds_conf register
 *  DS configuration register
 */

type PcrDsConfRegT struct {
	Val c.Uint32T
}

/** Type of hmac_conf register
 *  HMAC configuration register
 */

type PcrHmacConfRegT struct {
	Val c.Uint32T
}

/** Type of ecdsa_conf register
 *  ECDSA configuration register
 */

type PcrEcdsaConfRegT struct {
	Val c.Uint32T
}

/** Type of iomux_conf register
 *  IOMUX configuration register
 */

type PcrIomuxConfRegT struct {
	Val c.Uint32T
}

/** Type of iomux_clk_conf register
 *  IOMUX_CLK configuration register
 */

type PcrIomuxClkConfRegT struct {
	Val c.Uint32T
}

/** Type of mem_monitor_conf register
 *  MEM_MONITOR configuration register
 */

type PcrMemMonitorConfRegT struct {
	Val c.Uint32T
}

/** Type of regdma_conf register
 *  REGDMA configuration register
 */

type PcrRegdmaConfRegT struct {
	Val c.Uint32T
}

/** Type of trace_conf register
 *  TRACE configuration register
 */

type PcrTraceConfRegT struct {
	Val c.Uint32T
}

/** Type of assist_conf register
 *  ASSIST configuration register
 */

type PcrAssistConfRegT struct {
	Val c.Uint32T
}

/** Type of cache_conf register
 *  CACHE configuration register
 */

type PcrCacheConfRegT struct {
	Val c.Uint32T
}

/** Type of modem_conf register
 *  MODEM_APB configuration register
 */

type PcrModemConfRegT struct {
	Val c.Uint32T
}

/** Type of timeout_conf register
 *  TIMEOUT configuration register
 */

type PcrTimeoutConfRegT struct {
	Val c.Uint32T
}

/** Type of sysclk_conf register
 *  SYSCLK configuration register
 */

type PcrSysclkConfRegT struct {
	Val c.Uint32T
}

/** Type of cpu_waiti_conf register
 *  CPU_WAITI configuration register
 */

type PcrCpuWaitiConfRegT struct {
	Val c.Uint32T
}

/** Type of cpu_freq_conf register
 *  CPU_FREQ configuration register
 */

type PcrCpuFreqConfRegT struct {
	Val c.Uint32T
}

/** Type of ahb_freq_conf register
 *  AHB_FREQ configuration register
 */

type PcrAhbFreqConfRegT struct {
	Val c.Uint32T
}

/** Type of apb_freq_conf register
 *  APB_FREQ configuration register
 */

type PcrApbFreqConfRegT struct {
	Val c.Uint32T
}

/** Type of pll_div_clk_en register
 *  SPLL DIV clock-gating configuration register
 */

type PcrPllDivClkEnRegT struct {
	Val c.Uint32T
}

/** Type of ctrl_clk_out_en register
 *  CLK_OUT_EN configuration register
 */

type PcrCtrlClkOutEnRegT struct {
	Val c.Uint32T
}

/** Type of ctrl_tick_conf register
 *  TICK configuration register
 */

type PcrCtrlTickConfRegT struct {
	Val c.Uint32T
}

/** Type of ctrl_32k_conf register
 *  32KHz clock configuration register
 */

type PcrCtrl32kConfRegT struct {
	Val c.Uint32T
}

/** Type of sram_power_conf_0 register
 *  HP SRAM/ROM configuration register
 */

type PcrSramPowerConf0RegT struct {
	Val c.Uint32T
}

/** Type of sram_power_conf_1 register
 *  HP SRAM/ROM configuration register
 */

type PcrSramPowerConf1RegT struct {
	Val c.Uint32T
}

/** Type of sec_conf register
 *  xxxx
 */

type PcrSecConfRegT struct {
	Val c.Uint32T
}

/** Type of adc_inv_phase_conf register
 *  xxxx
 */

type PcrAdcInvPhaseConfRegT struct {
	Val c.Uint32T
}

/** Type of sdm_inv_phase_conf register
 *  xxxx
 */

type PcrSdmInvPhaseConfRegT struct {
	Val c.Uint32T
}

/** Type of bus_clk_update register
 *  xxxx
 */

type PcrBusClkUpdateRegT struct {
	Val c.Uint32T
}

/** Type of sar_clk_div register
 *  xxxx
 */

type PcrSarClkDivRegT struct {
	Val c.Uint32T
}

/** Type of pwdet_sar_clk_conf register
 *  xxxx
 */

type PcrPwdetSarClkConfRegT struct {
	Val c.Uint32T
}

/** Type of reset_event_bypass register
 *  reset event bypass backdoor configuration register
 */

type PcrResetEventBypassRegT struct {
	Val c.Uint32T
}

/** Type of clock_gate register
 *  PCR clock gating configure register
 */

type PcrClockGateRegT struct {
	Val c.Uint32T
}

/** Group: Frequency Statistics Register */
/** Type of sysclk_freq_query_0 register
 *  SYSCLK frequency query 0 register
 */

type PcrSysclkFreqQuery0RegT struct {
	Val c.Uint32T
}

/** Group: FPGA Debug Register */
/** Type of fpga_debug register
 *  fpga debug register
 */

type PcrFpgaDebugRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  Date register.
 */

type PcrDateRegT struct {
	Val c.Uint32T
}

/**
 * @brief The struct of I2C configuration registers
 */

type PcrI2cRegT struct {
	I2cConf     PcrI2cConfRegT
	I2cSclkConf PcrI2cSclkConfRegT
}

type PcrDevT struct {
	Uart0Conf               PcrUart0ConfRegT
	Uart0SclkConf           PcrUart0SclkConfRegT
	Uart0PdCtrl             PcrUart0PdCtrlRegT
	Uart1Conf               PcrUart1ConfRegT
	Uart1SclkConf           PcrUart1SclkConfRegT
	Uart1PdCtrl             PcrUart1PdCtrlRegT
	MspiConf                PcrMspiConfRegT
	MspiClkConf             PcrMspiClkConfRegT
	I2c                     [2]PcrI2cRegT
	UhciConf                PcrUhciConfRegT
	RmtConf                 PcrRmtConfRegT
	RmtSclkConf             PcrRmtSclkConfRegT
	LedcConf                PcrLedcConfRegT
	LedcSclkConf            PcrLedcSclkConfRegT
	Timergroup0Conf         PcrTimergroup0ConfRegT
	Timergroup0TimerClkConf PcrTimergroup0TimerClkConfRegT
	Timergroup0WdtClkConf   PcrTimergroup0WdtClkConfRegT
	Timergroup1Conf         PcrTimergroup1ConfRegT
	Timergroup1TimerClkConf PcrTimergroup1TimerClkConfRegT
	Timergroup1WdtClkConf   PcrTimergroup1WdtClkConfRegT
	SystimerConf            PcrSystimerConfRegT
	SystimerFuncClkConf     PcrSystimerFuncClkConfRegT
	Twai0Conf               PcrTwai0ConfRegT
	Twai0FuncClkConf        PcrTwai0FuncClkConfRegT
	I2sConf                 PcrI2sConfRegT
	I2sTxClkmConf           PcrI2sTxClkmConfRegT
	I2sTxClkmDivConf        PcrI2sTxClkmDivConfRegT
	I2sRxClkmConf           PcrI2sRxClkmConfRegT
	I2sRxClkmDivConf        PcrI2sRxClkmDivConfRegT
	SaradcConf              PcrSaradcConfRegT
	SaradcClkmConf          PcrSaradcClkmConfRegT
	TsensClkConf            PcrTsensClkConfRegT
	UsbDeviceConf           PcrUsbDeviceConfRegT
	IntmtxConf              PcrIntmtxConfRegT
	PcntConf                PcrPcntConfRegT
	EtmConf                 PcrEtmConfRegT
	PwmConf                 PcrPwmConfRegT
	PwmClkConf              PcrPwmClkConfRegT
	ParlIoConf              PcrParlIoConfRegT
	ParlClkRxConf           PcrParlClkRxConfRegT
	ParlClkTxConf           PcrParlClkTxConfRegT
	PvtMonitorConf          PcrPvtMonitorConfRegT
	PvtMonitorFuncClkConf   PcrPvtMonitorFuncClkConfRegT
	GdmaConf                PcrGdmaConfRegT
	Spi2Conf                PcrSpi2ConfRegT
	Spi2ClkmConf            PcrSpi2ClkmConfRegT
	AesConf                 PcrAesConfRegT
	ShaConf                 PcrShaConfRegT
	RsaConf                 PcrRsaConfRegT
	RsaPdCtrl               PcrRsaPdCtrlRegT
	EccConf                 PcrEccConfRegT
	EccPdCtrl               PcrEccPdCtrlRegT
	DsConf                  PcrDsConfRegT
	HmacConf                PcrHmacConfRegT
	EcdsaConf               PcrEcdsaConfRegT
	IomuxConf               PcrIomuxConfRegT
	IomuxClkConf            PcrIomuxClkConfRegT
	MemMonitorConf          PcrMemMonitorConfRegT
	RegdmaConf              PcrRegdmaConfRegT
	TraceConf               PcrTraceConfRegT
	AssistConf              PcrAssistConfRegT
	CacheConf               PcrCacheConfRegT
	ModemConf               PcrModemConfRegT
	TimeoutConf             PcrTimeoutConfRegT
	SysclkConf              PcrSysclkConfRegT
	CpuWaitiConf            PcrCpuWaitiConfRegT
	CpuFreqConf             PcrCpuFreqConfRegT
	AhbFreqConf             PcrAhbFreqConfRegT
	ApbFreqConf             PcrApbFreqConfRegT
	SysclkFreqQuery0        PcrSysclkFreqQuery0RegT
	PllDivClkEn             PcrPllDivClkEnRegT
	CtrlClkOutEn            PcrCtrlClkOutEnRegT
	CtrlTickConf            PcrCtrlTickConfRegT
	Ctrl32kConf             PcrCtrl32kConfRegT
	SramPowerConf0          PcrSramPowerConf0RegT
	SramPowerConf1          PcrSramPowerConf1RegT
	SecConf                 PcrSecConfRegT
	AdcInvPhaseConf         PcrAdcInvPhaseConfRegT
	SdmInvPhaseConf         PcrSdmInvPhaseConfRegT
	BusClkUpdate            PcrBusClkUpdateRegT
	SarClkDiv               PcrSarClkDivRegT
	PwdetSarClkConf         PcrPwdetSarClkConfRegT
	Reserved154             [935]c.Uint32T
	ResetEventBypass        PcrResetEventBypassRegT
	FpgaDebug               PcrFpgaDebugRegT
	ClockGate               PcrClockGateRegT
	Date                    PcrDateRegT
}
type SarCtrlLlPowerT c.Int

const (
	SAR_CTRL_LL_POWER_FSM SarCtrlLlPowerT = 0
	SAR_CTRL_LL_POWER_ON  SarCtrlLlPowerT = 1
	SAR_CTRL_LL_POWER_OFF SarCtrlLlPowerT = 2
)

type AdcLlPowerT c.Int

const (
	ADC_LL_POWER_BY_FSM AdcLlPowerT = 0
	ADC_LL_POWER_SW_ON  AdcLlPowerT = 1
	ADC_LL_POWER_SW_OFF AdcLlPowerT = 2
)

type AdcLlControllerT c.Int

const ADC_LL_CTRL_DIG AdcLlControllerT = 0

type AdcLlDigiConvertModeT c.Int

const ADC_LL_DIGI_CONV_ONLY_ADC1 AdcLlDigiConvertModeT = 0

type AdcLlDigiPatternTableT struct {
	Unused [8]uint8
}
type GdmaTriggerPeripheralT c.Int

const (
	GDMA_TRIG_PERIPH_M2M    GdmaTriggerPeripheralT = 0
	GDMA_TRIG_PERIPH_UHCI   GdmaTriggerPeripheralT = 1
	GDMA_TRIG_PERIPH_SPI    GdmaTriggerPeripheralT = 2
	GDMA_TRIG_PERIPH_I2S    GdmaTriggerPeripheralT = 3
	GDMA_TRIG_PERIPH_AES    GdmaTriggerPeripheralT = 4
	GDMA_TRIG_PERIPH_SHA    GdmaTriggerPeripheralT = 5
	GDMA_TRIG_PERIPH_ADC    GdmaTriggerPeripheralT = 6
	GDMA_TRIG_PERIPH_DAC    GdmaTriggerPeripheralT = 7
	GDMA_TRIG_PERIPH_LCD    GdmaTriggerPeripheralT = 8
	GDMA_TRIG_PERIPH_CAM    GdmaTriggerPeripheralT = 9
	GDMA_TRIG_PERIPH_RMT    GdmaTriggerPeripheralT = 10
	GDMA_TRIG_PERIPH_PARLIO GdmaTriggerPeripheralT = 11
	GDMA_TRIG_PERIPH_I3C    GdmaTriggerPeripheralT = 12
)

type GdmaChannelDirectionT c.Int

const (
	GDMA_CHANNEL_DIRECTION_TX GdmaChannelDirectionT = 0
	GDMA_CHANNEL_DIRECTION_RX GdmaChannelDirectionT = 1
)

type GdmaEtmEventTypeT c.Int

const (
	GDMA_ETM_EVENT_EOF GdmaEtmEventTypeT = 0
	GDMA_ETM_EVENT_MAX GdmaEtmEventTypeT = 1
)

type GdmaEtmTaskTypeT c.Int

const (
	GDMA_ETM_TASK_START GdmaEtmTaskTypeT = 0
	GDMA_ETM_TASK_MAX   GdmaEtmTaskTypeT = 1
)

/** Group: Interrupt Registers */
/** Type of in_int_raw_chn register
 *  Raw status interrupt of channel 0
 */

type GdmaInIntRawChnRegT struct {
	Val c.Uint32T
}

/** Type of in_int_st_chn register
 *  Masked interrupt of channel 0
 */

type GdmaInIntStChnRegT struct {
	Val c.Uint32T
}

/** Type of in_int_ena_chn register
 *  Interrupt enable bits of channel 0
 */

type GdmaInIntEnaChnRegT struct {
	Val c.Uint32T
}

/** Type of in_int_clr_chn register
 *  Interrupt clear bits of channel 0
 */

type GdmaInIntClrChnRegT struct {
	Val c.Uint32T
}

/** Type of out_int_raw_chn register
 *  Raw status interrupt of channel 0
 */

type GdmaOutIntRawChnRegT struct {
	Val c.Uint32T
}

/** Type of out_int_st_chn register
 *  Masked interrupt of channel 0
 */

type GdmaOutIntStChnRegT struct {
	Val c.Uint32T
}

/** Type of out_int_ena_chn register
 *  Interrupt enable bits of channel 0
 */

type GdmaOutIntEnaChnRegT struct {
	Val c.Uint32T
}

/** Type of out_int_clr_chn register
 *  Interrupt clear bits of channel 0
 */

type GdmaOutIntClrChnRegT struct {
	Val c.Uint32T
}

/** Group: Debug Registers */
/** Type of ahb_test register
 *  reserved
 */

type GdmaAhbTestRegT struct {
	Val c.Uint32T
}

/** Group: Configuration Registers */
/** Type of misc_conf register
 *  MISC register
 */

type GdmaMiscConfRegT struct {
	Val c.Uint32T
}

/** Type of in_conf0_chn register
 *  Configure 0 register of Rx channel 0
 */

type GdmaInConf0ChnRegT struct {
	Val c.Uint32T
}

/** Type of in_conf1_chn register
 *  Configure 1 register of Rx channel 0
 */

type GdmaInConf1ChnRegT struct {
	Val c.Uint32T
}

/** Type of in_pop_chn register
 *  Pop control register of Rx channel 0
 */

type GdmaInPopChnRegT struct {
	Val c.Uint32T
}

/** Type of in_link_chn register
 *  Link descriptor configure and control register of Rx channel 0
 */

type GdmaInLinkChnRegT struct {
	Val c.Uint32T
}

/** Type of out_conf0_chn register
 *  Configure 0 register of Tx channel 0
 */

type GdmaOutConf0ChnRegT struct {
	Val c.Uint32T
}

/** Type of out_conf1_chn register
 *  Configure 1 register of Tx channel 0
 */

type GdmaOutConf1ChnRegT struct {
	Val c.Uint32T
}

/** Type of out_push_chn register
 *  Push control register of Rx channel 0
 */

type GdmaOutPushChnRegT struct {
	Val c.Uint32T
}

/** Type of out_link_chn register
 *  Link descriptor configure and control register of Tx channel 0
 */

type GdmaOutLinkChnRegT struct {
	Val c.Uint32T
}

/** Group: Version Registers */
/** Type of date register
 *  Version control register
 */

type GdmaDateRegT struct {
	Val c.Uint32T
}

/** Group: Status Registers */
/** Type of infifo_status_chn register
 *  Receive FIFO status of Rx channel 0
 */

type GdmaInfifoStatusChnRegT struct {
	Val c.Uint32T
}

/** Type of in_state_chn register
 *  Receive status of Rx channel 0
 */

type GdmaInStateChnRegT struct {
	Val c.Uint32T
}

/** Type of in_suc_eof_des_addr_chn register
 *  Inlink descriptor address when EOF occurs of Rx channel 0
 */

type GdmaInSucEofDesAddrChnRegT struct {
	Val c.Uint32T
}

/** Type of in_err_eof_des_addr_chn register
 *  Inlink descriptor address when errors occur of Rx channel 0
 */

type GdmaInErrEofDesAddrChnRegT struct {
	Val c.Uint32T
}

/** Type of in_dscr_chn register
 *  Current inlink descriptor address of Rx channel 0
 */

type GdmaInDscrChnRegT struct {
	Val c.Uint32T
}

/** Type of in_dscr_bf0_chn register
 *  The last inlink descriptor address of Rx channel 0
 */

type GdmaInDscrBf0ChnRegT struct {
	Val c.Uint32T
}

/** Type of in_dscr_bf1_chn register
 *  The second-to-last inlink descriptor address of Rx channel 0
 */

type GdmaInDscrBf1ChnRegT struct {
	Val c.Uint32T
}

/** Type of outfifo_status_chn register
 *  Transmit FIFO status of Tx channel 0
 */

type GdmaOutfifoStatusChnRegT struct {
	Val c.Uint32T
}

/** Type of out_state_chn register
 *  Transmit status of Tx channel 0
 */

type GdmaOutStateChnRegT struct {
	Val c.Uint32T
}

/** Type of out_eof_des_addr_chn register
 *  Outlink descriptor address when EOF occurs of Tx channel 0
 */

type GdmaOutEofDesAddrChnRegT struct {
	Val c.Uint32T
}

/** Type of out_eof_bfr_des_addr_chn register
 *  The last outlink descriptor address when EOF occurs of Tx channel 0
 */

type GdmaOutEofBfrDesAddrChnRegT struct {
	Val c.Uint32T
}

/** Type of out_dscr_chn register
 *  Current inlink descriptor address of Tx channel 0
 */

type GdmaOutDscrChnRegT struct {
	Val c.Uint32T
}

/** Type of out_dscr_bf0_chn register
 *  The last inlink descriptor address of Tx channel 0
 */

type GdmaOutDscrBf0ChnRegT struct {
	Val c.Uint32T
}

/** Type of out_dscr_bf1_chn register
 *  The second-to-last inlink descriptor address of Tx channel 0
 */

type GdmaOutDscrBf1ChnRegT struct {
	Val c.Uint32T
}

/** Group: Priority Registers */
/** Type of in_pri_chn register
 *  Priority register of Rx channel 0
 */

type GdmaInPriChnRegT struct {
	Val c.Uint32T
}

/** Type of out_pri_chn register
 *  Priority register of Tx channel 0.
 */

type GdmaOutPriChnRegT struct {
	Val c.Uint32T
}

/** Group: Peripheral Select Registers */
/** Type of in_peri_sel_chn register
 *  Peripheral selection of Rx channel 0
 */

type GdmaInPeriSelChnRegT struct {
	Val c.Uint32T
}

/** Type of out_peri_sel_chn register
 *  Peripheral selection of Tx channel 0
 */

type GdmaOutPeriSelChnRegT struct {
	Val c.Uint32T
}

type GdmaInIntChnRegT struct {
	Raw GdmaInIntRawChnRegT
	St  GdmaInIntStChnRegT
	Ena GdmaInIntEnaChnRegT
	Clr GdmaInIntClrChnRegT
}

type GdmaOutIntChnRegT struct {
	Raw GdmaOutIntRawChnRegT
	St  GdmaOutIntStChnRegT
	Ena GdmaOutIntEnaChnRegT
	Clr GdmaOutIntClrChnRegT
}

type GdmaInChnRegT struct {
	InConf0         GdmaInConf0ChnRegT
	InConf1         GdmaInConf1ChnRegT
	InfifoStatus    GdmaInfifoStatusChnRegT
	InPop           GdmaInPopChnRegT
	InLink          GdmaInLinkChnRegT
	InState         GdmaInStateChnRegT
	InSucEofDesAddr GdmaInSucEofDesAddrChnRegT
	InErrEofDesAddr GdmaInErrEofDesAddrChnRegT
	InDscr          GdmaInDscrChnRegT
	InDscrBf0       GdmaInDscrBf0ChnRegT
	InDscrBf1       GdmaInDscrBf1ChnRegT
	InPri           GdmaInPriChnRegT
	InPeriSel       GdmaInPeriSelChnRegT
}

type GdmaOutChnRegT struct {
	OutConf0         GdmaOutConf0ChnRegT
	OutConf1         GdmaOutConf1ChnRegT
	OutfifoStatus    GdmaOutfifoStatusChnRegT
	OutPush          GdmaOutPushChnRegT
	OutLink          GdmaOutLinkChnRegT
	OutState         GdmaOutStateChnRegT
	OutEofDesAddr    GdmaOutEofDesAddrChnRegT
	OutEofBfrDesAddr GdmaOutEofBfrDesAddrChnRegT
	OutDscr          GdmaOutDscrChnRegT
	OutDscrBf0       GdmaOutDscrBf0ChnRegT
	OutDscrBf1       GdmaOutDscrBf1ChnRegT
	OutPri           GdmaOutPriChnRegT
	OutPeriSel       GdmaOutPeriSelChnRegT
}

type GdmaChnRegT struct {
	In          GdmaInChnRegT
	ReservedIn  [11]c.Uint32T
	Out         GdmaOutChnRegT
	ReservedOut [11]c.Uint32T
}

type GdmaDevS struct {
	InIntr      [3]GdmaInIntChnRegT
	OutIntr     [3]GdmaOutIntChnRegT
	AhbTest     GdmaAhbTestRegT
	MiscConf    GdmaMiscConfRegT
	Date        GdmaDateRegT
	Reserved06c c.Uint32T
	Channel     [3]GdmaChnRegT
}
type GdmaDevT GdmaDevS
type AdcHalDmaDescStatusT c.Int

const (
	ADC_HAL_DMA_DESC_VALID   AdcHalDmaDescStatusT = 0
	ADC_HAL_DMA_DESC_WAITING AdcHalDmaDescStatusT = 1
	ADC_HAL_DMA_DESC_NULL    AdcHalDmaDescStatusT = 2
)

/**
 * @brief Configuration of the HAL
 */

type AdcHalDmaConfigT struct {
	EofDescNum c.Uint32T
	EofStep    c.Uint32T
	EofNum     c.Uint32T
}

/**
 * @brief Context of the HAL
 */

type AdcHalDmaCtxT struct {
	RxDesc        *DmaDescriptorT
	DescDummyHead DmaDescriptorT
	CurDescPtr    *DmaDescriptorT
	EofDescNum    c.Uint32T
	EofStep       c.Uint32T
	EofNum        c.Uint32T
}

type AdcHalDigiCtrlrCfgT struct {
	AdcPatternLen c.Uint32T
	AdcPattern    *AdcDigiPatternConfigT
	SampleFreqHz  c.Uint32T
	ConvMode      AdcDigiConvertModeT
	BitWidth      c.Uint32T
	ClkSrc        AdcContinuousClkSrcT
	ClkSrcFreqHz  c.Uint32T
}

/**
 * @brief Power management config
 *
 * Pass a pointer to this structure as an argument to esp_pm_configure function.
 */

type EspPmConfigT struct {
	MaxFreqMhz       c.Int
	MinFreqMhz       c.Int
	LightSleepEnable bool
}
type EspPmConfigEsp32T EspPmConfigT
type EspPmConfigEsp32s2T EspPmConfigT
type EspPmConfigEsp32s3T EspPmConfigT
type EspPmConfigEsp32c3T EspPmConfigT
type EspPmConfigEsp32c2T EspPmConfigT
type EspPmConfigEsp32c6T EspPmConfigT
type EspPmLockTypeT c.Int

const (
	ESP_PM_CPU_FREQ_MAX   EspPmLockTypeT = 0
	ESP_PM_APB_FREQ_MAX   EspPmLockTypeT = 1
	ESP_PM_NO_LIGHT_SLEEP EspPmLockTypeT = 2
	ESP_PM_LOCK_MAX       EspPmLockTypeT = 3
)

type EspPmLock struct {
	Unused [8]uint8
}
type EspPmLockHandleT *EspPmLock

// llgo:type C
type TaskFunctionT func(c.Pointer)
type IntrType c.Int

const (
	INTR_TYPE_LEVEL IntrType = 0
	INTR_TYPE_EDGE  IntrType = 1
)

type EspCpuCycleCountT c.Uint32T
type EspCpuIntrTypeT c.Int

const (
	ESP_CPU_INTR_TYPE_LEVEL EspCpuIntrTypeT = 0
	ESP_CPU_INTR_TYPE_EDGE  EspCpuIntrTypeT = 1
	ESP_CPU_INTR_TYPE_NA    EspCpuIntrTypeT = 2
)

/**
 * @brief CPU interrupt descriptor
 *
 * Each particular CPU interrupt has an associated descriptor describing that
 * particular interrupt's characteristics. Call esp_cpu_intr_get_desc() to get
 * the descriptors of a particular interrupt.
 */

type EspCpuIntrDescT struct {
	Priority c.Int
	Type     EspCpuIntrTypeT
	Flags    c.Uint32T
}

// llgo:type C
type EspCpuIntrHandlerT func(c.Pointer)
type EspCpuWatchpointTriggerT c.Int

const (
	ESP_CPU_WATCHPOINT_LOAD   EspCpuWatchpointTriggerT = 0
	ESP_CPU_WATCHPOINT_STORE  EspCpuWatchpointTriggerT = 1
	ESP_CPU_WATCHPOINT_ACCESS EspCpuWatchpointTriggerT = 2
)

type SpinlockT struct {
	Owner c.Uint32T
	Count c.Uint32T
}

type ImaxdivT struct {
	Quot c.IntmaxT
	Rem  c.IntmaxT
}
type SocResetReasonT c.Int

const (
	RESET_REASON_CHIP_POWER_ON   SocResetReasonT = 1
	RESET_REASON_CHIP_BROWN_OUT  SocResetReasonT = 1
	RESET_REASON_CORE_SW         SocResetReasonT = 3
	RESET_REASON_CORE_DEEP_SLEEP SocResetReasonT = 5
	RESET_REASON_CORE_MWDT0      SocResetReasonT = 7
	RESET_REASON_CORE_MWDT1      SocResetReasonT = 8
	RESET_REASON_CORE_RTC_WDT    SocResetReasonT = 9
	RESET_REASON_CPU0_MWDT0      SocResetReasonT = 11
	RESET_REASON_CPU0_SW         SocResetReasonT = 12
	RESET_REASON_CPU0_RTC_WDT    SocResetReasonT = 13
	RESET_REASON_SYS_BROWN_OUT   SocResetReasonT = 15
	RESET_REASON_SYS_RTC_WDT     SocResetReasonT = 16
	RESET_REASON_CPU0_MWDT1      SocResetReasonT = 17
	RESET_REASON_SYS_SUPER_WDT   SocResetReasonT = 18
	RESET_REASON_CORE_EFUSE_CRC  SocResetReasonT = 20
	RESET_REASON_CORE_USB_UART   SocResetReasonT = 21
	RESET_REASON_CORE_USB_JTAG   SocResetReasonT = 22
	RESET_REASON_CORE_PWR_GLITCH SocResetReasonT = 23
	RESET_REASON_CPU0_JTAG       SocResetReasonT = 24
)

type MultiHeapInfo struct {
	Unused [8]uint8
}
type MultiHeapHandleT *MultiHeapInfo

/** @brief Structure to access heap metadata via multi_heap_get_info */

type MultiHeapInfoT struct {
	TotalFreeBytes      c.SizeT
	TotalAllocatedBytes c.SizeT
	LargestFreeBlock    c.SizeT
	MinimumFreeBytes    c.SizeT
	AllocatedBlocks     c.SizeT
	FreeBlocks          c.SizeT
	TotalBlocks         c.SizeT
}

// llgo:type C
type MultiHeapWalkerCbT func(c.Pointer, c.SizeT, c.Int, c.Pointer) bool

// llgo:type C
type EspAllocFailedHookT func(c.SizeT, c.Uint32T, *c.Char)

/**
 * @brief Structure used to store heap related data passed to
 * the walker callback function
 */

type WalkerHeapInfo struct {
	Start c.IntptrT
	End   c.IntptrT
}
type WalkerHeapIntoT WalkerHeapInfo

/**
 * @brief Structure used to store block related data passed to
 * the walker callback function
 */

type WalkerBlockInfo struct {
	Ptr  c.Pointer
	Size c.SizeT
	Used bool
}
type WalkerBlockInfoT WalkerBlockInfo

// llgo:type C
type HeapCapsWalkerCbT func(WalkerHeapIntoT, WalkerBlockInfoT, c.Pointer) bool
type EspResetReasonT c.Int

const (
	ESP_RST_UNKNOWN    EspResetReasonT = 0
	ESP_RST_POWERON    EspResetReasonT = 1
	ESP_RST_EXT        EspResetReasonT = 2
	ESP_RST_SW         EspResetReasonT = 3
	ESP_RST_PANIC      EspResetReasonT = 4
	ESP_RST_INT_WDT    EspResetReasonT = 5
	ESP_RST_TASK_WDT   EspResetReasonT = 6
	ESP_RST_WDT        EspResetReasonT = 7
	ESP_RST_DEEPSLEEP  EspResetReasonT = 8
	ESP_RST_BROWNOUT   EspResetReasonT = 9
	ESP_RST_SDIO       EspResetReasonT = 10
	ESP_RST_USB        EspResetReasonT = 11
	ESP_RST_JTAG       EspResetReasonT = 12
	ESP_RST_EFUSE      EspResetReasonT = 13
	ESP_RST_PWR_GLITCH EspResetReasonT = 14
	ESP_RST_CPU_LOCKUP EspResetReasonT = 15
)

// llgo:type C
type ShutdownHandlerT func()
type StackTypeT c.Uint8T
type BaseTypeT c.Int
type UBaseTypeT c.Uint
type TickTypeT c.Uint32T
type PortMUXTYPE SpinlockT

/* Used by heap_5.c to define the start address and size of each memory region
 * that together comprise the total FreeRTOS heap space. */

type HeapRegion struct {
	PucStartAddress *c.Uint8T
	XSizeInBytes    c.SizeT
}
type HeapRegionT HeapRegion

/* Used to pass information about the heap out of vPortGetHeapStats(). */

type XHeapStats struct {
	XAvailableHeapSpaceInBytes      c.SizeT
	XSizeOfLargestFreeBlockInBytes  c.SizeT
	XSizeOfSmallestFreeBlockInBytes c.SizeT
	XNumberOfFreeBlocks             c.SizeT
	XMinimumEverFreeBytesRemaining  c.SizeT
	XNumberOfSuccessfulAllocations  c.SizeT
	XNumberOfSuccessfulFrees        c.SizeT
}
type HeapStatsT XHeapStats

type Stat struct {
	Unused [8]uint8
}

type Tms struct {
	Unused [8]uint8
}

type Timeval struct {
	Unused [8]uint8
}

type Timezone struct {
	Unused [8]uint8
}

/*
 * In line with software engineering best practice, FreeRTOS implements a strict
 * data hiding policy, so the real structures used by FreeRTOS to maintain the
 * state of tasks, queues, semaphores, etc. are not accessible to the application
 * code.  However, if the application writer wants to statically allocate such
 * an object then the size of the object needs to be known.  Dummy structures
 * that are guaranteed to have the same size and alignment requirements of the
 * real objects are used for this purpose.  The dummy list and list item
 * structures below are used for inclusion in such a dummy structure.
 */

type XSTATICLISTITEM struct {
	XDummy2  TickTypeT
	PvDummy3 [4]c.Pointer
}
type StaticListItemT XSTATICLISTITEM

/* See the comments above the struct xSTATIC_LIST_ITEM definition. */

type XSTATICMINILISTITEM struct {
	XDummy2  TickTypeT
	PvDummy3 [2]c.Pointer
}
type StaticMiniListItemT XSTATICMINILISTITEM

/* See the comments above the struct xSTATIC_LIST_ITEM definition. */

type XSTATICLIST struct {
	UxDummy2 UBaseTypeT
	PvDummy3 c.Pointer
	XDummy4  StaticMiniListItemT
}
type StaticListT XSTATICLIST

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the Task structure used internally by
 * FreeRTOS is not accessible to application code.  However, if the application
 * writer wants to statically allocate the memory required to create a task then
 * the size of the task object needs to be known.  The StaticTask_t structure
 * below is provided for this purpose.  Its sizes and alignment requirements are
 * guaranteed to match those of the genuine structure, no matter which
 * architecture is being used, and no matter how the values in FreeRTOSConfig.h
 * are set.  Its contents are somewhat obfuscated in the hope users will
 * recognise that it would be unwise to make direct use of the structure members.
 */

type XSTATICTCB struct {
	PxDummy1  c.Pointer
	XDummy3   [2]StaticListItemT
	UxDummy5  UBaseTypeT
	PxDummy6  c.Pointer
	UcDummy7  [16]c.Uint8T
	PxDummy8  c.Pointer
	UxDummy12 [2]UBaseTypeT
	PvDummy15 [2]c.Pointer
	XDummy17  X_reent
	UlDummy18 [1]c.Uint32T
	UcDummy19 [1]c.Uint8T
	UxDummy20 c.Uint8T
	UcDummy21 c.Uint8T
}
type StaticTaskT XSTATICTCB

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the Queue structure used internally by
 * FreeRTOS is not accessible to application code.  However, if the application
 * writer wants to statically allocate the memory required to create a queue
 * then the size of the queue object needs to be known.  The StaticQueue_t
 * structure below is provided for this purpose.  Its sizes and alignment
 * requirements are guaranteed to match those of the genuine structure, no
 * matter which architecture is being used, and no matter how the values in
 * FreeRTOSConfig.h are set.  Its contents are somewhat obfuscated in the hope
 * users will recognise that it would be unwise to make direct use of the
 * structure members.
 */

type XSTATICQUEUE struct {
	PvDummy1 [3]c.Pointer
	U        struct {
		PvDummy2 c.Pointer
	}
	XDummy3         [2]StaticListT
	UxDummy4        [3]UBaseTypeT
	UcDummy5        [2]c.Uint8T
	UcDummy6        c.Uint8T
	PvDummy7        c.Pointer
	XDummyQueueLock PortMUXTYPE
}
type StaticQueueT XSTATICQUEUE
type StaticSemaphoreT StaticQueueT

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the event group structure used
 * internally by FreeRTOS is not accessible to application code.  However, if
 * the application writer wants to statically allocate the memory required to
 * create an event group then the size of the event group object needs to be
 * know.  The StaticEventGroup_t structure below is provided for this purpose.
 * Its sizes and alignment requirements are guaranteed to match those of the
 * genuine structure, no matter which architecture is being used, and no matter
 * how the values in FreeRTOSConfig.h are set.  Its contents are somewhat
 * obfuscated in the hope users will recognise that it would be unwise to make
 * direct use of the structure members.
 */

type XSTATICEVENTGROUP struct {
	XDummy1              TickTypeT
	XDummy2              StaticListT
	UcDummy4             c.Uint8T
	XDummyEventGroupLock PortMUXTYPE
}
type StaticEventGroupT XSTATICEVENTGROUP

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the software timer structure used
 * internally by FreeRTOS is not accessible to application code.  However, if
 * the application writer wants to statically allocate the memory required to
 * create a software timer then the size of the queue object needs to be known.
 * The StaticTimer_t structure below is provided for this purpose.  Its sizes
 * and alignment requirements are guaranteed to match those of the genuine
 * structure, no matter which architecture is being used, and no matter how the
 * values in FreeRTOSConfig.h are set.  Its contents are somewhat obfuscated in
 * the hope users will recognise that it would be unwise to make direct use of
 * the structure members.
 */

type XSTATICTIMER struct {
	PvDummy1 c.Pointer
	XDummy2  StaticListItemT
	XDummy3  TickTypeT
	PvDummy5 c.Pointer
	PvDummy6 TaskFunctionT
	UcDummy8 c.Uint8T
}
type StaticTimerT XSTATICTIMER

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the stream buffer structure used
 * internally by FreeRTOS is not accessible to application code.  However, if
 * the application writer wants to statically allocate the memory required to
 * create a stream buffer then the size of the stream buffer object needs to be
 * known.  The StaticStreamBuffer_t structure below is provided for this
 * purpose.  Its size and alignment requirements are guaranteed to match those
 * of the genuine structure, no matter which architecture is being used, and
 * no matter how the values in FreeRTOSConfig.h are set.  Its contents are
 * somewhat obfuscated in the hope users will recognise that it would be unwise
 * to make direct use of the structure members.
 */

type XSTATICSTREAMBUFFER struct {
	UxDummy1               [4]c.SizeT
	PvDummy2               [3]c.Pointer
	UcDummy3               c.Uint8T
	XDummyStreamBufferLock PortMUXTYPE
}
type StaticStreamBufferT XSTATICSTREAMBUFFER
type StaticMessageBufferT StaticStreamBufferT

/*
 * Definition of the only type of object that a list can contain.
 */

type XLIST struct {
	Unused [8]uint8
}

type XLISTITEM struct {
	XItemValue  TickTypeT
	PxNext      *XLISTITEM
	PxPrevious  *XLISTITEM
	PvOwner     c.Pointer
	PxContainer *XLIST
}
type ListItemT XLISTITEM

type XMINILISTITEM struct {
	XItemValue TickTypeT
	PxNext     *XLISTITEM
	PxPrevious *XLISTITEM
}
type MiniListItemT XMINILISTITEM
type ListT XLIST

/**
 *
 * Type by which tasks are referenced.  For example, a call to xTaskCreate
 * returns (via a pointer parameter) an TaskHandle_t variable that can then
 * be used as a parameter to vTaskDelete to delete the task.
 *
 * \ingroup Tasks
 */

type TskTaskControlBlock struct {
	Unused [8]uint8
}
type TaskHandleT *TskTaskControlBlock

// llgo:type C
type TaskHookFunctionT func(c.Pointer) BaseTypeT
type ETaskState c.Int

const (
	ERunning   ETaskState = 0
	EReady     ETaskState = 1
	EBlocked   ETaskState = 2
	ESuspended ETaskState = 3
	EDeleted   ETaskState = 4
	EInvalid   ETaskState = 5
)

type ENotifyAction c.Int

const (
	ENoAction                 ENotifyAction = 0
	ESetBits                  ENotifyAction = 1
	EIncrement                ENotifyAction = 2
	ESetValueWithOverwrite    ENotifyAction = 3
	ESetValueWithoutOverwrite ENotifyAction = 4
)

/*
 * Used internally only.
 */

type XTIMEOUT struct {
	XOverflowCount  BaseTypeT
	XTimeOnEntering TickTypeT
}
type TimeOutT XTIMEOUT

/*
 * Defines the memory ranges allocated to the task when an MPU is used.
 */

type XMEMORYREGION struct {
	PvBaseAddress   c.Pointer
	UlLengthInBytes c.Uint32T
	UlParameters    c.Uint32T
}
type MemoryRegionT XMEMORYREGION

/*
 * Parameters required to create an MPU protected task.
 */

type XTASKPARAMETERS struct {
	PvTaskCode     TaskFunctionT
	PcName         *c.Char
	UsStackDepth   c.Uint32T
	PvParameters   c.Pointer
	UxPriority     UBaseTypeT
	PuxStackBuffer *StackTypeT
	XRegions       [1]MemoryRegionT
}
type TaskParametersT XTASKPARAMETERS

/** Used with the uxTaskGetSystemState() function to return the state of each task
 * in the system. */

type XTASKSTATUS struct {
	XHandle              TaskHandleT
	PcTaskName           *c.Char
	XTaskNumber          UBaseTypeT
	ECurrentState        ETaskState
	UxCurrentPriority    UBaseTypeT
	UxBasePriority       UBaseTypeT
	UlRunTimeCounter     c.Uint32T
	PxStackBase          *StackTypeT
	UsStackHighWaterMark c.Uint32T
}
type TaskStatusT XTASKSTATUS
type ESleepModeStatus c.Int

const (
	EAbortSleep            ESleepModeStatus = 0
	EStandardSleep         ESleepModeStatus = 1
	ENoTasksWaitingTimeout ESleepModeStatus = 2
)

/**
 * Type by which queues are referenced.  For example, a call to xQueueCreate()
 * returns an QueueHandle_t variable that can then be used as a parameter to
 * xQueueSend(), xQueueReceive(), etc.
 */

type QueueDefinition struct {
	Unused [8]uint8
}
type QueueHandleT *QueueDefinition
type QueueSetHandleT *QueueDefinition
type QueueSetMemberHandleT *QueueDefinition
type RingbufHandleT c.Pointer
type RingbufferTypeT c.Int

const (
	RINGBUF_TYPE_NOSPLIT    RingbufferTypeT = 0
	RINGBUF_TYPE_ALLOWSPLIT RingbufferTypeT = 1
	RINGBUF_TYPE_BYTEBUF    RingbufferTypeT = 2
	RINGBUF_TYPE_MAX        RingbufferTypeT = 3
)

/**
 * @brief Struct that is equivalent in size to the ring buffer's data structure
 *
 * The contents of this struct are not meant to be used directly. This
 * structure is meant to be used when creating a statically allocated ring
 * buffer where this struct is of the exact size required to store a ring
 * buffer's control data structure.
 *
 */

type XSTATICRINGBUFFER struct {
	XDummy1  [2]c.SizeT
	UxDummy2 UBaseTypeT
	PvDummy3 [11]c.Pointer
	XDummy4  BaseTypeT
	XDummy5  [2]StaticListT
	PvDummy6 c.Pointer
	MuxDummy PortMUXTYPE
}
type StaticRingbufferT XSTATICRINGBUFFER

type EspEtmChannelT struct {
	Unused [8]uint8
}
type EspEtmChannelHandleT *EspEtmChannelT

type EspEtmEventT struct {
	Unused [8]uint8
}
type EspEtmEventHandleT *EspEtmEventT

type EspEtmTaskT struct {
	Unused [8]uint8
}
type EspEtmTaskHandleT *EspEtmTaskT

/**
 * @brief ETM channel configuration
 */

type EspEtmChannelConfigT struct {
	Flags EtmChanFlags
}

type EtmChanFlags struct {
	Unused [8]uint8
}

type GdmaChannelT struct {
	Unused [8]uint8
}
type GdmaChannelHandleT *GdmaChannelT

/**
 * @brief Collection of configuration items that used for allocating GDMA channel
 *
 */

type GdmaChannelAllocConfigT struct {
	SiblingChan GdmaChannelHandleT
	Direction   GdmaChannelDirectionT
	Flags       struct {
		ReserveSibling c.Int
		IsrCacheSafe   c.Int
	}
}

/**
 * @brief Type of GDMA event data
 */

type GdmaEventDataT struct {
	Flags struct {
		AbnormalEof c.Uint32T
		NormalEof   c.Uint32T
	}
}

// llgo:type C
type GdmaEventCallbackT func(GdmaChannelHandleT, *GdmaEventDataT, c.Pointer) bool

/**
 * @brief Group of supported GDMA TX callbacks
 * @note The callbacks are all running under ISR environment
 */

type GdmaTxEventCallbacksT struct {
	OnTransEof GdmaEventCallbackT
	OnDescrErr GdmaEventCallbackT
}

/**
 * @brief Group of supported GDMA RX callbacks
 * @note The callbacks are all running under ISR environment
 */

type GdmaRxEventCallbacksT struct {
	OnRecvEof  GdmaEventCallbackT
	OnDescrErr GdmaEventCallbackT
	OnRecvDone GdmaEventCallbackT
}

/**
 * @brief Type of GDMA engine trigger
 * @note It's recommended to initialize this structure with `GDMA_MAKE_TRIGGER`.
 *
 */

type GdmaTriggerT struct {
	Periph     GdmaTriggerPeripheralT
	InstanceId c.Int
	BusId      c.Int
}

/**
 * @brief A collection of strategy item that each GDMA channel could apply
 *
 */

type GdmaStrategyConfigT struct {
	OwnerCheck        bool
	AutoUpdateDesc    bool
	EofTillDataPopped bool
}

/**
 * @brief Channel transfer configurations
 */

type GdmaTransferConfigT struct {
	MaxDataBurstSize c.Uint32T
	AccessExtMem     bool
}

/**
 * @brief GDMA ETM event configuration
 */

type GdmaEtmEventConfigT struct {
	EventType GdmaEtmEventTypeT
}

/**
 * @brief GDMA ETM task configuration
 */

type GdmaEtmTaskConfigT struct {
	TaskType GdmaEtmTaskTypeT
}

/**
 * @brief GDMA transfer ability
 *
 * @note The alignment set in this structure is **not** a guarantee that gdma driver will take care of the nonalignment cases.
 *       Actually the GDMA driver has no knowledge about the DMA buffer (address and size) used by upper layer.
 *       So it's the responsibility of the **upper layer** to take care of the buffer address and size.
 *
 */

type GdmaTransferAbilityT struct {
	SramTransAlign  c.SizeT
	PsramTransAlign c.SizeT
}

/**
 * @brief ADC DMA context
 */

type AdcDmaT struct {
	GdmaChan   GdmaChannelHandleT
	DmaIntrHdl IntrHandleT
}
type AdcFsmT c.Int

const (
	ADC_FSM_INIT    AdcFsmT = 0
	ADC_FSM_STARTED AdcFsmT = 1
)

type AdcMonitorFsmT c.Int

const (
	ADC_MONITOR_FSM_INIT    AdcMonitorFsmT = 0
	ADC_MONITOR_FSM_ENABLED AdcMonitorFsmT = 1
)

// llgo:type C
type AdcDmaIntrFuncT func(*AdcContinuousCtxT) bool
