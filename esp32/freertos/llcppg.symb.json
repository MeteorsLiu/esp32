[
  {
    "mangle": "pcTimerGetName",
    "c++": "pcTimerGetName(TimerHandle_t)",
    "go": "PcTimerGetName"
  },
  {
    "mangle": "pvPortMalloc",
    "c++": "pvPortMalloc(size_t)",
    "go": "PvPortMalloc"
  },
  {
    "mangle": "pvTaskGetCurrentTCBForCore",
    "c++": "pvTaskGetCurrentTCBForCore(BaseType_t *)",
    "go": "BaseTypeT.PvTaskGetCurrentTCBForCore"
  },
  {
    "mangle": "pvTimerGetTimerID",
    "c++": "pvTimerGetTimerID(const TimerHandle_t)",
    "go": "PvTimerGetTimerID"
  },
  {
    "mangle": "pxPortInitialiseStack",
    "c++": "pxPortInitialiseStack(StackType_t *, int, void *)",
    "go": "(*StackTypeT).PxPortInitialiseStack"
  },
  {
    "mangle": "pxTaskGetStackStart",
    "c++": "pxTaskGetStackStart(TaskHandle_t)",
    "go": "PxTaskGetStackStart"
  },
  {
    "mangle": "uxQueueMessagesWaiting",
    "c++": "uxQueueMessagesWaiting(const QueueHandle_t)",
    "go": "UxQueueMessagesWaiting"
  },
  {
    "mangle": "uxQueueMessagesWaitingFromISR",
    "c++": "uxQueueMessagesWaitingFromISR(const QueueHandle_t)",
    "go": "UxQueueMessagesWaitingFromISR"
  },
  {
    "mangle": "uxQueueSpacesAvailable",
    "c++": "uxQueueSpacesAvailable(const QueueHandle_t)",
    "go": "UxQueueSpacesAvailable"
  },
  {
    "mangle": "uxTaskGetSnapshotAll",
    "c++": "uxTaskGetSnapshotAll(TaskSnapshot_t *const, const int, int *const)",
    "go": "(*TaskSnapshotT).UxTaskGetSnapshotAll"
  },
  {
    "mangle": "uxTimerGetReloadMode",
    "c++": "uxTimerGetReloadMode(TimerHandle_t)",
    "go": "UxTimerGetReloadMode"
  },
  {
    "mangle": "vEventGroupClearBitsCallback",
    "c++": "vEventGroupClearBitsCallback(void *, const uint32_t)",
    "go": "VEventGroupClearBitsCallback"
  },
  {
    "mangle": "vEventGroupDelete",
    "c++": "vEventGroupDelete(EventGroupHandle_t)",
    "go": "VEventGroupDelete"
  },
  {
    "mangle": "vEventGroupDeleteWithCaps",
    "c++": "vEventGroupDeleteWithCaps(EventGroupHandle_t)",
    "go": "VEventGroupDeleteWithCaps"
  },
  {
    "mangle": "vEventGroupSetBitsCallback",
    "c++": "vEventGroupSetBitsCallback(void *, const uint32_t)",
    "go": "VEventGroupSetBitsCallback"
  },
  {
    "mangle": "vPortAssertIfInISR",
    "c++": "vPortAssertIfInISR()",
    "go": "VPortAssertIfInISR"
  },
  {
    "mangle": "vPortEndScheduler",
    "c++": "vPortEndScheduler()",
    "go": "VPortEndScheduler"
  },
  {
    "mangle": "vPortExitCritical",
    "c++": "vPortExitCritical(portMUX_TYPE *)",
    "go": "(*PortMUXTYPE).VPortExitCritical"
  },
  {
    "mangle": "vPortExitCriticalCompliance",
    "c++": "vPortExitCriticalCompliance(portMUX_TYPE *)",
    "go": "(*PortMUXTYPE).VPortExitCriticalCompliance"
  },
  {
    "mangle": "vPortFree",
    "c++": "vPortFree(void *)",
    "go": "VPortFree"
  },
  {
    "mangle": "vPortSetStackWatchpoint",
    "c++": "vPortSetStackWatchpoint(void *)",
    "go": "VPortSetStackWatchpoint"
  },
  {
    "mangle": "vPortTCBPreDeleteHook",
    "c++": "vPortTCBPreDeleteHook(void *)",
    "go": "VPortTCBPreDeleteHook"
  },
  {
    "mangle": "vPortYield",
    "c++": "vPortYield()",
    "go": "VPortYield"
  },
  {
    "mangle": "vPortYieldOtherCore",
    "c++": "vPortYieldOtherCore(BaseType_t *)",
    "go": "BaseTypeT.VPortYieldOtherCore"
  },
  {
    "mangle": "vQueueDelete",
    "c++": "vQueueDelete(QueueHandle_t)",
    "go": "VQueueDelete"
  },
  {
    "mangle": "vQueueDeleteWithCaps",
    "c++": "vQueueDeleteWithCaps(QueueHandle_t)",
    "go": "VQueueDeleteWithCaps"
  },
  {
    "mangle": "vQueueWaitForMessageRestricted",
    "c++": "vQueueWaitForMessageRestricted(QueueHandle_t, TickType_t, BaseType_t *)",
    "go": "VQueueWaitForMessageRestricted"
  },
  {
    "mangle": "vSemaphoreDeleteWithCaps",
    "c++": "vSemaphoreDeleteWithCaps(SemaphoreHandle_t)",
    "go": "VSemaphoreDeleteWithCaps"
  },
  {
    "mangle": "vStreamBufferDelete",
    "c++": "vStreamBufferDelete(StreamBufferHandle_t)",
    "go": "VStreamBufferDelete"
  },
  {
    "mangle": "vStreamBufferGenericDeleteWithCaps",
    "c++": "vStreamBufferGenericDeleteWithCaps(StreamBufferHandle_t, BaseType_t *)",
    "go": "VStreamBufferGenericDeleteWithCaps"
  },
  {
    "mangle": "vTaskDeleteWithCaps",
    "c++": "vTaskDeleteWithCaps(TaskHandle_t)",
    "go": "VTaskDeleteWithCaps"
  },
  {
    "mangle": "vTaskGetSnapshot",
    "c++": "vTaskGetSnapshot(TaskHandle_t, TaskSnapshot_t *)",
    "go": "VTaskGetSnapshot"
  },
  {
    "mangle": "vTaskSetThreadLocalStoragePointerAndDelCallback",
    "c++": "vTaskSetThreadLocalStoragePointerAndDelCallback(TaskHandle_t, BaseType_t *, void *, TlsDeleteCallbackFunction_t)",
    "go": "VTaskSetThreadLocalStoragePointerAndDelCallback"
  },
  {
    "mangle": "vTimerSetReloadMode",
    "c++": "vTimerSetReloadMode(TimerHandle_t, BaseType_t *)",
    "go": "VTimerSetReloadMode"
  },
  {
    "mangle": "vTimerSetTimerID",
    "c++": "vTimerSetTimerID(TimerHandle_t, void *)",
    "go": "VTimerSetTimerID"
  },
  {
    "mangle": "xEventGroupClearBits",
    "c++": "xEventGroupClearBits(EventGroupHandle_t, const EventBits_t)",
    "go": "XEventGroupClearBits"
  },
  {
    "mangle": "xEventGroupCreateWithCaps",
    "c++": "xEventGroupCreateWithCaps(UBaseType_t)",
    "go": "UBaseTypeT.XEventGroupCreateWithCaps"
  },
  {
    "mangle": "xEventGroupGetBitsFromISR",
    "c++": "xEventGroupGetBitsFromISR(EventGroupHandle_t)",
    "go": "XEventGroupGetBitsFromISR"
  },
  {
    "mangle": "xEventGroupSetBits",
    "c++": "xEventGroupSetBits(EventGroupHandle_t, const EventBits_t)",
    "go": "XEventGroupSetBits"
  },
  {
    "mangle": "xEventGroupSync",
    "c++": "xEventGroupSync(EventGroupHandle_t, const EventBits_t, const EventBits_t, TickType_t)",
    "go": "XEventGroupSync"
  },
  {
    "mangle": "xEventGroupWaitBits",
    "c++": "xEventGroupWaitBits(EventGroupHandle_t, const EventBits_t, BaseType_t *, BaseType_t *, TickType_t)",
    "go": "XEventGroupWaitBits"
  },
  {
    "mangle": "xPortCheckValidListMem",
    "c++": "xPortCheckValidListMem(const void *)",
    "go": "XPortCheckValidListMem"
  },
  {
    "mangle": "xPortCheckValidTCBMem",
    "c++": "xPortCheckValidTCBMem(const void *)",
    "go": "XPortCheckValidTCBMem"
  },
  {
    "mangle": "xPortEnterCriticalTimeout",
    "c++": "xPortEnterCriticalTimeout(portMUX_TYPE *, BaseType_t *)",
    "go": "(*PortMUXTYPE).XPortEnterCriticalTimeout"
  },
  {
    "mangle": "xPortEnterCriticalTimeoutCompliance",
    "c++": "xPortEnterCriticalTimeoutCompliance(portMUX_TYPE *, BaseType_t *)",
    "go": "(*PortMUXTYPE).XPortEnterCriticalTimeoutCompliance"
  },
  {
    "mangle": "xPortGetCoreIDLLGoWrapper",
    "c++": "xPortGetCoreIDLLGoWrapper()",
    "go": "XPortGetCoreIDLLGoWrapper"
  },
  {
    "mangle": "xPortGetFreeHeapSize",
    "c++": "xPortGetFreeHeapSize()",
    "go": "XPortGetFreeHeapSize"
  },
  {
    "mangle": "xPortGetMinimumEverFreeHeapSize",
    "c++": "xPortGetMinimumEverFreeHeapSize()",
    "go": "XPortGetMinimumEverFreeHeapSize"
  },
  {
    "mangle": "xPortGetTickRateHz",
    "c++": "xPortGetTickRateHz()",
    "go": "XPortGetTickRateHz"
  },
  {
    "mangle": "xPortInIsrContext",
    "c++": "xPortInIsrContext()",
    "go": "XPortInIsrContext"
  },
  {
    "mangle": "xPortInterruptedFromISRContext",
    "c++": "xPortInterruptedFromISRContext()",
    "go": "XPortInterruptedFromISRContext"
  },
  {
    "mangle": "xPortStartScheduler",
    "c++": "xPortStartScheduler()",
    "go": "XPortStartScheduler"
  },
  {
    "mangle": "xPortcheckValidStackMem",
    "c++": "xPortcheckValidStackMem(const void *)",
    "go": "XPortcheckValidStackMem"
  },
  {
    "mangle": "xQueueAddToSet",
    "c++": "xQueueAddToSet(QueueSetMemberHandle_t, QueueSetHandle_t)",
    "go": "XQueueAddToSet"
  },
  {
    "mangle": "xQueueCreateCountingSemaphore",
    "c++": "xQueueCreateCountingSemaphore(const UBaseType_t, const UBaseType_t)",
    "go": "UBaseTypeT.XQueueCreateCountingSemaphore"
  },
  {
    "mangle": "xQueueCreateCountingSemaphoreStatic",
    "c++": "xQueueCreateCountingSemaphoreStatic(const UBaseType_t, const UBaseType_t, int *)",
    "go": "UBaseTypeT.XQueueCreateCountingSemaphoreStatic"
  },
  {
    "mangle": "xQueueCreateMutex",
    "c++": "xQueueCreateMutex(const uint8_t)",
    "go": "XQueueCreateMutex"
  },
  {
    "mangle": "xQueueCreateMutexStatic",
    "c++": "xQueueCreateMutexStatic(const uint8_t, int *)",
    "go": "XQueueCreateMutexStatic"
  },
  {
    "mangle": "xQueueCreateSet",
    "c++": "xQueueCreateSet(const UBaseType_t)",
    "go": "UBaseTypeT.XQueueCreateSet"
  },
  {
    "mangle": "xQueueCreateWithCaps",
    "c++": "xQueueCreateWithCaps(UBaseType_t, UBaseType_t, UBaseType_t)",
    "go": "UBaseTypeT.XQueueCreateWithCaps"
  },
  {
    "mangle": "xQueueGenericReset",
    "c++": "xQueueGenericReset(QueueHandle_t, BaseType_t *)",
    "go": "XQueueGenericReset"
  },
  {
    "mangle": "xQueueGenericSend",
    "c++": "xQueueGenericSend(QueueHandle_t, const void *const, TickType_t, BaseType_t *)",
    "go": "XQueueGenericSend"
  },
  {
    "mangle": "xQueueGenericSendFromISR",
    "c++": "xQueueGenericSendFromISR(QueueHandle_t, const void *const, BaseType_t *const, BaseType_t *)",
    "go": "XQueueGenericSendFromISR"
  },
  {
    "mangle": "xQueueGetMutexHolder",
    "c++": "xQueueGetMutexHolder(QueueHandle_t)",
    "go": "XQueueGetMutexHolder"
  },
  {
    "mangle": "xQueueGetMutexHolderFromISR",
    "c++": "xQueueGetMutexHolderFromISR(QueueHandle_t)",
    "go": "XQueueGetMutexHolderFromISR"
  },
  {
    "mangle": "xQueueGiveFromISR",
    "c++": "xQueueGiveFromISR(QueueHandle_t, BaseType_t *const)",
    "go": "XQueueGiveFromISR"
  },
  {
    "mangle": "xQueueGiveMutexRecursive",
    "c++": "xQueueGiveMutexRecursive(QueueHandle_t)",
    "go": "XQueueGiveMutexRecursive"
  },
  {
    "mangle": "xQueueIsQueueEmptyFromISR",
    "c++": "xQueueIsQueueEmptyFromISR(const QueueHandle_t)",
    "go": "XQueueIsQueueEmptyFromISR"
  },
  {
    "mangle": "xQueueIsQueueFullFromISR",
    "c++": "xQueueIsQueueFullFromISR(const QueueHandle_t)",
    "go": "XQueueIsQueueFullFromISR"
  },
  {
    "mangle": "xQueuePeek",
    "c++": "xQueuePeek(QueueHandle_t, void *const, TickType_t)",
    "go": "XQueuePeek"
  },
  {
    "mangle": "xQueuePeekFromISR",
    "c++": "xQueuePeekFromISR(QueueHandle_t, void *const)",
    "go": "XQueuePeekFromISR"
  },
  {
    "mangle": "xQueueReceive",
    "c++": "xQueueReceive(QueueHandle_t, void *const, TickType_t)",
    "go": "XQueueReceive"
  },
  {
    "mangle": "xQueueReceiveFromISR",
    "c++": "xQueueReceiveFromISR(QueueHandle_t, void *const, BaseType_t *const)",
    "go": "XQueueReceiveFromISR"
  },
  {
    "mangle": "xQueueRemoveFromSet",
    "c++": "xQueueRemoveFromSet(QueueSetMemberHandle_t, QueueSetHandle_t)",
    "go": "XQueueRemoveFromSet"
  },
  {
    "mangle": "xQueueSelectFromSet",
    "c++": "xQueueSelectFromSet(QueueSetHandle_t, const TickType_t)",
    "go": "XQueueSelectFromSet"
  },
  {
    "mangle": "xQueueSelectFromSetFromISR",
    "c++": "xQueueSelectFromSetFromISR(QueueSetHandle_t)",
    "go": "XQueueSelectFromSetFromISR"
  },
  {
    "mangle": "xQueueSemaphoreTake",
    "c++": "xQueueSemaphoreTake(QueueHandle_t, TickType_t)",
    "go": "XQueueSemaphoreTake"
  },
  {
    "mangle": "xQueueTakeMutexRecursive",
    "c++": "xQueueTakeMutexRecursive(QueueHandle_t, TickType_t)",
    "go": "XQueueTakeMutexRecursive"
  },
  {
    "mangle": "xSemaphoreCreateGenericWithCaps",
    "c++": "xSemaphoreCreateGenericWithCaps(UBaseType_t, UBaseType_t, const uint8_t, UBaseType_t)",
    "go": "UBaseTypeT.XSemaphoreCreateGenericWithCaps"
  },
  {
    "mangle": "xStreamBufferBytesAvailable",
    "c++": "xStreamBufferBytesAvailable(StreamBufferHandle_t)",
    "go": "XStreamBufferBytesAvailable"
  },
  {
    "mangle": "xStreamBufferGenericCreate",
    "c++": "xStreamBufferGenericCreate(size_t, size_t, BaseType_t *, StreamBufferCallbackFunction_t, StreamBufferCallbackFunction_t)",
    "go": "XStreamBufferGenericCreate"
  },
  {
    "mangle": "xStreamBufferGenericCreateStatic",
    "c++": "xStreamBufferGenericCreateStatic(size_t, size_t, BaseType_t *, uint8_t *const, int *const, StreamBufferCallbackFunction_t, StreamBufferCallbackFunction_t)",
    "go": "XStreamBufferGenericCreateStatic"
  },
  {
    "mangle": "xStreamBufferGenericCreateWithCaps",
    "c++": "xStreamBufferGenericCreateWithCaps(size_t, size_t, BaseType_t *, UBaseType_t)",
    "go": "XStreamBufferGenericCreateWithCaps"
  },
  {
    "mangle": "xStreamBufferIsEmpty",
    "c++": "xStreamBufferIsEmpty(StreamBufferHandle_t)",
    "go": "XStreamBufferIsEmpty"
  },
  {
    "mangle": "xStreamBufferIsFull",
    "c++": "xStreamBufferIsFull(StreamBufferHandle_t)",
    "go": "XStreamBufferIsFull"
  },
  {
    "mangle": "xStreamBufferNextMessageLengthBytes",
    "c++": "xStreamBufferNextMessageLengthBytes(StreamBufferHandle_t)",
    "go": "XStreamBufferNextMessageLengthBytes"
  },
  {
    "mangle": "xStreamBufferReceive",
    "c++": "xStreamBufferReceive(StreamBufferHandle_t, void *, size_t, TickType_t)",
    "go": "XStreamBufferReceive"
  },
  {
    "mangle": "xStreamBufferReceiveCompletedFromISR",
    "c++": "xStreamBufferReceiveCompletedFromISR(StreamBufferHandle_t, BaseType_t *)",
    "go": "XStreamBufferReceiveCompletedFromISR"
  },
  {
    "mangle": "xStreamBufferReceiveFromISR",
    "c++": "xStreamBufferReceiveFromISR(StreamBufferHandle_t, void *, size_t, BaseType_t *const)",
    "go": "XStreamBufferReceiveFromISR"
  },
  {
    "mangle": "xStreamBufferReset",
    "c++": "xStreamBufferReset(StreamBufferHandle_t)",
    "go": "XStreamBufferReset"
  },
  {
    "mangle": "xStreamBufferSend",
    "c++": "xStreamBufferSend(StreamBufferHandle_t, const void *, size_t, TickType_t)",
    "go": "XStreamBufferSend"
  },
  {
    "mangle": "xStreamBufferSendCompletedFromISR",
    "c++": "xStreamBufferSendCompletedFromISR(StreamBufferHandle_t, BaseType_t *)",
    "go": "XStreamBufferSendCompletedFromISR"
  },
  {
    "mangle": "xStreamBufferSendFromISR",
    "c++": "xStreamBufferSendFromISR(StreamBufferHandle_t, const void *, size_t, BaseType_t *const)",
    "go": "XStreamBufferSendFromISR"
  },
  {
    "mangle": "xStreamBufferSetTriggerLevel",
    "c++": "xStreamBufferSetTriggerLevel(StreamBufferHandle_t, size_t)",
    "go": "XStreamBufferSetTriggerLevel"
  },
  {
    "mangle": "xStreamBufferSpacesAvailable",
    "c++": "xStreamBufferSpacesAvailable(StreamBufferHandle_t)",
    "go": "XStreamBufferSpacesAvailable"
  },
  {
    "mangle": "xTaskCreatePinnedToCore",
    "c++": "xTaskCreatePinnedToCore(TaskFunction_t, const char *const, const uint32_t, void *const, UBaseType_t, TaskHandle_t *const, BaseType_t *)",
    "go": "XTaskCreatePinnedToCore"
  },
  {
    "mangle": "xTaskCreatePinnedToCoreWithCaps",
    "c++": "xTaskCreatePinnedToCoreWithCaps(TaskFunction_t, const char *const, const uint32_t, void *const, UBaseType_t, TaskHandle_t *const, BaseType_t *, UBaseType_t)",
    "go": "XTaskCreatePinnedToCoreWithCaps"
  },
  {
    "mangle": "xTaskCreateStaticPinnedToCore",
    "c++": "xTaskCreateStaticPinnedToCore(TaskFunction_t, const char *const, const uint32_t, void *const, UBaseType_t, StackType_t *const, int *const, BaseType_t *)",
    "go": "XTaskCreateStaticPinnedToCore"
  },
  {
    "mangle": "xTaskGetCoreID",
    "c++": "xTaskGetCoreID(TaskHandle_t)",
    "go": "XTaskGetCoreID"
  },
  {
    "mangle": "xTaskGetCurrentTaskHandleForCore",
    "c++": "xTaskGetCurrentTaskHandleForCore(BaseType_t *)",
    "go": "BaseTypeT.XTaskGetCurrentTaskHandleForCore"
  },
  {
    "mangle": "xTaskGetIdleTaskHandleForCore",
    "c++": "xTaskGetIdleTaskHandleForCore(BaseType_t *)",
    "go": "BaseTypeT.XTaskGetIdleTaskHandleForCore"
  },
  {
    "mangle": "xTaskGetNext",
    "c++": "xTaskGetNext(TaskIterator_t *)",
    "go": "(*TaskIteratorT).XTaskGetNext"
  },
  {
    "mangle": "xTimerCreateTimerTask",
    "c++": "xTimerCreateTimerTask()",
    "go": "XTimerCreateTimerTask"
  },
  {
    "mangle": "xTimerGenericCommand",
    "c++": "xTimerGenericCommand(TimerHandle_t, BaseType_t *, const TickType_t, BaseType_t *const, const TickType_t)",
    "go": "XTimerGenericCommand"
  },
  {
    "mangle": "xTimerGetExpiryTime",
    "c++": "xTimerGetExpiryTime(TimerHandle_t)",
    "go": "XTimerGetExpiryTime"
  },
  {
    "mangle": "xTimerGetPeriod",
    "c++": "xTimerGetPeriod(TimerHandle_t)",
    "go": "XTimerGetPeriod"
  },
  {
    "mangle": "xTimerGetReloadMode",
    "c++": "xTimerGetReloadMode(TimerHandle_t)",
    "go": "XTimerGetReloadMode"
  },
  {
    "mangle": "xTimerGetTimerDaemonTaskHandle",
    "c++": "xTimerGetTimerDaemonTaskHandle()",
    "go": "XTimerGetTimerDaemonTaskHandle"
  },
  {
    "mangle": "xTimerIsTimerActive",
    "c++": "xTimerIsTimerActive(TimerHandle_t)",
    "go": "XTimerIsTimerActive"
  },
  {
    "mangle": "xTimerPendFunctionCall",
    "c++": "xTimerPendFunctionCall(PendedFunction_t, void *, uint32_t, TickType_t)",
    "go": "XTimerPendFunctionCall"
  },
  {
    "mangle": "xTimerPendFunctionCallFromISR",
    "c++": "xTimerPendFunctionCallFromISR(PendedFunction_t, void *, uint32_t, BaseType_t *)",
    "go": "XTimerPendFunctionCallFromISR"
  }
]