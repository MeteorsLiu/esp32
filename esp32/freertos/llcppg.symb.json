[
  {
    "mangle": "pvPortMalloc",
    "c++": "pvPortMalloc(size_t)",
    "go": "PvPortMalloc"
  },
  {
    "mangle": "pvTaskGetCurrentTCBForCore",
    "c++": "pvTaskGetCurrentTCBForCore(BaseType_t *)",
    "go": "BaseTypeT.PvTaskGetCurrentTCBForCore"
  },
  {
    "mangle": "pxPortInitialiseStack",
    "c++": "pxPortInitialiseStack(StackType_t *, int, void *)",
    "go": "(*StackTypeT).PxPortInitialiseStack"
  },
  {
    "mangle": "pxTaskGetStackStart",
    "c++": "pxTaskGetStackStart(TaskHandle_t)",
    "go": "PxTaskGetStackStart"
  },
  {
    "mangle": "uxTaskGetSnapshotAll",
    "c++": "uxTaskGetSnapshotAll(TaskSnapshot_t *const, const int, int *const)",
    "go": "(*TaskSnapshotT).UxTaskGetSnapshotAll"
  },
  {
    "mangle": "vPortAssertIfInISR",
    "c++": "vPortAssertIfInISR()",
    "go": "VPortAssertIfInISR"
  },
  {
    "mangle": "vPortEndScheduler",
    "c++": "vPortEndScheduler()",
    "go": "VPortEndScheduler"
  },
  {
    "mangle": "vPortExitCritical",
    "c++": "vPortExitCritical(portMUX_TYPE *)",
    "go": "(*PortMUXTYPE).VPortExitCritical"
  },
  {
    "mangle": "vPortExitCriticalCompliance",
    "c++": "vPortExitCriticalCompliance(portMUX_TYPE *)",
    "go": "(*PortMUXTYPE).VPortExitCriticalCompliance"
  },
  {
    "mangle": "vPortFree",
    "c++": "vPortFree(void *)",
    "go": "VPortFree"
  },
  {
    "mangle": "vPortSetStackWatchpoint",
    "c++": "vPortSetStackWatchpoint(void *)",
    "go": "VPortSetStackWatchpoint"
  },
  {
    "mangle": "vPortTCBPreDeleteHook",
    "c++": "vPortTCBPreDeleteHook(void *)",
    "go": "VPortTCBPreDeleteHook"
  },
  {
    "mangle": "vPortYield",
    "c++": "vPortYield()",
    "go": "VPortYield"
  },
  {
    "mangle": "vPortYieldOtherCore",
    "c++": "vPortYieldOtherCore(BaseType_t *)",
    "go": "BaseTypeT.VPortYieldOtherCore"
  },
  {
    "mangle": "vStreamBufferGenericDeleteWithCaps",
    "c++": "vStreamBufferGenericDeleteWithCaps(StreamBufferHandle_t, BaseType_t *)",
    "go": "VStreamBufferGenericDeleteWithCaps"
  },
  {
    "mangle": "vTaskGetSnapshot",
    "c++": "vTaskGetSnapshot(TaskHandle_t, TaskSnapshot_t *)",
    "go": "VTaskGetSnapshot"
  },
  {
    "mangle": "vTaskSetThreadLocalStoragePointerAndDelCallback",
    "c++": "vTaskSetThreadLocalStoragePointerAndDelCallback(TaskHandle_t, BaseType_t *, void *, TlsDeleteCallbackFunction_t)",
    "go": "VTaskSetThreadLocalStoragePointerAndDelCallback"
  },
  {
    "mangle": "xPortCheckValidListMem",
    "c++": "xPortCheckValidListMem(const void *)",
    "go": "XPortCheckValidListMem"
  },
  {
    "mangle": "xPortCheckValidTCBMem",
    "c++": "xPortCheckValidTCBMem(const void *)",
    "go": "XPortCheckValidTCBMem"
  },
  {
    "mangle": "xPortEnterCriticalTimeout",
    "c++": "xPortEnterCriticalTimeout(portMUX_TYPE *, BaseType_t *)",
    "go": "(*PortMUXTYPE).XPortEnterCriticalTimeout"
  },
  {
    "mangle": "xPortEnterCriticalTimeoutCompliance",
    "c++": "xPortEnterCriticalTimeoutCompliance(portMUX_TYPE *, BaseType_t *)",
    "go": "(*PortMUXTYPE).XPortEnterCriticalTimeoutCompliance"
  },
  {
    "mangle": "xPortGetTickRateHz",
    "c++": "xPortGetTickRateHz()",
    "go": "XPortGetTickRateHz"
  },
  {
    "mangle": "xPortInIsrContext",
    "c++": "xPortInIsrContext()",
    "go": "XPortInIsrContext"
  },
  {
    "mangle": "xPortInterruptedFromISRContext",
    "c++": "xPortInterruptedFromISRContext()",
    "go": "XPortInterruptedFromISRContext"
  },
  {
    "mangle": "xPortStartScheduler",
    "c++": "xPortStartScheduler()",
    "go": "XPortStartScheduler"
  },
  {
    "mangle": "xPortcheckValidStackMem",
    "c++": "xPortcheckValidStackMem(const void *)",
    "go": "XPortcheckValidStackMem"
  },
  {
    "mangle": "xSemaphoreCreateGenericWithCaps",
    "c++": "xSemaphoreCreateGenericWithCaps(int, int, const uint8_t, int)",
    "go": "XSemaphoreCreateGenericWithCaps"
  },
  {
    "mangle": "xStreamBufferGenericCreateWithCaps",
    "c++": "xStreamBufferGenericCreateWithCaps(int, int, BaseType_t *, int)",
    "go": "XStreamBufferGenericCreateWithCaps"
  },
  {
    "mangle": "xTaskGetCoreID",
    "c++": "xTaskGetCoreID(TaskHandle_t)",
    "go": "XTaskGetCoreID"
  },
  {
    "mangle": "xTaskGetNext",
    "c++": "xTaskGetNext(TaskIterator_t *)",
    "go": "(*TaskIteratorT).XTaskGetNext"
  }
]