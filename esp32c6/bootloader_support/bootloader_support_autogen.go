package bootloader_support

import (
	"github.com/goplus/lib/c"
	_ "unsafe"
)

const X_NEWLIB_VERSION_H__ = 1
const X_NEWLIB_VERSION = "4.3.0"
const X__NEWLIB__ = 4
const X__NEWLIB_MINOR__ = 3
const X__NEWLIB_PATCHLEVEL__ = 0
const X_ATFILE_SOURCE = 1
const X_DEFAULT_SOURCE = 1
const X_ISOC99_SOURCE = 1
const X_ISOC11_SOURCE = 1
const X_POSIX_SOURCE = 1
const X_XOPEN_SOURCE = 700
const X_XOPEN_SOURCE_EXTENDED = 1
const X__ATFILE_VISIBLE = 1
const X__BSD_VISIBLE = 1
const X__GNU_VISIBLE = 1
const X__ISO_C_VISIBLE = 2011
const X__LARGEFILE_VISIBLE = 1
const X__MISC_VISIBLE = 1
const X__POSIX_VISIBLE = 200809
const X__SVID_VISIBLE = 1
const X__XSI_VISIBLE = 700
const X__SSP_FORTIFY_LEVEL = 0
const X_POSIX_THREADS = 1
const X_POSIX_TIMEOUTS = 1
const X_POSIX_TIMERS = 1
const X_UNIX98_THREAD_MUTEX_ATTRIBUTES = 1
const X__have_longlong64 = 1
const X__have_long32 = 1
const X___int8_t_defined = 1
const X___int16_t_defined = 1
const X___int32_t_defined = 1
const X___int64_t_defined = 1
const X___int_least8_t_defined = 1
const X___int_least16_t_defined = 1
const X___int_least32_t_defined = 1
const X___int_least64_t_defined = 1
const X__INT8 = "hh"
const X__INT16 = "h"
const X__INT64 = "ll"
const X__FAST8 = "hh"
const X__FAST16 = "h"
const X__FAST64 = "ll"
const X__LEAST8 = "hh"
const X__LEAST16 = "h"
const X__LEAST64 = "ll"
const X__int8_t_defined = 1
const X__int16_t_defined = 1
const X__int32_t_defined = 1
const X__int64_t_defined = 1
const X__int_least8_t_defined = 1
const X__int_least16_t_defined = 1
const X__int_least32_t_defined = 1
const X__int_least64_t_defined = 1
const X__int_fast8_t_defined = 1
const X__int_fast16_t_defined = 1
const X__int_fast32_t_defined = 1
const X__int_fast64_t_defined = 1
const X__bool_true_false_are_defined = 1
const True = 1
const False = 0
const CONFIG_SOC_ADC_SUPPORTED = 1
const CONFIG_SOC_DEDICATED_GPIO_SUPPORTED = 1
const CONFIG_SOC_UART_SUPPORTED = 1
const CONFIG_SOC_GDMA_SUPPORTED = 1
const CONFIG_SOC_AHB_GDMA_SUPPORTED = 1
const CONFIG_SOC_GPTIMER_SUPPORTED = 1
const CONFIG_SOC_PCNT_SUPPORTED = 1
const CONFIG_SOC_MCPWM_SUPPORTED = 1
const CONFIG_SOC_TWAI_SUPPORTED = 1
const CONFIG_SOC_ETM_SUPPORTED = 1
const CONFIG_SOC_PARLIO_SUPPORTED = 1
const CONFIG_SOC_BT_SUPPORTED = 1
const CONFIG_SOC_IEEE802154_SUPPORTED = 1
const CONFIG_SOC_ASYNC_MEMCPY_SUPPORTED = 1
const CONFIG_SOC_USB_SERIAL_JTAG_SUPPORTED = 1
const CONFIG_SOC_TEMP_SENSOR_SUPPORTED = 1
const CONFIG_SOC_PHY_SUPPORTED = 1
const CONFIG_SOC_WIFI_SUPPORTED = 1
const CONFIG_SOC_SUPPORTS_SECURE_DL_MODE = 1
const CONFIG_SOC_ULP_SUPPORTED = 1
const CONFIG_SOC_LP_CORE_SUPPORTED = 1
const CONFIG_SOC_EFUSE_KEY_PURPOSE_FIELD = 1
const CONFIG_SOC_EFUSE_SUPPORTED = 1
const CONFIG_SOC_RTC_FAST_MEM_SUPPORTED = 1
const CONFIG_SOC_RTC_MEM_SUPPORTED = 1
const CONFIG_SOC_I2S_SUPPORTED = 1
const CONFIG_SOC_RMT_SUPPORTED = 1
const CONFIG_SOC_SDM_SUPPORTED = 1
const CONFIG_SOC_GPSPI_SUPPORTED = 1
const CONFIG_SOC_LEDC_SUPPORTED = 1
const CONFIG_SOC_I2C_SUPPORTED = 1
const CONFIG_SOC_SYSTIMER_SUPPORTED = 1
const CONFIG_SOC_SUPPORT_COEXISTENCE = 1
const CONFIG_SOC_AES_SUPPORTED = 1
const CONFIG_SOC_MPI_SUPPORTED = 1
const CONFIG_SOC_SHA_SUPPORTED = 1
const CONFIG_SOC_HMAC_SUPPORTED = 1
const CONFIG_SOC_DIG_SIGN_SUPPORTED = 1
const CONFIG_SOC_ECC_SUPPORTED = 1
const CONFIG_SOC_FLASH_ENC_SUPPORTED = 1
const CONFIG_SOC_SECURE_BOOT_SUPPORTED = 1
const CONFIG_SOC_SDIO_SLAVE_SUPPORTED = 1
const CONFIG_SOC_BOD_SUPPORTED = 1
const CONFIG_SOC_APM_SUPPORTED = 1
const CONFIG_SOC_PMU_SUPPORTED = 1
const CONFIG_SOC_PAU_SUPPORTED = 1
const CONFIG_SOC_LP_TIMER_SUPPORTED = 1
const CONFIG_SOC_LP_AON_SUPPORTED = 1
const CONFIG_SOC_LP_PERIPHERALS_SUPPORTED = 1
const CONFIG_SOC_LP_I2C_SUPPORTED = 1
const CONFIG_SOC_ULP_LP_UART_SUPPORTED = 1
const CONFIG_SOC_CLK_TREE_SUPPORTED = 1
const CONFIG_SOC_ASSIST_DEBUG_SUPPORTED = 1
const CONFIG_SOC_WDT_SUPPORTED = 1
const CONFIG_SOC_SPI_FLASH_SUPPORTED = 1
const CONFIG_SOC_RNG_SUPPORTED = 1
const CONFIG_SOC_LIGHT_SLEEP_SUPPORTED = 1
const CONFIG_SOC_DEEP_SLEEP_SUPPORTED = 1
const CONFIG_SOC_MODEM_CLOCK_SUPPORTED = 1
const CONFIG_SOC_PM_SUPPORTED = 1
const CONFIG_SOC_XTAL_SUPPORT_40M = 1
const CONFIG_SOC_XTAL_CLOCK_PATH_DEPENDS_ON_TOP_DOMAIN = 1
const CONFIG_SOC_AES_SUPPORT_DMA = 1
const CONFIG_SOC_AES_GDMA = 1
const CONFIG_SOC_AES_SUPPORT_AES_128 = 1
const CONFIG_SOC_AES_SUPPORT_AES_256 = 1
const CONFIG_SOC_ADC_DIG_CTRL_SUPPORTED = 1
const CONFIG_SOC_ADC_DIG_IIR_FILTER_SUPPORTED = 1
const CONFIG_SOC_ADC_MONITOR_SUPPORTED = 1
const CONFIG_SOC_ADC_DMA_SUPPORTED = 1
const CONFIG_SOC_ADC_PERIPH_NUM = 1
const CONFIG_SOC_ADC_MAX_CHANNEL_NUM = 7
const CONFIG_SOC_ADC_ATTEN_NUM = 4
const CONFIG_SOC_ADC_DIGI_CONTROLLER_NUM = 1
const CONFIG_SOC_ADC_PATT_LEN_MAX = 8
const CONFIG_SOC_ADC_DIGI_MAX_BITWIDTH = 12
const CONFIG_SOC_ADC_DIGI_MIN_BITWIDTH = 12
const CONFIG_SOC_ADC_DIGI_IIR_FILTER_NUM = 2
const CONFIG_SOC_ADC_DIGI_MONITOR_NUM = 2
const CONFIG_SOC_ADC_DIGI_RESULT_BYTES = 4
const CONFIG_SOC_ADC_DIGI_DATA_BYTES_PER_CONV = 4
const CONFIG_SOC_ADC_SAMPLE_FREQ_THRES_HIGH = 83333
const CONFIG_SOC_ADC_SAMPLE_FREQ_THRES_LOW = 611
const CONFIG_SOC_ADC_RTC_MIN_BITWIDTH = 12
const CONFIG_SOC_ADC_RTC_MAX_BITWIDTH = 12
const CONFIG_SOC_ADC_CALIBRATION_V1_SUPPORTED = 1
const CONFIG_SOC_ADC_SELF_HW_CALI_SUPPORTED = 1
const CONFIG_SOC_ADC_CALIB_CHAN_COMPENS_SUPPORTED = 1
const CONFIG_SOC_ADC_TEMPERATURE_SHARE_INTR = 1
const CONFIG_SOC_ADC_SHARED_POWER = 1
const CONFIG_SOC_BROWNOUT_RESET_SUPPORTED = 1
const CONFIG_SOC_SHARED_IDCACHE_SUPPORTED = 1
const CONFIG_SOC_CACHE_FREEZE_SUPPORTED = 1
const CONFIG_SOC_CPU_CORES_NUM = 1
const CONFIG_SOC_CPU_INTR_NUM = 32
const CONFIG_SOC_CPU_HAS_FLEXIBLE_INTC = 1
const CONFIG_SOC_INT_PLIC_SUPPORTED = 1
const CONFIG_SOC_CPU_HAS_CSR_PC = 1
const CONFIG_SOC_CPU_BREAKPOINTS_NUM = 4
const CONFIG_SOC_CPU_WATCHPOINTS_NUM = 4
const CONFIG_SOC_CPU_WATCHPOINT_MAX_REGION_SIZE = 0x80000000
const CONFIG_SOC_CPU_HAS_PMA = 1
const CONFIG_SOC_CPU_IDRAM_SPLIT_USING_PMP = 1
const CONFIG_SOC_CPU_PMP_REGION_GRANULARITY = 4
const CONFIG_SOC_DS_SIGNATURE_MAX_BIT_LEN = 3072
const CONFIG_SOC_DS_KEY_PARAM_MD_IV_LENGTH = 16
const CONFIG_SOC_DS_KEY_CHECK_MAX_WAIT_US = 1100
const CONFIG_SOC_AHB_GDMA_VERSION = 1
const CONFIG_SOC_GDMA_NUM_GROUPS_MAX = 1
const CONFIG_SOC_GDMA_PAIRS_PER_GROUP_MAX = 3
const CONFIG_SOC_GDMA_SUPPORT_ETM = 1
const CONFIG_SOC_GDMA_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_ETM_GROUPS = 1
const CONFIG_SOC_ETM_CHANNELS_PER_GROUP = 50
const CONFIG_SOC_ETM_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_GPIO_PORT = 1
const CONFIG_SOC_GPIO_PIN_COUNT = 31
const CONFIG_SOC_GPIO_SUPPORT_PIN_GLITCH_FILTER = 1
const CONFIG_SOC_GPIO_FLEX_GLITCH_FILTER_NUM = 8
const CONFIG_SOC_GPIO_SUPPORT_ETM = 1
const CONFIG_SOC_GPIO_SUPPORT_RTC_INDEPENDENT = 1
const CONFIG_SOC_GPIO_SUPPORT_DEEPSLEEP_WAKEUP = 1
const CONFIG_SOC_LP_IO_CLOCK_IS_INDEPENDENT = 1
const CONFIG_SOC_GPIO_IN_RANGE_MAX = 30
const CONFIG_SOC_GPIO_OUT_RANGE_MAX = 30
const CONFIG_SOC_GPIO_DEEP_SLEEP_WAKE_VALID_GPIO_MASK = 0
const CONFIG_SOC_GPIO_DEEP_SLEEP_WAKE_SUPPORTED_PIN_CNT = 8
const CONFIG_SOC_GPIO_VALID_DIGITAL_IO_PAD_MASK = 0x000000007FFFFF00
const CONFIG_SOC_GPIO_SUPPORT_FORCE_HOLD = 1
const CONFIG_SOC_GPIO_SUPPORT_HOLD_IO_IN_DSLP = 1
const CONFIG_SOC_GPIO_SUPPORT_HOLD_SINGLE_IO_IN_DSLP = 1
const CONFIG_SOC_GPIO_CLOCKOUT_BY_GPIO_MATRIX = 1
const CONFIG_SOC_CLOCKOUT_HAS_SOURCE_GATE = 1
const CONFIG_SOC_GPIO_CLOCKOUT_CHANNEL_NUM = 3
const CONFIG_SOC_RTCIO_PIN_COUNT = 8
const CONFIG_SOC_RTCIO_INPUT_OUTPUT_SUPPORTED = 1
const CONFIG_SOC_RTCIO_HOLD_SUPPORTED = 1
const CONFIG_SOC_RTCIO_WAKE_SUPPORTED = 1
const CONFIG_SOC_RTCIO_EDGE_WAKE_SUPPORTED = 1
const CONFIG_SOC_DEDIC_GPIO_OUT_CHANNELS_NUM = 8
const CONFIG_SOC_DEDIC_GPIO_IN_CHANNELS_NUM = 8
const CONFIG_SOC_DEDIC_PERIPH_ALWAYS_ENABLE = 1
const CONFIG_SOC_I2C_NUM = 2
const CONFIG_SOC_HP_I2C_NUM = 1
const CONFIG_SOC_I2C_FIFO_LEN = 32
const CONFIG_SOC_I2C_CMD_REG_NUM = 8
const CONFIG_SOC_I2C_SUPPORT_SLAVE = 1
const CONFIG_SOC_I2C_SUPPORT_HW_FSM_RST = 1
const CONFIG_SOC_I2C_SUPPORT_HW_CLR_BUS = 1
const CONFIG_SOC_I2C_SUPPORT_XTAL = 1
const CONFIG_SOC_I2C_SUPPORT_RTC = 1
const CONFIG_SOC_I2C_SUPPORT_10BIT_ADDR = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_BROADCAST = 1
const CONFIG_SOC_I2C_SLAVE_CAN_GET_STRETCH_CAUSE = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_I2CRAM_ACCESS = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_SLAVE_UNMATCH = 1
const CONFIG_SOC_I2C_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_LP_I2C_NUM = 1
const CONFIG_SOC_LP_I2C_FIFO_LEN = 16
const CONFIG_SOC_I2S_NUM = 1
const CONFIG_SOC_I2S_HW_VERSION_2 = 1
const CONFIG_SOC_I2S_SUPPORTS_ETM = 1
const CONFIG_SOC_I2S_SUPPORTS_XTAL = 1
const CONFIG_SOC_I2S_SUPPORTS_PLL_F160M = 1
const CONFIG_SOC_I2S_SUPPORTS_PCM = 1
const CONFIG_SOC_I2S_SUPPORTS_PDM = 1
const CONFIG_SOC_I2S_SUPPORTS_PDM_TX = 1
const CONFIG_SOC_I2S_PDM_MAX_TX_LINES = 2
const CONFIG_SOC_I2S_SUPPORTS_TDM = 1
const CONFIG_SOC_I2S_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_LEDC_SUPPORT_PLL_DIV_CLOCK = 1
const CONFIG_SOC_LEDC_SUPPORT_XTAL_CLOCK = 1
const CONFIG_SOC_LEDC_TIMER_NUM = 4
const CONFIG_SOC_LEDC_CHANNEL_NUM = 6
const CONFIG_SOC_LEDC_TIMER_BIT_WIDTH = 20
const CONFIG_SOC_LEDC_SUPPORT_FADE_STOP = 1
const CONFIG_SOC_LEDC_GAMMA_CURVE_FADE_SUPPORTED = 1
const CONFIG_SOC_LEDC_GAMMA_CURVE_FADE_RANGE_MAX = 16
const CONFIG_SOC_LEDC_FADE_PARAMS_BIT_WIDTH = 10
const CONFIG_SOC_LEDC_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MMU_PAGE_SIZE_CONFIGURABLE = 1
const CONFIG_SOC_MMU_PAGE_SIZE_8KB_SUPPORTED = 1
const CONFIG_SOC_MMU_PERIPH_NUM = 1
const CONFIG_SOC_MMU_LINEAR_ADDRESS_REGION_NUM = 1
const CONFIG_SOC_MMU_DI_VADDR_SHARED = 1
const CONFIG_SOC_MPU_MIN_REGION_SIZE = 0x20000000
const CONFIG_SOC_MPU_REGIONS_MAX_NUM = 8
const CONFIG_SOC_PCNT_GROUPS = 1
const CONFIG_SOC_PCNT_UNITS_PER_GROUP = 4
const CONFIG_SOC_PCNT_CHANNELS_PER_UNIT = 2
const CONFIG_SOC_PCNT_THRES_POINT_PER_UNIT = 2
const CONFIG_SOC_PCNT_SUPPORT_RUNTIME_THRES_UPDATE = 1
const CONFIG_SOC_PCNT_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_RMT_GROUPS = 1
const CONFIG_SOC_RMT_TX_CANDIDATES_PER_GROUP = 2
const CONFIG_SOC_RMT_RX_CANDIDATES_PER_GROUP = 2
const CONFIG_SOC_RMT_CHANNELS_PER_GROUP = 4
const CONFIG_SOC_RMT_MEM_WORDS_PER_CHANNEL = 48
const CONFIG_SOC_RMT_SUPPORT_RX_PINGPONG = 1
const CONFIG_SOC_RMT_SUPPORT_RX_DEMODULATION = 1
const CONFIG_SOC_RMT_SUPPORT_TX_ASYNC_STOP = 1
const CONFIG_SOC_RMT_SUPPORT_TX_LOOP_COUNT = 1
const CONFIG_SOC_RMT_SUPPORT_TX_LOOP_AUTO_STOP = 1
const CONFIG_SOC_RMT_SUPPORT_TX_SYNCHRO = 1
const CONFIG_SOC_RMT_SUPPORT_TX_CARRIER_DATA_ONLY = 1
const CONFIG_SOC_RMT_SUPPORT_XTAL = 1
const CONFIG_SOC_RMT_SUPPORT_RC_FAST = 1
const CONFIG_SOC_RMT_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MCPWM_GROUPS = 1
const CONFIG_SOC_MCPWM_TIMERS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_OPERATORS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_COMPARATORS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_GENERATORS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_TRIGGERS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_GPIO_FAULTS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_CAPTURE_TIMERS_PER_GROUP = 1
const CONFIG_SOC_MCPWM_CAPTURE_CHANNELS_PER_TIMER = 3
const CONFIG_SOC_MCPWM_GPIO_SYNCHROS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_SWSYNC_CAN_PROPAGATE = 1
const CONFIG_SOC_MCPWM_SUPPORT_ETM = 1
const CONFIG_SOC_MCPWM_CAPTURE_CLK_FROM_GROUP = 1
const CONFIG_SOC_MCPWM_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_PARLIO_GROUPS = 1
const CONFIG_SOC_PARLIO_TX_UNITS_PER_GROUP = 1
const CONFIG_SOC_PARLIO_RX_UNITS_PER_GROUP = 1
const CONFIG_SOC_PARLIO_TX_UNIT_MAX_DATA_WIDTH = 16
const CONFIG_SOC_PARLIO_RX_UNIT_MAX_DATA_WIDTH = 16
const CONFIG_SOC_PARLIO_TX_RX_SHARE_INTERRUPT = 1
const CONFIG_SOC_PARLIO_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MPI_MEM_BLOCKS_NUM = 4
const CONFIG_SOC_MPI_OPERATIONS_NUM = 3
const CONFIG_SOC_RSA_MAX_BIT_LEN = 3072
const CONFIG_SOC_SHA_DMA_MAX_BUFFER_SIZE = 3968
const CONFIG_SOC_SHA_SUPPORT_DMA = 1
const CONFIG_SOC_SHA_SUPPORT_RESUME = 1
const CONFIG_SOC_SHA_GDMA = 1
const CONFIG_SOC_SHA_SUPPORT_SHA1 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA224 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA256 = 1
const CONFIG_SOC_SDM_GROUPS = 1
const CONFIG_SOC_SDM_CHANNELS_PER_GROUP = 4
const CONFIG_SOC_SDM_CLK_SUPPORT_PLL_F80M = 1
const CONFIG_SOC_SDM_CLK_SUPPORT_XTAL = 1
const CONFIG_SOC_SPI_PERIPH_NUM = 2
const CONFIG_SOC_SPI_MAX_CS_NUM = 6
const CONFIG_SOC_SPI_MAXIMUM_BUFFER_SIZE = 64
const CONFIG_SOC_SPI_SUPPORT_DDRCLK = 1
const CONFIG_SOC_SPI_SLAVE_SUPPORT_SEG_TRANS = 1
const CONFIG_SOC_SPI_SUPPORT_CD_SIG = 1
const CONFIG_SOC_SPI_SUPPORT_CONTINUOUS_TRANS = 1
const CONFIG_SOC_SPI_SUPPORT_SLAVE_HD_VER2 = 1
const CONFIG_SOC_SPI_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_XTAL = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_PLL_F80M = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_RC_FAST = 1
const CONFIG_SOC_SPI_SCT_SUPPORTED = 1
const CONFIG_SOC_SPI_SCT_REG_NUM = 14
const CONFIG_SOC_SPI_SCT_BUFFER_NUM_MAX = 1
const CONFIG_SOC_SPI_SCT_CONF_BITLEN_MAX = 0x3FFFA
const CONFIG_SOC_MEMSPI_IS_INDEPENDENT = 1
const CONFIG_SOC_SPI_MAX_PRE_DIVIDER = 16
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_WAIT_IDLE = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_SUSPEND = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_RESUME = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_IDLE_INTR = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_SW_SUSPEND = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_CHECK_SUS = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_WRAP = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_80M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_40M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_20M_SUPPORTED = 1
const CONFIG_SOC_SYSTIMER_COUNTER_NUM = 2
const CONFIG_SOC_SYSTIMER_ALARM_NUM = 3
const CONFIG_SOC_SYSTIMER_BIT_WIDTH_LO = 32
const CONFIG_SOC_SYSTIMER_BIT_WIDTH_HI = 20
const CONFIG_SOC_SYSTIMER_FIXED_DIVIDER = 1
const CONFIG_SOC_SYSTIMER_SUPPORT_RC_FAST = 1
const CONFIG_SOC_SYSTIMER_INT_LEVEL = 1
const CONFIG_SOC_SYSTIMER_ALARM_MISS_COMPENSATE = 1
const CONFIG_SOC_SYSTIMER_SUPPORT_ETM = 1
const CONFIG_SOC_LP_TIMER_BIT_WIDTH_LO = 32
const CONFIG_SOC_LP_TIMER_BIT_WIDTH_HI = 16
const CONFIG_SOC_TIMER_GROUPS = 2
const CONFIG_SOC_TIMER_GROUP_TIMERS_PER_GROUP = 1
const CONFIG_SOC_TIMER_GROUP_COUNTER_BIT_WIDTH = 54
const CONFIG_SOC_TIMER_GROUP_SUPPORT_XTAL = 1
const CONFIG_SOC_TIMER_GROUP_SUPPORT_RC_FAST = 1
const CONFIG_SOC_TIMER_GROUP_TOTAL_TIMERS = 2
const CONFIG_SOC_TIMER_SUPPORT_ETM = 1
const CONFIG_SOC_TIMER_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MWDT_SUPPORT_XTAL = 1
const CONFIG_SOC_MWDT_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_TWAI_CONTROLLER_NUM = 2
const CONFIG_SOC_TWAI_CLK_SUPPORT_XTAL = 1
const CONFIG_SOC_TWAI_BRP_MIN = 2
const CONFIG_SOC_TWAI_BRP_MAX = 32768
const CONFIG_SOC_TWAI_SUPPORTS_RX_STATUS = 1
const CONFIG_SOC_TWAI_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_EFUSE_DIS_DOWNLOAD_ICACHE = 1
const CONFIG_SOC_EFUSE_DIS_PAD_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_USB_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_DIRECT_BOOT = 1
const CONFIG_SOC_EFUSE_SOFT_DIS_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_ICACHE = 1
const CONFIG_SOC_EFUSE_BLOCK9_KEY_PURPOSE_QUIRK = 1
const CONFIG_SOC_SECURE_BOOT_V2_RSA = 1
const CONFIG_SOC_SECURE_BOOT_V2_ECC = 1
const CONFIG_SOC_EFUSE_SECURE_BOOT_KEY_DIGESTS = 3
const CONFIG_SOC_EFUSE_REVOKE_BOOT_KEY_DIGESTS = 1
const CONFIG_SOC_SUPPORT_SECURE_BOOT_REVOKE_KEY = 1
const CONFIG_SOC_FLASH_ENCRYPTED_XTS_AES_BLOCK_MAX = 64
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES = 1
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES_128 = 1
const CONFIG_SOC_APM_CTRL_FILTER_SUPPORTED = 1
const CONFIG_SOC_APM_LP_APM0_SUPPORTED = 1
const CONFIG_SOC_CRYPTO_DPA_PROTECTION_SUPPORTED = 1
const CONFIG_SOC_UART_NUM = 3
const CONFIG_SOC_UART_HP_NUM = 2
const CONFIG_SOC_UART_LP_NUM = 1
const CONFIG_SOC_UART_FIFO_LEN = 128
const CONFIG_SOC_LP_UART_FIFO_LEN = 16
const CONFIG_SOC_UART_BITRATE_MAX = 5000000
const CONFIG_SOC_UART_SUPPORT_PLL_F80M_CLK = 1
const CONFIG_SOC_UART_SUPPORT_RTC_CLK = 1
const CONFIG_SOC_UART_SUPPORT_XTAL_CLK = 1
const CONFIG_SOC_UART_SUPPORT_WAKEUP_INT = 1
const CONFIG_SOC_UART_HAS_LP_UART = 1
const CONFIG_SOC_UART_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_UART_SUPPORT_FSM_TX_WAIT_SEND = 1
const CONFIG_SOC_COEX_HW_PTI = 1
const CONFIG_SOC_EXTERNAL_COEX_ADVANCE = 1
const CONFIG_SOC_PHY_DIG_REGS_MEM_SIZE = 21
const CONFIG_SOC_WIFI_LIGHT_SLEEP_CLK_WIDTH = 12
const CONFIG_SOC_PM_SUPPORT_WIFI_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_BEACON_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_BT_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_EXT1_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_EXT1_WAKEUP_MODE_PER_PIN = 1
const CONFIG_SOC_PM_SUPPORT_CPU_PD = 1
const CONFIG_SOC_PM_SUPPORT_MODEM_PD = 1
const CONFIG_SOC_PM_SUPPORT_XTAL32K_PD = 1
const CONFIG_SOC_PM_SUPPORT_RC32K_PD = 1
const CONFIG_SOC_PM_SUPPORT_RC_FAST_PD = 1
const CONFIG_SOC_PM_SUPPORT_VDDSDIO_PD = 1
const CONFIG_SOC_PM_SUPPORT_TOP_PD = 1
const CONFIG_SOC_PM_SUPPORT_HP_AON_PD = 1
const CONFIG_SOC_PM_SUPPORT_MAC_BB_PD = 1
const CONFIG_SOC_PM_SUPPORT_RTC_PERIPH_PD = 1
const CONFIG_SOC_PM_SUPPORT_PMU_MODEM_STATE = 1
const CONFIG_SOC_PM_SUPPORT_DEEPSLEEP_CHECK_STUB_ONLY = 1
const CONFIG_SOC_PM_CPU_RETENTION_BY_SW = 1
const CONFIG_SOC_PM_MODEM_RETENTION_BY_REGDMA = 1
const CONFIG_SOC_PM_RETENTION_HAS_CLOCK_BUG = 1
const CONFIG_SOC_EXT_MEM_CACHE_TAG_IN_CPU_DOMAIN = 1
const CONFIG_SOC_PM_PAU_LINK_NUM = 4
const CONFIG_SOC_PM_PAU_REGDMA_LINK_MULTI_ADDR = 1
const CONFIG_SOC_PM_PAU_REGDMA_LINK_WIFIMAC = 1
const CONFIG_SOC_PM_PAU_REGDMA_UPDATE_CACHE_BEFORE_WAIT_COMPARE = 1
const CONFIG_SOC_PM_PMU_MIN_SLP_SLOW_CLK_CYCLE_FIXED = 1
const CONFIG_SOC_PM_RETENTION_MODULE_NUM = 32
const CONFIG_SOC_CLK_RC_FAST_SUPPORT_CALIBRATION = 1
const CONFIG_SOC_MODEM_CLOCK_IS_INDEPENDENT = 1
const CONFIG_SOC_CLK_XTAL32K_SUPPORTED = 1
const CONFIG_SOC_CLK_OSC_SLOW_SUPPORTED = 1
const CONFIG_SOC_CLK_RC32K_SUPPORTED = 1
const CONFIG_SOC_RCC_IS_INDEPENDENT = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_FAST_RC = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_XTAL = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_INTR_SUPPORT = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_ETM = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_UNDER_PD_TOP_DOMAIN = 1
const CONFIG_SOC_RNG_CLOCK_IS_INDEPENDENT = 1
const CONFIG_SOC_WIFI_HW_TSF = 1
const CONFIG_SOC_WIFI_FTM_SUPPORT = 1
const CONFIG_SOC_WIFI_GCMP_SUPPORT = 1
const CONFIG_SOC_WIFI_WAPI_SUPPORT = 1
const CONFIG_SOC_WIFI_CSI_SUPPORT = 1
const CONFIG_SOC_WIFI_MESH_SUPPORT = 1
const CONFIG_SOC_WIFI_HE_SUPPORT = 1
const CONFIG_SOC_WIFI_MAC_VERSION_NUM = 2
const CONFIG_SOC_BLE_SUPPORTED = 1
const CONFIG_SOC_BLE_MESH_SUPPORTED = 1
const CONFIG_SOC_ESP_NIMBLE_CONTROLLER = 1
const CONFIG_SOC_BLE_50_SUPPORTED = 1
const CONFIG_SOC_BLE_DEVICE_PRIVACY_SUPPORTED = 1
const CONFIG_SOC_BLE_POWER_CONTROL_SUPPORTED = 1
const CONFIG_SOC_BLE_PERIODIC_ADV_ENH_SUPPORTED = 1
const CONFIG_SOC_BLUFI_SUPPORTED = 1
const CONFIG_SOC_BLE_MULTI_CONN_OPTIMIZATION = 1
const CONFIG_SOC_BLE_USE_WIFI_PWR_CLK_WORKAROUND = 1
const CONFIG_SOC_PHY_COMBO_MODULE = 1
const CONFIG_SOC_CAPS_NO_RESET_BY_ANA_BOD = 1
const CONFIG_SOC_LP_CORE_SINGLE_INTERRUPT_VECTOR = 1
const CONFIG_SOC_LP_CORE_SUPPORT_ETM = 1
const CONFIG_SOC_DEBUG_HAVE_OCD_STUB_BINS = 1
const CONFIG_IDF_CMAKE = 1
const CONFIG_IDF_TOOLCHAIN = "gcc"
const CONFIG_IDF_TOOLCHAIN_GCC = 1
const CONFIG_IDF_TARGET_ARCH_RISCV = 1
const CONFIG_IDF_TARGET_ARCH = "riscv"
const CONFIG_IDF_TARGET = "esp32c6"
const CONFIG_IDF_INIT_VERSION = "5.4.2"
const CONFIG_IDF_TARGET_ESP32C6 = 1
const CONFIG_IDF_FIRMWARE_CHIP_ID = 0x000D
const CONFIG_APP_BUILD_TYPE_APP_2NDBOOT = 1
const CONFIG_APP_BUILD_GENERATE_BINARIES = 1
const CONFIG_APP_BUILD_BOOTLOADER = 1
const CONFIG_APP_BUILD_USE_FLASH_SECTIONS = 1
const CONFIG_BOOTLOADER_COMPILE_TIME_DATE = 1
const CONFIG_BOOTLOADER_PROJECT_VER = 1
const CONFIG_BOOTLOADER_OFFSET_IN_FLASH = 0x0
const CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_SIZE = 1
const CONFIG_BOOTLOADER_LOG_LEVEL_INFO = 1
const CONFIG_BOOTLOADER_LOG_LEVEL = 3
const CONFIG_BOOTLOADER_LOG_TIMESTAMP_SOURCE_CPU_TICKS = 1
const CONFIG_BOOTLOADER_FLASH_XMC_SUPPORT = 1
const CONFIG_BOOTLOADER_REGION_PROTECTION_ENABLE = 1
const CONFIG_BOOTLOADER_WDT_ENABLE = 1
const CONFIG_BOOTLOADER_WDT_TIME_MS = 9000
const CONFIG_BOOTLOADER_RESERVE_RTC_SIZE = 0x0
const CONFIG_SECURE_BOOT_V2_RSA_SUPPORTED = 1
const CONFIG_SECURE_BOOT_V2_ECC_SUPPORTED = 1
const CONFIG_SECURE_BOOT_V2_PREFERRED = 1
const CONFIG_SECURE_ROM_DL_MODE_ENABLED = 1
const CONFIG_APP_COMPILE_TIME_DATE = 1
const CONFIG_APP_RETRIEVE_LEN_ELF_SHA = 9
const CONFIG_ESP_ROM_HAS_CRC_LE = 1
const CONFIG_ESP_ROM_HAS_CRC_BE = 1
const CONFIG_ESP_ROM_HAS_JPEG_DECODE = 1
const CONFIG_ESP_ROM_UART_CLK_IS_XTAL = 1
const CONFIG_ESP_ROM_USB_SERIAL_DEVICE_NUM = 3
const CONFIG_ESP_ROM_HAS_RETARGETABLE_LOCKING = 1
const CONFIG_ESP_ROM_GET_CLK_FREQ = 1
const CONFIG_ESP_ROM_HAS_RVFPLIB = 1
const CONFIG_ESP_ROM_HAS_HAL_WDT = 1
const CONFIG_ESP_ROM_HAS_HAL_SYSTIMER = 1
const CONFIG_ESP_ROM_HAS_HEAP_TLSF = 1
const CONFIG_ESP_ROM_TLSF_CHECK_PATCH = 1
const CONFIG_ESP_ROM_MULTI_HEAP_WALK_PATCH = 1
const CONFIG_ESP_ROM_HAS_LAYOUT_TABLE = 1
const CONFIG_ESP_ROM_HAS_SPI_FLASH = 1
const CONFIG_ESP_ROM_HAS_REGI2C_BUG = 1
const CONFIG_ESP_ROM_HAS_NEWLIB = 1
const CONFIG_ESP_ROM_HAS_NEWLIB_NORMAL_FORMAT = 1
const CONFIG_ESP_ROM_REV0_HAS_NO_ECDSA_INTERFACE = 1
const CONFIG_ESP_ROM_WDT_INIT_PATCH = 1
const CONFIG_ESP_ROM_NEEDS_SET_CACHE_MMU_SIZE = 1
const CONFIG_ESP_ROM_RAM_APP_NEEDS_MMU_INIT = 1
const CONFIG_ESP_ROM_HAS_SW_FLOAT = 1
const CONFIG_ESP_ROM_HAS_VERSION = 1
const CONFIG_ESP_ROM_SUPPORT_DEEP_SLEEP_WAKEUP_STUB = 1
const CONFIG_ESP_ROM_HAS_OUTPUT_PUTC_FUNC = 1
const CONFIG_BOOT_ROM_LOG_ALWAYS_ON = 1
const CONFIG_ESPTOOLPY_FLASHMODE_DIO = 1
const CONFIG_ESPTOOLPY_FLASH_SAMPLE_MODE_STR = 1
const CONFIG_ESPTOOLPY_FLASHMODE = "dio"
const CONFIG_ESPTOOLPY_FLASHFREQ_80M = 1
const CONFIG_ESPTOOLPY_FLASHFREQ = "80m"
const CONFIG_ESPTOOLPY_FLASHSIZE_2MB = 1
const CONFIG_ESPTOOLPY_FLASHSIZE = "2MB"
const CONFIG_ESPTOOLPY_BEFORE_RESET = 1
const CONFIG_ESPTOOLPY_BEFORE = "default_reset"
const CONFIG_ESPTOOLPY_AFTER_RESET = 1
const CONFIG_ESPTOOLPY_AFTER = "hard_reset"
const CONFIG_ESPTOOLPY_MONITOR_BAUD = 115200
const CONFIG_PARTITION_TABLE_SINGLE_APP = 1
const CONFIG_PARTITION_TABLE_CUSTOM_FILENAME = "partitions.csv"
const CONFIG_PARTITION_TABLE_FILENAME = "partitions_singleapp.csv"
const CONFIG_PARTITION_TABLE_OFFSET = 0x8000
const CONFIG_PARTITION_TABLE_MD5 = 1
const CONFIG_COMPILER_OPTIMIZATION_DEBUG = 1
const CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE = 1
const CONFIG_COMPILER_ASSERT_NDEBUG_EVALUATE = 1
const CONFIG_COMPILER_FLOAT_LIB_FROM_RVFPLIB = 1
const CONFIG_COMPILER_OPTIMIZATION_ASSERTION_LEVEL = 2
const CONFIG_COMPILER_HIDE_PATHS_MACROS = 1
const CONFIG_COMPILER_STACK_CHECK_MODE_NONE = 1
const CONFIG_COMPILER_DISABLE_DEFAULT_ERRORS = 1
const CONFIG_COMPILER_RT_LIB_GCCLIB = 1
const CONFIG_COMPILER_RT_LIB_NAME = "gcc"
const CONFIG_COMPILER_ORPHAN_SECTIONS_WARNING = 1
const CONFIG_APPTRACE_DEST_NONE = 1
const CONFIG_APPTRACE_DEST_UART_NONE = 1
const CONFIG_APPTRACE_UART_TASK_PRIO = 1
const CONFIG_APPTRACE_LOCK_ENABLE = 1
const CONFIG_EFUSE_MAX_BLK_LEN = 256
const CONFIG_ESP_TLS_USING_MBEDTLS = 1
const CONFIG_ESP_TLS_USE_DS_PERIPHERAL = 1
const CONFIG_ESP_COEX_ENABLED = 1
const CONFIG_ESP_COEX_SW_COEXIST_ENABLE = 1
const CONFIG_ESP_ERR_TO_NAME_LOOKUP = 1
const CONFIG_GPTIMER_ISR_HANDLER_IN_IRAM = 1
const CONFIG_GPTIMER_OBJ_CACHE_SAFE = 1
const CONFIG_SPI_MASTER_ISR_IN_IRAM = 1
const CONFIG_SPI_SLAVE_ISR_IN_IRAM = 1
const CONFIG_USJ_ENABLE_USB_SERIAL_JTAG = 1
const CONFIG_ETH_ENABLED = 1
const CONFIG_ETH_USE_SPI_ETHERNET = 1
const CONFIG_ESP_EVENT_POST_FROM_ISR = 1
const CONFIG_ESP_EVENT_POST_FROM_IRAM_ISR = 1
const CONFIG_ESP_GDBSTUB_ENABLED = 1
const CONFIG_ESP_GDBSTUB_SUPPORT_TASKS = 1
const CONFIG_ESP_GDBSTUB_MAX_TASKS = 32
const CONFIG_ESPHID_TASK_SIZE_BT = 2048
const CONFIG_ESPHID_TASK_SIZE_BLE = 4096
const CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS = 1
const CONFIG_ESP_HTTP_CLIENT_EVENT_POST_TIMEOUT = 2000
const CONFIG_HTTPD_MAX_REQ_HDR_LEN = 512
const CONFIG_HTTPD_MAX_URI_LEN = 512
const CONFIG_HTTPD_ERR_RESP_NO_DELAY = 1
const CONFIG_HTTPD_PURGE_BUF_LEN = 32
const CONFIG_HTTPD_SERVER_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP_HTTPS_OTA_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP_HTTPS_SERVER_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP32C6_REV_MIN_0 = 1
const CONFIG_ESP32C6_REV_MIN_FULL = 0
const CONFIG_ESP_REV_MIN_FULL = 0
const CONFIG_ESP32C6_REV_MAX_FULL = 99
const CONFIG_ESP_REV_MAX_FULL = 99
const CONFIG_ESP_EFUSE_BLOCK_REV_MIN_FULL = 0
const CONFIG_ESP_EFUSE_BLOCK_REV_MAX_FULL = 99
const CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_STA = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_AP = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_BT = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_ETH = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_IEEE802154 = 1
const CONFIG_ESP_MAC_UNIVERSAL_MAC_ADDRESSES_FOUR = 1
const CONFIG_ESP_MAC_UNIVERSAL_MAC_ADDRESSES = 4
const CONFIG_ESP32C6_UNIVERSAL_MAC_ADDRESSES_FOUR = 1
const CONFIG_ESP32C6_UNIVERSAL_MAC_ADDRESSES = 4
const CONFIG_ESP_SLEEP_FLASH_LEAKAGE_WORKAROUND = 1
const CONFIG_ESP_SLEEP_GPIO_RESET_WORKAROUND = 1
const CONFIG_ESP_SLEEP_WAIT_FLASH_READY_EXTRA_DELAY = 0
const CONFIG_ESP_SLEEP_GPIO_ENABLE_INTERNAL_RESISTORS = 1
const CONFIG_RTC_CLK_SRC_INT_RC = 1
const CONFIG_RTC_CLK_CAL_CYCLES = 1024
const CONFIG_PERIPH_CTRL_FUNC_IN_IRAM = 1
const CONFIG_GDMA_CTRL_FUNC_IN_IRAM = 1
const CONFIG_GDMA_ISR_HANDLER_IN_IRAM = 1
const CONFIG_GDMA_OBJ_DRAM_SAFE = 1
const CONFIG_XTAL_FREQ_40 = 1
const CONFIG_XTAL_FREQ = 40
const CONFIG_ESP_SPI_BUS_LOCK_ISR_FUNCS_IN_IRAM = 1
const CONFIG_ESP_NETIF_IP_LOST_TIMER_INTERVAL = 120
const CONFIG_ESP_NETIF_TCPIP_LWIP = 1
const CONFIG_ESP_NETIF_USES_TCPIP_WITH_BSD_API = 1
const CONFIG_ESP_NETIF_REPORT_DATA_TRAFFIC = 1
const CONFIG_ESP_PHY_ENABLED = 1
const CONFIG_ESP_PHY_CALIBRATION_AND_DATA_STORAGE = 1
const CONFIG_ESP_PHY_MAX_WIFI_TX_POWER = 20
const CONFIG_ESP_PHY_MAX_TX_POWER = 20
const CONFIG_ESP_PHY_RF_CAL_PARTIAL = 1
const CONFIG_ESP_PHY_CALIBRATION_MODE = 0
const CONFIG_PM_SLP_DEFAULT_PARAMS_OPT = 1
const CONFIG_PM_POWER_DOWN_CPU_IN_LIGHT_SLEEP = 1
const CONFIG_ESP_CRYPTO_DPA_PROTECTION_AT_STARTUP = 1
const CONFIG_ESP_CRYPTO_DPA_PROTECTION_LEVEL_LOW = 1
const CONFIG_ESP_CRYPTO_DPA_PROTECTION_LEVEL = 1
const CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ_160 = 1
const CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ = 160
const CONFIG_ESP_SYSTEM_PANIC_PRINT_REBOOT = 1
const CONFIG_ESP_SYSTEM_PANIC_REBOOT_DELAY_SECONDS = 0
const CONFIG_ESP_SYSTEM_SINGLE_CORE_MODE = 1
const CONFIG_ESP_SYSTEM_RTC_FAST_MEM_AS_HEAP_DEPCHECK = 1
const CONFIG_ESP_SYSTEM_ALLOW_RTC_FAST_MEM_AS_HEAP = 1
const CONFIG_ESP_SYSTEM_PMP_IDRAM_SPLIT = 1
const CONFIG_ESP_SYSTEM_EVENT_QUEUE_SIZE = 32
const CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE = 2304
const CONFIG_ESP_MAIN_TASK_STACK_SIZE = 3584
const CONFIG_ESP_MAIN_TASK_AFFINITY_CPU0 = 1
const CONFIG_ESP_MAIN_TASK_AFFINITY = 0x0
const CONFIG_ESP_MINIMAL_SHARED_STACK_SIZE = 2048
const CONFIG_ESP_CONSOLE_UART_DEFAULT = 1
const CONFIG_ESP_CONSOLE_SECONDARY_USB_SERIAL_JTAG = 1
const CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG_ENABLED = 1
const CONFIG_ESP_CONSOLE_UART = 1
const CONFIG_ESP_CONSOLE_UART_NUM = 0
const CONFIG_ESP_CONSOLE_ROM_SERIAL_PORT_NUM = 0
const CONFIG_ESP_CONSOLE_UART_BAUDRATE = 115200
const CONFIG_ESP_INT_WDT = 1
const CONFIG_ESP_INT_WDT_TIMEOUT_MS = 300
const CONFIG_ESP_TASK_WDT_EN = 1
const CONFIG_ESP_TASK_WDT_INIT = 1
const CONFIG_ESP_TASK_WDT_TIMEOUT_S = 5
const CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU0 = 1
const CONFIG_ESP_DEBUG_OCDAWARE = 1
const CONFIG_ESP_SYSTEM_CHECK_INT_LEVEL_4 = 1
const CONFIG_ESP_BROWNOUT_DET = 1
const CONFIG_ESP_BROWNOUT_DET_LVL_SEL_7 = 1
const CONFIG_ESP_BROWNOUT_DET_LVL = 7
const CONFIG_ESP_SYSTEM_BROWNOUT_INTR = 1
const CONFIG_ESP_SYSTEM_HW_STACK_GUARD = 1
const CONFIG_ESP_SYSTEM_BBPLL_RECALIB = 1
const CONFIG_ESP_SYSTEM_HW_PC_RECORD = 1
const CONFIG_ESP_IPC_TASK_STACK_SIZE = 1024
const CONFIG_ESP_TIME_FUNCS_USE_RTC_TIMER = 1
const CONFIG_ESP_TIME_FUNCS_USE_ESP_TIMER = 1
const CONFIG_ESP_TIMER_TASK_STACK_SIZE = 3584
const CONFIG_ESP_TIMER_INTERRUPT_LEVEL = 1
const CONFIG_ESP_TIMER_TASK_AFFINITY = 0x0
const CONFIG_ESP_TIMER_TASK_AFFINITY_CPU0 = 1
const CONFIG_ESP_TIMER_ISR_AFFINITY_CPU0 = 1
const CONFIG_ESP_TIMER_IMPL_SYSTIMER = 1
const CONFIG_ESP_WIFI_ENABLED = 1
const CONFIG_ESP_WIFI_STATIC_RX_BUFFER_NUM = 10
const CONFIG_ESP_WIFI_DYNAMIC_RX_BUFFER_NUM = 32
const CONFIG_ESP_WIFI_DYNAMIC_TX_BUFFER = 1
const CONFIG_ESP_WIFI_TX_BUFFER_TYPE = 1
const CONFIG_ESP_WIFI_DYNAMIC_TX_BUFFER_NUM = 32
const CONFIG_ESP_WIFI_STATIC_RX_MGMT_BUFFER = 1
const CONFIG_ESP_WIFI_DYNAMIC_RX_MGMT_BUF = 0
const CONFIG_ESP_WIFI_RX_MGMT_BUF_NUM_DEF = 5
const CONFIG_ESP_WIFI_AMPDU_TX_ENABLED = 1
const CONFIG_ESP_WIFI_TX_BA_WIN = 6
const CONFIG_ESP_WIFI_AMPDU_RX_ENABLED = 1
const CONFIG_ESP_WIFI_RX_BA_WIN = 6
const CONFIG_ESP_WIFI_NVS_ENABLED = 1
const CONFIG_ESP_WIFI_SOFTAP_BEACON_MAX_LEN = 752
const CONFIG_ESP_WIFI_MGMT_SBUF_NUM = 32
const CONFIG_ESP_WIFI_IRAM_OPT = 1
const CONFIG_ESP_WIFI_EXTRA_IRAM_OPT = 1
const CONFIG_ESP_WIFI_RX_IRAM_OPT = 1
const CONFIG_ESP_WIFI_ENABLE_WPA3_SAE = 1
const CONFIG_ESP_WIFI_ENABLE_SAE_PK = 1
const CONFIG_ESP_WIFI_SOFTAP_SAE_SUPPORT = 1
const CONFIG_ESP_WIFI_ENABLE_WPA3_OWE_STA = 1
const CONFIG_ESP_WIFI_SLP_IRAM_OPT = 1
const CONFIG_ESP_WIFI_SLP_DEFAULT_MIN_ACTIVE_TIME = 50
const CONFIG_ESP_WIFI_SLP_DEFAULT_MAX_ACTIVE_TIME = 10
const CONFIG_ESP_WIFI_SLP_DEFAULT_WAIT_BROADCAST_DATA_TIME = 15
const CONFIG_ESP_WIFI_STA_DISCONNECTED_PM_ENABLE = 1
const CONFIG_ESP_WIFI_GMAC_SUPPORT = 1
const CONFIG_ESP_WIFI_SOFTAP_SUPPORT = 1
const CONFIG_ESP_WIFI_ESPNOW_MAX_ENCRYPT_NUM = 7
const CONFIG_ESP_WIFI_MBEDTLS_CRYPTO = 1
const CONFIG_ESP_WIFI_MBEDTLS_TLS_CLIENT = 1
const CONFIG_ESP_WIFI_TX_HETB_QUEUE_NUM = 3
const CONFIG_ESP_WIFI_ENTERPRISE_SUPPORT = 1
const CONFIG_ESP_COREDUMP_ENABLE_TO_NONE = 1
const CONFIG_FATFS_VOLUME_COUNT = 2
const CONFIG_FATFS_LFN_NONE = 1
const CONFIG_FATFS_SECTOR_4096 = 1
const CONFIG_FATFS_CODEPAGE_437 = 1
const CONFIG_FATFS_CODEPAGE = 437
const CONFIG_FATFS_FS_LOCK = 0
const CONFIG_FATFS_TIMEOUT_MS = 10000
const CONFIG_FATFS_PER_FILE_CACHE = 1
const CONFIG_FATFS_USE_STRFUNC_NONE = 1
const CONFIG_FATFS_VFS_FSTAT_BLKSIZE = 0
const CONFIG_FATFS_LINK_LOCK = 1
const CONFIG_FATFS_DONT_TRUST_FREE_CLUSTER_CNT = 0
const CONFIG_FATFS_DONT_TRUST_LAST_ALLOC = 0
const CONFIG_FREERTOS_UNICORE = 1
const CONFIG_FREERTOS_HZ = 100
const CONFIG_FREERTOS_OPTIMIZED_SCHEDULER = 1
const CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY = 1
const CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS = 1
const CONFIG_FREERTOS_IDLE_TASK_STACKSIZE = 1536
const CONFIG_FREERTOS_MAX_TASK_NAME_LEN = 16
const CONFIG_FREERTOS_USE_TIMERS = 1
const CONFIG_FREERTOS_TIMER_SERVICE_TASK_NAME = "Tmr Svc"
const CONFIG_FREERTOS_TIMER_TASK_NO_AFFINITY = 1
const CONFIG_FREERTOS_TIMER_SERVICE_TASK_CORE_AFFINITY = 0x7FFFFFFF
const CONFIG_FREERTOS_TIMER_TASK_PRIORITY = 1
const CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH = 2048
const CONFIG_FREERTOS_TIMER_QUEUE_LENGTH = 10
const CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE = 0
const CONFIG_FREERTOS_TASK_NOTIFICATION_ARRAY_ENTRIES = 1
const CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER = 1
const CONFIG_FREERTOS_TLSP_DELETION_CALLBACKS = 1
const CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER = 1
const CONFIG_FREERTOS_ISR_STACKSIZE = 1536
const CONFIG_FREERTOS_INTERRUPT_BACKTRACE = 1
const CONFIG_FREERTOS_TICK_SUPPORT_SYSTIMER = 1
const CONFIG_FREERTOS_CORETIMER_SYSTIMER_LVL1 = 1
const CONFIG_FREERTOS_SYSTICK_USES_SYSTIMER = 1
const CONFIG_FREERTOS_PORT = 1
const CONFIG_FREERTOS_NO_AFFINITY = 0x7FFFFFFF
const CONFIG_FREERTOS_SUPPORT_STATIC_ALLOCATION = 1
const CONFIG_FREERTOS_DEBUG_OCDAWARE = 1
const CONFIG_FREERTOS_ENABLE_TASK_SNAPSHOT = 1
const CONFIG_FREERTOS_PLACE_SNAPSHOT_FUNS_INTO_FLASH = 1
const CONFIG_FREERTOS_NUMBER_OF_CORES = 1
const CONFIG_HAL_ASSERTION_EQUALS_SYSTEM = 1
const CONFIG_HAL_DEFAULT_ASSERTION_LEVEL = 2
const CONFIG_HAL_SYSTIMER_USE_ROM_IMPL = 1
const CONFIG_HAL_WDT_USE_ROM_IMPL = 1
const CONFIG_HAL_SPI_MASTER_FUNC_IN_IRAM = 1
const CONFIG_HAL_SPI_SLAVE_FUNC_IN_IRAM = 1
const CONFIG_HEAP_POISONING_DISABLED = 1
const CONFIG_HEAP_TRACING_OFF = 1
const CONFIG_HEAP_TLSF_USE_ROM_IMPL = 1
const CONFIG_IEEE802154_ENABLED = 1
const CONFIG_IEEE802154_RX_BUFFER_SIZE = 20
const CONFIG_IEEE802154_CCA_ED = 1
const CONFIG_IEEE802154_CCA_MODE = 1
const CONFIG_IEEE802154_PENDING_TABLE_SIZE = 20
const CONFIG_IEEE802154_TIMING_OPTIMIZATION = 1
const CONFIG_LOG_DEFAULT_LEVEL_INFO = 1
const CONFIG_LOG_DEFAULT_LEVEL = 3
const CONFIG_LOG_MAXIMUM_EQUALS_DEFAULT = 1
const CONFIG_LOG_MAXIMUM_LEVEL = 3
const CONFIG_LOG_DYNAMIC_LEVEL_CONTROL = 1
const CONFIG_LOG_TAG_LEVEL_IMPL_CACHE_AND_LINKED_LIST = 1
const CONFIG_LOG_TAG_LEVEL_CACHE_BINARY_MIN_HEAP = 1
const CONFIG_LOG_TAG_LEVEL_IMPL_CACHE_SIZE = 31
const CONFIG_LOG_TIMESTAMP_SOURCE_RTOS = 1
const CONFIG_LWIP_ENABLE = 1
const CONFIG_LWIP_LOCAL_HOSTNAME = "espressif"
const CONFIG_LWIP_TCPIP_TASK_PRIO = 18
const CONFIG_LWIP_DNS_SUPPORT_MDNS_QUERIES = 1
const CONFIG_LWIP_TIMERS_ONDEMAND = 1
const CONFIG_LWIP_ND6 = 1
const CONFIG_LWIP_MAX_SOCKETS = 10
const CONFIG_LWIP_SO_REUSE = 1
const CONFIG_LWIP_SO_REUSE_RXTOALL = 1
const CONFIG_LWIP_IP_DEFAULT_TTL = 64
const CONFIG_LWIP_IP4_FRAG = 1
const CONFIG_LWIP_IP6_FRAG = 1
const CONFIG_LWIP_IP_REASS_MAX_PBUFS = 10
const CONFIG_LWIP_ESP_GRATUITOUS_ARP = 1
const CONFIG_LWIP_GARP_TMR_INTERVAL = 60
const CONFIG_LWIP_ESP_MLDV6_REPORT = 1
const CONFIG_LWIP_MLDV6_TMR_INTERVAL = 40
const CONFIG_LWIP_TCPIP_RECVMBOX_SIZE = 32
const CONFIG_LWIP_DHCP_DOES_ARP_CHECK = 1
const CONFIG_LWIP_DHCP_DISABLE_VENDOR_CLASS_ID = 1
const CONFIG_LWIP_DHCP_OPTIONS_LEN = 68
const CONFIG_LWIP_NUM_NETIF_CLIENT_DATA = 0
const CONFIG_LWIP_DHCP_COARSE_TIMER_SECS = 1
const CONFIG_LWIP_DHCPS = 1
const CONFIG_LWIP_DHCPS_LEASE_UNIT = 60
const CONFIG_LWIP_DHCPS_MAX_STATION_NUM = 8
const CONFIG_LWIP_DHCPS_STATIC_ENTRIES = 1
const CONFIG_LWIP_DHCPS_ADD_DNS = 1
const CONFIG_LWIP_IPV4 = 1
const CONFIG_LWIP_IPV6 = 1
const CONFIG_LWIP_IPV6_NUM_ADDRESSES = 3
const CONFIG_LWIP_NETIF_LOOPBACK = 1
const CONFIG_LWIP_LOOPBACK_MAX_PBUFS = 8
const CONFIG_LWIP_MAX_ACTIVE_TCP = 16
const CONFIG_LWIP_MAX_LISTENING_TCP = 16
const CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION = 1
const CONFIG_LWIP_TCP_MAXRTX = 12
const CONFIG_LWIP_TCP_SYNMAXRTX = 12
const CONFIG_LWIP_TCP_MSS = 1440
const CONFIG_LWIP_TCP_TMR_INTERVAL = 250
const CONFIG_LWIP_TCP_MSL = 60000
const CONFIG_LWIP_TCP_FIN_WAIT_TIMEOUT = 20000
const CONFIG_LWIP_TCP_SND_BUF_DEFAULT = 5760
const CONFIG_LWIP_TCP_WND_DEFAULT = 5760
const CONFIG_LWIP_TCP_RECVMBOX_SIZE = 6
const CONFIG_LWIP_TCP_ACCEPTMBOX_SIZE = 6
const CONFIG_LWIP_TCP_QUEUE_OOSEQ = 1
const CONFIG_LWIP_TCP_OOSEQ_TIMEOUT = 6
const CONFIG_LWIP_TCP_OOSEQ_MAX_PBUFS = 4
const CONFIG_LWIP_TCP_OVERSIZE_MSS = 1
const CONFIG_LWIP_TCP_RTO_TIME = 1500
const CONFIG_LWIP_MAX_UDP_PCBS = 16
const CONFIG_LWIP_UDP_RECVMBOX_SIZE = 6
const CONFIG_LWIP_CHECKSUM_CHECK_ICMP = 1
const CONFIG_LWIP_TCPIP_TASK_STACK_SIZE = 3072
const CONFIG_LWIP_TCPIP_TASK_AFFINITY_NO_AFFINITY = 1
const CONFIG_LWIP_TCPIP_TASK_AFFINITY = 0x7FFFFFFF
const CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE = 3
const CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS = 5
const CONFIG_LWIP_IPV6_ND6_NUM_PREFIXES = 5
const CONFIG_LWIP_IPV6_ND6_NUM_ROUTERS = 3
const CONFIG_LWIP_IPV6_ND6_NUM_DESTINATIONS = 10
const CONFIG_LWIP_ICMP = 1
const CONFIG_LWIP_MAX_RAW_PCBS = 16
const CONFIG_LWIP_SNTP_MAX_SERVERS = 1
const CONFIG_LWIP_SNTP_UPDATE_DELAY = 3600000
const CONFIG_LWIP_SNTP_STARTUP_DELAY = 1
const CONFIG_LWIP_SNTP_MAXIMUM_STARTUP_DELAY = 5000
const CONFIG_LWIP_DNS_MAX_HOST_IP = 1
const CONFIG_LWIP_DNS_MAX_SERVERS = 3
const CONFIG_LWIP_BRIDGEIF_MAX_PORTS = 7
const CONFIG_LWIP_ESP_LWIP_ASSERT = 1
const CONFIG_LWIP_HOOK_TCP_ISN_DEFAULT = 1
const CONFIG_LWIP_HOOK_IP6_ROUTE_NONE = 1
const CONFIG_LWIP_HOOK_ND6_GET_GW_NONE = 1
const CONFIG_LWIP_HOOK_IP6_SELECT_SRC_ADDR_NONE = 1
const CONFIG_LWIP_HOOK_NETCONN_EXT_RESOLVE_NONE = 1
const CONFIG_LWIP_HOOK_DNS_EXT_RESOLVE_NONE = 1
const CONFIG_LWIP_HOOK_IP6_INPUT_DEFAULT = 1
const CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC = 1
const CONFIG_MBEDTLS_ASYMMETRIC_CONTENT_LEN = 1
const CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN = 16384
const CONFIG_MBEDTLS_SSL_OUT_CONTENT_LEN = 4096
const CONFIG_MBEDTLS_SSL_KEEP_PEER_CERTIFICATE = 1
const CONFIG_MBEDTLS_PKCS7_C = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_FULL = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_MAX_CERTS = 200
const CONFIG_MBEDTLS_CMAC_C = 1
const CONFIG_MBEDTLS_HARDWARE_AES = 1
const CONFIG_MBEDTLS_AES_USE_INTERRUPT = 1
const CONFIG_MBEDTLS_AES_INTERRUPT_LEVEL = 0
const CONFIG_MBEDTLS_GCM_SUPPORT_NON_AES_CIPHER = 1
const CONFIG_MBEDTLS_HARDWARE_MPI = 1
const CONFIG_MBEDTLS_LARGE_KEY_SOFTWARE_MPI = 1
const CONFIG_MBEDTLS_MPI_USE_INTERRUPT = 1
const CONFIG_MBEDTLS_MPI_INTERRUPT_LEVEL = 0
const CONFIG_MBEDTLS_HARDWARE_SHA = 1
const CONFIG_MBEDTLS_HARDWARE_ECC = 1
const CONFIG_MBEDTLS_ECC_OTHER_CURVES_SOFT_FALLBACK = 1
const CONFIG_MBEDTLS_ROM_MD5 = 1
const CONFIG_MBEDTLS_HAVE_TIME = 1
const CONFIG_MBEDTLS_ECDSA_DETERMINISTIC = 1
const CONFIG_MBEDTLS_SHA1_C = 1
const CONFIG_MBEDTLS_SHA512_C = 1
const CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT = 1
const CONFIG_MBEDTLS_TLS_SERVER = 1
const CONFIG_MBEDTLS_TLS_CLIENT = 1
const CONFIG_MBEDTLS_TLS_ENABLED = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_RSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA = 1
const CONFIG_MBEDTLS_SSL_RENEGOTIATION = 1
const CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 = 1
const CONFIG_MBEDTLS_SSL_ALPN = 1
const CONFIG_MBEDTLS_CLIENT_SSL_SESSION_TICKETS = 1
const CONFIG_MBEDTLS_SERVER_SSL_SESSION_TICKETS = 1
const CONFIG_MBEDTLS_AES_C = 1
const CONFIG_MBEDTLS_CCM_C = 1
const CONFIG_MBEDTLS_GCM_C = 1
const CONFIG_MBEDTLS_PEM_PARSE_C = 1
const CONFIG_MBEDTLS_PEM_WRITE_C = 1
const CONFIG_MBEDTLS_X509_CRL_PARSE_C = 1
const CONFIG_MBEDTLS_X509_CSR_PARSE_C = 1
const CONFIG_MBEDTLS_ECP_C = 1
const CONFIG_MBEDTLS_PK_PARSE_EC_EXTENDED = 1
const CONFIG_MBEDTLS_PK_PARSE_EC_COMPRESSED = 1
const CONFIG_MBEDTLS_ECDH_C = 1
const CONFIG_MBEDTLS_ECDSA_C = 1
const CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED = 1
const CONFIG_MBEDTLS_ECP_NIST_OPTIM = 1
const CONFIG_MBEDTLS_ERROR_STRINGS = 1
const CONFIG_MBEDTLS_FS_IO = 1
const CONFIG_MQTT_PROTOCOL_311 = 1
const CONFIG_MQTT_TRANSPORT_SSL = 1
const CONFIG_MQTT_TRANSPORT_WEBSOCKET = 1
const CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE = 1
const CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF = 1
const CONFIG_NEWLIB_STDIN_LINE_ENDING_CR = 1
const CONFIG_NEWLIB_TIME_SYSCALL_USE_RTC_HRT = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_0 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_1 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_2 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_PATCH_VERSION = 1
const CONFIG_PTHREAD_TASK_PRIO_DEFAULT = 5
const CONFIG_PTHREAD_TASK_STACK_SIZE_DEFAULT = 3072
const CONFIG_PTHREAD_STACK_MIN = 768
const CONFIG_PTHREAD_TASK_NAME_DEFAULT = "pthread"
const CONFIG_MMU_PAGE_SIZE_32KB = 1
const CONFIG_MMU_PAGE_MODE = "32KB"
const CONFIG_MMU_PAGE_SIZE = 0x8000
const CONFIG_SPI_FLASH_BROWNOUT_RESET_XMC = 1
const CONFIG_SPI_FLASH_BROWNOUT_RESET = 1
const CONFIG_SPI_FLASH_SUSPEND_TSUS_VAL_US = 50
const CONFIG_SPI_FLASH_ROM_DRIVER_PATCH = 1
const CONFIG_SPI_FLASH_DANGEROUS_WRITE_ABORTS = 1
const CONFIG_SPI_FLASH_YIELD_DURING_ERASE = 1
const CONFIG_SPI_FLASH_ERASE_YIELD_DURATION_MS = 20
const CONFIG_SPI_FLASH_ERASE_YIELD_TICKS = 1
const CONFIG_SPI_FLASH_WRITE_CHUNK_SIZE = 8192
const CONFIG_SPI_FLASH_VENDOR_XMC_SUPPORTED = 1
const CONFIG_SPI_FLASH_ENABLE_ENCRYPTED_READ_WRITE = 1
const CONFIG_SPIFFS_MAX_PARTITIONS = 3
const CONFIG_SPIFFS_CACHE = 1
const CONFIG_SPIFFS_CACHE_WR = 1
const CONFIG_SPIFFS_PAGE_CHECK = 1
const CONFIG_SPIFFS_GC_MAX_RUNS = 10
const CONFIG_SPIFFS_PAGE_SIZE = 256
const CONFIG_SPIFFS_OBJ_NAME_LEN = 32
const CONFIG_SPIFFS_USE_MAGIC = 1
const CONFIG_SPIFFS_USE_MAGIC_LENGTH = 1
const CONFIG_SPIFFS_META_LENGTH = 4
const CONFIG_SPIFFS_USE_MTIME = 1
const CONFIG_WS_TRANSPORT = 1
const CONFIG_WS_BUFFER_SIZE = 1024
const CONFIG_UNITY_ENABLE_FLOAT = 1
const CONFIG_UNITY_ENABLE_DOUBLE = 1
const CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER = 1
const CONFIG_VFS_SUPPORT_IO = 1
const CONFIG_VFS_SUPPORT_DIR = 1
const CONFIG_VFS_SUPPORT_SELECT = 1
const CONFIG_VFS_SUPPRESS_SELECT_DEBUG_OUTPUT = 1
const CONFIG_VFS_SUPPORT_TERMIOS = 1
const CONFIG_VFS_MAX_COUNT = 8
const CONFIG_VFS_SEMIHOSTFS_MAX_MOUNT_POINTS = 1
const CONFIG_VFS_INITIALIZE_DEV_NULL = 1
const CONFIG_WL_SECTOR_SIZE_4096 = 1
const CONFIG_WL_SECTOR_SIZE = 4096
const CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES = 16
const CONFIG_WIFI_PROV_AUTOSTOP_TIMEOUT = 30
const CONFIG_WIFI_PROV_STA_ALL_CHANNEL_SCAN = 1
const X__OBSOLETE_MATH_DEFAULT = 1
const X__NEWLIB_H__ = 1
const X_ATEXIT_DYNAMIC_ALLOC = 1
const X_FSEEK_OPTIMIZATION = 1
const X_FVWRITE_IN_STREAMIO = 1
const X_HAVE_INITFINI_ARRAY = 1
const X_HAVE_LONG_DOUBLE = 1
const X_ICONV_ENABLED = 1
const X_MB_LEN_MAX = 1
const X_NANO_MALLOC = 1
const X_REENT_CHECK_VERIFY = 1
const X_RETARGETABLE_LOCKING = 1
const X_UNBUF_STREAM_OPT = 1
const X_WANT_IO_C99_FORMATS = 1
const X_WANT_IO_LONG_LONG = 1
const X_WANT_IO_POS_ARGS = 1
const X_WANT_REENT_BACKWARD_BINARY_COMPAT = 1
const X_WANT_REENT_SMALL = 1
const X_WANT_USE_GDTOA = 1
const X__BUFSIZ__ = 128
const X__RAND_MAX = 0x7fffffff
const X_NULL = 0
const X_ATEXIT_SIZE = 32
const X_REENT_EMERGENCY_SIZE = 25
const X_REENT_ASCTIME_SIZE = 26
const X_REENT_SIGNAL_SIZE = 24
const X__GNUCLIKE_ASM = 3
const X__GNUCLIKE___TYPEOF = 1
const X__GNUCLIKE___SECTION = 1
const X__GNUCLIKE_CTOR_SECTION_HANDLING = 1
const X__GNUCLIKE_BUILTIN_CONSTANT_P = 1
const X__GNUCLIKE_BUILTIN_VARARGS = 1
const X__GNUCLIKE_BUILTIN_STDARG = 1
const X__GNUCLIKE_BUILTIN_VAALIST = 1
const X__GNUC_VA_LIST_COMPATIBILITY = 1
const X__GNUCLIKE_BUILTIN_NEXT_ARG = 1
const X__GNUCLIKE_BUILTIN_MEMCPY = 1
const X__CC_SUPPORTS_INLINE = 1
const X__CC_SUPPORTS___INLINE = 1
const X__CC_SUPPORTS___INLINE__ = 1
const X__CC_SUPPORTS___FUNC__ = 1
const X__CC_SUPPORTS_WARNING = 1
const X__CC_SUPPORTS_VARADIC_XXX = 1
const X__CC_SUPPORTS_DYNAMIC_ARRAY_INIT = 1
const EXIT_FAILURE = 1
const EXIT_SUCCESS = 0
const X__SLBF = 0x0001
const X__SNBF = 0x0002
const X__SRD = 0x0004
const X__SWR = 0x0008
const X__SRW = 0x0010
const X__SEOF = 0x0020
const X__SERR = 0x0040
const X__SMBF = 0x0080
const X__SAPP = 0x0100
const X__SSTR = 0x0200
const X__SOPT = 0x0400
const X__SNPT = 0x0800
const X__SOFF = 0x1000
const X__SORD = 0x2000
const X__SL64 = 0x8000
const X__SNLK = 0x0001
const X__SWID = 0x2000
const X_IOFBF = 0
const X_IOLBF = 1
const X_IONBF = 2
const FOPEN_MAX = 20
const FILENAME_MAX = 1024
const P_tmpdir = "/tmp"
const SEEK_SET = 0
const SEEK_CUR = 1
const SEEK_END = 2
const TMP_MAX = 26
const L_cuserid = 9
const L_ctermid = 16
const ESP_OK = 0
const ESP_ERR_NO_MEM = 0x101
const ESP_ERR_INVALID_ARG = 0x102
const ESP_ERR_INVALID_STATE = 0x103
const ESP_ERR_INVALID_SIZE = 0x104
const ESP_ERR_NOT_FOUND = 0x105
const ESP_ERR_NOT_SUPPORTED = 0x106
const ESP_ERR_TIMEOUT = 0x107
const ESP_ERR_INVALID_RESPONSE = 0x108
const ESP_ERR_INVALID_CRC = 0x109
const ESP_ERR_INVALID_VERSION = 0x10A
const ESP_ERR_INVALID_MAC = 0x10B
const ESP_ERR_NOT_FINISHED = 0x10C
const ESP_ERR_NOT_ALLOWED = 0x10D
const ESP_ERR_WIFI_BASE = 0x3000
const ESP_ERR_MESH_BASE = 0x4000
const ESP_ERR_FLASH_BASE = 0x6000
const ESP_ERR_HW_CRYPTO_BASE = 0xc000
const ESP_ERR_MEMPROT_BASE = 0xd000
const SOC_ADC_SUPPORTED = 1
const SOC_DEDICATED_GPIO_SUPPORTED = 1
const SOC_UART_SUPPORTED = 1
const SOC_GDMA_SUPPORTED = 1
const SOC_AHB_GDMA_SUPPORTED = 1
const SOC_GPTIMER_SUPPORTED = 1
const SOC_PCNT_SUPPORTED = 1
const SOC_MCPWM_SUPPORTED = 1
const SOC_TWAI_SUPPORTED = 1
const SOC_ETM_SUPPORTED = 1
const SOC_PARLIO_SUPPORTED = 1
const SOC_BT_SUPPORTED = 1
const SOC_IEEE802154_SUPPORTED = 1
const SOC_ASYNC_MEMCPY_SUPPORTED = 1
const SOC_USB_SERIAL_JTAG_SUPPORTED = 1
const SOC_TEMP_SENSOR_SUPPORTED = 1
const SOC_PHY_SUPPORTED = 1
const SOC_WIFI_SUPPORTED = 1
const SOC_SUPPORTS_SECURE_DL_MODE = 1
const SOC_ULP_SUPPORTED = 1
const SOC_LP_CORE_SUPPORTED = 1
const SOC_EFUSE_KEY_PURPOSE_FIELD = 1
const SOC_EFUSE_SUPPORTED = 1
const SOC_RTC_FAST_MEM_SUPPORTED = 1
const SOC_RTC_MEM_SUPPORTED = 1
const SOC_I2S_SUPPORTED = 1
const SOC_RMT_SUPPORTED = 1
const SOC_SDM_SUPPORTED = 1
const SOC_GPSPI_SUPPORTED = 1
const SOC_LEDC_SUPPORTED = 1
const SOC_I2C_SUPPORTED = 1
const SOC_SYSTIMER_SUPPORTED = 1
const SOC_SUPPORT_COEXISTENCE = 1
const SOC_AES_SUPPORTED = 1
const SOC_MPI_SUPPORTED = 1
const SOC_SHA_SUPPORTED = 1
const SOC_HMAC_SUPPORTED = 1
const SOC_DIG_SIGN_SUPPORTED = 1
const SOC_ECC_SUPPORTED = 1
const SOC_FLASH_ENC_SUPPORTED = 1
const SOC_SECURE_BOOT_SUPPORTED = 1
const SOC_SDIO_SLAVE_SUPPORTED = 1
const SOC_BOD_SUPPORTED = 1
const SOC_APM_SUPPORTED = 1
const SOC_PMU_SUPPORTED = 1
const SOC_PAU_SUPPORTED = 1
const SOC_LP_TIMER_SUPPORTED = 1
const SOC_LP_AON_SUPPORTED = 1
const SOC_LP_PERIPHERALS_SUPPORTED = 1
const SOC_LP_I2C_SUPPORTED = 1
const SOC_ULP_LP_UART_SUPPORTED = 1
const SOC_CLK_TREE_SUPPORTED = 1
const SOC_ASSIST_DEBUG_SUPPORTED = 1
const SOC_WDT_SUPPORTED = 1
const SOC_SPI_FLASH_SUPPORTED = 1
const SOC_RNG_SUPPORTED = 1
const SOC_LIGHT_SLEEP_SUPPORTED = 1
const SOC_DEEP_SLEEP_SUPPORTED = 1
const SOC_MODEM_CLOCK_SUPPORTED = 1
const SOC_PM_SUPPORTED = 1
const SOC_XTAL_SUPPORT_40M = 1
const SOC_XTAL_CLOCK_PATH_DEPENDS_ON_TOP_DOMAIN = 1
const SOC_ADC_DIG_CTRL_SUPPORTED = 1
const SOC_ADC_DIG_IIR_FILTER_SUPPORTED = 1
const SOC_ADC_MONITOR_SUPPORTED = 1
const SOC_ADC_DMA_SUPPORTED = 1
const SOC_ADC_SAMPLE_FREQ_THRES_HIGH = 83333
const SOC_ADC_SAMPLE_FREQ_THRES_LOW = 611
const SOC_ADC_SHARED_POWER = 1
const SOC_BROWNOUT_RESET_SUPPORTED = 1
const SOC_SHARED_IDCACHE_SUPPORTED = 1
const SOC_CACHE_FREEZE_SUPPORTED = 1
const SOC_CPU_INTR_NUM = 32
const SOC_CPU_HAS_FLEXIBLE_INTC = 1
const SOC_INT_PLIC_SUPPORTED = 1
const SOC_CPU_HAS_CSR_PC = 1
const SOC_CPU_BREAKPOINTS_NUM = 4
const SOC_CPU_WATCHPOINTS_NUM = 4
const SOC_CPU_WATCHPOINT_MAX_REGION_SIZE = 0x80000000
const SOC_CPU_HAS_PMA = 1
const SOC_CPU_IDRAM_SPLIT_USING_PMP = 1
const SOC_CPU_PMP_REGION_GRANULARITY = 4
const SOC_GDMA_PAIRS_PER_GROUP_MAX = 3
const SOC_GDMA_SUPPORT_ETM = 1
const SOC_GDMA_SUPPORT_SLEEP_RETENTION = 1
const SOC_ETM_CHANNELS_PER_GROUP = 50
const SOC_ETM_SUPPORT_SLEEP_RETENTION = 1
const SOC_GPIO_PIN_COUNT = 31
const SOC_GPIO_SUPPORT_PIN_GLITCH_FILTER = 1
const SOC_GPIO_FLEX_GLITCH_FILTER_NUM = 8
const SOC_GPIO_SUPPORT_ETM = 1
const SOC_GPIO_IN_RANGE_MAX = 30
const SOC_GPIO_OUT_RANGE_MAX = 30
const SOC_RTCIO_PIN_COUNT = 8
const SOC_RTCIO_INPUT_OUTPUT_SUPPORTED = 1
const SOC_RTCIO_HOLD_SUPPORTED = 1
const SOC_RTCIO_WAKE_SUPPORTED = 1
const SOC_RTCIO_EDGE_WAKE_SUPPORTED = 1
const SOC_I2S_SUPPORT_SLEEP_RETENTION = 1
const SOC_MPU_CONFIGURABLE_REGIONS_SUPPORTED = 0
const SOC_MPU_REGIONS_MAX_NUM = 8
const SOC_MPU_REGION_RO_SUPPORTED = 0
const SOC_MPU_REGION_WO_SUPPORTED = 0
const SOC_PCNT_UNITS_PER_GROUP = 4
const SOC_PCNT_CHANNELS_PER_UNIT = 2
const SOC_PCNT_THRES_POINT_PER_UNIT = 2
const SOC_PCNT_SUPPORT_RUNTIME_THRES_UPDATE = 1
const SOC_PCNT_SUPPORT_SLEEP_RETENTION = 1
const SOC_RMT_TX_CANDIDATES_PER_GROUP = 2
const SOC_RMT_RX_CANDIDATES_PER_GROUP = 2
const SOC_RMT_CHANNELS_PER_GROUP = 4
const SOC_RMT_MEM_WORDS_PER_CHANNEL = 48
const SOC_RMT_SUPPORT_RX_PINGPONG = 1
const SOC_RMT_SUPPORT_RX_DEMODULATION = 1
const SOC_RMT_SUPPORT_TX_ASYNC_STOP = 1
const SOC_RMT_SUPPORT_TX_LOOP_COUNT = 1
const SOC_RMT_SUPPORT_TX_LOOP_AUTO_STOP = 1
const SOC_RMT_SUPPORT_TX_SYNCHRO = 1
const SOC_RMT_SUPPORT_TX_CARRIER_DATA_ONLY = 1
const SOC_RMT_SUPPORT_XTAL = 1
const SOC_RMT_SUPPORT_RC_FAST = 1
const SOC_RMT_SUPPORT_SLEEP_RETENTION = 1
const SOC_PARLIO_TX_UNIT_MAX_DATA_WIDTH = 16
const SOC_PARLIO_RX_UNIT_MAX_DATA_WIDTH = 16
const SOC_PARLIO_TX_RX_SHARE_INTERRUPT = 1
const SOC_PARLIO_SUPPORT_SLEEP_RETENTION = 1
const SOC_SDM_CHANNELS_PER_GROUP = 4
const SOC_SDM_CLK_SUPPORT_PLL_F80M = 1
const SOC_SDM_CLK_SUPPORT_XTAL = 1
const SOC_SPI_PERIPH_NUM = 2
const SOC_SPI_MAX_CS_NUM = 6
const SOC_SPI_MAXIMUM_BUFFER_SIZE = 64
const SOC_SPI_SUPPORT_DDRCLK = 1
const SOC_SPI_SLAVE_SUPPORT_SEG_TRANS = 1
const SOC_SPI_SUPPORT_CD_SIG = 1
const SOC_SPI_SUPPORT_CONTINUOUS_TRANS = 1
const SOC_SPI_SUPPORT_SLAVE_HD_VER2 = 1
const SOC_SPI_SUPPORT_SLEEP_RETENTION = 1
const SOC_SPI_SUPPORT_CLK_XTAL = 1
const SOC_SPI_SUPPORT_CLK_PLL_F80M = 1
const SOC_SPI_SUPPORT_CLK_RC_FAST = 1
const SOC_SPI_SCT_SUPPORTED = 1
const SOC_SPI_SCT_REG_NUM = 14
const SOC_SPI_SCT_CONF_BITLEN_MAX = 0x3FFFA
const SOC_MEMSPI_IS_INDEPENDENT = 1
const SOC_SPI_MAX_PRE_DIVIDER = 16
const SOC_MEMSPI_SRC_FREQ_80M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_40M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_20M_SUPPORTED = 1
const SOC_SYSTIMER_COUNTER_NUM = 2
const SOC_SYSTIMER_ALARM_NUM = 3
const SOC_SYSTIMER_BIT_WIDTH_LO = 32
const SOC_SYSTIMER_BIT_WIDTH_HI = 20
const SOC_SYSTIMER_FIXED_DIVIDER = 1
const SOC_SYSTIMER_SUPPORT_RC_FAST = 1
const SOC_SYSTIMER_INT_LEVEL = 1
const SOC_SYSTIMER_ALARM_MISS_COMPENSATE = 1
const SOC_SYSTIMER_SUPPORT_ETM = 1
const SOC_LP_TIMER_BIT_WIDTH_LO = 32
const SOC_LP_TIMER_BIT_WIDTH_HI = 16
const SOC_TWAI_CONTROLLER_NUM = 2
const SOC_TWAI_CLK_SUPPORT_XTAL = 1
const SOC_TWAI_BRP_MIN = 2
const SOC_TWAI_BRP_MAX = 32768
const SOC_TWAI_SUPPORTS_RX_STATUS = 1
const SOC_TWAI_SUPPORT_SLEEP_RETENTION = 1
const SOC_EFUSE_DIS_DOWNLOAD_ICACHE = 1
const SOC_EFUSE_DIS_PAD_JTAG = 1
const SOC_EFUSE_DIS_USB_JTAG = 1
const SOC_EFUSE_DIS_DIRECT_BOOT = 1
const SOC_EFUSE_SOFT_DIS_JTAG = 1
const SOC_EFUSE_DIS_ICACHE = 1
const SOC_EFUSE_BLOCK9_KEY_PURPOSE_QUIRK = 1
const SOC_SECURE_BOOT_V2_RSA = 1
const SOC_SECURE_BOOT_V2_ECC = 1
const SOC_EFUSE_SECURE_BOOT_KEY_DIGESTS = 3
const SOC_EFUSE_REVOKE_BOOT_KEY_DIGESTS = 1
const SOC_SUPPORT_SECURE_BOOT_REVOKE_KEY = 1
const SOC_FLASH_ENCRYPTION_XTS_AES = 1
const SOC_FLASH_ENCRYPTION_XTS_AES_128 = 1
const SOC_APM_CTRL_FILTER_SUPPORTED = 1
const SOC_APM_LP_APM0_SUPPORTED = 1
const SOC_CRYPTO_DPA_PROTECTION_SUPPORTED = 1
const SOC_RCC_IS_INDEPENDENT = 1
const BIT31 = 0x80000000
const BIT30 = 0x40000000
const BIT29 = 0x20000000
const BIT28 = 0x10000000
const BIT27 = 0x08000000
const BIT26 = 0x04000000
const BIT25 = 0x02000000
const BIT24 = 0x01000000
const BIT23 = 0x00800000
const BIT22 = 0x00400000
const BIT21 = 0x00200000
const BIT20 = 0x00100000
const BIT19 = 0x00080000
const BIT18 = 0x00040000
const BIT17 = 0x00020000
const BIT16 = 0x00010000
const BIT15 = 0x00008000
const BIT14 = 0x00004000
const BIT13 = 0x00002000
const BIT12 = 0x00001000
const BIT11 = 0x00000800
const BIT10 = 0x00000400
const BIT9 = 0x00000200
const BIT8 = 0x00000100
const BIT7 = 0x00000080
const BIT6 = 0x00000040
const BIT5 = 0x00000020
const BIT4 = 0x00000010
const BIT3 = 0x00000008
const BIT2 = 0x00000004
const BIT1 = 0x00000002
const BIT0 = 0x00000001
const DR_REG_PLIC_MX_BASE = 0x20001000
const DR_REG_PLIC_UX_BASE = 0x20001400
const DR_REG_CLINT_M_BASE = 0x20001800
const DR_REG_CLINT_U_BASE = 0x20001C00
const DR_REG_UART_BASE = 0x60000000
const DR_REG_UART1_BASE = 0x60001000
const DR_REG_SPI0_BASE = 0x60002000
const DR_REG_SPI1_BASE = 0x60003000
const DR_REG_I2C_EXT_BASE = 0x60004000
const DR_REG_UHCI0_BASE = 0x60005000
const DR_REG_RMT_BASE = 0x60006000
const DR_REG_LEDC_BASE = 0x60007000
const DR_REG_TIMERGROUP0_BASE = 0x60008000
const DR_REG_TIMERGROUP1_BASE = 0x60009000
const DR_REG_SYSTIMER_BASE = 0x6000A000
const DR_REG_TWAI0_BASE = 0x6000B000
const DR_REG_I2S_BASE = 0x6000C000
const DR_REG_TWAI1_BASE = 0x6000D000
const DR_REG_APB_SARADC_BASE = 0x6000E000
const DR_REG_USB_SERIAL_JTAG_BASE = 0x6000F000
const DR_REG_INTERRUPT_MATRIX_BASE = 0x60010000
const DR_REG_ATOMIC_BASE = 0x60011000
const DR_REG_PCNT_BASE = 0x60012000
const DR_REG_SOC_ETM_BASE = 0x60013000
const DR_REG_MCPWM_BASE = 0x60014000
const DR_REG_PARL_IO_BASE = 0x60015000
const DR_REG_HINF_BASE = 0x60016000
const DR_REG_SLC_BASE = 0x60017000
const DR_REG_SLCHOST_BASE = 0x60018000
const DR_REG_PVT_MONITOR_BASE = 0x60019000
const DR_REG_GDMA_BASE = 0x60080000
const DR_REG_SPI2_BASE = 0x60081000
const DR_REG_AES_BASE = 0x60088000
const DR_REG_SHA_BASE = 0x60089000
const DR_REG_RSA_BASE = 0x6008A000
const DR_REG_ECC_MULT_BASE = 0x6008B000
const DR_REG_DS_BASE = 0x6008C000
const DR_REG_HMAC_BASE = 0x6008D000
const DR_REG_IO_MUX_BASE = 0x60090000
const DR_REG_GPIO_BASE = 0x60091000
const DR_REG_GPIO_EXT_BASE = 0x60091f00
const DR_REG_MEM_MONITOR_BASE = 0x60092000
const DR_REG_PAU_BASE = 0x60093000
const DR_REG_HP_SYSTEM_BASE = 0x60095000
const DR_REG_PCR_BASE = 0x60096000
const DR_REG_TEE_BASE = 0x60098000
const DR_REG_HP_APM_BASE = 0x60099000
const DR_REG_LP_APM0_BASE = 0x60099800
const DR_REG_MISC_BASE = 0x6009F000
const DR_REG_I2C_ANA_MST_BASE = 0x600AF800
const DR_REG_PMU_BASE = 0x600B0000
const DR_REG_LP_CLKRST_BASE = 0x600B0400
const DR_REG_EFUSE_BASE = 0x600B0800
const DR_REG_LP_TIMER_BASE = 0x600B0C00
const DR_REG_LP_AON_BASE = 0x600B1000
const DR_REG_LP_UART_BASE = 0x600B1400
const DR_REG_LP_I2C_BASE = 0x600B1800
const DR_REG_LP_WDT_BASE = 0x600B1C00
const DR_REG_LP_IO_BASE = 0x600B2000
const DR_REG_LP_I2C_ANA_MST_BASE = 0x600B2400
const DR_REG_LPPERI_BASE = 0x600B2800
const DR_REG_LP_ANALOG_PERI_BASE = 0x600B2C00
const DR_REG_LP_TEE_BASE = 0x600B3400
const DR_REG_LP_APM_BASE = 0x600B3800
const DR_REG_OPT_DEBUG_BASE = 0x600B3C00
const DR_REG_TRACE_BASE = 0x600C0000
const DR_REG_ASSIST_DEBUG_BASE = 0x600C2000
const DR_REG_CPU_BUS_MONITOR_BASE = 0x600C2000
const DR_REG_INTPRI_BASE = 0x600C5000
const DR_REG_EXTMEM_BASE = 0x600C8000
const PWDET_CONF_REG = 0x600A0810
const IEEE802154_REG_BASE = 0x600A3000
const SOC_IROM_LOW = 0x42000000
const SOC_IROM_MASK_LOW = 0x40000000
const SOC_IROM_MASK_HIGH = 0x40050000
const SOC_DROM_MASK_LOW = 0x40000000
const SOC_DROM_MASK_HIGH = 0x40050000
const SOC_IRAM_LOW = 0x40800000
const SOC_IRAM_HIGH = 0x40880000
const SOC_DRAM_LOW = 0x40800000
const SOC_DRAM_HIGH = 0x40880000
const SOC_RTC_IRAM_LOW = 0x50000000
const SOC_RTC_IRAM_HIGH = 0x50004000
const SOC_RTC_DRAM_LOW = 0x50000000
const SOC_RTC_DRAM_HIGH = 0x50004000
const SOC_RTC_DATA_LOW = 0x50000000
const SOC_RTC_DATA_HIGH = 0x50004000
const SOC_DIRAM_IRAM_LOW = 0x40800000
const SOC_DIRAM_IRAM_HIGH = 0x40880000
const SOC_DIRAM_DRAM_LOW = 0x40800000
const SOC_DIRAM_DRAM_HIGH = 0x40880000
const SOC_DMA_LOW = 0x40800000
const SOC_DMA_HIGH = 0x40880000
const SOC_BYTE_ACCESSIBLE_LOW = 0x40800000
const SOC_BYTE_ACCESSIBLE_HIGH = 0x40880000
const SOC_MEM_INTERNAL_LOW = 0x40800000
const SOC_MEM_INTERNAL_HIGH = 0x40880000
const SOC_MEM_INTERNAL_LOW1 = 0x40800000
const SOC_MEM_INTERNAL_HIGH1 = 0x40880000
const SOC_PERIPHERAL_LOW = 0x60000000
const SOC_PERIPHERAL_HIGH = 0x60100000
const SOC_CPU_SUBSYSTEM_LOW = 0x20000000
const SOC_CPU_SUBSYSTEM_HIGH = 0x30000000
const SOC_ROM_STACK_START = 0x4087e610
const SOC_ROM_STACK_SIZE = 0x2000
const ETS_T1_WDT_INUM = 24
const ETS_CACHEERR_INUM = 25
const ETS_MEMPROT_ERR_INUM = 26
const ETS_ASSIST_DEBUG_INUM = 27
const ETS_MAX_INUM = 31
const ETS_SLC_INUM = 1
const ETS_UART0_INUM = 5
const ETS_UART1_INUM = 5
const ETS_SPI2_INUM = 1
const ETS_GPIO_INUM = 4
const ETS_INVALID_INUM = 0
const SOC_INTERRUPT_LEVEL_MEDIUM = 4
const SOC_IRAM0_CACHE_ADDRESS_LOW = 0x42000000
const SOC_MMU_ACCESS_FLASH = 0
const SOC_MMU_INVALID = 0
const SOC_MMU_VALID_VAL_MASK = 0x1ff
const SOC_MMU_MAX_PADDR_PAGE_NUM = 256
const SOC_MMU_ENTRY_NUM = 256
const SOC_MMU_DBUS_VADDR_BASE = 0x42000000
const SOC_MMU_IBUS_VADDR_BASE = 0x42000000
const SOC_MMU_LINEAR_ADDR_MASK = 0x3FFFFF
const CACHE_IROM_MMU_START = 0
const CACHE_DROM_MMU_MAX_END = 0x400
const ICACHE_MMU_SIZE = 0x200
const DCACHE_MMU_SIZE = 0x200
const EFUSE_WRITE_OP_CODE = 0x5a5a
const EFUSE_READ_OP_CODE = 0x5aa5
const EFUSE_PGM_DATA_0_S = 0
const EFUSE_PGM_DATA_1_S = 0
const EFUSE_PGM_DATA_2_S = 0
const EFUSE_PGM_DATA_3_S = 0
const EFUSE_PGM_DATA_4_S = 0
const EFUSE_PGM_DATA_5_S = 0
const EFUSE_PGM_DATA_6_S = 0
const EFUSE_PGM_DATA_7_S = 0
const EFUSE_PGM_RS_DATA_0_S = 0
const EFUSE_PGM_RS_DATA_1_S = 0
const EFUSE_PGM_RS_DATA_2_S = 0
const EFUSE_WR_DIS_S = 0
const EFUSE_RD_DIS_S = 0
const EFUSE_SWAP_UART_SDIO_EN_S = 7
const EFUSE_DIS_ICACHE_S = 8
const EFUSE_DIS_USB_JTAG_S = 9
const EFUSE_DIS_DOWNLOAD_ICACHE_S = 10
const EFUSE_DIS_USB_SERIAL_JTAG_S = 11
const EFUSE_DIS_FORCE_DOWNLOAD_S = 12
const EFUSE_SPI_DOWNLOAD_MSPI_DIS_S = 13
const EFUSE_DIS_TWAI_S = 14
const EFUSE_JTAG_SEL_ENABLE_S = 15
const EFUSE_SOFT_DIS_JTAG_S = 16
const EFUSE_DIS_PAD_JTAG_S = 19
const EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_S = 20
const EFUSE_USB_DREFH_S = 21
const EFUSE_USB_DREFL_S = 23
const EFUSE_USB_EXCHG_PINS_S = 25
const EFUSE_VDD_SPI_AS_GPIO_S = 26
const EFUSE_RPT4_RESERVED0_2_S = 27
const EFUSE_RPT4_RESERVED0_1_S = 29
const EFUSE_RPT4_RESERVED0_0_S = 30
const EFUSE_RPT4_RESERVED1_0_S = 0
const EFUSE_WDT_DELAY_SEL_S = 16
const EFUSE_SPI_BOOT_CRYPT_CNT_S = 18
const EFUSE_SECURE_BOOT_KEY_REVOKE0_S = 21
const EFUSE_SECURE_BOOT_KEY_REVOKE1_S = 22
const EFUSE_SECURE_BOOT_KEY_REVOKE2_S = 23
const EFUSE_KEY_PURPOSE_0_S = 24
const EFUSE_KEY_PURPOSE_1_S = 28
const EFUSE_KEY_PURPOSE_2_S = 0
const EFUSE_KEY_PURPOSE_3_S = 4
const EFUSE_KEY_PURPOSE_4_S = 8
const EFUSE_KEY_PURPOSE_5_S = 12
const EFUSE_SEC_DPA_LEVEL_S = 16
const EFUSE_CRYPT_DPA_ENABLE_S = 18
const EFUSE_RPT4_RESERVED2_1_S = 19
const EFUSE_SECURE_BOOT_EN_S = 20
const EFUSE_SECURE_BOOT_AGGRESSIVE_REVOKE_S = 21
const EFUSE_RPT4_RESERVED2_0_S = 22
const EFUSE_FLASH_TPUW_S = 28
const EFUSE_DIS_DOWNLOAD_MODE_S = 0
const EFUSE_DIS_DIRECT_BOOT_S = 1
const EFUSE_DIS_USB_SERIAL_JTAG_ROM_PRINT_S = 2
const EFUSE_RPT4_RESERVED3_5_S = 3
const EFUSE_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE_S = 4
const EFUSE_ENABLE_SECURITY_DOWNLOAD_S = 5
const EFUSE_UART_PRINT_CONTROL_S = 6
const EFUSE_RPT4_RESERVED3_4_S = 8
const EFUSE_RPT4_RESERVED3_3_S = 9
const EFUSE_RPT4_RESERVED3_2_S = 10
const EFUSE_RPT4_RESERVED3_1_S = 12
const EFUSE_FORCE_SEND_RESUME_S = 13
const EFUSE_SECURE_VERSION_S = 14
const EFUSE_SECURE_BOOT_DISABLE_FAST_WAKE_S = 30
const EFUSE_RPT4_RESERVED3_0_S = 31
const EFUSE_DISABLE_WAFER_VERSION_MAJOR_S = 0
const EFUSE_DISABLE_BLK_VERSION_MAJOR_S = 1
const EFUSE_RESERVED_0_162_S = 2
const EFUSE_RPT4_RESERVED4_0_S = 24
const EFUSE_MAC_0_S = 0
const EFUSE_MAC_1_S = 0
const EFUSE_MAC_EXT_S = 16
const EFUSE_ACTIVE_HP_DBIAS_S = 0
const EFUSE_ACTIVE_LP_DBIAS_S = 5
const EFUSE_LSLP_HP_DBG_S = 10
const EFUSE_LSLP_HP_DBIAS_S = 12
const EFUSE_DSLP_LP_DBG_S = 16
const EFUSE_DSLP_LP_DBIAS_S = 19
const EFUSE_DBIAS_VOL_GAP_S = 23
const EFUSE_SPI_PAD_CONF_1_S = 28
const EFUSE_SPI_PAD_CONF_2_S = 0
const EFUSE_WAFER_VERSION_MINOR_S = 18
const EFUSE_WAFER_VERSION_MAJOR_S = 22
const EFUSE_PKG_VERSION_S = 24
const EFUSE_BLK_VERSION_MINOR_S = 27
const EFUSE_BLK_VERSION_MAJOR_S = 30
const EFUSE_FLASH_CAP_S = 0
const EFUSE_FLASH_TEMP_S = 3
const EFUSE_FLASH_VENDOR_S = 5
const EFUSE_RESERVED_1_136_S = 8
const EFUSE_SYS_DATA_PART0_2_S = 0
const EFUSE_OPTIONAL_UNIQUE_ID_S = 0
const EFUSE_OPTIONAL_UNIQUE_ID_1_S = 0
const EFUSE_OPTIONAL_UNIQUE_ID_2_S = 0
const EFUSE_OPTIONAL_UNIQUE_ID_3_S = 0
const EFUSE_TEMP_CALIB_S = 0
const EFUSE_OCODE_S = 9
const EFUSE_ADC1_INIT_CODE_ATTEN0_S = 17
const EFUSE_ADC1_INIT_CODE_ATTEN1_S = 27
const EFUSE_ADC1_INIT_CODE_ATTEN1_1_S = 0
const EFUSE_ADC1_INIT_CODE_ATTEN2_S = 5
const EFUSE_ADC1_INIT_CODE_ATTEN3_S = 15
const EFUSE_ADC1_CAL_VOL_ATTEN0_S = 25
const EFUSE_ADC1_CAL_VOL_ATTEN0_1_S = 0
const EFUSE_ADC1_CAL_VOL_ATTEN1_S = 3
const EFUSE_ADC1_CAL_VOL_ATTEN2_S = 13
const EFUSE_ADC1_CAL_VOL_ATTEN3_S = 23
const EFUSE_ADC1_CAL_VOL_ATTEN3_1_S = 0
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH0_S = 1
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH1_S = 5
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH2_S = 9
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH3_S = 13
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH4_S = 17
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH5_S = 21
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH6_S = 25
const EFUSE_RESERVED_2_253_S = 29
const EFUSE_USR_DATA0_S = 0
const EFUSE_USR_DATA1_S = 0
const EFUSE_USR_DATA2_S = 0
const EFUSE_USR_DATA3_S = 0
const EFUSE_USR_DATA4_S = 0
const EFUSE_USR_DATA5_S = 0
const EFUSE_RESERVED_3_192_S = 0
const EFUSE_CUSTOM_MAC_S = 8
const EFUSE_CUSTOM_MAC_1_S = 0
const EFUSE_RESERVED_3_248_S = 24
const EFUSE_KEY0_DATA0_S = 0
const EFUSE_KEY0_DATA1_S = 0
const EFUSE_KEY0_DATA2_S = 0
const EFUSE_KEY0_DATA3_S = 0
const EFUSE_KEY0_DATA4_S = 0
const EFUSE_KEY0_DATA5_S = 0
const EFUSE_KEY0_DATA6_S = 0
const EFUSE_KEY0_DATA7_S = 0
const EFUSE_KEY1_DATA0_S = 0
const EFUSE_KEY1_DATA1_S = 0
const EFUSE_KEY1_DATA2_S = 0
const EFUSE_KEY1_DATA3_S = 0
const EFUSE_KEY1_DATA4_S = 0
const EFUSE_KEY1_DATA5_S = 0
const EFUSE_KEY1_DATA6_S = 0
const EFUSE_KEY1_DATA7_S = 0
const EFUSE_KEY2_DATA0_S = 0
const EFUSE_KEY2_DATA1_S = 0
const EFUSE_KEY2_DATA2_S = 0
const EFUSE_KEY2_DATA3_S = 0
const EFUSE_KEY2_DATA4_S = 0
const EFUSE_KEY2_DATA5_S = 0
const EFUSE_KEY2_DATA6_S = 0
const EFUSE_KEY2_DATA7_S = 0
const EFUSE_KEY3_DATA0_S = 0
const EFUSE_KEY3_DATA1_S = 0
const EFUSE_KEY3_DATA2_S = 0
const EFUSE_KEY3_DATA3_S = 0
const EFUSE_KEY3_DATA4_S = 0
const EFUSE_KEY3_DATA5_S = 0
const EFUSE_KEY3_DATA6_S = 0
const EFUSE_KEY3_DATA7_S = 0
const EFUSE_KEY4_DATA0_S = 0
const EFUSE_KEY4_DATA1_S = 0
const EFUSE_KEY4_DATA2_S = 0
const EFUSE_KEY4_DATA3_S = 0
const EFUSE_KEY4_DATA4_S = 0
const EFUSE_KEY4_DATA5_S = 0
const EFUSE_KEY4_DATA6_S = 0
const EFUSE_KEY4_DATA7_S = 0
const EFUSE_KEY5_DATA0_S = 0
const EFUSE_KEY5_DATA1_S = 0
const EFUSE_KEY5_DATA2_S = 0
const EFUSE_KEY5_DATA3_S = 0
const EFUSE_KEY5_DATA4_S = 0
const EFUSE_KEY5_DATA5_S = 0
const EFUSE_KEY5_DATA6_S = 0
const EFUSE_KEY5_DATA7_S = 0
const EFUSE_SYS_DATA_PART2_0_S = 0
const EFUSE_SYS_DATA_PART2_1_S = 0
const EFUSE_SYS_DATA_PART2_2_S = 0
const EFUSE_SYS_DATA_PART2_3_S = 0
const EFUSE_SYS_DATA_PART2_4_S = 0
const EFUSE_SYS_DATA_PART2_5_S = 0
const EFUSE_SYS_DATA_PART2_6_S = 0
const EFUSE_SYS_DATA_PART2_7_S = 0
const EFUSE_RD_DIS_ERR_S = 0
const EFUSE_SWAP_UART_SDIO_EN_ERR_S = 7
const EFUSE_DIS_ICACHE_ERR_S = 8
const EFUSE_DIS_USB_JTAG_ERR_S = 9
const EFUSE_DIS_DOWNLOAD_ICACHE_ERR_S = 10
const EFUSE_DIS_USB_SERIAL_JTAG_ERR_S = 11
const EFUSE_DIS_FORCE_DOWNLOAD_ERR_S = 12
const EFUSE_SPI_DOWNLOAD_MSPI_DIS_ERR_S = 13
const EFUSE_DIS_TWAI_ERR_S = 14
const EFUSE_JTAG_SEL_ENABLE_ERR_S = 15
const EFUSE_SOFT_DIS_JTAG_ERR_S = 16
const EFUSE_DIS_PAD_JTAG_ERR_S = 19
const EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_ERR_S = 20
const EFUSE_USB_DREFH_ERR_S = 21
const EFUSE_USB_DREFL_ERR_S = 23
const EFUSE_USB_EXCHG_PINS_ERR_S = 25
const EFUSE_VDD_SPI_AS_GPIO_ERR_S = 26
const EFUSE_RPT4_RESERVED0_ERR_2_S = 27
const EFUSE_RPT4_RESERVED0_ERR_1_S = 29
const EFUSE_RPT4_RESERVED0_ERR_0_S = 30
const EFUSE_RPT4_RESERVED1_ERR_0_S = 0
const EFUSE_WDT_DELAY_SEL_ERR_S = 16
const EFUSE_SPI_BOOT_CRYPT_CNT_ERR_S = 18
const EFUSE_SECURE_BOOT_KEY_REVOKE0_ERR_S = 21
const EFUSE_SECURE_BOOT_KEY_REVOKE1_ERR_S = 22
const EFUSE_SECURE_BOOT_KEY_REVOKE2_ERR_S = 23
const EFUSE_KEY_PURPOSE_0_ERR_S = 24
const EFUSE_KEY_PURPOSE_1_ERR_S = 28
const EFUSE_KEY_PURPOSE_2_ERR_S = 0
const EFUSE_KEY_PURPOSE_3_ERR_S = 4
const EFUSE_KEY_PURPOSE_4_ERR_S = 8
const EFUSE_KEY_PURPOSE_5_ERR_S = 12
const EFUSE_SEC_DPA_LEVEL_ERR_S = 16
const EFUSE_RPT4_RESERVED2_ERR_1_S = 18
const EFUSE_CRYPT_DPA_ENABLE_ERR_S = 19
const EFUSE_SECURE_BOOT_EN_ERR_S = 20
const EFUSE_SECURE_BOOT_AGGRESSIVE_REVOKE_ERR_S = 21
const EFUSE_RPT4_RESERVED2_ERR_0_S = 22
const EFUSE_FLASH_TPUW_ERR_S = 28
const EFUSE_DIS_DOWNLOAD_MODE_ERR_S = 0
const EFUSE_DIS_DIRECT_BOOT_ERR_S = 1
const EFUSE_USB_PRINT_ERR_S = 2
const EFUSE_RPT4_RESERVED3_ERR_5_S = 3
const EFUSE_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE_ERR_S = 4
const EFUSE_ENABLE_SECURITY_DOWNLOAD_ERR_S = 5
const EFUSE_UART_PRINT_CONTROL_ERR_S = 6
const EFUSE_RPT4_RESERVED3_ERR_4_S = 8
const EFUSE_RPT4_RESERVED3_ERR_3_S = 9
const EFUSE_RPT4_RESERVED3_ERR_2_S = 10
const EFUSE_RPT4_RESERVED3_ERR_1_S = 12
const EFUSE_FORCE_SEND_RESUME_ERR_S = 13
const EFUSE_SECURE_VERSION_ERR_S = 14
const EFUSE_RPT4_RESERVED3_ERR_0_S = 30
const EFUSE_RPT4_RESERVED4_ERR_1_S = 0
const EFUSE_RPT4_RESERVED4_ERR_0_S = 24
const EFUSE_MAC_SPI_8M_ERR_NUM_S = 0
const EFUSE_MAC_SPI_8M_FAIL_S = 3
const EFUSE_SYS_PART1_NUM_S = 4
const EFUSE_SYS_PART1_FAIL_S = 7
const EFUSE_USR_DATA_ERR_NUM_S = 8
const EFUSE_USR_DATA_FAIL_S = 11
const EFUSE_KEY0_ERR_NUM_S = 12
const EFUSE_KEY0_FAIL_S = 15
const EFUSE_KEY1_ERR_NUM_S = 16
const EFUSE_KEY1_FAIL_S = 19
const EFUSE_KEY2_ERR_NUM_S = 20
const EFUSE_KEY2_FAIL_S = 23
const EFUSE_KEY3_ERR_NUM_S = 24
const EFUSE_KEY3_FAIL_S = 27
const EFUSE_KEY4_ERR_NUM_S = 28
const EFUSE_KEY4_FAIL_S = 31
const EFUSE_KEY5_ERR_NUM_S = 0
const EFUSE_KEY5_FAIL_S = 3
const EFUSE_SYS_PART2_ERR_NUM_S = 4
const EFUSE_SYS_PART2_FAIL_S = 7
const EFUSE_MEM_FORCE_PD_S = 0
const EFUSE_MEM_CLK_FORCE_ON_S = 1
const EFUSE_MEM_FORCE_PU_S = 2
const EFUSE_CLK_EN_S = 16
const EFUSE_OP_CODE_S = 0
const EFUSE_STATE_S = 0
const EFUSE_OTP_LOAD_SW_S = 4
const EFUSE_OTP_VDDQ_C_SYNC2_S = 5
const EFUSE_OTP_STROBE_SW_S = 6
const EFUSE_OTP_CSB_SW_S = 7
const EFUSE_OTP_PGENB_SW_S = 8
const EFUSE_OTP_VDDQ_IS_SW_S = 9
const EFUSE_BLK0_VALID_BIT_CNT_S = 10
const EFUSE_READ_CMD_S = 0
const EFUSE_PGM_CMD_S = 1
const EFUSE_BLK_NUM_S = 2
const EFUSE_READ_DONE_INT_RAW_S = 0
const EFUSE_PGM_DONE_INT_RAW_S = 1
const EFUSE_READ_DONE_INT_ST_S = 0
const EFUSE_PGM_DONE_INT_ST_S = 1
const EFUSE_READ_DONE_INT_ENA_S = 0
const EFUSE_PGM_DONE_INT_ENA_S = 1
const EFUSE_READ_DONE_INT_CLR_S = 0
const EFUSE_PGM_DONE_INT_CLR_S = 1
const EFUSE_DAC_CLK_DIV_S = 0
const EFUSE_DAC_CLK_PAD_SEL_S = 8
const EFUSE_DAC_NUM_S = 9
const EFUSE_OE_CLR_S = 17
const EFUSE_THR_A_S = 0
const EFUSE_TRD_S = 8
const EFUSE_TSUR_A_S = 16
const EFUSE_READ_INIT_NUM_S = 24
const EFUSE_TSUP_A_S = 0
const EFUSE_PWR_ON_NUM_S = 8
const EFUSE_THP_A_S = 24
const EFUSE_PWR_OFF_NUM_S = 0
const EFUSE_TPGM_S = 16
const EFUSE_BYPASS_RS_CORRECTION_S = 0
const EFUSE_BYPASS_RS_BLK_NUM_S = 1
const EFUSE_UPDATE_S = 12
const EFUSE_TPGM_INACTIVE_S = 13
const EFUSE_DATE_S = 0
const EFUSE_SPICONFIG_SPI_DEFAULTS = 0
const EFUSE_SPICONFIG_HSPI_DEFAULTS = 1
const EFUSE_SPICONFIG_RET_SPICLK_MASK = 0x3f
const EFUSE_SPICONFIG_RET_SPICLK_SHIFT = 0
const EFUSE_SPICONFIG_RET_SPIQ_MASK = 0x3f
const EFUSE_SPICONFIG_RET_SPIQ_SHIFT = 6
const EFUSE_SPICONFIG_RET_SPID_MASK = 0x3f
const EFUSE_SPICONFIG_RET_SPID_SHIFT = 12
const EFUSE_SPICONFIG_RET_SPICS0_MASK = 0x3f
const EFUSE_SPICONFIG_RET_SPICS0_SHIFT = 18
const EFUSE_SPICONFIG_RET_SPIHD_MASK = 0x3f
const EFUSE_SPICONFIG_RET_SPIHD_SHIFT = 24
const MACSTR = "%02x:%02x:%02x:%02x:%02x:%02x"
const ETS_DIGEST_LEN = 32
const ETS_SIG_LEN = 384
const SPI_FLASH_SEC_SIZE = 4096
const FLASH_ID_GD25LQ32C = 0xC86016
const SPI_FLASH_OPI_FLAG = 16
const MSPI_FUNC_NUM = 0
const MSPI_IOMUX_PIN_NUM_HD = 28
const MSPI_IOMUX_PIN_NUM_WP = 26
const MSPI_IOMUX_PIN_NUM_CS0 = 24
const MSPI_IOMUX_PIN_NUM_CLK = 29
const MSPI_IOMUX_PIN_NUM_MOSI = 30
const MSPI_IOMUX_PIN_NUM_MISO = 25
const SPI2_FUNC_NUM = 2
const SPI2_IOMUX_PIN_NUM_MISO = 2
const SPI2_IOMUX_PIN_NUM_HD = 4
const SPI2_IOMUX_PIN_NUM_WP = 5
const SPI2_IOMUX_PIN_NUM_CLK = 6
const SPI2_IOMUX_PIN_NUM_MOSI = 7
const SPI2_IOMUX_PIN_NUM_CS = 16
const SPI_CONF_BITLEN_S = 0
const SPI_UPDATE_S = 23
const SPI_USR_S = 24
const SPI_USR_ADDR_VALUE_S = 0
const SPI_DUMMY_OUT_S = 3
const SPI_FADDR_DUAL_S = 5
const SPI_FADDR_QUAD_S = 6
const SPI_FADDR_OCT_S = 7
const SPI_FCMD_DUAL_S = 8
const SPI_FCMD_QUAD_S = 9
const SPI_FCMD_OCT_S = 10
const SPI_FREAD_DUAL_S = 14
const SPI_FREAD_QUAD_S = 15
const SPI_FREAD_OCT_S = 16
const SPI_Q_POL_S = 18
const SPI_D_POL_S = 19
const SPI_HOLD_POL_S = 20
const SPI_WP_POL_S = 21
const SPI_RD_BIT_ORDER_S = 23
const SPI_WR_BIT_ORDER_S = 25
const SPI_CLKCNT_L_S = 0
const SPI_CLKCNT_H_S = 6
const SPI_CLKCNT_N_S = 12
const SPI_CLKDIV_PRE_S = 18
const SPI_CLK_EQU_SYSCLK_S = 31
const SPI_DOUTDIN_S = 0
const SPI_QPI_MODE_S = 3
const SPI_OPI_MODE_S = 4
const SPI_TSCK_I_EDGE_S = 5
const SPI_CS_HOLD_S = 6
const SPI_CS_SETUP_S = 7
const SPI_RSCK_I_EDGE_S = 8
const SPI_CK_OUT_EDGE_S = 9
const SPI_FWRITE_DUAL_S = 12
const SPI_FWRITE_QUAD_S = 13
const SPI_FWRITE_OCT_S = 14
const SPI_USR_CONF_NXT_S = 15
const SPI_SIO_S = 17
const SPI_USR_MISO_HIGHPART_S = 24
const SPI_USR_MOSI_HIGHPART_S = 25
const SPI_USR_DUMMY_IDLE_S = 26
const SPI_USR_MOSI_S = 27
const SPI_USR_MISO_S = 28
const SPI_USR_DUMMY_S = 29
const SPI_USR_ADDR_S = 30
const SPI_USR_COMMAND_S = 31
const SPI_USR_DUMMY_CYCLELEN_S = 0
const SPI_MST_WFULL_ERR_END_EN_S = 16
const SPI_CS_SETUP_TIME_S = 17
const SPI_CS_HOLD_TIME_S = 22
const SPI_USR_ADDR_BITLEN_S = 27
const SPI_USR_COMMAND_VALUE_S = 0
const SPI_MST_REMPTY_ERR_END_EN_S = 27
const SPI_USR_COMMAND_BITLEN_S = 28
const SPI_MS_DATA_BITLEN_S = 0
const SPI_CS0_DIS_S = 0
const SPI_CS1_DIS_S = 1
const SPI_CS2_DIS_S = 2
const SPI_CS3_DIS_S = 3
const SPI_CS4_DIS_S = 4
const SPI_CS5_DIS_S = 5
const SPI_CK_DIS_S = 6
const SPI_MASTER_CS_POL_S = 7
const SPI_CLK_DATA_DTR_EN_S = 16
const SPI_DATA_DTR_EN_S = 17
const SPI_ADDR_DTR_EN_S = 18
const SPI_CMD_DTR_EN_S = 19
const SPI_SLAVE_CS_POL_S = 23
const SPI_DQS_IDLE_EDGE_S = 24
const SPI_CK_IDLE_EDGE_S = 29
const SPI_CS_KEEP_ACTIVE_S = 30
const SPI_QUAD_DIN_PIN_SWAP_S = 31
const SPI_DIN0_MODE_S = 0
const SPI_DIN1_MODE_S = 2
const SPI_DIN2_MODE_S = 4
const SPI_DIN3_MODE_S = 6
const SPI_DIN4_MODE_S = 8
const SPI_DIN5_MODE_S = 10
const SPI_DIN6_MODE_S = 12
const SPI_DIN7_MODE_S = 14
const SPI_TIMING_HCLK_ACTIVE_S = 16
const SPI_DIN0_NUM_S = 0
const SPI_DIN1_NUM_S = 2
const SPI_DIN2_NUM_S = 4
const SPI_DIN3_NUM_S = 6
const SPI_DIN4_NUM_S = 8
const SPI_DIN5_NUM_S = 10
const SPI_DIN6_NUM_S = 12
const SPI_DIN7_NUM_S = 14
const SPI_DOUT0_MODE_S = 0
const SPI_DOUT1_MODE_S = 1
const SPI_DOUT2_MODE_S = 2
const SPI_DOUT3_MODE_S = 3
const SPI_DOUT4_MODE_S = 4
const SPI_DOUT5_MODE_S = 5
const SPI_DOUT6_MODE_S = 6
const SPI_DOUT7_MODE_S = 7
const SPI_D_DQS_MODE_S = 8
const SPI_DMA_OUTFIFO_EMPTY_S = 0
const SPI_DMA_INFIFO_FULL_S = 1
const SPI_DMA_SLV_SEG_TRANS_EN_S = 18
const SPI_SLV_RX_SEG_TRANS_CLR_EN_S = 19
const SPI_SLV_TX_SEG_TRANS_CLR_EN_S = 20
const SPI_RX_EOF_EN_S = 21
const SPI_DMA_RX_ENA_S = 27
const SPI_DMA_TX_ENA_S = 28
const SPI_RX_AFIFO_RST_S = 29
const SPI_BUF_AFIFO_RST_S = 30
const SPI_DMA_AFIFO_RST_S = 31
const SPI_DMA_INFIFO_FULL_ERR_INT_ENA_S = 0
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ENA_S = 1
const SPI_SLV_EX_QPI_INT_ENA_S = 2
const SPI_SLV_EN_QPI_INT_ENA_S = 3
const SPI_SLV_CMD7_INT_ENA_S = 4
const SPI_SLV_CMD8_INT_ENA_S = 5
const SPI_SLV_CMD9_INT_ENA_S = 6
const SPI_SLV_CMDA_INT_ENA_S = 7
const SPI_SLV_RD_DMA_DONE_INT_ENA_S = 8
const SPI_SLV_WR_DMA_DONE_INT_ENA_S = 9
const SPI_SLV_RD_BUF_DONE_INT_ENA_S = 10
const SPI_SLV_WR_BUF_DONE_INT_ENA_S = 11
const SPI_TRANS_DONE_INT_ENA_S = 12
const SPI_DMA_SEG_TRANS_DONE_INT_ENA_S = 13
const SPI_SEG_MAGIC_ERR_INT_ENA_S = 14
const SPI_SLV_BUF_ADDR_ERR_INT_ENA_S = 15
const SPI_SLV_CMD_ERR_INT_ENA_S = 16
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ENA_S = 17
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ENA_S = 18
const SPI_APP2_INT_ENA_S = 19
const SPI_APP1_INT_ENA_S = 20
const SPI_DMA_INFIFO_FULL_ERR_INT_CLR_S = 0
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_CLR_S = 1
const SPI_SLV_EX_QPI_INT_CLR_S = 2
const SPI_SLV_EN_QPI_INT_CLR_S = 3
const SPI_SLV_CMD7_INT_CLR_S = 4
const SPI_SLV_CMD8_INT_CLR_S = 5
const SPI_SLV_CMD9_INT_CLR_S = 6
const SPI_SLV_CMDA_INT_CLR_S = 7
const SPI_SLV_RD_DMA_DONE_INT_CLR_S = 8
const SPI_SLV_WR_DMA_DONE_INT_CLR_S = 9
const SPI_SLV_RD_BUF_DONE_INT_CLR_S = 10
const SPI_SLV_WR_BUF_DONE_INT_CLR_S = 11
const SPI_TRANS_DONE_INT_CLR_S = 12
const SPI_DMA_SEG_TRANS_DONE_INT_CLR_S = 13
const SPI_SEG_MAGIC_ERR_INT_CLR_S = 14
const SPI_SLV_BUF_ADDR_ERR_INT_CLR_S = 15
const SPI_SLV_CMD_ERR_INT_CLR_S = 16
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_CLR_S = 17
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_CLR_S = 18
const SPI_APP2_INT_CLR_S = 19
const SPI_APP1_INT_CLR_S = 20
const SPI_DMA_INFIFO_FULL_ERR_INT_RAW_S = 0
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_RAW_S = 1
const SPI_SLV_EX_QPI_INT_RAW_S = 2
const SPI_SLV_EN_QPI_INT_RAW_S = 3
const SPI_SLV_CMD7_INT_RAW_S = 4
const SPI_SLV_CMD8_INT_RAW_S = 5
const SPI_SLV_CMD9_INT_RAW_S = 6
const SPI_SLV_CMDA_INT_RAW_S = 7
const SPI_SLV_RD_DMA_DONE_INT_RAW_S = 8
const SPI_SLV_WR_DMA_DONE_INT_RAW_S = 9
const SPI_SLV_RD_BUF_DONE_INT_RAW_S = 10
const SPI_SLV_WR_BUF_DONE_INT_RAW_S = 11
const SPI_TRANS_DONE_INT_RAW_S = 12
const SPI_DMA_SEG_TRANS_DONE_INT_RAW_S = 13
const SPI_SEG_MAGIC_ERR_INT_RAW_S = 14
const SPI_SLV_BUF_ADDR_ERR_INT_RAW_S = 15
const SPI_SLV_CMD_ERR_INT_RAW_S = 16
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_RAW_S = 17
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_RAW_S = 18
const SPI_APP2_INT_RAW_S = 19
const SPI_APP1_INT_RAW_S = 20
const SPI_DMA_INFIFO_FULL_ERR_INT_ST_S = 0
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ST_S = 1
const SPI_SLV_EX_QPI_INT_ST_S = 2
const SPI_SLV_EN_QPI_INT_ST_S = 3
const SPI_SLV_CMD7_INT_ST_S = 4
const SPI_SLV_CMD8_INT_ST_S = 5
const SPI_SLV_CMD9_INT_ST_S = 6
const SPI_SLV_CMDA_INT_ST_S = 7
const SPI_SLV_RD_DMA_DONE_INT_ST_S = 8
const SPI_SLV_WR_DMA_DONE_INT_ST_S = 9
const SPI_SLV_RD_BUF_DONE_INT_ST_S = 10
const SPI_SLV_WR_BUF_DONE_INT_ST_S = 11
const SPI_TRANS_DONE_INT_ST_S = 12
const SPI_DMA_SEG_TRANS_DONE_INT_ST_S = 13
const SPI_SEG_MAGIC_ERR_INT_ST_S = 14
const SPI_SLV_BUF_ADDR_ERR_INT_ST_S = 15
const SPI_SLV_CMD_ERR_INT_ST_S = 16
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ST_S = 17
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ST_S = 18
const SPI_APP2_INT_ST_S = 19
const SPI_APP1_INT_ST_S = 20
const SPI_DMA_INFIFO_FULL_ERR_INT_SET_S = 0
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_SET_S = 1
const SPI_SLV_EX_QPI_INT_SET_S = 2
const SPI_SLV_EN_QPI_INT_SET_S = 3
const SPI_SLV_CMD7_INT_SET_S = 4
const SPI_SLV_CMD8_INT_SET_S = 5
const SPI_SLV_CMD9_INT_SET_S = 6
const SPI_SLV_CMDA_INT_SET_S = 7
const SPI_SLV_RD_DMA_DONE_INT_SET_S = 8
const SPI_SLV_WR_DMA_DONE_INT_SET_S = 9
const SPI_SLV_RD_BUF_DONE_INT_SET_S = 10
const SPI_SLV_WR_BUF_DONE_INT_SET_S = 11
const SPI_TRANS_DONE_INT_SET_S = 12
const SPI_DMA_SEG_TRANS_DONE_INT_SET_S = 13
const SPI_SEG_MAGIC_ERR_INT_SET_S = 14
const SPI_SLV_BUF_ADDR_ERR_INT_SET_S = 15
const SPI_SLV_CMD_ERR_INT_SET_S = 16
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_SET_S = 17
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_SET_S = 18
const SPI_APP2_INT_SET_S = 19
const SPI_APP1_INT_SET_S = 20
const SPI_BUF0_S = 0
const SPI_BUF1_S = 0
const SPI_BUF2_S = 0
const SPI_BUF3_S = 0
const SPI_BUF4_S = 0
const SPI_BUF5_S = 0
const SPI_BUF6_S = 0
const SPI_BUF7_S = 0
const SPI_BUF8_S = 0
const SPI_BUF9_S = 0
const SPI_BUF10_S = 0
const SPI_BUF11_S = 0
const SPI_BUF12_S = 0
const SPI_BUF13_S = 0
const SPI_BUF14_S = 0
const SPI_BUF15_S = 0
const SPI_CLK_MODE_S = 0
const SPI_CLK_MODE_13_S = 2
const SPI_RSCK_DATA_OUT_S = 3
const SPI_SLV_RDDMA_BITLEN_EN_S = 8
const SPI_SLV_WRDMA_BITLEN_EN_S = 9
const SPI_SLV_RDBUF_BITLEN_EN_S = 10
const SPI_SLV_WRBUF_BITLEN_EN_S = 11
const SPI_DMA_SEG_MAGIC_VALUE_S = 22
const SPI_SLAVE_MODE_S = 26
const SPI_SOFT_RESET_S = 27
const SPI_USR_CONF_S = 28
const SPI_MST_FD_WAIT_DMA_TX_DATA_S = 29
const SPI_SLV_DATA_BITLEN_S = 0
const SPI_SLV_LAST_COMMAND_S = 18
const SPI_SLV_LAST_ADDR_S = 26
const SPI_CLK_EN_S = 0
const SPI_MST_CLK_ACTIVE_S = 1
const SPI_MST_CLK_SEL_S = 2
const SPI_DATE_S = 0
const EXT_ADC_START_IDX = 0
const LEDC_LS_SIG_OUT0_IDX = 0
const LEDC_LS_SIG_OUT1_IDX = 1
const LEDC_LS_SIG_OUT2_IDX = 2
const LEDC_LS_SIG_OUT3_IDX = 3
const LEDC_LS_SIG_OUT4_IDX = 4
const LEDC_LS_SIG_OUT5_IDX = 5
const U0RXD_IN_IDX = 6
const U0TXD_OUT_IDX = 6
const U0CTS_IN_IDX = 7
const U0RTS_OUT_IDX = 7
const U0DSR_IN_IDX = 8
const U0DTR_OUT_IDX = 8
const U1RXD_IN_IDX = 9
const U1TXD_OUT_IDX = 9
const U1CTS_IN_IDX = 10
const U1RTS_OUT_IDX = 10
const U1DSR_IN_IDX = 11
const U1DTR_OUT_IDX = 11
const I2S_MCLK_IN_IDX = 12
const I2S_MCLK_OUT_IDX = 12
const I2SO_BCK_IN_IDX = 13
const I2SO_BCK_OUT_IDX = 13
const I2SO_WS_IN_IDX = 14
const I2SO_WS_OUT_IDX = 14
const I2SI_SD_IN_IDX = 15
const I2SO_SD_OUT_IDX = 15
const I2SI_BCK_IN_IDX = 16
const I2SI_BCK_OUT_IDX = 16
const I2SI_WS_IN_IDX = 17
const I2SI_WS_OUT_IDX = 17
const I2SO_SD1_OUT_IDX = 18
const USB_JTAG_TDO_BRIDGE_IDX = 19
const USB_JTAG_TRST_IDX = 19
const CPU_TESTBUS0_IDX = 20
const CPU_TESTBUS1_IDX = 21
const CPU_TESTBUS2_IDX = 22
const CPU_TESTBUS3_IDX = 23
const CPU_TESTBUS4_IDX = 24
const CPU_TESTBUS5_IDX = 25
const CPU_TESTBUS6_IDX = 26
const CPU_TESTBUS7_IDX = 27
const CPU_GPIO_IN0_IDX = 28
const CPU_GPIO_OUT0_IDX = 28
const CPU_GPIO_IN1_IDX = 29
const CPU_GPIO_OUT1_IDX = 29
const CPU_GPIO_IN2_IDX = 30
const CPU_GPIO_OUT2_IDX = 30
const CPU_GPIO_IN3_IDX = 31
const CPU_GPIO_OUT3_IDX = 31
const CPU_GPIO_IN4_IDX = 32
const CPU_GPIO_OUT4_IDX = 32
const CPU_GPIO_IN5_IDX = 33
const CPU_GPIO_OUT5_IDX = 33
const CPU_GPIO_IN6_IDX = 34
const CPU_GPIO_OUT6_IDX = 34
const CPU_GPIO_IN7_IDX = 35
const CPU_GPIO_OUT7_IDX = 35
const USB_JTAG_TCK_IDX = 36
const USB_JTAG_TMS_IDX = 37
const USB_JTAG_TDI_IDX = 38
const USB_JTAG_TDO_IDX = 39
const USB_EXTPHY_VP_IDX = 40
const USB_EXTPHY_OEN_IDX = 40
const USB_EXTPHY_VM_IDX = 41
const USB_EXTPHY_SPEED_IDX = 41
const USB_EXTPHY_RCV_IDX = 42
const USB_EXTPHY_VPO_IDX = 42
const USB_EXTPHY_VMO_IDX = 43
const USB_EXTPHY_SUSPND_IDX = 44
const I2CEXT0_SCL_IN_IDX = 45
const I2CEXT0_SCL_OUT_IDX = 45
const I2CEXT0_SDA_IN_IDX = 46
const I2CEXT0_SDA_OUT_IDX = 46
const PARL_RX_DATA0_IDX = 47
const PARL_TX_DATA0_IDX = 47
const PARL_RX_DATA1_IDX = 48
const PARL_TX_DATA1_IDX = 48
const PARL_RX_DATA2_IDX = 49
const PARL_TX_DATA2_IDX = 49
const PARL_RX_DATA3_IDX = 50
const PARL_TX_DATA3_IDX = 50
const PARL_RX_DATA4_IDX = 51
const PARL_TX_DATA4_IDX = 51
const PARL_RX_DATA5_IDX = 52
const PARL_TX_DATA5_IDX = 52
const PARL_RX_DATA6_IDX = 53
const PARL_TX_DATA6_IDX = 53
const PARL_RX_DATA7_IDX = 54
const PARL_TX_DATA7_IDX = 54
const PARL_RX_DATA8_IDX = 55
const PARL_TX_DATA8_IDX = 55
const PARL_RX_DATA9_IDX = 56
const PARL_TX_DATA9_IDX = 56
const PARL_RX_DATA10_IDX = 57
const PARL_TX_DATA10_IDX = 57
const PARL_RX_DATA11_IDX = 58
const PARL_TX_DATA11_IDX = 58
const PARL_RX_DATA12_IDX = 59
const PARL_TX_DATA12_IDX = 59
const PARL_RX_DATA13_IDX = 60
const PARL_TX_DATA13_IDX = 60
const PARL_RX_DATA14_IDX = 61
const PARL_TX_DATA14_IDX = 61
const PARL_RX_DATA15_IDX = 62
const PARL_TX_DATA15_IDX = 62
const FSPICLK_IN_IDX = 63
const FSPICLK_OUT_IDX = 63
const FSPIQ_IN_IDX = 64
const FSPIQ_OUT_IDX = 64
const FSPID_IN_IDX = 65
const FSPID_OUT_IDX = 65
const FSPIHD_IN_IDX = 66
const FSPIHD_OUT_IDX = 66
const FSPIWP_IN_IDX = 67
const FSPIWP_OUT_IDX = 67
const FSPICS0_IN_IDX = 68
const FSPICS0_OUT_IDX = 68
const PARL_RX_CLK_IN_IDX = 69
const SDIO_TOHOST_INT_OUT_IDX = 69
const PARL_TX_CLK_IN_IDX = 70
const PARL_TX_CLK_OUT_IDX = 70
const RMT_SIG_IN0_IDX = 71
const RMT_SIG_OUT0_IDX = 71
const MODEM_DIAG0_IDX = 71
const RMT_SIG_IN1_IDX = 72
const RMT_SIG_OUT1_IDX = 72
const MODEM_DIAG1_IDX = 72
const TWAI0_RX_IDX = 73
const TWAI0_TX_IDX = 73
const MODEM_DIAG2_IDX = 73
const TWAI0_BUS_OFF_ON_IDX = 74
const MODEM_DIAG3_IDX = 74
const TWAI0_CLKOUT_IDX = 75
const MODEM_DIAG4_IDX = 75
const TWAI0_STANDBY_IDX = 76
const MODEM_DIAG5_IDX = 76
const TWAI1_RX_IDX = 77
const TWAI1_TX_IDX = 77
const MODEM_DIAG6_IDX = 77
const TWAI1_BUS_OFF_ON_IDX = 78
const MODEM_DIAG7_IDX = 78
const TWAI1_CLKOUT_IDX = 79
const MODEM_DIAG8_IDX = 79
const TWAI1_STANDBY_IDX = 80
const MODEM_DIAG9_IDX = 80
const EXTERN_PRIORITY_I_IDX = 81
const EXTERN_PRIORITY_O_IDX = 81
const EXTERN_ACTIVE_I_IDX = 82
const EXTERN_ACTIVE_O_IDX = 82
const GPIO_SD0_OUT_IDX = 83
const GPIO_SD1_OUT_IDX = 84
const GPIO_SD2_OUT_IDX = 85
const GPIO_SD3_OUT_IDX = 86
const PWM0_SYNC0_IN_IDX = 87
const PWM0_OUT0A_IDX = 87
const MODEM_DIAG10_IDX = 87
const PWM0_SYNC1_IN_IDX = 88
const PWM0_OUT0B_IDX = 88
const MODEM_DIAG11_IDX = 88
const PWM0_SYNC2_IN_IDX = 89
const PWM0_OUT1A_IDX = 89
const MODEM_DIAG12_IDX = 89
const PWM0_F0_IN_IDX = 90
const PWM0_OUT1B_IDX = 90
const MODEM_DIAG13_IDX = 90
const PWM0_F1_IN_IDX = 91
const PWM0_OUT2A_IDX = 91
const MODEM_DIAG14_IDX = 91
const PWM0_F2_IN_IDX = 92
const PWM0_OUT2B_IDX = 92
const MODEM_DIAG15_IDX = 92
const PWM0_CAP0_IN_IDX = 93
const ANT_SEL0_IDX = 93
const PWM0_CAP1_IN_IDX = 94
const ANT_SEL1_IDX = 94
const PWM0_CAP2_IN_IDX = 95
const ANT_SEL2_IDX = 95
const ANT_SEL3_IDX = 96
const SIG_IN_FUNC_97_IDX = 97
const SIG_IN_FUNC97_IDX = 97
const SIG_IN_FUNC_98_IDX = 98
const SIG_IN_FUNC98_IDX = 98
const SIG_IN_FUNC_99_IDX = 99
const SIG_IN_FUNC99_IDX = 99
const SIG_IN_FUNC_100_IDX = 100
const SIG_IN_FUNC100_IDX = 100
const PCNT_SIG_CH0_IN0_IDX = 101
const FSPICS1_OUT_IDX = 101
const MODEM_DIAG16_IDX = 101
const PCNT_SIG_CH1_IN0_IDX = 102
const FSPICS2_OUT_IDX = 102
const MODEM_DIAG17_IDX = 102
const PCNT_CTRL_CH0_IN0_IDX = 103
const FSPICS3_OUT_IDX = 103
const MODEM_DIAG18_IDX = 103
const PCNT_CTRL_CH1_IN0_IDX = 104
const FSPICS4_OUT_IDX = 104
const MODEM_DIAG19_IDX = 104
const PCNT_SIG_CH0_IN1_IDX = 105
const FSPICS5_OUT_IDX = 105
const MODEM_DIAG20_IDX = 105
const PCNT_SIG_CH1_IN1_IDX = 106
const MODEM_DIAG21_IDX = 106
const PCNT_CTRL_CH0_IN1_IDX = 107
const MODEM_DIAG22_IDX = 107
const PCNT_CTRL_CH1_IN1_IDX = 108
const MODEM_DIAG23_IDX = 108
const PCNT_SIG_CH0_IN2_IDX = 109
const MODEM_DIAG24_IDX = 109
const PCNT_SIG_CH1_IN2_IDX = 110
const MODEM_DIAG25_IDX = 110
const PCNT_CTRL_CH0_IN2_IDX = 111
const MODEM_DIAG26_IDX = 111
const PCNT_CTRL_CH1_IN2_IDX = 112
const MODEM_DIAG27_IDX = 112
const PCNT_SIG_CH0_IN3_IDX = 113
const MODEM_DIAG28_IDX = 113
const PCNT_SIG_CH1_IN3_IDX = 114
const SPICLK_OUT_IDX = 114
const MODEM_DIAG29_IDX = 114
const PCNT_CTRL_CH0_IN3_IDX = 115
const SPICS0_OUT_IDX = 115
const MODEM_DIAG30_IDX = 115
const PCNT_CTRL_CH1_IN3_IDX = 116
const SPICS1_OUT_IDX = 116
const MODEM_DIAG31_IDX = 116
const GPIO_EVENT_MATRIX_IN0_IDX = 117
const GPIO_TASK_MATRIX_OUT0_IDX = 117
const GPIO_EVENT_MATRIX_IN1_IDX = 118
const GPIO_TASK_MATRIX_OUT1_IDX = 118
const GPIO_EVENT_MATRIX_IN2_IDX = 119
const GPIO_TASK_MATRIX_OUT2_IDX = 119
const GPIO_EVENT_MATRIX_IN3_IDX = 120
const GPIO_TASK_MATRIX_OUT3_IDX = 120
const SPIQ_IN_IDX = 121
const SPIQ_OUT_IDX = 121
const SPID_IN_IDX = 122
const SPID_OUT_IDX = 122
const SPIHD_IN_IDX = 123
const SPIHD_OUT_IDX = 123
const SPIWP_IN_IDX = 124
const SPIWP_OUT_IDX = 124
const CLK_OUT_OUT1_IDX = 125
const CLK_OUT_OUT2_IDX = 126
const CLK_OUT_OUT3_IDX = 127
const SIG_GPIO_OUT_IDX = 128
const GPIO_MAP_DATE_IDX = 0x2201120
const SPI_MEM_FLASH_READ_V = 0x1
const SPI_MEM_FLASH_READ_S = 31
const SPI_MEM_FLASH_WREN_V = 0x1
const SPI_MEM_FLASH_WREN_S = 30
const SPI_MEM_FLASH_WRDI_V = 0x1
const SPI_MEM_FLASH_WRDI_S = 29
const SPI_MEM_FLASH_RDID_V = 0x1
const SPI_MEM_FLASH_RDID_S = 28
const SPI_MEM_FLASH_RDSR_V = 0x1
const SPI_MEM_FLASH_RDSR_S = 27
const SPI_MEM_FLASH_WRSR_V = 0x1
const SPI_MEM_FLASH_WRSR_S = 26
const SPI_MEM_FLASH_PP_V = 0x1
const SPI_MEM_FLASH_PP_S = 25
const SPI_MEM_FLASH_SE_V = 0x1
const SPI_MEM_FLASH_SE_S = 24
const SPI_MEM_FLASH_BE_V = 0x1
const SPI_MEM_FLASH_BE_S = 23
const SPI_MEM_FLASH_CE_V = 0x1
const SPI_MEM_FLASH_CE_S = 22
const SPI_MEM_FLASH_DP_V = 0x1
const SPI_MEM_FLASH_DP_S = 21
const SPI_MEM_FLASH_RES_V = 0x1
const SPI_MEM_FLASH_RES_S = 20
const SPI_MEM_FLASH_HPM_V = 0x1
const SPI_MEM_FLASH_HPM_S = 19
const SPI_MEM_USR_V = 0x1
const SPI_MEM_USR_S = 18
const SPI_MEM_FLASH_PE_V = 0x1
const SPI_MEM_FLASH_PE_S = 17
const SPI_MEM_SLV_ST = 0x0000000F
const SPI_MEM_SLV_ST_V = 0xF
const SPI_MEM_SLV_ST_S = 4
const SPI_MEM_MST_ST = 0x0000000F
const SPI_MEM_MST_ST_V = 0xF
const SPI_MEM_MST_ST_S = 0
const SPI_MEM_USR_ADDR_VALUE = 0xFFFFFFFF
const SPI_MEM_USR_ADDR_VALUE_V = 0xFFFFFFFF
const SPI_MEM_USR_ADDR_VALUE_S = 0
const SPI_MEM_DATA_IE_ALWAYS_ON_V = 0x1
const SPI_MEM_DATA_IE_ALWAYS_ON_S = 31
const SPI_MEM_DQS_IE_ALWAYS_ON_V = 0x1
const SPI_MEM_DQS_IE_ALWAYS_ON_S = 30
const SPI_MEM_FREAD_QIO_V = 0x1
const SPI_MEM_FREAD_QIO_S = 24
const SPI_MEM_FREAD_DIO_V = 0x1
const SPI_MEM_FREAD_DIO_S = 23
const SPI_MEM_WRSR_2B_V = 0x1
const SPI_MEM_WRSR_2B_S = 22
const SPI_MEM_WP_REG_V = 0x1
const SPI_MEM_WP_REG_S = 21
const SPI_MEM_FREAD_QUAD_V = 0x1
const SPI_MEM_FREAD_QUAD_S = 20
const SPI_MEM_D_POL_V = 0x1
const SPI_MEM_D_POL_S = 19
const SPI_MEM_Q_POL_V = 0x1
const SPI_MEM_Q_POL_S = 18
const SPI_MEM_RESANDRES_V = 0x1
const SPI_MEM_RESANDRES_S = 15
const SPI_MEM_FREAD_DUAL_V = 0x1
const SPI_MEM_FREAD_DUAL_S = 14
const SPI_MEM_FASTRD_MODE_V = 0x1
const SPI_MEM_FASTRD_MODE_S = 13
const SPI_MEM_TX_CRC_EN_V = 0x1
const SPI_MEM_TX_CRC_EN_S = 11
const SPI_MEM_FCS_CRC_EN_V = 0x1
const SPI_MEM_FCS_CRC_EN_S = 10
const SPI_MEM_FCMD_OCT_V = 0x1
const SPI_MEM_FCMD_OCT_S = 9
const SPI_MEM_FCMD_QUAD_V = 0x1
const SPI_MEM_FCMD_QUAD_S = 8
const SPI_MEM_FADDR_OCT_V = 0x1
const SPI_MEM_FADDR_OCT_S = 6
const SPI_MEM_FDIN_OCT_V = 0x1
const SPI_MEM_FDIN_OCT_S = 5
const SPI_MEM_FDOUT_OCT_V = 0x1
const SPI_MEM_FDOUT_OCT_S = 4
const SPI_MEM_FDUMMY_WOUT_V = 0x1
const SPI_MEM_FDUMMY_WOUT_S = 3
const SPI_MEM_FDUMMY_RIN_V = 0x1
const SPI_MEM_FDUMMY_RIN_S = 2
const SPI_MEM_WDUMMY_ALWAYS_OUT_V = 0x1
const SPI_MEM_WDUMMY_ALWAYS_OUT_S = 1
const SPI_MEM_WDUMMY_DQS_ALWAYS_OUT_V = 0x1
const SPI_MEM_WDUMMY_DQS_ALWAYS_OUT_S = 0
const SPI_MEM_TXFIFO_RST_V = 0x1
const SPI_MEM_TXFIFO_RST_S = 31
const SPI_MEM_RXFIFO_RST_V = 0x1
const SPI_MEM_RXFIFO_RST_S = 30
const SPI_MEM_FAST_WRITE_EN_V = 0x1
const SPI_MEM_FAST_WRITE_EN_S = 29
const SPI_MEM_DUAL_RAM_EN_V = 0x1
const SPI_MEM_DUAL_RAM_EN_S = 28
const SPI_MEM_RAM0_EN_V = 0x1
const SPI_MEM_RAM0_EN_S = 27
const SPI_MEM_AW_SPLICE_EN_V = 0x1
const SPI_MEM_AW_SPLICE_EN_S = 26
const SPI_MEM_AR_SPLICE_EN_V = 0x1
const SPI_MEM_AR_SPLICE_EN_S = 25
const SPI_MEM_RRESP_ECC_ERR_EN_V = 0x1
const SPI_MEM_RRESP_ECC_ERR_EN_S = 24
const SPI_MEM_AXI_RDATA_BACK_FAST_V = 0x1
const SPI_MEM_AXI_RDATA_BACK_FAST_S = 23
const SPI_MEM_AW_SIZE0_1_SUPPORT_EN_V = 0x1
const SPI_MEM_AW_SIZE0_1_SUPPORT_EN_S = 22
const SPI_MEM_AR_SIZE0_1_SUPPORT_EN_V = 0x1
const SPI_MEM_AR_SIZE0_1_SUPPORT_EN_S = 21
const SPI_MEM_CS_HOLD_DLY_RES = 0x000003FF
const SPI_MEM_CS_HOLD_DLY_RES_V = 0x3FF
const SPI_MEM_CS_HOLD_DLY_RES_S = 2
const SPI_MEM_CLK_MODE = 0x00000003
const SPI_MEM_CLK_MODE_V = 0x3
const SPI_MEM_CLK_MODE_S = 0
const SPI_MEM_SYNC_RESET_V = 0x1
const SPI_MEM_SYNC_RESET_S = 31
const SPI_MEM_CS_HOLD_DELAY = 0x0000003F
const SPI_MEM_CS_HOLD_DELAY_V = 0x3F
const SPI_MEM_CS_HOLD_DELAY_S = 25
const SPI_MEM_SPLIT_TRANS_EN_V = 0x1
const SPI_MEM_SPLIT_TRANS_EN_S = 24
const SPI_MEM_ECC_16TO18_BYTE_EN_V = 0x1
const SPI_MEM_ECC_16TO18_BYTE_EN_S = 14
const SPI_MEM_ECC_SKIP_PAGE_CORNER_V = 0x1
const SPI_MEM_ECC_SKIP_PAGE_CORNER_S = 13
const SPI_MEM_ECC_CS_HOLD_TIME = 0x00000007
const SPI_MEM_ECC_CS_HOLD_TIME_V = 0x7
const SPI_MEM_ECC_CS_HOLD_TIME_S = 10
const SPI_MEM_CS_HOLD_TIME = 0x0000001F
const SPI_MEM_CS_HOLD_TIME_V = 0x1F
const SPI_MEM_CS_HOLD_TIME_S = 5
const SPI_MEM_CS_SETUP_TIME = 0x0000001F
const SPI_MEM_CS_SETUP_TIME_V = 0x1F
const SPI_MEM_CS_SETUP_TIME_S = 0
const SPI_MEM_CLK_EQU_SYSCLK_V = 0x1
const SPI_MEM_CLK_EQU_SYSCLK_S = 31
const SPI_MEM_CLKCNT_N = 0x000000FF
const SPI_MEM_CLKCNT_N_V = 0xFF
const SPI_MEM_CLKCNT_N_S = 16
const SPI_MEM_CLKCNT_H = 0x000000FF
const SPI_MEM_CLKCNT_H_V = 0xFF
const SPI_MEM_CLKCNT_H_S = 8
const SPI_MEM_CLKCNT_L = 0x000000FF
const SPI_MEM_CLKCNT_L_V = 0xFF
const SPI_MEM_CLKCNT_L_S = 0
const SPI_MEM_USR_COMMAND_V = 0x1
const SPI_MEM_USR_COMMAND_S = 31
const SPI_MEM_USR_ADDR_V = 0x1
const SPI_MEM_USR_ADDR_S = 30
const SPI_MEM_USR_DUMMY_V = 0x1
const SPI_MEM_USR_DUMMY_S = 29
const SPI_MEM_USR_MISO_V = 0x1
const SPI_MEM_USR_MISO_S = 28
const SPI_MEM_USR_MOSI_V = 0x1
const SPI_MEM_USR_MOSI_S = 27
const SPI_MEM_USR_DUMMY_IDLE_V = 0x1
const SPI_MEM_USR_DUMMY_IDLE_S = 26
const SPI_MEM_USR_MOSI_HIGHPART_V = 0x1
const SPI_MEM_USR_MOSI_HIGHPART_S = 25
const SPI_MEM_USR_MISO_HIGHPART_V = 0x1
const SPI_MEM_USR_MISO_HIGHPART_S = 24
const SPI_MEM_FWRITE_QIO_V = 0x1
const SPI_MEM_FWRITE_QIO_S = 15
const SPI_MEM_FWRITE_DIO_V = 0x1
const SPI_MEM_FWRITE_DIO_S = 14
const SPI_MEM_FWRITE_QUAD_V = 0x1
const SPI_MEM_FWRITE_QUAD_S = 13
const SPI_MEM_FWRITE_DUAL_V = 0x1
const SPI_MEM_FWRITE_DUAL_S = 12
const SPI_MEM_CK_OUT_EDGE_V = 0x1
const SPI_MEM_CK_OUT_EDGE_S = 9
const SPI_MEM_CS_SETUP_V = 0x1
const SPI_MEM_CS_SETUP_S = 7
const SPI_MEM_CS_HOLD_V = 0x1
const SPI_MEM_CS_HOLD_S = 6
const SPI_MEM_USR_ADDR_BITLEN = 0x0000003F
const SPI_MEM_USR_ADDR_BITLEN_V = 0x3F
const SPI_MEM_USR_ADDR_BITLEN_S = 26
const SPI_MEM_USR_DBYTELEN = 0x00000007
const SPI_MEM_USR_DBYTELEN_V = 0x7
const SPI_MEM_USR_DBYTELEN_S = 6
const SPI_MEM_USR_DUMMY_CYCLELEN = 0x0000003F
const SPI_MEM_USR_DUMMY_CYCLELEN_V = 0x3F
const SPI_MEM_USR_DUMMY_CYCLELEN_S = 0
const SPI_MEM_USR_COMMAND_BITLEN = 0x0000000F
const SPI_MEM_USR_COMMAND_BITLEN_V = 0xF
const SPI_MEM_USR_COMMAND_BITLEN_S = 28
const SPI_MEM_USR_COMMAND_VALUE = 0x0000FFFF
const SPI_MEM_USR_COMMAND_VALUE_V = 0xFFFF
const SPI_MEM_USR_COMMAND_VALUE_S = 0
const SPI_MEM_USR_MOSI_DBITLEN = 0x000003FF
const SPI_MEM_USR_MOSI_DBITLEN_V = 0x3FF
const SPI_MEM_USR_MOSI_DBITLEN_S = 0
const SPI_MEM_USR_MISO_DBITLEN = 0x000003FF
const SPI_MEM_USR_MISO_DBITLEN_V = 0x3FF
const SPI_MEM_USR_MISO_DBITLEN_S = 0
const SPI_MEM_WB_MODE = 0x000000FF
const SPI_MEM_WB_MODE_V = 0xFF
const SPI_MEM_WB_MODE_S = 16
const SPI_MEM_STATUS = 0x0000FFFF
const SPI_MEM_STATUS_V = 0xFFFF
const SPI_MEM_STATUS_S = 0
const SPI_MEM_CS_KEEP_ACTIVE_V = 0x1
const SPI_MEM_CS_KEEP_ACTIVE_S = 10
const SPI_MEM_CK_IDLE_EDGE_V = 0x1
const SPI_MEM_CK_IDLE_EDGE_S = 9
const SPI_MEM_SSUB_PIN_V = 0x1
const SPI_MEM_SSUB_PIN_S = 8
const SPI_MEM_FSUB_PIN_V = 0x1
const SPI_MEM_FSUB_PIN_S = 7
const SPI_MEM_CS1_DIS_V = 0x1
const SPI_MEM_CS1_DIS_S = 1
const SPI_MEM_CS0_DIS_V = 0x1
const SPI_MEM_CS0_DIS_S = 0
const SPI_MEM_TX_CRC_DATA = 0xFFFFFFFF
const SPI_MEM_TX_CRC_DATA_V = 0xFFFFFFFF
const SPI_MEM_TX_CRC_DATA_S = 0
const SPI_MEM_CLOSE_AXI_INF_EN_V = 0x1
const SPI_MEM_CLOSE_AXI_INF_EN_S = 31
const SPI_MEM_SAME_AW_AR_ADDR_CHK_EN_V = 0x1
const SPI_MEM_SAME_AW_AR_ADDR_CHK_EN_S = 30
const SPI_MEM_FADDR_QUAD_V = 0x1
const SPI_MEM_FADDR_QUAD_S = 8
const SPI_MEM_FDOUT_QUAD_V = 0x1
const SPI_MEM_FDOUT_QUAD_S = 7
const SPI_MEM_FDIN_QUAD_V = 0x1
const SPI_MEM_FDIN_QUAD_S = 6
const SPI_MEM_FADDR_DUAL_V = 0x1
const SPI_MEM_FADDR_DUAL_S = 5
const SPI_MEM_FDOUT_DUAL_V = 0x1
const SPI_MEM_FDOUT_DUAL_S = 4
const SPI_MEM_FDIN_DUAL_V = 0x1
const SPI_MEM_FDIN_DUAL_S = 3
const SPI_MEM_CACHE_FLASH_USR_CMD_V = 0x1
const SPI_MEM_CACHE_FLASH_USR_CMD_S = 2
const SPI_MEM_CACHE_USR_ADDR_4BYTE_V = 0x1
const SPI_MEM_CACHE_USR_ADDR_4BYTE_S = 1
const SPI_MEM_AXI_REQ_EN_V = 0x1
const SPI_MEM_AXI_REQ_EN_S = 0
const SPI_MEM_SRAM_WDUMMY_CYCLELEN = 0x0000003F
const SPI_MEM_SRAM_WDUMMY_CYCLELEN_V = 0x3F
const SPI_MEM_SRAM_WDUMMY_CYCLELEN_S = 22
const SPI_MEM_SRAM_OCT_V = 0x1
const SPI_MEM_SRAM_OCT_S = 21
const SPI_MEM_CACHE_SRAM_USR_WCMD_V = 0x1
const SPI_MEM_CACHE_SRAM_USR_WCMD_S = 20
const SPI_MEM_SRAM_ADDR_BITLEN = 0x0000003F
const SPI_MEM_SRAM_ADDR_BITLEN_V = 0x3F
const SPI_MEM_SRAM_ADDR_BITLEN_S = 14
const SPI_MEM_SRAM_RDUMMY_CYCLELEN = 0x0000003F
const SPI_MEM_SRAM_RDUMMY_CYCLELEN_V = 0x3F
const SPI_MEM_SRAM_RDUMMY_CYCLELEN_S = 6
const SPI_MEM_CACHE_SRAM_USR_RCMD_V = 0x1
const SPI_MEM_CACHE_SRAM_USR_RCMD_S = 5
const SPI_MEM_USR_RD_SRAM_DUMMY_V = 0x1
const SPI_MEM_USR_RD_SRAM_DUMMY_S = 4
const SPI_MEM_USR_WR_SRAM_DUMMY_V = 0x1
const SPI_MEM_USR_WR_SRAM_DUMMY_S = 3
const SPI_MEM_USR_SRAM_QIO_V = 0x1
const SPI_MEM_USR_SRAM_QIO_S = 2
const SPI_MEM_USR_SRAM_DIO_V = 0x1
const SPI_MEM_USR_SRAM_DIO_S = 1
const SPI_MEM_CACHE_USR_SADDR_4BYTE_V = 0x1
const SPI_MEM_CACHE_USR_SADDR_4BYTE_S = 0
const SPI_MEM_SMEM_DATA_IE_ALWAYS_ON_V = 0x1
const SPI_MEM_SMEM_DATA_IE_ALWAYS_ON_S = 31
const SPI_MEM_SMEM_DQS_IE_ALWAYS_ON_V = 0x1
const SPI_MEM_SMEM_DQS_IE_ALWAYS_ON_S = 30
const SPI_MEM_SMEM_WDUMMY_ALWAYS_OUT_V = 0x1
const SPI_MEM_SMEM_WDUMMY_ALWAYS_OUT_S = 25
const SPI_MEM_SMEM_WDUMMY_DQS_ALWAYS_OUT_V = 0x1
const SPI_MEM_SMEM_WDUMMY_DQS_ALWAYS_OUT_S = 24
const SPI_MEM_SDUMMY_WOUT_V = 0x1
const SPI_MEM_SDUMMY_WOUT_S = 23
const SPI_MEM_SDUMMY_RIN_V = 0x1
const SPI_MEM_SDUMMY_RIN_S = 22
const SPI_MEM_SCMD_OCT_V = 0x1
const SPI_MEM_SCMD_OCT_S = 21
const SPI_MEM_SADDR_OCT_V = 0x1
const SPI_MEM_SADDR_OCT_S = 20
const SPI_MEM_SDOUT_OCT_V = 0x1
const SPI_MEM_SDOUT_OCT_S = 19
const SPI_MEM_SDIN_OCT_V = 0x1
const SPI_MEM_SDIN_OCT_S = 18
const SPI_MEM_SCMD_QUAD_V = 0x1
const SPI_MEM_SCMD_QUAD_S = 17
const SPI_MEM_SADDR_QUAD_V = 0x1
const SPI_MEM_SADDR_QUAD_S = 16
const SPI_MEM_SDOUT_QUAD_V = 0x1
const SPI_MEM_SDOUT_QUAD_S = 15
const SPI_MEM_SDIN_QUAD_V = 0x1
const SPI_MEM_SDIN_QUAD_S = 14
const SPI_MEM_SADDR_DUAL_V = 0x1
const SPI_MEM_SADDR_DUAL_S = 12
const SPI_MEM_SDOUT_DUAL_V = 0x1
const SPI_MEM_SDOUT_DUAL_S = 11
const SPI_MEM_SDIN_DUAL_V = 0x1
const SPI_MEM_SDIN_DUAL_S = 10
const SPI_MEM_SWB_MODE = 0x000000FF
const SPI_MEM_SWB_MODE_V = 0xFF
const SPI_MEM_SWB_MODE_S = 2
const SPI_MEM_SCLK_MODE = 0x00000003
const SPI_MEM_SCLK_MODE_V = 0x3
const SPI_MEM_SCLK_MODE_S = 0
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_BITLEN = 0x0000000F
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_BITLEN_V = 0xF
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_BITLEN_S = 28
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_VALUE = 0x0000FFFF
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_VALUE_V = 0xFFFF
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_VALUE_S = 0
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_BITLEN = 0x0000000F
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_BITLEN_V = 0xF
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_BITLEN_S = 28
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_VALUE = 0x0000FFFF
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_VALUE_V = 0xFFFF
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_VALUE_S = 0
const SPI_MEM_SCLK_EQU_SYSCLK_V = 0x1
const SPI_MEM_SCLK_EQU_SYSCLK_S = 31
const SPI_MEM_SCLKCNT_N = 0x000000FF
const SPI_MEM_SCLKCNT_N_V = 0xFF
const SPI_MEM_SCLKCNT_N_S = 16
const SPI_MEM_SCLKCNT_H = 0x000000FF
const SPI_MEM_SCLKCNT_H_V = 0xFF
const SPI_MEM_SCLKCNT_H_S = 8
const SPI_MEM_SCLKCNT_L = 0x000000FF
const SPI_MEM_SCLKCNT_L_V = 0xFF
const SPI_MEM_SCLKCNT_L_S = 0
const SPI_MEM_LOCK_DELAY_TIME = 0x0000001F
const SPI_MEM_LOCK_DELAY_TIME_V = 0x1F
const SPI_MEM_LOCK_DELAY_TIME_S = 7
const SPI_MEM_BUF0 = 0xFFFFFFFF
const SPI_MEM_BUF0_V = 0xFFFFFFFF
const SPI_MEM_BUF0_S = 0
const SPI_MEM_BUF1 = 0xFFFFFFFF
const SPI_MEM_BUF1_V = 0xFFFFFFFF
const SPI_MEM_BUF1_S = 0
const SPI_MEM_BUF2 = 0xFFFFFFFF
const SPI_MEM_BUF2_V = 0xFFFFFFFF
const SPI_MEM_BUF2_S = 0
const SPI_MEM_BUF3 = 0xFFFFFFFF
const SPI_MEM_BUF3_V = 0xFFFFFFFF
const SPI_MEM_BUF3_S = 0
const SPI_MEM_BUF4 = 0xFFFFFFFF
const SPI_MEM_BUF4_V = 0xFFFFFFFF
const SPI_MEM_BUF4_S = 0
const SPI_MEM_BUF5 = 0xFFFFFFFF
const SPI_MEM_BUF5_V = 0xFFFFFFFF
const SPI_MEM_BUF5_S = 0
const SPI_MEM_BUF6 = 0xFFFFFFFF
const SPI_MEM_BUF6_V = 0xFFFFFFFF
const SPI_MEM_BUF6_S = 0
const SPI_MEM_BUF7 = 0xFFFFFFFF
const SPI_MEM_BUF7_V = 0xFFFFFFFF
const SPI_MEM_BUF7_S = 0
const SPI_MEM_BUF8 = 0xFFFFFFFF
const SPI_MEM_BUF8_V = 0xFFFFFFFF
const SPI_MEM_BUF8_S = 0
const SPI_MEM_BUF9 = 0xFFFFFFFF
const SPI_MEM_BUF9_V = 0xFFFFFFFF
const SPI_MEM_BUF9_S = 0
const SPI_MEM_BUF10 = 0xFFFFFFFF
const SPI_MEM_BUF10_V = 0xFFFFFFFF
const SPI_MEM_BUF10_S = 0
const SPI_MEM_BUF11 = 0xFFFFFFFF
const SPI_MEM_BUF11_V = 0xFFFFFFFF
const SPI_MEM_BUF11_S = 0
const SPI_MEM_BUF12 = 0xFFFFFFFF
const SPI_MEM_BUF12_V = 0xFFFFFFFF
const SPI_MEM_BUF12_S = 0
const SPI_MEM_BUF13 = 0xFFFFFFFF
const SPI_MEM_BUF13_V = 0xFFFFFFFF
const SPI_MEM_BUF13_S = 0
const SPI_MEM_BUF14 = 0xFFFFFFFF
const SPI_MEM_BUF14_V = 0xFFFFFFFF
const SPI_MEM_BUF14_S = 0
const SPI_MEM_BUF15 = 0xFFFFFFFF
const SPI_MEM_BUF15_V = 0xFFFFFFFF
const SPI_MEM_BUF15_S = 0
const SPI_MEM_WAITI_CMD = 0x0000FFFF
const SPI_MEM_WAITI_CMD_V = 0xFFFF
const SPI_MEM_WAITI_CMD_S = 16
const SPI_MEM_WAITI_DUMMY_CYCLELEN = 0x0000003F
const SPI_MEM_WAITI_DUMMY_CYCLELEN_V = 0x3F
const SPI_MEM_WAITI_DUMMY_CYCLELEN_S = 10
const SPI_MEM_WAITI_CMD_2B_V = 0x1
const SPI_MEM_WAITI_CMD_2B_S = 9
const SPI_MEM_WAITI_ADDR_CYCLELEN = 0x00000003
const SPI_MEM_WAITI_ADDR_CYCLELEN_V = 0x3
const SPI_MEM_WAITI_ADDR_CYCLELEN_S = 3
const SPI_MEM_WAITI_ADDR_EN_V = 0x1
const SPI_MEM_WAITI_ADDR_EN_S = 2
const SPI_MEM_WAITI_DUMMY_V = 0x1
const SPI_MEM_WAITI_DUMMY_S = 1
const SPI_MEM_WAITI_EN_V = 0x1
const SPI_MEM_WAITI_EN_S = 0
const SPI_MEM_SUS_TIMEOUT_CNT = 0x0000007F
const SPI_MEM_SUS_TIMEOUT_CNT_V = 0x7F
const SPI_MEM_SUS_TIMEOUT_CNT_S = 25
const SPI_MEM_PES_END_EN_V = 0x1
const SPI_MEM_PES_END_EN_S = 24
const SPI_MEM_PER_END_EN_V = 0x1
const SPI_MEM_PER_END_EN_S = 23
const SPI_MEM_FMEM_RD_SUS_2B_V = 0x1
const SPI_MEM_FMEM_RD_SUS_2B_S = 22
const SPI_MEM_PESR_END_MSK = 0x0000FFFF
const SPI_MEM_PESR_END_MSK_V = 0xFFFF
const SPI_MEM_PESR_END_MSK_S = 6
const SPI_MEM_FLASH_PES_EN_V = 0x1
const SPI_MEM_FLASH_PES_EN_S = 5
const SPI_MEM_PES_PER_EN_V = 0x1
const SPI_MEM_PES_PER_EN_S = 4
const SPI_MEM_FLASH_PES_WAIT_EN_V = 0x1
const SPI_MEM_FLASH_PES_WAIT_EN_S = 3
const SPI_MEM_FLASH_PER_WAIT_EN_V = 0x1
const SPI_MEM_FLASH_PER_WAIT_EN_S = 2
const SPI_MEM_FLASH_PES_V = 0x1
const SPI_MEM_FLASH_PES_S = 1
const SPI_MEM_FLASH_PER_V = 0x1
const SPI_MEM_FLASH_PER_S = 0
const SPI_MEM_WAIT_PESR_COMMAND = 0x0000FFFF
const SPI_MEM_WAIT_PESR_COMMAND_V = 0xFFFF
const SPI_MEM_WAIT_PESR_COMMAND_S = 16
const SPI_MEM_FLASH_PES_COMMAND = 0x0000FFFF
const SPI_MEM_FLASH_PES_COMMAND_V = 0xFFFF
const SPI_MEM_FLASH_PES_COMMAND_S = 0
const SPI_MEM_FLASH_PER_COMMAND = 0x0000FFFF
const SPI_MEM_FLASH_PER_COMMAND_V = 0xFFFF
const SPI_MEM_FLASH_PER_COMMAND_S = 16
const SPI_MEM_FLASH_PESR_CMD_2B_V = 0x1
const SPI_MEM_FLASH_PESR_CMD_2B_S = 15
const SPI_MEM_SPI0_LOCK_EN_V = 0x1
const SPI_MEM_SPI0_LOCK_EN_S = 7
const SPI_MEM_FLASH_PES_DLY_128_V = 0x1
const SPI_MEM_FLASH_PES_DLY_128_S = 6
const SPI_MEM_FLASH_PER_DLY_128_V = 0x1
const SPI_MEM_FLASH_PER_DLY_128_S = 5
const SPI_MEM_FLASH_DP_DLY_128_V = 0x1
const SPI_MEM_FLASH_DP_DLY_128_S = 4
const SPI_MEM_FLASH_RES_DLY_128_V = 0x1
const SPI_MEM_FLASH_RES_DLY_128_S = 3
const SPI_MEM_FLASH_HPM_DLY_128_V = 0x1
const SPI_MEM_FLASH_HPM_DLY_128_S = 2
const SPI_MEM_WAIT_PESR_CMD_2B_V = 0x1
const SPI_MEM_WAIT_PESR_CMD_2B_S = 1
const SPI_MEM_FLASH_SUS_V = 0x1
const SPI_MEM_FLASH_SUS_S = 0
const SPI_MEM_BROWN_OUT_INT_ENA_V = 0x1
const SPI_MEM_BROWN_OUT_INT_ENA_S = 10
const SPI_MEM_AXI_WADDR_ERR_INT__ENA_V = 0x1
const SPI_MEM_AXI_WADDR_ERR_INT__ENA_S = 9
const SPI_MEM_AXI_WR_FLASH_ERR_INT_ENA_V = 0x1
const SPI_MEM_AXI_WR_FLASH_ERR_INT_ENA_S = 8
const SPI_MEM_AXI_RADDR_ERR_INT_ENA_V = 0x1
const SPI_MEM_AXI_RADDR_ERR_INT_ENA_S = 7
const SPI_MEM_PMS_REJECT_INT_ENA_V = 0x1
const SPI_MEM_PMS_REJECT_INT_ENA_S = 6
const SPI_MEM_ECC_ERR_INT_ENA_V = 0x1
const SPI_MEM_ECC_ERR_INT_ENA_S = 5
const SPI_MEM_MST_ST_END_INT_ENA_V = 0x1
const SPI_MEM_MST_ST_END_INT_ENA_S = 4
const SPI_MEM_SLV_ST_END_INT_ENA_V = 0x1
const SPI_MEM_SLV_ST_END_INT_ENA_S = 3
const SPI_MEM_WPE_END_INT_ENA_V = 0x1
const SPI_MEM_WPE_END_INT_ENA_S = 2
const SPI_MEM_PES_END_INT_ENA_V = 0x1
const SPI_MEM_PES_END_INT_ENA_S = 1
const SPI_MEM_PER_END_INT_ENA_V = 0x1
const SPI_MEM_PER_END_INT_ENA_S = 0
const SPI_MEM_BROWN_OUT_INT_CLR_V = 0x1
const SPI_MEM_BROWN_OUT_INT_CLR_S = 10
const SPI_MEM_AXI_WADDR_ERR_INT_CLR_V = 0x1
const SPI_MEM_AXI_WADDR_ERR_INT_CLR_S = 9
const SPI_MEM_AXI_WR_FLASH_ERR_INT_CLR_V = 0x1
const SPI_MEM_AXI_WR_FLASH_ERR_INT_CLR_S = 8
const SPI_MEM_AXI_RADDR_ERR_INT_CLR_V = 0x1
const SPI_MEM_AXI_RADDR_ERR_INT_CLR_S = 7
const SPI_MEM_PMS_REJECT_INT_CLR_V = 0x1
const SPI_MEM_PMS_REJECT_INT_CLR_S = 6
const SPI_MEM_ECC_ERR_INT_CLR_V = 0x1
const SPI_MEM_ECC_ERR_INT_CLR_S = 5
const SPI_MEM_MST_ST_END_INT_CLR_V = 0x1
const SPI_MEM_MST_ST_END_INT_CLR_S = 4
const SPI_MEM_SLV_ST_END_INT_CLR_V = 0x1
const SPI_MEM_SLV_ST_END_INT_CLR_S = 3
const SPI_MEM_WPE_END_INT_CLR_V = 0x1
const SPI_MEM_WPE_END_INT_CLR_S = 2
const SPI_MEM_PES_END_INT_CLR_V = 0x1
const SPI_MEM_PES_END_INT_CLR_S = 1
const SPI_MEM_PER_END_INT_CLR_V = 0x1
const SPI_MEM_PER_END_INT_CLR_S = 0
const SPI_MEM_BROWN_OUT_INT_RAW_V = 0x1
const SPI_MEM_BROWN_OUT_INT_RAW_S = 10
const SPI_MEM_AXI_WADDR_ERR_INT_RAW_V = 0x1
const SPI_MEM_AXI_WADDR_ERR_INT_RAW_S = 9
const SPI_MEM_AXI_WR_FLASH_ERR_INT_RAW_V = 0x1
const SPI_MEM_AXI_WR_FLASH_ERR_INT_RAW_S = 8
const SPI_MEM_AXI_RADDR_ERR_INT_RAW_V = 0x1
const SPI_MEM_AXI_RADDR_ERR_INT_RAW_S = 7
const SPI_MEM_PMS_REJECT_INT_RAW_V = 0x1
const SPI_MEM_PMS_REJECT_INT_RAW_S = 6
const SPI_MEM_ECC_ERR_INT_RAW_V = 0x1
const SPI_MEM_ECC_ERR_INT_RAW_S = 5
const SPI_MEM_MST_ST_END_INT_RAW_V = 0x1
const SPI_MEM_MST_ST_END_INT_RAW_S = 4
const SPI_MEM_SLV_ST_END_INT_RAW_V = 0x1
const SPI_MEM_SLV_ST_END_INT_RAW_S = 3
const SPI_MEM_WPE_END_INT_RAW_V = 0x1
const SPI_MEM_WPE_END_INT_RAW_S = 2
const SPI_MEM_PES_END_INT_RAW_V = 0x1
const SPI_MEM_PES_END_INT_RAW_S = 1
const SPI_MEM_PER_END_INT_RAW_V = 0x1
const SPI_MEM_PER_END_INT_RAW_S = 0
const SPI_MEM_BROWN_OUT_INT_ST_V = 0x1
const SPI_MEM_BROWN_OUT_INT_ST_S = 10
const SPI_MEM_AXI_WADDR_ERR_INT_ST_V = 0x1
const SPI_MEM_AXI_WADDR_ERR_INT_ST_S = 9
const SPI_MEM_AXI_WR_FLASH_ERR_INT_ST_V = 0x1
const SPI_MEM_AXI_WR_FLASH_ERR_INT_ST_S = 8
const SPI_MEM_AXI_RADDR_ERR_INT_ST_V = 0x1
const SPI_MEM_AXI_RADDR_ERR_INT_ST_S = 7
const SPI_MEM_PMS_REJECT_INT_ST_V = 0x1
const SPI_MEM_PMS_REJECT_INT_ST_S = 6
const SPI_MEM_ECC_ERR_INT_ST_V = 0x1
const SPI_MEM_ECC_ERR_INT_ST_S = 5
const SPI_MEM_MST_ST_END_INT_ST_V = 0x1
const SPI_MEM_MST_ST_END_INT_ST_S = 4
const SPI_MEM_SLV_ST_END_INT_ST_V = 0x1
const SPI_MEM_SLV_ST_END_INT_ST_S = 3
const SPI_MEM_WPE_END_INT_ST_V = 0x1
const SPI_MEM_WPE_END_INT_ST_S = 2
const SPI_MEM_PES_END_INT_ST_V = 0x1
const SPI_MEM_PES_END_INT_ST_S = 1
const SPI_MEM_PER_END_INT_ST_V = 0x1
const SPI_MEM_PER_END_INT_ST_S = 0
const SPI_MEM_FMEM_HYPERBUS_CA_V = 0x1
const SPI_MEM_FMEM_HYPERBUS_CA_S = 30
const SPI_MEM_FMEM_OCTA_RAM_ADDR_V = 0x1
const SPI_MEM_FMEM_OCTA_RAM_ADDR_S = 29
const SPI_MEM_FMEM_CLK_DIFF_INV_V = 0x1
const SPI_MEM_FMEM_CLK_DIFF_INV_S = 28
const SPI_MEM_FMEM_HYPERBUS_DUMMY_2X_V = 0x1
const SPI_MEM_FMEM_HYPERBUS_DUMMY_2X_S = 27
const SPI_MEM_FMEM_DQS_CA_IN_V = 0x1
const SPI_MEM_FMEM_DQS_CA_IN_S = 26
const SPI_MEM_FMEM_CLK_DIFF_EN_V = 0x1
const SPI_MEM_FMEM_CLK_DIFF_EN_S = 24
const SPI_MEM_FMEM_DDR_DQS_LOOP_V = 0x1
const SPI_MEM_FMEM_DDR_DQS_LOOP_S = 21
const SPI_MEM_FMEM_USR_DDR_DQS_THD = 0x0000007F
const SPI_MEM_FMEM_USR_DDR_DQS_THD_V = 0x7F
const SPI_MEM_FMEM_USR_DDR_DQS_THD_S = 14
const SPI_MEM_FMEM_RX_DDR_MSK_EN_V = 0x1
const SPI_MEM_FMEM_RX_DDR_MSK_EN_S = 13
const SPI_MEM_FMEM_TX_DDR_MSK_EN_V = 0x1
const SPI_MEM_FMEM_TX_DDR_MSK_EN_S = 12
const SPI_MEM_FMEM_OUTMINBYTELEN = 0x0000007F
const SPI_MEM_FMEM_OUTMINBYTELEN_V = 0x7F
const SPI_MEM_FMEM_OUTMINBYTELEN_S = 5
const SPI_MEM_FMEM_DDR_CMD_DIS_V = 0x1
const SPI_MEM_FMEM_DDR_CMD_DIS_S = 4
const SPI_MEM_FMEM_DDR_WDAT_SWP_V = 0x1
const SPI_MEM_FMEM_DDR_WDAT_SWP_S = 3
const SPI_MEM_FMEM_DDR_RDAT_SWP_V = 0x1
const SPI_MEM_FMEM_DDR_RDAT_SWP_S = 2
const SPI_MEM_FMEM_VAR_DUMMY_V = 0x1
const SPI_MEM_FMEM_VAR_DUMMY_S = 1
const SPI_MEM_FMEM_DDR_EN_V = 0x1
const SPI_MEM_FMEM_DDR_EN_S = 0
const SPI_MEM_SMEM_HYPERBUS_CA_V = 0x1
const SPI_MEM_SMEM_HYPERBUS_CA_S = 30
const SPI_MEM_SMEM_OCTA_RAM_ADDR_V = 0x1
const SPI_MEM_SMEM_OCTA_RAM_ADDR_S = 29
const SPI_MEM_SMEM_CLK_DIFF_INV_V = 0x1
const SPI_MEM_SMEM_CLK_DIFF_INV_S = 28
const SPI_MEM_SMEM_HYPERBUS_DUMMY_2X_V = 0x1
const SPI_MEM_SMEM_HYPERBUS_DUMMY_2X_S = 27
const SPI_MEM_SMEM_DQS_CA_IN_V = 0x1
const SPI_MEM_SMEM_DQS_CA_IN_S = 26
const SPI_MEM_SMEM_CLK_DIFF_EN_V = 0x1
const SPI_MEM_SMEM_CLK_DIFF_EN_S = 24
const SPI_MEM_SMEM_DDR_DQS_LOOP_V = 0x1
const SPI_MEM_SMEM_DDR_DQS_LOOP_S = 21
const SPI_MEM_SMEM_USR_DDR_DQS_THD = 0x0000007F
const SPI_MEM_SMEM_USR_DDR_DQS_THD_V = 0x7F
const SPI_MEM_SMEM_USR_DDR_DQS_THD_S = 14
const SPI_MEM_SMEM_RX_DDR_MSK_EN_V = 0x1
const SPI_MEM_SMEM_RX_DDR_MSK_EN_S = 13
const SPI_MEM_SMEM_TX_DDR_MSK_EN_V = 0x1
const SPI_MEM_SMEM_TX_DDR_MSK_EN_S = 12
const SPI_MEM_SMEM_OUTMINBYTELEN = 0x0000007F
const SPI_MEM_SMEM_OUTMINBYTELEN_V = 0x7F
const SPI_MEM_SMEM_OUTMINBYTELEN_S = 5
const SPI_MEM_SMEM_DDR_CMD_DIS_V = 0x1
const SPI_MEM_SMEM_DDR_CMD_DIS_S = 4
const SPI_MEM_SMEM_DDR_WDAT_SWP_V = 0x1
const SPI_MEM_SMEM_DDR_WDAT_SWP_S = 3
const SPI_MEM_SMEM_DDR_RDAT_SWP_V = 0x1
const SPI_MEM_SMEM_DDR_RDAT_SWP_S = 2
const SPI_MEM_SMEM_VAR_DUMMY_V = 0x1
const SPI_MEM_SMEM_VAR_DUMMY_S = 1
const SPI_MEM_SMEM_DDR_EN_V = 0x1
const SPI_MEM_SMEM_DDR_EN_S = 0
const SPI_MEM_FMEM_PMS0_ECC_V = 0x1
const SPI_MEM_FMEM_PMS0_ECC_S = 2
const SPI_MEM_FMEM_PMS0_WR_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS0_WR_ATTR_S = 1
const SPI_MEM_FMEM_PMS0_RD_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS0_RD_ATTR_S = 0
const SPI_MEM_FMEM_PMS1_ECC_V = 0x1
const SPI_MEM_FMEM_PMS1_ECC_S = 2
const SPI_MEM_FMEM_PMS1_WR_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS1_WR_ATTR_S = 1
const SPI_MEM_FMEM_PMS1_RD_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS1_RD_ATTR_S = 0
const SPI_MEM_FMEM_PMS2_ECC_V = 0x1
const SPI_MEM_FMEM_PMS2_ECC_S = 2
const SPI_MEM_FMEM_PMS2_WR_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS2_WR_ATTR_S = 1
const SPI_MEM_FMEM_PMS2_RD_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS2_RD_ATTR_S = 0
const SPI_MEM_FMEM_PMS3_ECC_V = 0x1
const SPI_MEM_FMEM_PMS3_ECC_S = 2
const SPI_MEM_FMEM_PMS3_WR_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS3_WR_ATTR_S = 1
const SPI_MEM_FMEM_PMS3_RD_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS3_RD_ATTR_S = 0
const SPI_MEM_FMEM_PMS0_ADDR_S = 0x03FFFFFF
const SPI_MEM_FMEM_PMS0_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_FMEM_PMS0_ADDR_S_S = 0
const SPI_MEM_FMEM_PMS1_ADDR_S = 0x03FFFFFF
const SPI_MEM_FMEM_PMS1_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_FMEM_PMS1_ADDR_S_S = 0
const SPI_MEM_FMEM_PMS2_ADDR_S = 0x03FFFFFF
const SPI_MEM_FMEM_PMS2_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_FMEM_PMS2_ADDR_S_S = 0
const SPI_MEM_FMEM_PMS3_ADDR_S = 0x03FFFFFF
const SPI_MEM_FMEM_PMS3_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_FMEM_PMS3_ADDR_S_S = 0
const SPI_MEM_FMEM_PMS0_SIZE = 0x00003FFF
const SPI_MEM_FMEM_PMS0_SIZE_V = 0x3FFF
const SPI_MEM_FMEM_PMS0_SIZE_S = 0
const SPI_MEM_FMEM_PMS1_SIZE = 0x00003FFF
const SPI_MEM_FMEM_PMS1_SIZE_V = 0x3FFF
const SPI_MEM_FMEM_PMS1_SIZE_S = 0
const SPI_MEM_FMEM_PMS2_SIZE = 0x00003FFF
const SPI_MEM_FMEM_PMS2_SIZE_V = 0x3FFF
const SPI_MEM_FMEM_PMS2_SIZE_S = 0
const SPI_MEM_FMEM_PMS3_SIZE = 0x00003FFF
const SPI_MEM_FMEM_PMS3_SIZE_V = 0x3FFF
const SPI_MEM_FMEM_PMS3_SIZE_S = 0
const SPI_MEM_SMEM_PMS0_ECC_V = 0x1
const SPI_MEM_SMEM_PMS0_ECC_S = 2
const SPI_MEM_SMEM_PMS0_WR_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS0_WR_ATTR_S = 1
const SPI_MEM_SMEM_PMS0_RD_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS0_RD_ATTR_S = 0
const SPI_MEM_SMEM_PMS1_ECC_V = 0x1
const SPI_MEM_SMEM_PMS1_ECC_S = 2
const SPI_MEM_SMEM_PMS1_WR_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS1_WR_ATTR_S = 1
const SPI_MEM_SMEM_PMS1_RD_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS1_RD_ATTR_S = 0
const SPI_MEM_SMEM_PMS2_ECC_V = 0x1
const SPI_MEM_SMEM_PMS2_ECC_S = 2
const SPI_MEM_SMEM_PMS2_WR_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS2_WR_ATTR_S = 1
const SPI_MEM_SMEM_PMS2_RD_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS2_RD_ATTR_S = 0
const SPI_MEM_SMEM_PMS3_ECC_V = 0x1
const SPI_MEM_SMEM_PMS3_ECC_S = 2
const SPI_MEM_SMEM_PMS3_WR_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS3_WR_ATTR_S = 1
const SPI_MEM_SMEM_PMS3_RD_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS3_RD_ATTR_S = 0
const SPI_MEM_SMEM_PMS0_ADDR_S = 0x03FFFFFF
const SPI_MEM_SMEM_PMS0_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_SMEM_PMS0_ADDR_S_S = 0
const SPI_MEM_SMEM_PMS1_ADDR_S = 0x03FFFFFF
const SPI_MEM_SMEM_PMS1_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_SMEM_PMS1_ADDR_S_S = 0
const SPI_MEM_SMEM_PMS2_ADDR_S = 0x03FFFFFF
const SPI_MEM_SMEM_PMS2_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_SMEM_PMS2_ADDR_S_S = 0
const SPI_MEM_SMEM_PMS3_ADDR_S = 0x03FFFFFF
const SPI_MEM_SMEM_PMS3_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_SMEM_PMS3_ADDR_S_S = 0
const SPI_MEM_SMEM_PMS0_SIZE = 0x00003FFF
const SPI_MEM_SMEM_PMS0_SIZE_V = 0x3FFF
const SPI_MEM_SMEM_PMS0_SIZE_S = 0
const SPI_MEM_SMEM_PMS1_SIZE = 0x00003FFF
const SPI_MEM_SMEM_PMS1_SIZE_V = 0x3FFF
const SPI_MEM_SMEM_PMS1_SIZE_S = 0
const SPI_MEM_SMEM_PMS2_SIZE = 0x00003FFF
const SPI_MEM_SMEM_PMS2_SIZE_V = 0x3FFF
const SPI_MEM_SMEM_PMS2_SIZE_S = 0
const SPI_MEM_SMEM_PMS3_SIZE = 0x00003FFF
const SPI_MEM_SMEM_PMS3_SIZE_V = 0x3FFF
const SPI_MEM_SMEM_PMS3_SIZE_S = 0
const SPI_MEM_PMS_IVD_V = 0x1
const SPI_MEM_PMS_IVD_S = 31
const SPI_MEM_PMS_MULTI_HIT_V = 0x1
const SPI_MEM_PMS_MULTI_HIT_S = 30
const SPI_MEM_PMS_ST_V = 0x1
const SPI_MEM_PMS_ST_S = 29
const SPI_MEM_PMS_LD_V = 0x1
const SPI_MEM_PMS_LD_S = 28
const SPI_MEM_PM_EN_V = 0x1
const SPI_MEM_PM_EN_S = 26
const SPI_MEM_REJECT_ADDR = 0x03FFFFFF
const SPI_MEM_REJECT_ADDR_V = 0x3FFFFFF
const SPI_MEM_REJECT_ADDR_S = 0
const SPI_MEM_ECC_ERR_BITS = 0x0000007F
const SPI_MEM_ECC_ERR_BITS_V = 0x7F
const SPI_MEM_ECC_ERR_BITS_S = 25
const SPI_MEM_ECC_CONTINUE_RECORD_ERR_EN_V = 0x1
const SPI_MEM_ECC_CONTINUE_RECORD_ERR_EN_S = 24
const SPI_MEM_USR_ECC_ADDR_EN_V = 0x1
const SPI_MEM_USR_ECC_ADDR_EN_S = 21
const SPI_MEM_FMEM_ECC_ADDR_EN_V = 0x1
const SPI_MEM_FMEM_ECC_ADDR_EN_S = 20
const SPI_MEM_FMEM_PAGE_SIZE = 0x00000003
const SPI_MEM_FMEM_PAGE_SIZE_V = 0x3
const SPI_MEM_FMEM_PAGE_SIZE_S = 18
const SPI_MEM_FMEM_ECC_ERR_INT_EN_V = 0x1
const SPI_MEM_FMEM_ECC_ERR_INT_EN_S = 17
const SPI_MEM_FMEM_ECC_ERR_INT_NUM = 0x0000003F
const SPI_MEM_FMEM_ECC_ERR_INT_NUM_V = 0x3F
const SPI_MEM_FMEM_ECC_ERR_INT_NUM_S = 11
const SPI_MEM_ECC_ERR_CNT = 0x0000003F
const SPI_MEM_ECC_ERR_CNT_V = 0x3F
const SPI_MEM_ECC_ERR_CNT_S = 26
const SPI_MEM_ECC_ERR_ADDR = 0x03FFFFFF
const SPI_MEM_ECC_ERR_ADDR_V = 0x3FFFFFF
const SPI_MEM_ECC_ERR_ADDR_S = 0
const SPI_MEM_ALL_AXI_TRANS_AFIFO_EMPTY_V = 0x1
const SPI_MEM_ALL_AXI_TRANS_AFIFO_EMPTY_S = 31
const SPI_MEM_WBLEN_AFIFO_REMPTY_V = 0x1
const SPI_MEM_WBLEN_AFIFO_REMPTY_S = 30
const SPI_MEM_WDATA_AFIFO_REMPTY_V = 0x1
const SPI_MEM_WDATA_AFIFO_REMPTY_S = 29
const SPI_MEM_RADDR_AFIFO_REMPTY_V = 0x1
const SPI_MEM_RADDR_AFIFO_REMPTY_S = 28
const SPI_MEM_RDATA_AFIFO_REMPTY_V = 0x1
const SPI_MEM_RDATA_AFIFO_REMPTY_S = 27
const SPI_MEM_ALL_FIFO_EMPTY_V = 0x1
const SPI_MEM_ALL_FIFO_EMPTY_S = 26
const SPI_MEM_AXI_ERR_ADDR = 0x03FFFFFF
const SPI_MEM_AXI_ERR_ADDR_V = 0x3FFFFFF
const SPI_MEM_AXI_ERR_ADDR_S = 0
const SPI_MEM_SMEM_ECC_ADDR_EN_V = 0x1
const SPI_MEM_SMEM_ECC_ADDR_EN_S = 20
const SPI_MEM_SMEM_PAGE_SIZE = 0x00000003
const SPI_MEM_SMEM_PAGE_SIZE_V = 0x3
const SPI_MEM_SMEM_PAGE_SIZE_S = 18
const SPI_MEM_SMEM_ECC_ERR_INT_EN_V = 0x1
const SPI_MEM_SMEM_ECC_ERR_INT_EN_S = 17
const SPI_MEM_TIMING_CALI_UPDATE_V = 0x1
const SPI_MEM_TIMING_CALI_UPDATE_S = 6
const SPI_MEM_DLL_TIMING_CALI_V = 0x1
const SPI_MEM_DLL_TIMING_CALI_S = 5
const SPI_MEM_EXTRA_DUMMY_CYCLELEN = 0x00000007
const SPI_MEM_EXTRA_DUMMY_CYCLELEN_V = 0x7
const SPI_MEM_EXTRA_DUMMY_CYCLELEN_S = 2
const SPI_MEM_TIMING_CALI_V = 0x1
const SPI_MEM_TIMING_CALI_S = 1
const SPI_MEM_TIMING_CLK_ENA_V = 0x1
const SPI_MEM_TIMING_CLK_ENA_S = 0
const SPI_MEM_DINS_MODE = 0x00000007
const SPI_MEM_DINS_MODE_V = 0x7
const SPI_MEM_DINS_MODE_S = 24
const SPI_MEM_DIN7_MODE = 0x00000007
const SPI_MEM_DIN7_MODE_V = 0x7
const SPI_MEM_DIN7_MODE_S = 21
const SPI_MEM_DIN6_MODE = 0x00000007
const SPI_MEM_DIN6_MODE_V = 0x7
const SPI_MEM_DIN6_MODE_S = 18
const SPI_MEM_DIN5_MODE = 0x00000007
const SPI_MEM_DIN5_MODE_V = 0x7
const SPI_MEM_DIN5_MODE_S = 15
const SPI_MEM_DIN4_MODE = 0x00000007
const SPI_MEM_DIN4_MODE_V = 0x7
const SPI_MEM_DIN4_MODE_S = 12
const SPI_MEM_DIN3_MODE = 0x00000007
const SPI_MEM_DIN3_MODE_V = 0x7
const SPI_MEM_DIN3_MODE_S = 9
const SPI_MEM_DIN2_MODE = 0x00000007
const SPI_MEM_DIN2_MODE_V = 0x7
const SPI_MEM_DIN2_MODE_S = 6
const SPI_MEM_DIN1_MODE = 0x00000007
const SPI_MEM_DIN1_MODE_V = 0x7
const SPI_MEM_DIN1_MODE_S = 3
const SPI_MEM_DIN0_MODE = 0x00000007
const SPI_MEM_DIN0_MODE_V = 0x7
const SPI_MEM_DIN0_MODE_S = 0
const SPI_MEM_DINS_NUM = 0x00000003
const SPI_MEM_DINS_NUM_V = 0x3
const SPI_MEM_DINS_NUM_S = 16
const SPI_MEM_DIN7_NUM = 0x00000003
const SPI_MEM_DIN7_NUM_V = 0x3
const SPI_MEM_DIN7_NUM_S = 14
const SPI_MEM_DIN6_NUM = 0x00000003
const SPI_MEM_DIN6_NUM_V = 0x3
const SPI_MEM_DIN6_NUM_S = 12
const SPI_MEM_DIN5_NUM = 0x00000003
const SPI_MEM_DIN5_NUM_V = 0x3
const SPI_MEM_DIN5_NUM_S = 10
const SPI_MEM_DIN4_NUM = 0x00000003
const SPI_MEM_DIN4_NUM_V = 0x3
const SPI_MEM_DIN4_NUM_S = 8
const SPI_MEM_DIN3_NUM = 0x00000003
const SPI_MEM_DIN3_NUM_V = 0x3
const SPI_MEM_DIN3_NUM_S = 6
const SPI_MEM_DIN2_NUM = 0x00000003
const SPI_MEM_DIN2_NUM_V = 0x3
const SPI_MEM_DIN2_NUM_S = 4
const SPI_MEM_DIN1_NUM = 0x00000003
const SPI_MEM_DIN1_NUM_V = 0x3
const SPI_MEM_DIN1_NUM_S = 2
const SPI_MEM_DIN0_NUM = 0x00000003
const SPI_MEM_DIN0_NUM_V = 0x3
const SPI_MEM_DIN0_NUM_S = 0
const SPI_MEM_DOUTS_MODE_V = 0x1
const SPI_MEM_DOUTS_MODE_S = 8
const SPI_MEM_DOUT7_MODE_V = 0x1
const SPI_MEM_DOUT7_MODE_S = 7
const SPI_MEM_DOUT6_MODE_V = 0x1
const SPI_MEM_DOUT6_MODE_S = 6
const SPI_MEM_DOUT5_MODE_V = 0x1
const SPI_MEM_DOUT5_MODE_S = 5
const SPI_MEM_DOUT4_MODE_V = 0x1
const SPI_MEM_DOUT4_MODE_S = 4
const SPI_MEM_DOUT3_MODE_V = 0x1
const SPI_MEM_DOUT3_MODE_S = 3
const SPI_MEM_DOUT2_MODE_V = 0x1
const SPI_MEM_DOUT2_MODE_S = 2
const SPI_MEM_DOUT1_MODE_V = 0x1
const SPI_MEM_DOUT1_MODE_S = 1
const SPI_MEM_DOUT0_MODE_V = 0x1
const SPI_MEM_DOUT0_MODE_S = 0
const SPI_MEM_SMEM_DLL_TIMING_CALI_V = 0x1
const SPI_MEM_SMEM_DLL_TIMING_CALI_S = 5
const SPI_MEM_SMEM_EXTRA_DUMMY_CYCLELEN = 0x00000007
const SPI_MEM_SMEM_EXTRA_DUMMY_CYCLELEN_V = 0x7
const SPI_MEM_SMEM_EXTRA_DUMMY_CYCLELEN_S = 2
const SPI_MEM_SMEM_TIMING_CALI_V = 0x1
const SPI_MEM_SMEM_TIMING_CALI_S = 1
const SPI_MEM_SMEM_TIMING_CLK_ENA_V = 0x1
const SPI_MEM_SMEM_TIMING_CLK_ENA_S = 0
const SPI_MEM_SMEM_DINS_MODE = 0x00000007
const SPI_MEM_SMEM_DINS_MODE_V = 0x7
const SPI_MEM_SMEM_DINS_MODE_S = 24
const SPI_MEM_SMEM_DIN7_MODE = 0x00000007
const SPI_MEM_SMEM_DIN7_MODE_V = 0x7
const SPI_MEM_SMEM_DIN7_MODE_S = 21
const SPI_MEM_SMEM_DIN6_MODE = 0x00000007
const SPI_MEM_SMEM_DIN6_MODE_V = 0x7
const SPI_MEM_SMEM_DIN6_MODE_S = 18
const SPI_MEM_SMEM_DIN5_MODE = 0x00000007
const SPI_MEM_SMEM_DIN5_MODE_V = 0x7
const SPI_MEM_SMEM_DIN5_MODE_S = 15
const SPI_MEM_SMEM_DIN4_MODE = 0x00000007
const SPI_MEM_SMEM_DIN4_MODE_V = 0x7
const SPI_MEM_SMEM_DIN4_MODE_S = 12
const SPI_MEM_SMEM_DIN3_MODE = 0x00000007
const SPI_MEM_SMEM_DIN3_MODE_V = 0x7
const SPI_MEM_SMEM_DIN3_MODE_S = 9
const SPI_MEM_SMEM_DIN2_MODE = 0x00000007
const SPI_MEM_SMEM_DIN2_MODE_V = 0x7
const SPI_MEM_SMEM_DIN2_MODE_S = 6
const SPI_MEM_SMEM_DIN1_MODE = 0x00000007
const SPI_MEM_SMEM_DIN1_MODE_V = 0x7
const SPI_MEM_SMEM_DIN1_MODE_S = 3
const SPI_MEM_SMEM_DIN0_MODE = 0x00000007
const SPI_MEM_SMEM_DIN0_MODE_V = 0x7
const SPI_MEM_SMEM_DIN0_MODE_S = 0
const SPI_MEM_SMEM_DINS_NUM = 0x00000003
const SPI_MEM_SMEM_DINS_NUM_V = 0x3
const SPI_MEM_SMEM_DINS_NUM_S = 16
const SPI_MEM_SMEM_DIN7_NUM = 0x00000003
const SPI_MEM_SMEM_DIN7_NUM_V = 0x3
const SPI_MEM_SMEM_DIN7_NUM_S = 14
const SPI_MEM_SMEM_DIN6_NUM = 0x00000003
const SPI_MEM_SMEM_DIN6_NUM_V = 0x3
const SPI_MEM_SMEM_DIN6_NUM_S = 12
const SPI_MEM_SMEM_DIN5_NUM = 0x00000003
const SPI_MEM_SMEM_DIN5_NUM_V = 0x3
const SPI_MEM_SMEM_DIN5_NUM_S = 10
const SPI_MEM_SMEM_DIN4_NUM = 0x00000003
const SPI_MEM_SMEM_DIN4_NUM_V = 0x3
const SPI_MEM_SMEM_DIN4_NUM_S = 8
const SPI_MEM_SMEM_DIN3_NUM = 0x00000003
const SPI_MEM_SMEM_DIN3_NUM_V = 0x3
const SPI_MEM_SMEM_DIN3_NUM_S = 6
const SPI_MEM_SMEM_DIN2_NUM = 0x00000003
const SPI_MEM_SMEM_DIN2_NUM_V = 0x3
const SPI_MEM_SMEM_DIN2_NUM_S = 4
const SPI_MEM_SMEM_DIN1_NUM = 0x00000003
const SPI_MEM_SMEM_DIN1_NUM_V = 0x3
const SPI_MEM_SMEM_DIN1_NUM_S = 2
const SPI_MEM_SMEM_DIN0_NUM = 0x00000003
const SPI_MEM_SMEM_DIN0_NUM_V = 0x3
const SPI_MEM_SMEM_DIN0_NUM_S = 0
const SPI_MEM_SMEM_DOUTS_MODE_V = 0x1
const SPI_MEM_SMEM_DOUTS_MODE_S = 8
const SPI_MEM_SMEM_DOUT7_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT7_MODE_S = 7
const SPI_MEM_SMEM_DOUT6_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT6_MODE_S = 6
const SPI_MEM_SMEM_DOUT5_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT5_MODE_S = 5
const SPI_MEM_SMEM_DOUT4_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT4_MODE_S = 4
const SPI_MEM_SMEM_DOUT3_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT3_MODE_S = 3
const SPI_MEM_SMEM_DOUT2_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT2_MODE_S = 2
const SPI_MEM_SMEM_DOUT1_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT1_MODE_S = 1
const SPI_MEM_SMEM_DOUT0_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT0_MODE_S = 0
const SPI_MEM_SMEM_SPLIT_TRANS_EN_V = 0x1
const SPI_MEM_SMEM_SPLIT_TRANS_EN_S = 31
const SPI_MEM_SMEM_CS_HOLD_DELAY = 0x0000003F
const SPI_MEM_SMEM_CS_HOLD_DELAY_V = 0x3F
const SPI_MEM_SMEM_CS_HOLD_DELAY_S = 25
const SPI_MEM_SMEM_ECC_16TO18_BYTE_EN_V = 0x1
const SPI_MEM_SMEM_ECC_16TO18_BYTE_EN_S = 16
const SPI_MEM_SMEM_ECC_SKIP_PAGE_CORNER_V = 0x1
const SPI_MEM_SMEM_ECC_SKIP_PAGE_CORNER_S = 15
const SPI_MEM_SMEM_ECC_CS_HOLD_TIME = 0x00000007
const SPI_MEM_SMEM_ECC_CS_HOLD_TIME_V = 0x7
const SPI_MEM_SMEM_ECC_CS_HOLD_TIME_S = 12
const SPI_MEM_SMEM_CS_HOLD_TIME = 0x0000001F
const SPI_MEM_SMEM_CS_HOLD_TIME_V = 0x1F
const SPI_MEM_SMEM_CS_HOLD_TIME_S = 7
const SPI_MEM_SMEM_CS_SETUP_TIME = 0x0000001F
const SPI_MEM_SMEM_CS_SETUP_TIME_V = 0x1F
const SPI_MEM_SMEM_CS_SETUP_TIME_S = 2
const SPI_MEM_SMEM_CS_HOLD_V = 0x1
const SPI_MEM_SMEM_CS_HOLD_S = 1
const SPI_MEM_SMEM_CS_SETUP_V = 0x1
const SPI_MEM_SMEM_CS_SETUP_S = 0
const SPI_MEM_CLK_EN_V = 0x1
const SPI_MEM_CLK_EN_S = 0
const SPI_MEM_MMU_ITEM_CONTENT = 0xFFFFFFFF
const SPI_MEM_MMU_ITEM_CONTENT_V = 0xFFFFFFFF
const SPI_MEM_MMU_ITEM_CONTENT_S = 0
const SPI_MEM_MMU_ITEM_INDEX = 0xFFFFFFFF
const SPI_MEM_MMU_ITEM_INDEX_V = 0xFFFFFFFF
const SPI_MEM_MMU_ITEM_INDEX_S = 0
const SPI_MEM_RDN_RESULT_V = 0x1
const SPI_MEM_RDN_RESULT_S = 31
const SPI_MEM_RDN_ENA_V = 0x1
const SPI_MEM_RDN_ENA_S = 30
const SPI_MEM_AUX_CTRL = 0x00003FFF
const SPI_MEM_AUX_CTRL_V = 0x3FFF
const SPI_MEM_AUX_CTRL_S = 16
const SPI_MEM_MMU_PAGE_SIZE = 0x00000003
const SPI_MEM_MMU_PAGE_SIZE_V = 0x3
const SPI_MEM_MMU_PAGE_SIZE_S = 3
const SPI_MEM_MMU_MEM_FORCE_PU_V = 0x1
const SPI_MEM_MMU_MEM_FORCE_PU_S = 2
const SPI_MEM_MMU_MEM_FORCE_PD_V = 0x1
const SPI_MEM_MMU_MEM_FORCE_PD_S = 1
const SPI_MEM_MMU_MEM_FORCE_ON_V = 0x1
const SPI_MEM_MMU_MEM_FORCE_ON_S = 0
const SPI_MEM_REGISTERRND_ECO_HIGH = 0xFFFFFFFF
const SPI_MEM_REGISTERRND_ECO_HIGH_V = 0xFFFFFFFF
const SPI_MEM_REGISTERRND_ECO_HIGH_S = 0
const SPI_MEM_REGISTERRND_ECO_LOW = 0xFFFFFFFF
const SPI_MEM_REGISTERRND_ECO_LOW_V = 0xFFFFFFFF
const SPI_MEM_REGISTERRND_ECO_LOW_S = 0
const SPI_MEM_DATE = 0x0FFFFFFF
const SPI_MEM_DATE_V = 0xFFFFFFF
const SPI_MEM_DATE_S = 0
const SOC_CLK_RC_FAST_FREQ_APPROX = 17500000
const SOC_CLK_RC_SLOW_FREQ_APPROX = 136000
const SOC_CLK_RC32K_FREQ_APPROX = 32768
const SOC_CLK_XTAL32K_FREQ_APPROX = 32768
const SOC_CLK_OSC_SLOW_FREQ_APPROX = 32768
const ARG_MAX = 65536
const CHILD_MAX = 40
const LINK_MAX = 32767
const MAX_CANON = 255
const MAX_INPUT = 255
const NAME_MAX = 255
const NGROUPS_MAX = 16
const OPEN_MAX = 64
const PATH_MAX = 1024
const PIPE_BUF = 512
const IOV_MAX = 1024
const BC_BASE_MAX = 99
const BC_DIM_MAX = 2048
const BC_SCALE_MAX = 99
const BC_STRING_MAX = 1000
const COLL_WEIGHTS_MAX = 0
const EXPR_NEST_MAX = 32
const LINE_MAX = 2048
const RE_DUP_MAX = 255
const X_LITTLE_ENDIAN = 1234
const X_BIG_ENDIAN = 4321
const X_PDP_ENDIAN = 3412
const X_QUAD_HIGHWORD = 1
const X_QUAD_LOWWORD = 0
const NBBY = 8
const SPI_FLASH_HAL_MAX_WRITE_BYTES = 64
const SPI_FLASH_HAL_MAX_READ_BYTES = 64

type PtrdiffT c.Int
type WcharT c.Int

type MaxAlignT struct {
	X__clangMaxAlignNonce1 c.LongLong
	X__clangMaxAlignNonce2 c.Double
}
type X__int8T c.Char
type X__uint8T c.Char
type X__int16T int16
type X__uint16T uint16
type X__int32T c.Int
type X__uint32T c.Uint
type X__int64T c.LongLong
type X__uint64T c.UlongLong
type X__intLeast8T c.Char
type X__uintLeast8T c.Char
type X__intLeast16T int16
type X__uintLeast16T uint16
type X__intLeast32T c.Int
type X__uintLeast32T c.Uint
type X__intLeast64T c.LongLong
type X__uintLeast64T c.UlongLong
type X__intmaxT c.LongLong
type X__uintmaxT c.UlongLong
type X__intptrT c.Int
type X__uintptrT c.Uint
type IntLeast8T X__intLeast8T
type UintLeast8T X__uintLeast8T
type IntLeast16T X__intLeast16T
type UintLeast16T X__uintLeast16T
type IntLeast32T X__intLeast32T
type UintLeast32T X__uintLeast32T
type IntLeast64T X__intLeast64T
type UintLeast64T X__uintLeast64T
type IntFast8T c.Char
type UintFast8T c.Char
type IntFast16T int16
type UintFast16T uint16
type IntFast32T c.Int
type UintFast32T c.Uint
type IntFast64T c.LongLong
type UintFast64T c.UlongLong
type WintT c.Uint
type X__blkcntT c.Long
type X__blksizeT c.Long
type X__fsblkcntT X__uint64T
type X__fsfilcntT X__uint32T
type X_offT c.Long
type X__pidT c.Int
type X__devT int16
type X__uidT uint16
type X__gidT uint16
type X__idT X__uint32T
type X__inoT uint16
type X__modeT X__uint32T
type X_off64T c.LongLong
type X__offT X_offT
type X__loffT X_off64T
type X__keyT c.Long
type X_fposT c.Long
type X__sizeT c.Uint
type X_ssizeT c.Int
type X__ssizeT X_ssizeT

type X_mbstateT struct {
	X__count c.Int
	X__value struct {
		X__wch WintT
	}
}
type X_iconvT c.Pointer
type X__clockT c.Ulong
type X__timeT X__intLeast64T
type X__clockidT c.Ulong
type X__daddrT c.Long
type X__timerT c.Ulong
type X__saFamilyT X__uint8T
type X__socklenT X__uint32T
type X__nlItem c.Int
type X__nlinkT uint16
type X__susecondsT c.Long
type X__usecondsT c.Ulong
type X__vaList c.Pointer
type X__ULong c.Ulong

type X__lock struct {
	Unused [8]uint8
}
type X_LOCKT *X__lock
type X_lockT X_LOCKT
type X_flockT X_LOCKT

type X_reent struct {
	Unused [8]uint8
}

type X__localeT struct {
	Unused [8]uint8
}

type X_Bigint struct {
	X_next   *X_Bigint
	X_k      c.Int
	X_maxwds c.Int
	X_sign   c.Int
	X_wds    c.Int
	X_x      [1]X__ULong
}

type X__tm struct {
	X__tmSec   c.Int
	X__tmMin   c.Int
	X__tmHour  c.Int
	X__tmMday  c.Int
	X__tmMon   c.Int
	X__tmYear  c.Int
	X__tmWday  c.Int
	X__tmYday  c.Int
	X__tmIsdst c.Int
}

type X_onExitArgs struct {
	X_fnargs    [32]c.Pointer
	X_dsoHandle [32]c.Pointer
	X_fntypes   X__ULong
	X_isCxa     X__ULong
}

type X_atexit struct {
	X_next          *X_atexit
	X_ind           c.Int
	X_fns           [32]c.Pointer
	X_onExitArgsPtr *X_onExitArgs
}

type X__sbuf struct {
	X_base *c.Char
	X_size c.Int
}

type X__sFILE struct {
	X_p       *c.Char
	X_r       c.Int
	X_w       c.Int
	X_flags   int16
	X_file    int16
	X_bf      X__sbuf
	X_lbfsize c.Int
	X_data    *X_reent
	X_cookie  c.Pointer
	X_read    c.Pointer
	X_write   c.Pointer
	X_seek    c.Pointer
	X_close   c.Pointer
	X_ub      X__sbuf
	X_up      *c.Char
	X_ur      c.Int
	X_ubuf    [3]c.Char
	X_nbuf    [1]c.Char
	X_lb      X__sbuf
	X_blksize c.Int
	X_offset  X_offT
	X_lock    X_flockT
	X_mbstate X_mbstateT
	X_flags2  c.Int
}
type X__FILE X__sFILE

type X_glue struct {
	X_next  *X_glue
	X_niobs c.Int
	X_iobs  *X__FILE
}

type X_rand48 struct {
	X_seed     [3]uint16
	X_mult     [3]uint16
	X_add      uint16
	X_randNext c.UlongLong
}

type X_mprec struct {
	X_result   *X_Bigint
	X_resultK  c.Int
	X_p5s      *X_Bigint
	X_freelist **X_Bigint
}

type X_miscReent struct {
	X_strtokLast     *c.Char
	X_mblenState     X_mbstateT
	X_wctombState    X_mbstateT
	X_mbtowcState    X_mbstateT
	X_l64aBuf        [8]c.Char
	X_getdateErr     c.Int
	X_mbrlenState    X_mbstateT
	X_mbrtowcState   X_mbstateT
	X_mbsrtowcsState X_mbstateT
	X_wcrtombState   X_mbstateT
	X_wcsrtombsState X_mbstateT
}

type DivT struct {
	Quot c.Int
	Rem  c.Int
}

type LdivT struct {
	Quot c.Long
	Rem  c.Long
}

type LldivT struct {
	Quot c.LongLong
	Rem  c.LongLong
}

// llgo:type C
type X__comparFnT func(c.Pointer, c.Pointer) c.Int

type ImaxdivT struct {
	Quot c.IntmaxT
	Rem  c.IntmaxT
}
type X__gnucVaList c.Pointer
type FposT X_fposT
type OffT X__offT

// llgo:type C
type CookieReadFunctionT func(c.Pointer, *c.Char, c.SizeT) c.SsizeT

// llgo:type C
type CookieWriteFunctionT func(c.Pointer, *c.Char, c.SizeT) c.SsizeT

// llgo:type C
type CookieSeekFunctionT func(c.Pointer, *OffT, c.Int) c.Int

// llgo:type C
type CookieCloseFunctionT func(c.Pointer) c.Int

type CookieIoFunctionsT struct {
	Read  *CookieReadFunctionT
	Write *CookieWriteFunctionT
	Seek  *CookieSeekFunctionT
	Close *CookieCloseFunctionT
}
type EspErrT c.Int

/** Group: PGM Data Register */
/** Type of pgm_data0 register
 *  Register 0 that stores data to be programmed.
 */

type EfusePgmData0RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data1 register
 *  Register 1 that stores data to be programmed.
 */

type EfusePgmData1RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data2 register
 *  Register 2 that stores data to be programmed.
 */

type EfusePgmData2RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data3 register
 *  Register 3 that stores data to be programmed.
 */

type EfusePgmData3RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data4 register
 *  Register 4 that stores data to be programmed.
 */

type EfusePgmData4RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data5 register
 *  Register 5 that stores data to be programmed.
 */

type EfusePgmData5RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data6 register
 *  Register 6 that stores data to be programmed.
 */

type EfusePgmData6RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data7 register
 *  Register 7 that stores data to be programmed.
 */

type EfusePgmData7RegT struct {
	Val c.Uint32T
}

/** Type of pgm_check_value0 register
 *  Register 0 that stores the RS code to be programmed.
 */

type EfusePgmCheckValue0RegT struct {
	Val c.Uint32T
}

/** Type of pgm_check_value1 register
 *  Register 1 that stores the RS code to be programmed.
 */

type EfusePgmCheckValue1RegT struct {
	Val c.Uint32T
}

/** Type of pgm_check_value2 register
 *  Register 2 that stores the RS code to be programmed.
 */

type EfusePgmCheckValue2RegT struct {
	Val c.Uint32T
}

/** Group: Read Data Register */
/** Type of rd_wr_dis register
 *  BLOCK0 data register 0.
 */

type EfuseRdWrDisRegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_data0 register
 *  BLOCK0 data register 1.
 */

type EfuseRdRepeatData0RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_data1 register
 *  BLOCK0 data register 2.
 */

type EfuseRdRepeatData1RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_data2 register
 *  BLOCK0 data register 3.
 */

type EfuseRdRepeatData2RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_data3 register
 *  BLOCK0 data register 4.
 */

type EfuseRdRepeatData3RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_data4 register
 *  BLOCK0 data register 5.
 */

type EfuseRdRepeatData4RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_0 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys0RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_1 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys1RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_2 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys2RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_3 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys3RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_4 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys4RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_5 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys5RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data0 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data1 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data2 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data3 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data4 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data5 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data6 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data7 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data0 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData0RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data1 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData1RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data2 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData2RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data3 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData3RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data4 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData4RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data5 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData5RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data6 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData6RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data7 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data0 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data1 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data2 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data3 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data4 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data5 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data6 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data7 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data0 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data1 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data2 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data3 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data4 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data5 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data6 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data7 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data0 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data1 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data2 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data3 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data4 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data5 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data6 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data7 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data0 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data1 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data2 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data3 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data4 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data5 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data6 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data7 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data0 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data1 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data2 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data3 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data4 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data5 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data6 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data7 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data0 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data1 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data2 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data3 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data4 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data5 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data6 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data7 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data0 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data1 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdSysPart2Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data2 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data3 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data4 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data5 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data6 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data7 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data7RegT struct {
	Val c.Uint32T
}

/** Group: Report Register */
/** Type of rd_repeat_err0 register
 *  Programming error record register 0 of BLOCK0.
 */

type EfuseRdRepeatErr0RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_err1 register
 *  Programming error record register 1 of BLOCK0.
 */

type EfuseRdRepeatErr1RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_err2 register
 *  Programming error record register 2 of BLOCK0.
 */

type EfuseRdRepeatErr2RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_err3 register
 *  Programming error record register 3 of BLOCK0.
 */

type EfuseRdRepeatErr3RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_err4 register
 *  Programming error record register 4 of BLOCK0.
 */

type EfuseRdRepeatErr4RegT struct {
	Val c.Uint32T
}

/** Type of rd_rs_err0 register
 *  Programming error record register 0 of BLOCK1-10.
 */

type EfuseRdRsErr0RegT struct {
	Val c.Uint32T
}

/** Type of rd_rs_err1 register
 *  Programming error record register 1 of BLOCK1-10.
 */

type EfuseRdRsErr1RegT struct {
	Val c.Uint32T
}

/** Group: Configuration Register */
/** Type of clk register
 *  eFuse clcok configuration register.
 */

type EfuseClkRegT struct {
	Val c.Uint32T
}

/** Type of conf register
 *  eFuse operation mode configuration register
 */

type EfuseConfRegT struct {
	Val c.Uint32T
}

/** Type of cmd register
 *  eFuse command register.
 */

type EfuseCmdRegT struct {
	Val c.Uint32T
}

/** Type of dac_conf register
 *  Controls the eFuse programming voltage.
 */

type EfuseDacConfRegT struct {
	Val c.Uint32T
}

/** Type of rd_tim_conf register
 *  Configures read timing parameters.
 */

type EfuseRdTimConfRegT struct {
	Val c.Uint32T
}

/** Type of wr_tim_conf1 register
 *  Configurarion register 1 of eFuse programming timing parameters.
 */

type EfuseWrTimConf1RegT struct {
	Val c.Uint32T
}

/** Type of wr_tim_conf2 register
 *  Configurarion register 2 of eFuse programming timing parameters.
 */

type EfuseWrTimConf2RegT struct {
	Val c.Uint32T
}

/** Type of wr_tim_conf0_rs_bypass register
 *  Configurarion register0 of eFuse programming time parameters and rs bypass
 *  operation.
 */

type EfuseWrTimConf0RsBypassRegT struct {
	Val c.Uint32T
}

/** Group: Status Register */
/** Type of status register
 *  eFuse status register.
 */

type EfuseStatusRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt Register */
/** Type of int_raw register
 *  eFuse raw interrupt register.
 */

type EfuseIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  eFuse interrupt status register.
 */

type EfuseIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  eFuse interrupt enable register.
 */

type EfuseIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  eFuse interrupt clear register.
 */

type EfuseIntClrRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  eFuse version register.
 */

type EfuseDateRegT struct {
	Val c.Uint32T
}

type EfuseDevT struct {
	PgmData0           EfusePgmData0RegT
	PgmData1           EfusePgmData1RegT
	PgmData2           EfusePgmData2RegT
	PgmData3           EfusePgmData3RegT
	PgmData4           EfusePgmData4RegT
	PgmData5           EfusePgmData5RegT
	PgmData6           EfusePgmData6RegT
	PgmData7           EfusePgmData7RegT
	PgmCheckValue0     EfusePgmCheckValue0RegT
	PgmCheckValue1     EfusePgmCheckValue1RegT
	PgmCheckValue2     EfusePgmCheckValue2RegT
	RdWrDis            EfuseRdWrDisRegT
	RdRepeatData0      EfuseRdRepeatData0RegT
	RdRepeatData1      EfuseRdRepeatData1RegT
	RdRepeatData2      EfuseRdRepeatData2RegT
	RdRepeatData3      EfuseRdRepeatData3RegT
	RdRepeatData4      EfuseRdRepeatData4RegT
	RdMacSpiSys0       EfuseRdMacSpiSys0RegT
	RdMacSpiSys1       EfuseRdMacSpiSys1RegT
	RdMacSpiSys2       EfuseRdMacSpiSys2RegT
	RdMacSpiSys3       EfuseRdMacSpiSys3RegT
	RdMacSpiSys4       EfuseRdMacSpiSys4RegT
	RdMacSpiSys5       EfuseRdMacSpiSys5RegT
	RdSysPart1Data0    EfuseRdSysPart1Data0RegT
	RdSysPart1Data1    EfuseRdSysPart1Data1RegT
	RdSysPart1Data2    EfuseRdSysPart1Data2RegT
	RdSysPart1Data3    EfuseRdSysPart1Data3RegT
	RdSysPart1Data4    EfuseRdSysPart1Data4RegT
	RdSysPart1Data5    EfuseRdSysPart1Data5RegT
	RdSysPart1Data6    EfuseRdSysPart1Data6RegT
	RdSysPart1Data7    EfuseRdSysPart1Data7RegT
	RdUsrData0         EfuseRdUsrData0RegT
	RdUsrData1         EfuseRdUsrData1RegT
	RdUsrData2         EfuseRdUsrData2RegT
	RdUsrData3         EfuseRdUsrData3RegT
	RdUsrData4         EfuseRdUsrData4RegT
	RdUsrData5         EfuseRdUsrData5RegT
	RdUsrData6         EfuseRdUsrData6RegT
	RdUsrData7         EfuseRdUsrData7RegT
	RdKey0Data0        EfuseRdKey0Data0RegT
	RdKey0Data1        EfuseRdKey0Data1RegT
	RdKey0Data2        EfuseRdKey0Data2RegT
	RdKey0Data3        EfuseRdKey0Data3RegT
	RdKey0Data4        EfuseRdKey0Data4RegT
	RdKey0Data5        EfuseRdKey0Data5RegT
	RdKey0Data6        EfuseRdKey0Data6RegT
	RdKey0Data7        EfuseRdKey0Data7RegT
	RdKey1Data0        EfuseRdKey1Data0RegT
	RdKey1Data1        EfuseRdKey1Data1RegT
	RdKey1Data2        EfuseRdKey1Data2RegT
	RdKey1Data3        EfuseRdKey1Data3RegT
	RdKey1Data4        EfuseRdKey1Data4RegT
	RdKey1Data5        EfuseRdKey1Data5RegT
	RdKey1Data6        EfuseRdKey1Data6RegT
	RdKey1Data7        EfuseRdKey1Data7RegT
	RdKey2Data0        EfuseRdKey2Data0RegT
	RdKey2Data1        EfuseRdKey2Data1RegT
	RdKey2Data2        EfuseRdKey2Data2RegT
	RdKey2Data3        EfuseRdKey2Data3RegT
	RdKey2Data4        EfuseRdKey2Data4RegT
	RdKey2Data5        EfuseRdKey2Data5RegT
	RdKey2Data6        EfuseRdKey2Data6RegT
	RdKey2Data7        EfuseRdKey2Data7RegT
	RdKey3Data0        EfuseRdKey3Data0RegT
	RdKey3Data1        EfuseRdKey3Data1RegT
	RdKey3Data2        EfuseRdKey3Data2RegT
	RdKey3Data3        EfuseRdKey3Data3RegT
	RdKey3Data4        EfuseRdKey3Data4RegT
	RdKey3Data5        EfuseRdKey3Data5RegT
	RdKey3Data6        EfuseRdKey3Data6RegT
	RdKey3Data7        EfuseRdKey3Data7RegT
	RdKey4Data0        EfuseRdKey4Data0RegT
	RdKey4Data1        EfuseRdKey4Data1RegT
	RdKey4Data2        EfuseRdKey4Data2RegT
	RdKey4Data3        EfuseRdKey4Data3RegT
	RdKey4Data4        EfuseRdKey4Data4RegT
	RdKey4Data5        EfuseRdKey4Data5RegT
	RdKey4Data6        EfuseRdKey4Data6RegT
	RdKey4Data7        EfuseRdKey4Data7RegT
	RdKey5Data0        EfuseRdKey5Data0RegT
	RdKey5Data1        EfuseRdKey5Data1RegT
	RdKey5Data2        EfuseRdKey5Data2RegT
	RdKey5Data3        EfuseRdKey5Data3RegT
	RdKey5Data4        EfuseRdKey5Data4RegT
	RdKey5Data5        EfuseRdKey5Data5RegT
	RdKey5Data6        EfuseRdKey5Data6RegT
	RdKey5Data7        EfuseRdKey5Data7RegT
	RdSysPart2Data0    EfuseRdSysPart2Data0RegT
	RdSysPart2Data1    EfuseRdSysPart2Data1RegT
	RdSysPart2Data2    EfuseRdSysPart2Data2RegT
	RdSysPart2Data3    EfuseRdSysPart2Data3RegT
	RdSysPart2Data4    EfuseRdSysPart2Data4RegT
	RdSysPart2Data5    EfuseRdSysPart2Data5RegT
	RdSysPart2Data6    EfuseRdSysPart2Data6RegT
	RdSysPart2Data7    EfuseRdSysPart2Data7RegT
	RdRepeatErr0       EfuseRdRepeatErr0RegT
	RdRepeatErr1       EfuseRdRepeatErr1RegT
	RdRepeatErr2       EfuseRdRepeatErr2RegT
	RdRepeatErr3       EfuseRdRepeatErr3RegT
	Reserved18c        c.Uint32T
	RdRepeatErr4       EfuseRdRepeatErr4RegT
	Reserved194        [11]c.Uint32T
	RdRsErr0           EfuseRdRsErr0RegT
	RdRsErr1           EfuseRdRsErr1RegT
	Clk                EfuseClkRegT
	Conf               EfuseConfRegT
	Status             EfuseStatusRegT
	Cmd                EfuseCmdRegT
	IntRaw             EfuseIntRawRegT
	IntSt              EfuseIntStRegT
	IntEna             EfuseIntEnaRegT
	IntClr             EfuseIntClrRegT
	DacConf            EfuseDacConfRegT
	RdTimConf          EfuseRdTimConfRegT
	WrTimConf1         EfuseWrTimConf1RegT
	WrTimConf2         EfuseWrTimConf2RegT
	WrTimConf0RsBypass EfuseWrTimConf0RsBypassRegT
	Date               EfuseDateRegT
}
type EtsEfusePurposeT c.Int

const (
	ETS_EFUSE_KEY_PURPOSE_USER                        EtsEfusePurposeT = 0
	ETS_EFUSE_KEY_PURPOSE_RESERVED                    EtsEfusePurposeT = 1
	ETS_EFUSE_KEY_PURPOSE_XTS_AES_128_KEY             EtsEfusePurposeT = 4
	ETS_EFUSE_KEY_PURPOSE_HMAC_DOWN_ALL               EtsEfusePurposeT = 5
	ETS_EFUSE_KEY_PURPOSE_HMAC_DOWN_JTAG              EtsEfusePurposeT = 6
	ETS_EFUSE_KEY_PURPOSE_HMAC_DOWN_DIGITAL_SIGNATURE EtsEfusePurposeT = 7
	ETS_EFUSE_KEY_PURPOSE_HMAC_UP                     EtsEfusePurposeT = 8
	ETS_EFUSE_KEY_PURPOSE_SECURE_BOOT_DIGEST0         EtsEfusePurposeT = 9
	ETS_EFUSE_KEY_PURPOSE_SECURE_BOOT_DIGEST1         EtsEfusePurposeT = 10
	ETS_EFUSE_KEY_PURPOSE_SECURE_BOOT_DIGEST2         EtsEfusePurposeT = 11
	ETS_EFUSE_KEY_PURPOSE_MAX                         EtsEfusePurposeT = 12
)

type EtsEfuseBlockT c.Int

const (
	ETS_EFUSE_BLOCK0         EtsEfuseBlockT = 0
	ETS_EFUSE_MAC_SPI_SYS_0  EtsEfuseBlockT = 1
	ETS_EFUSE_BLOCK_SYS_DATA EtsEfuseBlockT = 2
	ETS_EFUSE_BLOCK_USR_DATA EtsEfuseBlockT = 3
	ETS_EFUSE_BLOCK_KEY0     EtsEfuseBlockT = 4
	ETS_EFUSE_BLOCK_KEY1     EtsEfuseBlockT = 5
	ETS_EFUSE_BLOCK_KEY2     EtsEfuseBlockT = 6
	ETS_EFUSE_BLOCK_KEY3     EtsEfuseBlockT = 7
	ETS_EFUSE_BLOCK_KEY4     EtsEfuseBlockT = 8
	ETS_EFUSE_BLOCK_KEY5     EtsEfuseBlockT = 9
	ETS_EFUSE_BLOCK_KEY6     EtsEfuseBlockT = 10
	ETS_EFUSE_BLOCK_MAX      EtsEfuseBlockT = 11
)

type EfuseControllerStateT c.Int

const (
	EFUSE_CONTROLLER_STATE_RESET          EfuseControllerStateT = 0
	EFUSE_CONTROLLER_STATE_IDLE           EfuseControllerStateT = 1
	EFUSE_CONTROLLER_STATE_READ_INIT      EfuseControllerStateT = 2
	EFUSE_CONTROLLER_STATE_READ_BLK0      EfuseControllerStateT = 3
	EFUSE_CONTROLLER_STATE_BLK0_CRC_CHECK EfuseControllerStateT = 4
	EFUSE_CONTROLLER_STATE_READ_RS_BLK    EfuseControllerStateT = 5
)

type ETSSTATUS c.Int

const (
	ETS_OK      ETSSTATUS = 0
	ETS_FAILED  ETSSTATUS = 1
	ETS_PENDING ETSSTATUS = 2
	ETS_BUSY    ETSSTATUS = 3
	ETS_CANCEL  ETSSTATUS = 4
)

type EtsStatusT ETSSTATUS
type ETSSignal c.Uint32T
type ETSParam c.Uint32T

type ETSEventTag struct {
	Unused [8]uint8
}
type ETSEvent ETSEventTag

// llgo:type C
type ETSTask func(*ETSEvent)

// llgo:type C
type EtsIdleCbT func(c.Pointer)

// llgo:type C
type ETSTimerFunc func(c.Pointer)

type X_ETSTIMER_ struct {
	TimerNext   *X_ETSTIMER_
	TimerExpire c.Uint32T
	TimerPeriod c.Uint32T
	TimerFunc   *ETSTimerFunc
	TimerArg    c.Pointer
}
type ETSTimer X_ETSTIMER_

// llgo:type C
type EtsIsrT func(c.Pointer)
type STATUS c.Int

const (
	OK      STATUS = 0
	FAIL    STATUS = 1
	PENDING STATUS = 2
	BUSY    STATUS = 3
	CANCEL  STATUS = 4
)

type ECDSACURVE c.Int

const (
	ECDSA_CURVE_P192 ECDSACURVE = 1
	ECDSA_CURVE_P256 ECDSACURVE = 2
)

type EtsRsaPubkeyT struct {
	N     [384]c.Uint8T
	E     c.Uint32T
	Rinv  [384]c.Uint8T
	Mdash c.Uint32T
}
type SpiFlashMmapMemoryT c.Int

const (
	SPI_FLASH_MMAP_DATA SpiFlashMmapMemoryT = 0
	SPI_FLASH_MMAP_INST SpiFlashMmapMemoryT = 1
)

type SpiFlashMmapHandleT c.Uint32T
type EspRomSpiflashReadModeT c.Int

const (
	ESP_ROM_SPIFLASH_QIO_MODE         EspRomSpiflashReadModeT = 0
	ESP_ROM_SPIFLASH_QOUT_MODE        EspRomSpiflashReadModeT = 1
	ESP_ROM_SPIFLASH_DIO_MODE         EspRomSpiflashReadModeT = 2
	ESP_ROM_SPIFLASH_DOUT_MODE        EspRomSpiflashReadModeT = 3
	ESP_ROM_SPIFLASH_FASTRD_MODE      EspRomSpiflashReadModeT = 4
	ESP_ROM_SPIFLASH_SLOWRD_MODE      EspRomSpiflashReadModeT = 5
	ESP_ROM_SPIFLASH_OPI_STR_MODE     EspRomSpiflashReadModeT = 6
	ESP_ROM_SPIFLASH_OPI_DTR_MODE     EspRomSpiflashReadModeT = 7
	ESP_ROM_SPIFLASH_OOUT_MODE        EspRomSpiflashReadModeT = 8
	ESP_ROM_SPIFLASH_OIO_STR_MODE     EspRomSpiflashReadModeT = 9
	ESP_ROM_SPIFLASH_OIO_DTR_MODE     EspRomSpiflashReadModeT = 10
	ESP_ROM_SPIFLASH_QPI_MODE         EspRomSpiflashReadModeT = 11
	ESP_ROM_SPIFLASH_OPI_HEX_DTR_MODE EspRomSpiflashReadModeT = 12
)

type EspRomSpiflashChipT struct {
	DeviceId   c.Uint32T
	ChipSize   c.Uint32T
	BlockSize  c.Uint32T
	SectorSize c.Uint32T
	PageSize   c.Uint32T
	StatusMask c.Uint32T
}
type EspRomSpiflashResultT c.Int

const (
	ESP_ROM_SPIFLASH_RESULT_OK      EspRomSpiflashResultT = 0
	ESP_ROM_SPIFLASH_RESULT_ERR     EspRomSpiflashResultT = 1
	ESP_ROM_SPIFLASH_RESULT_TIMEOUT EspRomSpiflashResultT = 2
)

/* Flash data defined in ROM*/

type EspRomSpiflashLegacyDataT struct {
	Chip         EspRomSpiflashChipT
	DummyLenPlus [3]c.Uint8T
	SigMatrix    c.Uint8T
}

const (
	ESP_ERR_FLASH_SIZE_NOT_MATCH c.Int = 260
	ESP_ERR_FLASH_NO_RESPONSE    c.Int = 264
)

/** Definition of a common transaction. Also holds the return value. */

type SpiFlashTransT struct {
	Reserved      c.Uint8T
	MosiLen       c.Uint8T
	MisoLen       c.Uint8T
	AddressBitlen c.Uint8T
	Address       c.Uint32T
	MosiData      *c.Uint8T
	MisoData      *c.Uint8T
	Flags         c.Uint32T
	Command       c.Uint16T
	DummyBitlen   c.Uint8T
	IoMode        c.Uint32T
}
type EspFlashSpeedS c.Int

const (
	ESP_FLASH_5MHZ      EspFlashSpeedS = 5
	ESP_FLASH_10MHZ     EspFlashSpeedS = 10
	ESP_FLASH_20MHZ     EspFlashSpeedS = 20
	ESP_FLASH_26MHZ     EspFlashSpeedS = 26
	ESP_FLASH_40MHZ     EspFlashSpeedS = 40
	ESP_FLASH_80MHZ     EspFlashSpeedS = 80
	ESP_FLASH_120MHZ    EspFlashSpeedS = 120
	ESP_FLASH_SPEED_MAX EspFlashSpeedS = 121
)

type EspFlashSpeedT EspFlashSpeedS
type EspFlashIoModeT c.Int

const (
	SPI_FLASH_SLOWRD        EspFlashIoModeT = 0
	SPI_FLASH_FASTRD        EspFlashIoModeT = 1
	SPI_FLASH_DOUT          EspFlashIoModeT = 2
	SPI_FLASH_DIO           EspFlashIoModeT = 3
	SPI_FLASH_QOUT          EspFlashIoModeT = 4
	SPI_FLASH_QIO           EspFlashIoModeT = 5
	SPI_FLASH_OPI_STR       EspFlashIoModeT = 16
	SPI_FLASH_OPI_DTR       EspFlashIoModeT = 17
	SPI_FLASH_READ_MODE_MAX EspFlashIoModeT = 18
)

// / Configuration structure for the flash chip suspend feature.
type SpiFlashSusCmdConf struct {
	SusMask c.Uint32T
}

// / Structure for flash encryption operations.
type SpiFlashEncryptionT struct {
	FlashEncryptionEnable      c.Pointer
	FlashEncryptionDisable     c.Pointer
	FlashEncryptionDataPrepare c.Pointer
	FlashEncryptionDone        c.Pointer
	FlashEncryptionDestroy     c.Pointer
	FlashEncryptionCheck       c.Pointer
}

type SpiFlashHostDriverS struct {
	Unused [8]uint8
}
type SpiFlashHostDriverT SpiFlashHostDriverS

/** SPI Flash Host driver instance */

type SpiFlashHostInstT struct {
	Driver *SpiFlashHostDriverS
}

type SpiFlashChipT struct {
	Unused [8]uint8
}

type EspFlashT struct {
	Unused [8]uint8
}

/** @brief Structure for describing a region of flash */

type EspFlashRegionT struct {
	Offset c.Uint32T
	Size   c.Uint32T
}

/** @brief OS-level integration hooks for accessing flash chips inside a running OS
 *
 * It's in the public header because some instances should be allocated statically in the startup
 * code. May be updated according to hardware version and new flash chip feature requirements,
 * shouldn't be treated as public API.
 *
 *  For advanced developers, you may replace some of them with your implementations at your own
 *  risk.
 */
type EspFlashOsFunctionsT struct {
	Start             c.Pointer
	End               c.Pointer
	RegionProtected   c.Pointer
	DelayUs           c.Pointer
	GetTempBuffer     c.Pointer
	ReleaseTempBuffer c.Pointer
	CheckYield        c.Pointer
	Yield             c.Pointer
	GetSystemTime     c.Pointer
	SetFlashOpStatus  c.Pointer
}
type RegdmaLinkPriorityT c.Int

const (
	REGDMA_LINK_PRI_0 RegdmaLinkPriorityT = 0
	REGDMA_LINK_PRI_1 RegdmaLinkPriorityT = 1
	REGDMA_LINK_PRI_2 RegdmaLinkPriorityT = 2
	REGDMA_LINK_PRI_3 RegdmaLinkPriorityT = 3
	REGDMA_LINK_PRI_4 RegdmaLinkPriorityT = 4
	REGDMA_LINK_PRI_5 RegdmaLinkPriorityT = 5
	REGDMA_LINK_PRI_6 RegdmaLinkPriorityT = 6
	REGDMA_LINK_PRI_7 RegdmaLinkPriorityT = 7
)

type RegdmaEntryBufT [4]c.Pointer
type RegdmaLinkMode c.Int

const (
	REGDMA_LINK_MODE_CONTINUOUS RegdmaLinkMode = 0
	REGDMA_LINK_MODE_ADDR_MAP   RegdmaLinkMode = 1
	REGDMA_LINK_MODE_WRITE      RegdmaLinkMode = 2
	REGDMA_LINK_MODE_WAIT       RegdmaLinkMode = 3
)

type RegdmaLinkModeT RegdmaLinkMode

type RegdmaLinkHead struct {
	Length   c.Uint32T
	Reserve0 c.Uint32T
	Mode     c.Uint32T
	Reserve1 c.Uint32T
	Branch   c.Uint32T
	SkipR    c.Uint32T
	SkipB    c.Uint32T
	Eof      c.Uint32T
}
type RegdmaLinkHeadT RegdmaLinkHead

/* Continuous type linked list node body type definition */

type RegdmaLinkContinuousBody struct {
	Next    c.Pointer
	Backup  c.Pointer
	Restore c.Pointer
	Mem     c.Pointer
}
type RegdmaLinkContinuousBodyT RegdmaLinkContinuousBody

/* Address Map type linked list node body type definition */

type RegdmaLinkAddrMapBody struct {
	Next    c.Pointer
	Backup  c.Pointer
	Restore c.Pointer
	Mem     c.Pointer
	Map     [4]c.Uint32T
}
type RegdmaLinkAddrMapBodyT RegdmaLinkAddrMapBody

/* Write/Wait type linked list node body type definition */

type RegdmaLinkWriteWaitBody struct {
	Next   c.Pointer
	Backup c.Pointer
	Value  c.Uint32T
	Mask   c.Uint32T
}
type RegdmaLinkWriteWaitBodyT RegdmaLinkWriteWaitBody

/* Branch Continuous type linked list node body type definition */

type RegdmaLinkBranchContinuousBody struct {
	Next    RegdmaEntryBufT
	Backup  c.Pointer
	Restore c.Pointer
	Mem     c.Pointer
}
type RegdmaLinkBranchContinuousBodyT RegdmaLinkBranchContinuousBody

/* Branch Address Map type linked list node body type definition */

type RegdmaLinkBranchAddrMapBody struct {
	Next    RegdmaEntryBufT
	Backup  c.Pointer
	Restore c.Pointer
	Mem     c.Pointer
	Map     [4]c.Uint32T
}
type RegdmaLinkBranchAddrMapBodyT RegdmaLinkBranchAddrMapBody

/* Branch Write/Wait type linked list node body type definition */

type RegdmaLinkBranchWriteWaitBody struct {
	Next   RegdmaEntryBufT
	Backup c.Pointer
	Value  c.Uint32T
	Mask   c.Uint32T
}
type RegdmaLinkBranchWriteWaitBodyT RegdmaLinkBranchWriteWaitBody

type RegdmaLinkStats struct {
	Ref     c.Uint32T
	Reserve c.Uint32T
	Id      c.Uint32T
	Module  c.Int
}
type RegdmaLinkStatsT RegdmaLinkStats

type RegdmaLinkContinuous struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkContinuousBodyT
	Buff [0]c.Uint32T
}
type RegdmaLinkContinuousT RegdmaLinkContinuous

type RegdmaLinkAddrMap struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkAddrMapBodyT
	Buff [0]c.Uint32T
}
type RegdmaLinkAddrMapT RegdmaLinkAddrMap

type RegdmaLinkWriteWait struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkWriteWaitBodyT
}
type RegdmaLinkWriteWaitT RegdmaLinkWriteWait

type RegdmaLinkBranchContinuous struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkBranchContinuousBodyT
	Buff [0]c.Uint32T
}
type RegdmaLinkBranchContinuousT RegdmaLinkBranchContinuous

type RegdmaLinkBranchAddrMap struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkBranchAddrMapBodyT
	Buff [0]c.Uint32T
}
type RegdmaLinkBranchAddrMapT RegdmaLinkBranchAddrMap

type RegdmaLinkBranchWriteWait struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkBranchWriteWaitBodyT
}
type RegdmaLinkBranchWriteWaitT RegdmaLinkBranchWriteWait

type RegdmaLinkConfig struct {
	Head RegdmaLinkHeadT
	Id   c.Int
}
type RegdmaLinkConfigT RegdmaLinkConfig

type RegdmaEntriesConfigT struct {
	Config RegdmaLinkConfigT
	Owner  c.Uint32T
}
type PeriphRetentionModule c.Int

const (
	SLEEP_RETENTION_MODULE_MIN          PeriphRetentionModule = 0
	SLEEP_RETENTION_MODULE_NULL         PeriphRetentionModule = 0
	SLEEP_RETENTION_MODULE_CLOCK_SYSTEM PeriphRetentionModule = 1
	SLEEP_RETENTION_MODULE_CLOCK_MODEM  PeriphRetentionModule = 2
	SLEEP_RETENTION_MODULE_SYS_PERIPH   PeriphRetentionModule = 3
	SLEEP_RETENTION_MODULE_TG0_WDT      PeriphRetentionModule = 4
	SLEEP_RETENTION_MODULE_TG1_WDT      PeriphRetentionModule = 5
	SLEEP_RETENTION_MODULE_TG0_TIMER0   PeriphRetentionModule = 6
	SLEEP_RETENTION_MODULE_TG1_TIMER0   PeriphRetentionModule = 7
	SLEEP_RETENTION_MODULE_GDMA_CH0     PeriphRetentionModule = 8
	SLEEP_RETENTION_MODULE_GDMA_CH1     PeriphRetentionModule = 9
	SLEEP_RETENTION_MODULE_GDMA_CH2     PeriphRetentionModule = 10
	SLEEP_RETENTION_MODULE_ADC          PeriphRetentionModule = 11
	SLEEP_RETENTION_MODULE_I2C0         PeriphRetentionModule = 12
	SLEEP_RETENTION_MODULE_RMT0         PeriphRetentionModule = 13
	SLEEP_RETENTION_MODULE_UART0        PeriphRetentionModule = 14
	SLEEP_RETENTION_MODULE_UART1        PeriphRetentionModule = 15
	SLEEP_RETENTION_MODULE_I2S0         PeriphRetentionModule = 16
	SLEEP_RETENTION_MODULE_ETM0         PeriphRetentionModule = 17
	SLEEP_RETENTION_MODULE_TEMP_SENSOR  PeriphRetentionModule = 18
	SLEEP_RETENTION_MODULE_TWAI0        PeriphRetentionModule = 19
	SLEEP_RETENTION_MODULE_TWAI1        PeriphRetentionModule = 20
	SLEEP_RETENTION_MODULE_PARLIO0      PeriphRetentionModule = 21
	SLEEP_RETENTION_MODULE_GPSPI2       PeriphRetentionModule = 22
	SLEEP_RETENTION_MODULE_LEDC         PeriphRetentionModule = 23
	SLEEP_RETENTION_MODULE_PCNT0        PeriphRetentionModule = 24
	SLEEP_RETENTION_MODULE_MCPWM0       PeriphRetentionModule = 25
	SLEEP_RETENTION_MODULE_WIFI_MAC     PeriphRetentionModule = 26
	SLEEP_RETENTION_MODULE_WIFI_BB      PeriphRetentionModule = 27
	SLEEP_RETENTION_MODULE_BLE_MAC      PeriphRetentionModule = 28
	SLEEP_RETENTION_MODULE_BT_BB        PeriphRetentionModule = 29
	SLEEP_RETENTION_MODULE_802154_MAC   PeriphRetentionModule = 30
	SLEEP_RETENTION_MODULE_MAX          PeriphRetentionModule = 31
)

type PeriphRetentionModuleT PeriphRetentionModule
type PeriphInterrputT c.Int

const (
	ETS_WIFI_MAC_INTR_SOURCE              PeriphInterrputT = 0
	ETS_WIFI_MAC_NMI_SOURCE               PeriphInterrputT = 1
	ETS_WIFI_PWR_INTR_SOURCE              PeriphInterrputT = 2
	ETS_WIFI_BB_INTR_SOURCE               PeriphInterrputT = 3
	ETS_BT_MAC_INTR_SOURCE                PeriphInterrputT = 4
	ETS_BT_BB_INTR_SOURCE                 PeriphInterrputT = 5
	ETS_BT_BB_NMI_SOURCE                  PeriphInterrputT = 6
	ETS_LP_TIMER_INTR_SOURCE              PeriphInterrputT = 7
	ETS_COEX_INTR_SOURCE                  PeriphInterrputT = 8
	ETS_BLE_TIMER_INTR_SOURCE             PeriphInterrputT = 9
	ETS_BLE_SEC_INTR_SOURCE               PeriphInterrputT = 10
	ETS_I2C_MASTER_SOURCE                 PeriphInterrputT = 11
	ETS_ZB_MAC_SOURCE                     PeriphInterrputT = 12
	ETS_PMU_INTR_SOURCE                   PeriphInterrputT = 13
	ETS_EFUSE_INTR_SOURCE                 PeriphInterrputT = 14
	ETS_LP_RTC_TIMER_INTR_SOURCE          PeriphInterrputT = 15
	ETS_LP_UART_INTR_SOURCE               PeriphInterrputT = 16
	ETS_LP_I2C_INTR_SOURCE                PeriphInterrputT = 17
	ETS_LP_WDT_INTR_SOURCE                PeriphInterrputT = 18
	ETS_LP_PERI_TIMEOUT_INTR_SOURCE       PeriphInterrputT = 19
	ETS_LP_APM_M0_INTR_SOURCE             PeriphInterrputT = 20
	ETS_LP_APM_M1_INTR_SOURCE             PeriphInterrputT = 21
	ETS_FROM_CPU_INTR0_SOURCE             PeriphInterrputT = 22
	ETS_FROM_CPU_INTR1_SOURCE             PeriphInterrputT = 23
	ETS_FROM_CPU_INTR2_SOURCE             PeriphInterrputT = 24
	ETS_FROM_CPU_INTR3_SOURCE             PeriphInterrputT = 25
	ETS_ASSIST_DEBUG_INTR_SOURCE          PeriphInterrputT = 26
	ETS_TRACE_INTR_SOURCE                 PeriphInterrputT = 27
	ETS_CACHE_INTR_SOURCE                 PeriphInterrputT = 28
	ETS_CPU_PERI_TIMEOUT_INTR_SOURCE      PeriphInterrputT = 29
	ETS_GPIO_INTR_SOURCE                  PeriphInterrputT = 30
	ETS_GPIO_NMI_SOURCE                   PeriphInterrputT = 31
	ETS_PAU_INTR_SOURCE                   PeriphInterrputT = 32
	ETS_HP_PERI_TIMEOUT_INTR_SOURCE       PeriphInterrputT = 33
	ETS_MODEM_PERI_TIMEOUT_INTR_SOURCE    PeriphInterrputT = 34
	ETS_HP_APM_M0_INTR_SOURCE             PeriphInterrputT = 35
	ETS_HP_APM_M1_INTR_SOURCE             PeriphInterrputT = 36
	ETS_HP_APM_M2_INTR_SOURCE             PeriphInterrputT = 37
	ETS_HP_APM_M3_INTR_SOURCE             PeriphInterrputT = 38
	ETS_LP_APM0_INTR_SOURCE               PeriphInterrputT = 39
	ETS_MSPI_INTR_SOURCE                  PeriphInterrputT = 40
	ETS_I2S0_INTR_SOURCE                  PeriphInterrputT = 41
	ETS_UHCI0_INTR_SOURCE                 PeriphInterrputT = 42
	ETS_UART0_INTR_SOURCE                 PeriphInterrputT = 43
	ETS_UART1_INTR_SOURCE                 PeriphInterrputT = 44
	ETS_LEDC_INTR_SOURCE                  PeriphInterrputT = 45
	ETS_TWAI0_INTR_SOURCE                 PeriphInterrputT = 46
	ETS_TWAI1_INTR_SOURCE                 PeriphInterrputT = 47
	ETS_USB_SERIAL_JTAG_INTR_SOURCE       PeriphInterrputT = 48
	ETS_RMT_INTR_SOURCE                   PeriphInterrputT = 49
	ETS_I2C_EXT0_INTR_SOURCE              PeriphInterrputT = 50
	ETS_TG0_T0_LEVEL_INTR_SOURCE          PeriphInterrputT = 51
	ETS_TG0_T1_LEVEL_INTR_SOURCE          PeriphInterrputT = 52
	ETS_TG0_WDT_LEVEL_INTR_SOURCE         PeriphInterrputT = 53
	ETS_TG1_T0_LEVEL_INTR_SOURCE          PeriphInterrputT = 54
	ETS_TG1_T1_LEVEL_INTR_SOURCE          PeriphInterrputT = 55
	ETS_TG1_WDT_LEVEL_INTR_SOURCE         PeriphInterrputT = 56
	ETS_SYSTIMER_TARGET0_INTR_SOURCE      PeriphInterrputT = 57
	ETS_SYSTIMER_TARGET1_INTR_SOURCE      PeriphInterrputT = 58
	ETS_SYSTIMER_TARGET2_INTR_SOURCE      PeriphInterrputT = 59
	ETS_SYSTIMER_TARGET0_EDGE_INTR_SOURCE PeriphInterrputT = 57
	ETS_SYSTIMER_TARGET1_EDGE_INTR_SOURCE PeriphInterrputT = 58
	ETS_SYSTIMER_TARGET2_EDGE_INTR_SOURCE PeriphInterrputT = 59
	ETS_APB_ADC_INTR_SOURCE               PeriphInterrputT = 60
	ETS_TEMPERATURE_SENSOR_INTR_SOURCE    PeriphInterrputT = 60
	ETS_MCPWM0_INTR_SOURCE                PeriphInterrputT = 61
	ETS_PCNT_INTR_SOURCE                  PeriphInterrputT = 62
	ETS_PARL_IO_INTR_SOURCE               PeriphInterrputT = 63
	ETS_SLC0_INTR_SOURCE                  PeriphInterrputT = 64
	ETS_SLC_INTR_SOURCE                   PeriphInterrputT = 65
	ETS_DMA_IN_CH0_INTR_SOURCE            PeriphInterrputT = 66
	ETS_DMA_IN_CH1_INTR_SOURCE            PeriphInterrputT = 67
	ETS_DMA_IN_CH2_INTR_SOURCE            PeriphInterrputT = 68
	ETS_DMA_OUT_CH0_INTR_SOURCE           PeriphInterrputT = 69
	ETS_DMA_OUT_CH1_INTR_SOURCE           PeriphInterrputT = 70
	ETS_DMA_OUT_CH2_INTR_SOURCE           PeriphInterrputT = 71
	ETS_GSPI2_INTR_SOURCE                 PeriphInterrputT = 72
	ETS_AES_INTR_SOURCE                   PeriphInterrputT = 73
	ETS_SHA_INTR_SOURCE                   PeriphInterrputT = 74
	ETS_RSA_INTR_SOURCE                   PeriphInterrputT = 75
	ETS_ECC_INTR_SOURCE                   PeriphInterrputT = 76
	ETS_MAX_INTR_SOURCE                   PeriphInterrputT = 77
)

/** Group: User-defined control registers */
/** Type of cmd register
 *  Command control register
 */

type SpiCmdRegT struct {
	Val c.Uint32T
}

/** Type of addr register
 *  Address value register
 */

type SpiAddrRegT struct {
	Val c.Uint32T
}

/** Type of user register
 *  SPI USER control register
 */

type SpiUserRegT struct {
	Val c.Uint32T
}

/** Type of user1 register
 *  SPI USER control register 1
 */

type SpiUser1RegT struct {
	Val c.Uint32T
}

/** Type of user2 register
 *  SPI USER control register 2
 */

type SpiUser2RegT struct {
	Val c.Uint32T
}

/** Group: Control and configuration registers */
/** Type of ctrl register
 *  SPI control register
 */

type SpiCtrlRegT struct {
	Val c.Uint32T
}

/** Type of ms_dlen register
 *  SPI data bit length control register
 */

type SpiMsDlenRegT struct {
	Val c.Uint32T
}

/** Type of misc register
 *  SPI misc register
 */

type SpiMiscRegT struct {
	Val c.Uint32T
}

/** Type of dma_conf register
 *  SPI DMA control register
 */

type SpiDmaConfRegT struct {
	Val c.Uint32T
}

/** Type of slave register
 *  SPI slave control register
 */

type SpiSlaveRegT struct {
	Val c.Uint32T
}

/** Type of slave1 register
 *  SPI slave control register 1
 */

type SpiSlave1RegT struct {
	Val c.Uint32T
}

/** Group: Clock control registers */
/** Type of clock register
 *  SPI clock control register
 */

type SpiClockRegT struct {
	Val c.Uint32T
}

/** Type of clk_gate register
 *  SPI module clock and register clock control
 */

type SpiClkGateRegT struct {
	Val c.Uint32T
}

/** Group: Timing registers */
/** Type of din_mode register
 *  SPI input delay mode configuration
 */

type SpiDinModeRegT struct {
	Val c.Uint32T
}

/** Type of din_num register
 *  SPI input delay number configuration
 */

type SpiDinNumRegT struct {
	Val c.Uint32T
}

/** Type of dout_mode register
 *  SPI output delay mode configuration
 */

type SpiDoutModeRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt registers */
/** Type of dma_int_ena register
 *  SPI interrupt enable register
 */

type SpiDmaIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of dma_int_clr register
 *  SPI interrupt clear register
 */

type SpiDmaIntClrRegT struct {
	Val c.Uint32T
}

/** Type of dma_int_raw register
 *  SPI interrupt raw register
 */

type SpiDmaIntRawRegT struct {
	Val c.Uint32T
}

/** Type of dma_int_st register
 *  SPI interrupt status register
 */

type SpiDmaIntStRegT struct {
	Val c.Uint32T
}

/** Type of dma_int_set register
 *  SPI interrupt software set register
 */

type SpiDmaIntSetRegT struct {
	Val c.Uint32T
}

/** Group: CPU-controlled data buffer */
/** Type of wn register
 *  SPI CPU-controlled buffer
 */

type SpiWnRegT struct {
	Val c.Uint32T
}

/** Group: Version register */
/** Type of date register
 *  Version control
 */

type SpiDateRegT struct {
	Val c.Uint32T
}

type SpiDevT struct {
	Cmd         SpiCmdRegT
	Addr        SpiAddrRegT
	Ctrl        SpiCtrlRegT
	Clock       SpiClockRegT
	User        SpiUserRegT
	User1       SpiUser1RegT
	User2       SpiUser2RegT
	MsDlen      SpiMsDlenRegT
	Misc        SpiMiscRegT
	DinMode     SpiDinModeRegT
	DinNum      SpiDinNumRegT
	DoutMode    SpiDoutModeRegT
	DmaConf     SpiDmaConfRegT
	DmaIntEna   SpiDmaIntEnaRegT
	DmaIntClr   SpiDmaIntClrRegT
	DmaIntRaw   SpiDmaIntRawRegT
	DmaIntSt    SpiDmaIntStRegT
	DmaIntSet   SpiDmaIntSetRegT
	Reserved048 [20]c.Uint32T
	DataBuf     [16]SpiWnRegT
	Reserved0d8 [2]c.Uint32T
	Slave       SpiSlaveRegT
	Slave1      SpiSlave1RegT
	ClkGate     SpiClkGateRegT
	Reserved0ec c.Uint32T
	Date        SpiDateRegT
}

/*
 * SPDX-FileCopyrightText: 2022 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: Apache-2.0
 */

type SpiMemDevS struct {
	Cmd struct {
		Val c.Uint32T
	}
	Addr c.Uint32T
	Ctrl struct {
		Val c.Uint32T
	}
	Ctrl1 struct {
		Val c.Uint32T
	}
	Ctrl2 struct {
		Val c.Uint32T
	}
	Clock struct {
		Val c.Uint32T
	}
	User struct {
		Val c.Uint32T
	}
	User1 struct {
		Val c.Uint32T
	}
	User2 struct {
		Val c.Uint32T
	}
	MosiDlen struct {
		Val c.Uint32T
	}
	MisoDlen struct {
		Val c.Uint32T
	}
	RdStatus struct {
		Val c.Uint32T
	}
	Reserved30 c.Uint32T
	Misc       struct {
		Val c.Uint32T
	}
	TxCrc      c.Uint32T
	CacheFctrl struct {
		Val c.Uint32T
	}
	CacheSctrl struct {
		Val c.Uint32T
	}
	SramCmd struct {
		Val c.Uint32T
	}
	SramDrdCmd struct {
		Val c.Uint32T
	}
	SramDwrCmd struct {
		Val c.Uint32T
	}
	SramClk struct {
		Val c.Uint32T
	}
	Fsm struct {
		Val c.Uint32T
	}
	DataBuf        [16]c.Uint32T
	FlashWaitiCtrl struct {
		Val c.Uint32T
	}
	FlashSusCtrl struct {
		Val c.Uint32T
	}
	FlashSusCmd struct {
		Val c.Uint32T
	}
	SusStatus struct {
		Val c.Uint32T
	}
	ReservedA8 c.Uint32T
	ReservedAc c.Uint32T
	ReservedB0 c.Uint32T
	ReservedB4 c.Uint32T
	ReservedB8 c.Uint32T
	ReservedBc c.Uint32T
	IntEna     struct {
		Val c.Uint32T
	}
	IntClr struct {
		Val c.Uint32T
	}
	IntRaw struct {
		Val c.Uint32T
	}
	IntSt struct {
		Val c.Uint32T
	}
	ReservedD0 c.Uint32T
	Ddr        struct {
		Val c.Uint32T
	}
	SpiSmemDdr struct {
		Val c.Uint32T
	}
	ReservedDc      c.Uint32T
	ReservedE0      c.Uint32T
	ReservedE4      c.Uint32T
	ReservedE8      c.Uint32T
	ReservedEc      c.Uint32T
	ReservedF0      c.Uint32T
	ReservedF4      c.Uint32T
	ReservedF8      c.Uint32T
	ReservedFc      c.Uint32T
	SpiFmemPms0Attr struct {
		Val c.Uint32T
	}
	SpiFmemPms1Attr struct {
		Val c.Uint32T
	}
	SpiFmemPms2Attr struct {
		Val c.Uint32T
	}
	SpiFmemPms3Attr struct {
		Val c.Uint32T
	}
	SpiFmemPms0Addr struct {
		Val c.Uint32T
	}
	SpiFmemPms1Addr struct {
		Val c.Uint32T
	}
	SpiFmemPms2Addr struct {
		Val c.Uint32T
	}
	SpiFmemPms3Addr struct {
		Val c.Uint32T
	}
	SpiFmemPms0Size struct {
		Val c.Uint32T
	}
	SpiFmemPms1Size struct {
		Val c.Uint32T
	}
	SpiFmemPms2Size struct {
		Val c.Uint32T
	}
	SpiFmemPms3Size struct {
		Val c.Uint32T
	}
	SpiSmemPms0Attr struct {
		Val c.Uint32T
	}
	SpiSmemPms1Attr struct {
		Val c.Uint32T
	}
	SpiSmemPms2Attr struct {
		Val c.Uint32T
	}
	SpiSmemPms3Attr struct {
		Val c.Uint32T
	}
	SpiSmemPms0Addr struct {
		Val c.Uint32T
	}
	SpiSmemPms1Addr struct {
		Val c.Uint32T
	}
	SpiSmemPms2Addr struct {
		Val c.Uint32T
	}
	SpiSmemPms3Addr struct {
		Val c.Uint32T
	}
	SpiSmemPms0Size struct {
		Val c.Uint32T
	}
	SpiSmemPms1Size struct {
		Val c.Uint32T
	}
	SpiSmemPms2Size struct {
		Val c.Uint32T
	}
	SpiSmemPms3Size struct {
		Val c.Uint32T
	}
	Reserved160 c.Uint32T
	PmsReject   struct {
		Val c.Uint32T
	}
	EccCtrl struct {
		Val c.Uint32T
	}
	EccErrAddr struct {
		Val c.Uint32T
	}
	AxiErrAddr struct {
		Val c.Uint32T
	}
	SpiSmemEccCtrl struct {
		Val c.Uint32T
	}
	Reserved178 c.Uint32T
	Reserved17c c.Uint32T
	TimingCali  struct {
		Val c.Uint32T
	}
	DinMode struct {
		Val c.Uint32T
	}
	DinNum struct {
		Val c.Uint32T
	}
	DoutMode struct {
		Val c.Uint32T
	}
	SpiSmemTimingCali struct {
		Val c.Uint32T
	}
	SpiSmemDinMode struct {
		Val c.Uint32T
	}
	SpiSmemDinNum struct {
		Val c.Uint32T
	}
	SpiSmemDoutMode struct {
		Val c.Uint32T
	}
	SpiSmemAc struct {
		Val c.Uint32T
	}
	Reserved1a4 c.Uint32T
	Reserved1a8 c.Uint32T
	Reserved1ac c.Uint32T
	Reserved1b0 c.Uint32T
	Reserved1b4 c.Uint32T
	Reserved1b8 c.Uint32T
	Reserved1bc c.Uint32T
	Reserved1c0 c.Uint32T
	Reserved1c4 c.Uint32T
	Reserved1c8 c.Uint32T
	Reserved1cc c.Uint32T
	Reserved1d0 c.Uint32T
	Reserved1d4 c.Uint32T
	Reserved1d8 c.Uint32T
	Reserved1dc c.Uint32T
	Reserved1e0 c.Uint32T
	Reserved1e4 c.Uint32T
	Reserved1e8 c.Uint32T
	Reserved1ec c.Uint32T
	Reserved1f0 c.Uint32T
	Reserved1f4 c.Uint32T
	Reserved1f8 c.Uint32T
	Reserved1fc c.Uint32T
	ClockGate   struct {
		Val c.Uint32T
	}
	Reserved204  c.Uint32T
	Reserved208  c.Uint32T
	Reserved20c  c.Uint32T
	Reserved210  c.Uint32T
	Reserved214  c.Uint32T
	Reserved218  c.Uint32T
	Reserved21c  c.Uint32T
	Reserved220  c.Uint32T
	Reserved224  c.Uint32T
	Reserved228  c.Uint32T
	Reserved22c  c.Uint32T
	Reserved230  c.Uint32T
	Reserved234  c.Uint32T
	Reserved238  c.Uint32T
	Reserved23c  c.Uint32T
	Reserved240  c.Uint32T
	Reserved244  c.Uint32T
	Reserved248  c.Uint32T
	Reserved24c  c.Uint32T
	Reserved250  c.Uint32T
	Reserved254  c.Uint32T
	Reserved258  c.Uint32T
	Reserved25c  c.Uint32T
	Reserved260  c.Uint32T
	Reserved264  c.Uint32T
	Reserved268  c.Uint32T
	Reserved26c  c.Uint32T
	Reserved270  c.Uint32T
	Reserved274  c.Uint32T
	Reserved278  c.Uint32T
	Reserved27c  c.Uint32T
	Reserved280  c.Uint32T
	Reserved284  c.Uint32T
	Reserved288  c.Uint32T
	Reserved28c  c.Uint32T
	Reserved290  c.Uint32T
	Reserved294  c.Uint32T
	Reserved298  c.Uint32T
	Reserved29c  c.Uint32T
	Reserved2a0  c.Uint32T
	Reserved2a4  c.Uint32T
	Reserved2a8  c.Uint32T
	Reserved2ac  c.Uint32T
	Reserved2b0  c.Uint32T
	Reserved2b4  c.Uint32T
	Reserved2b8  c.Uint32T
	Reserved2bc  c.Uint32T
	Reserved2c0  c.Uint32T
	Reserved2c4  c.Uint32T
	Reserved2c8  c.Uint32T
	Reserved2cc  c.Uint32T
	Reserved2d0  c.Uint32T
	Reserved2d4  c.Uint32T
	Reserved2d8  c.Uint32T
	Reserved2dc  c.Uint32T
	Reserved2e0  c.Uint32T
	Reserved2e4  c.Uint32T
	Reserved2e8  c.Uint32T
	Reserved2ec  c.Uint32T
	Reserved2f0  c.Uint32T
	Reserved2f4  c.Uint32T
	Reserved2f8  c.Uint32T
	Reserved2fc  c.Uint32T
	XtsPlainBase c.Uint32T
	Reserved304  c.Uint32T
	Reserved308  c.Uint32T
	Reserved30c  c.Uint32T
	Reserved310  c.Uint32T
	Reserved314  c.Uint32T
	Reserved318  c.Uint32T
	Reserved31c  c.Uint32T
	Reserved320  c.Uint32T
	Reserved324  c.Uint32T
	Reserved328  c.Uint32T
	Reserved32c  c.Uint32T
	Reserved330  c.Uint32T
	Reserved334  c.Uint32T
	Reserved338  c.Uint32T
	Reserved33c  c.Uint32T
	XtsLinesize  struct {
		Val c.Uint32T
	}
	XtsDestination struct {
		Val c.Uint32T
	}
	XtsPhysicalAddress struct {
		Val c.Uint32T
	}
	XtsTrigger struct {
		Val c.Uint32T
	}
	XtsRelease struct {
		Val c.Uint32T
	}
	XtsDestroy struct {
		Val c.Uint32T
	}
	XtsState struct {
		Val c.Uint32T
	}
	XtsDate struct {
		Val c.Uint32T
	}
	Reserved360    c.Uint32T
	Reserved364    c.Uint32T
	Reserved368    c.Uint32T
	Reserved36c    c.Uint32T
	Reserved370    c.Uint32T
	Reserved374    c.Uint32T
	Reserved378    c.Uint32T
	MmuItemContent c.Uint32T
	MmuItemIndex   c.Uint32T
	MmuPowerCtrl   struct {
		Val c.Uint32T
	}
	DpaCtrl struct {
		Val c.Uint32T
	}
	Reserved38c           c.Uint32T
	Reserved390           c.Uint32T
	Reserved394           c.Uint32T
	Reserved398           c.Uint32T
	Reserved39c           c.Uint32T
	Reserved3a0           c.Uint32T
	Reserved3a4           c.Uint32T
	Reserved3a8           c.Uint32T
	Reserved3ac           c.Uint32T
	Reserved3b0           c.Uint32T
	Reserved3b4           c.Uint32T
	Reserved3b8           c.Uint32T
	Reserved3bc           c.Uint32T
	Reserved3c0           c.Uint32T
	Reserved3c4           c.Uint32T
	Reserved3c8           c.Uint32T
	Reserved3cc           c.Uint32T
	Reserved3d0           c.Uint32T
	Reserved3d4           c.Uint32T
	Reserved3d8           c.Uint32T
	Reserved3dc           c.Uint32T
	Reserved3e0           c.Uint32T
	Reserved3e4           c.Uint32T
	Reserved3e8           c.Uint32T
	Reserved3ec           c.Uint32T
	SpiMemisterrndEcoHigh c.Uint32T
	SpiMemisterrndEcoLow  c.Uint32T
	Reserved3f8           c.Uint32T
	Date                  struct {
		Val c.Uint32T
	}
}
type SpiMemDevT SpiMemDevS

/*
Stores a bunch of per-spi-peripheral data.
*/
type SpiSignalConnT struct {
	SpiclkOut      c.Uint8T
	SpiclkIn       c.Uint8T
	SpidOut        c.Uint8T
	SpiqOut        c.Uint8T
	SpiwpOut       c.Uint8T
	SpihdOut       c.Uint8T
	SpidIn         c.Uint8T
	SpiqIn         c.Uint8T
	SpiwpIn        c.Uint8T
	SpihdIn        c.Uint8T
	SpicsOut       [6]c.Uint8T
	SpicsIn        c.Uint8T
	SpidqsOut      c.Uint8T
	SpicdOut       c.Uint8T
	SpiclkIomuxPin c.Uint8T
	SpidIomuxPin   c.Uint8T
	SpiqIomuxPin   c.Uint8T
	SpiwpIomuxPin  c.Uint8T
	SpihdIomuxPin  c.Uint8T
	Spics0IomuxPin c.Uint8T
	Irq            c.Uint8T
	IrqDma         c.Uint8T
	Func           c.Int
	Hw             *SpiDevT
}

type SpiRegRetentionInfoT struct {
	ModuleId   PeriphRetentionModuleT
	EntryArray *RegdmaEntriesConfigT
	ArraySize  c.Uint32T
}
type SocRootClkT c.Int

const (
	SOC_ROOT_CLK_INT_RC_FAST  SocRootClkT = 0
	SOC_ROOT_CLK_INT_RC_SLOW  SocRootClkT = 1
	SOC_ROOT_CLK_EXT_XTAL     SocRootClkT = 2
	SOC_ROOT_CLK_EXT_XTAL32K  SocRootClkT = 3
	SOC_ROOT_CLK_INT_RC32K    SocRootClkT = 4
	SOC_ROOT_CLK_EXT_OSC_SLOW SocRootClkT = 5
)

type SocCpuClkSrcT c.Int

const (
	SOC_CPU_CLK_SRC_XTAL    SocCpuClkSrcT = 0
	SOC_CPU_CLK_SRC_PLL     SocCpuClkSrcT = 1
	SOC_CPU_CLK_SRC_RC_FAST SocCpuClkSrcT = 2
	SOC_CPU_CLK_SRC_INVALID SocCpuClkSrcT = 3
)

type SocRtcSlowClkSrcT c.Int

const (
	SOC_RTC_SLOW_CLK_SRC_RC_SLOW  SocRtcSlowClkSrcT = 0
	SOC_RTC_SLOW_CLK_SRC_XTAL32K  SocRtcSlowClkSrcT = 1
	SOC_RTC_SLOW_CLK_SRC_RC32K    SocRtcSlowClkSrcT = 2
	SOC_RTC_SLOW_CLK_SRC_OSC_SLOW SocRtcSlowClkSrcT = 3
	SOC_RTC_SLOW_CLK_SRC_INVALID  SocRtcSlowClkSrcT = 4
)

type SocRtcFastClkSrcT c.Int

const (
	SOC_RTC_FAST_CLK_SRC_RC_FAST  SocRtcFastClkSrcT = 0
	SOC_RTC_FAST_CLK_SRC_XTAL_D2  SocRtcFastClkSrcT = 1
	SOC_RTC_FAST_CLK_SRC_XTAL_DIV SocRtcFastClkSrcT = 1
	SOC_RTC_FAST_CLK_SRC_INVALID  SocRtcFastClkSrcT = 2
)

type SocXtalFreqT c.Int

const SOC_XTAL_FREQ_40M SocXtalFreqT = 40

type SocModuleClkT c.Int

const (
	SOC_MOD_CLK_CPU       SocModuleClkT = 1
	SOC_MOD_CLK_RTC_FAST  SocModuleClkT = 2
	SOC_MOD_CLK_RTC_SLOW  SocModuleClkT = 3
	SOC_MOD_CLK_PLL_F80M  SocModuleClkT = 4
	SOC_MOD_CLK_PLL_F160M SocModuleClkT = 5
	SOC_MOD_CLK_PLL_F240M SocModuleClkT = 6
	SOC_MOD_CLK_XTAL32K   SocModuleClkT = 7
	SOC_MOD_CLK_RC_FAST   SocModuleClkT = 8
	SOC_MOD_CLK_XTAL      SocModuleClkT = 9
	SOC_MOD_CLK_XTAL_D2   SocModuleClkT = 10
	SOC_MOD_CLK_INVALID   SocModuleClkT = 11
)

type SocPeriphSystimerClkSrcT c.Int

const (
	SYSTIMER_CLK_SRC_XTAL    SocPeriphSystimerClkSrcT = 9
	SYSTIMER_CLK_SRC_RC_FAST SocPeriphSystimerClkSrcT = 8
	SYSTIMER_CLK_SRC_DEFAULT SocPeriphSystimerClkSrcT = 9
)

type SocPeriphGptimerClkSrcT c.Int

const (
	GPTIMER_CLK_SRC_PLL_F80M SocPeriphGptimerClkSrcT = 4
	GPTIMER_CLK_SRC_RC_FAST  SocPeriphGptimerClkSrcT = 8
	GPTIMER_CLK_SRC_XTAL     SocPeriphGptimerClkSrcT = 9
	GPTIMER_CLK_SRC_DEFAULT  SocPeriphGptimerClkSrcT = 4
)

type SocPeriphTgClkSrcLegacyT c.Int

const (
	TIMER_SRC_CLK_PLL_F80M SocPeriphTgClkSrcLegacyT = 4
	TIMER_SRC_CLK_XTAL     SocPeriphTgClkSrcLegacyT = 9
	TIMER_SRC_CLK_DEFAULT  SocPeriphTgClkSrcLegacyT = 4
)

type SocPeriphRmtClkSrcT c.Int

const (
	RMT_CLK_SRC_PLL_F80M SocPeriphRmtClkSrcT = 4
	RMT_CLK_SRC_RC_FAST  SocPeriphRmtClkSrcT = 8
	RMT_CLK_SRC_XTAL     SocPeriphRmtClkSrcT = 9
	RMT_CLK_SRC_DEFAULT  SocPeriphRmtClkSrcT = 4
)

type SocPeriphRmtClkSrcLegacyT c.Int

const (
	RMT_BASECLK_PLL_F80M SocPeriphRmtClkSrcLegacyT = 4
	RMT_BASECLK_XTAL     SocPeriphRmtClkSrcLegacyT = 9
	RMT_BASECLK_DEFAULT  SocPeriphRmtClkSrcLegacyT = 4
)

type SocPeriphTemperatureSensorClkSrcT c.Int

const (
	TEMPERATURE_SENSOR_CLK_SRC_XTAL    SocPeriphTemperatureSensorClkSrcT = 9
	TEMPERATURE_SENSOR_CLK_SRC_RC_FAST SocPeriphTemperatureSensorClkSrcT = 8
	TEMPERATURE_SENSOR_CLK_SRC_DEFAULT SocPeriphTemperatureSensorClkSrcT = 9
)

type SocPeriphUartClkSrcLegacyT c.Int

const (
	UART_SCLK_PLL_F80M SocPeriphUartClkSrcLegacyT = 4
	UART_SCLK_RTC      SocPeriphUartClkSrcLegacyT = 8
	UART_SCLK_XTAL     SocPeriphUartClkSrcLegacyT = 9
	UART_SCLK_DEFAULT  SocPeriphUartClkSrcLegacyT = 4
)

type SocPeriphLpUartClkSrcT c.Int

const (
	LP_UART_SCLK_LP_FAST SocPeriphLpUartClkSrcT = 2
	LP_UART_SCLK_XTAL_D2 SocPeriphLpUartClkSrcT = 10
	LP_UART_SCLK_DEFAULT SocPeriphLpUartClkSrcT = 2
)

type SocPeriphMcpwmTimerClkSrcT c.Int

const (
	MCPWM_TIMER_CLK_SRC_PLL160M SocPeriphMcpwmTimerClkSrcT = 5
	MCPWM_TIMER_CLK_SRC_XTAL    SocPeriphMcpwmTimerClkSrcT = 9
	MCPWM_TIMER_CLK_SRC_DEFAULT SocPeriphMcpwmTimerClkSrcT = 5
)

type SocPeriphMcpwmCaptureClkSrcT c.Int

const (
	MCPWM_CAPTURE_CLK_SRC_PLL160M SocPeriphMcpwmCaptureClkSrcT = 5
	MCPWM_CAPTURE_CLK_SRC_XTAL    SocPeriphMcpwmCaptureClkSrcT = 9
	MCPWM_CAPTURE_CLK_SRC_DEFAULT SocPeriphMcpwmCaptureClkSrcT = 5
)

type SocPeriphMcpwmCarrierClkSrcT c.Int

const (
	MCPWM_CARRIER_CLK_SRC_PLL160M SocPeriphMcpwmCarrierClkSrcT = 5
	MCPWM_CARRIER_CLK_SRC_XTAL    SocPeriphMcpwmCarrierClkSrcT = 9
	MCPWM_CARRIER_CLK_SRC_DEFAULT SocPeriphMcpwmCarrierClkSrcT = 5
)

type SocPeriphI2sClkSrcT c.Int

const (
	I2S_CLK_SRC_DEFAULT  SocPeriphI2sClkSrcT = 5
	I2S_CLK_SRC_PLL_160M SocPeriphI2sClkSrcT = 5
	I2S_CLK_SRC_XTAL     SocPeriphI2sClkSrcT = 9
	I2S_CLK_SRC_EXTERNAL SocPeriphI2sClkSrcT = -1
)

type SocPeriphI2cClkSrcT c.Int

const (
	I2C_CLK_SRC_XTAL    SocPeriphI2cClkSrcT = 9
	I2C_CLK_SRC_RC_FAST SocPeriphI2cClkSrcT = 8
	I2C_CLK_SRC_DEFAULT SocPeriphI2cClkSrcT = 9
)

type SocPeriphLpI2cClkSrcT c.Int

const (
	LP_I2C_SCLK_LP_FAST SocPeriphLpI2cClkSrcT = 2
	LP_I2C_SCLK_XTAL_D2 SocPeriphLpI2cClkSrcT = 10
	LP_I2C_SCLK_DEFAULT SocPeriphLpI2cClkSrcT = 2
)

type SocPeriphSpiClkSrcT c.Int

const (
	SPI_CLK_SRC_DEFAULT  SocPeriphSpiClkSrcT = 4
	SPI_CLK_SRC_PLL_F80M SocPeriphSpiClkSrcT = 4
	SPI_CLK_SRC_XTAL     SocPeriphSpiClkSrcT = 9
	SPI_CLK_SRC_RC_FAST  SocPeriphSpiClkSrcT = 8
)

type SocPeriphSdmClkSrcT c.Int

const (
	SDM_CLK_SRC_XTAL     SocPeriphSdmClkSrcT = 9
	SDM_CLK_SRC_PLL_F80M SocPeriphSdmClkSrcT = 4
	SDM_CLK_SRC_DEFAULT  SocPeriphSdmClkSrcT = 4
)

type SocPeriphGlitchFilterClkSrcT c.Int

const (
	GLITCH_FILTER_CLK_SRC_XTAL     SocPeriphGlitchFilterClkSrcT = 9
	GLITCH_FILTER_CLK_SRC_PLL_F80M SocPeriphGlitchFilterClkSrcT = 4
	GLITCH_FILTER_CLK_SRC_DEFAULT  SocPeriphGlitchFilterClkSrcT = 4
)

type SocPeriphTwaiClkSrcT c.Int

const (
	TWAI_CLK_SRC_XTAL    SocPeriphTwaiClkSrcT = 9
	TWAI_CLK_SRC_DEFAULT SocPeriphTwaiClkSrcT = 9
)

type SocPeriphAdcDigiClkSrcT c.Int

const (
	ADC_DIGI_CLK_SRC_XTAL     SocPeriphAdcDigiClkSrcT = 9
	ADC_DIGI_CLK_SRC_PLL_F80M SocPeriphAdcDigiClkSrcT = 4
	ADC_DIGI_CLK_SRC_RC_FAST  SocPeriphAdcDigiClkSrcT = 8
	ADC_DIGI_CLK_SRC_DEFAULT  SocPeriphAdcDigiClkSrcT = 4
)

type SocPeriphMwdtClkSrcT c.Int

const (
	MWDT_CLK_SRC_XTAL     SocPeriphMwdtClkSrcT = 9
	MWDT_CLK_SRC_PLL_F80M SocPeriphMwdtClkSrcT = 4
	MWDT_CLK_SRC_RC_FAST  SocPeriphMwdtClkSrcT = 8
	MWDT_CLK_SRC_DEFAULT  SocPeriphMwdtClkSrcT = 9
)

type SocPeriphLedcClkSrcLegacyT c.Int

const (
	LEDC_AUTO_CLK        SocPeriphLedcClkSrcLegacyT = 0
	LEDC_USE_PLL_DIV_CLK SocPeriphLedcClkSrcLegacyT = 4
	LEDC_USE_RC_FAST_CLK SocPeriphLedcClkSrcLegacyT = 8
	LEDC_USE_XTAL_CLK    SocPeriphLedcClkSrcLegacyT = 9
	LEDC_USE_RTC8M_CLK   SocPeriphLedcClkSrcLegacyT = 8
)

type SocPeriphParlioClkSrcT c.Int

const (
	PARLIO_CLK_SRC_XTAL      SocPeriphParlioClkSrcT = 9
	PARLIO_CLK_SRC_PLL_F240M SocPeriphParlioClkSrcT = 6
	PARLIO_CLK_SRC_RC_FAST   SocPeriphParlioClkSrcT = 8
	PARLIO_CLK_SRC_EXTERNAL  SocPeriphParlioClkSrcT = -1
	PARLIO_CLK_SRC_DEFAULT   SocPeriphParlioClkSrcT = 6
)

type SocClkoutSigIdT c.Int

const (
	CLKOUT_SIG_PLL      SocClkoutSigIdT = 1
	CLKOUT_SIG_XTAL     SocClkoutSigIdT = 5
	CLKOUT_SIG_PLL_F80M SocClkoutSigIdT = 13
	CLKOUT_SIG_CPU      SocClkoutSigIdT = 16
	CLKOUT_SIG_AHB      SocClkoutSigIdT = 17
	CLKOUT_SIG_APB      SocClkoutSigIdT = 18
	CLKOUT_SIG_XTAL32K  SocClkoutSigIdT = 21
	CLKOUT_SIG_EXT32K   SocClkoutSigIdT = 22
	CLKOUT_SIG_RC_FAST  SocClkoutSigIdT = 23
	CLKOUT_SIG_RC_32K   SocClkoutSigIdT = 24
	CLKOUT_SIG_RC_SLOW  SocClkoutSigIdT = 25
	CLKOUT_SIG_INVALID  SocClkoutSigIdT = 255
)

type SpiHostDeviceT c.Int

const (
	SPI1_HOST    SpiHostDeviceT = 0
	SPI2_HOST    SpiHostDeviceT = 1
	SPI_HOST_MAX SpiHostDeviceT = 2
)

type SpiClockSourceT SocPeriphSpiClkSrcT
type SpiEventT c.Int

const (
	SPI_EV_BUF_TX         SpiEventT = 1
	SPI_EV_BUF_RX         SpiEventT = 2
	SPI_EV_SEND_DMA_READY SpiEventT = 4
	SPI_EV_SEND           SpiEventT = 8
	SPI_EV_RECV_DMA_READY SpiEventT = 16
	SPI_EV_RECV           SpiEventT = 32
	SPI_EV_CMD9           SpiEventT = 64
	SPI_EV_CMDA           SpiEventT = 128
	SPI_EV_TRANS          SpiEventT = 256
)

/**
 * @brief Line mode of SPI transaction phases: CMD, ADDR, DOUT/DIN.
 */

type SpiLineModeT struct {
	CmdLines  c.Uint8T
	AddrLines c.Uint8T
	DataLines c.Uint8T
}
type SpiCommandT c.Int

const (
	SPI_CMD_HD_WRBUF   SpiCommandT = 1
	SPI_CMD_HD_RDBUF   SpiCommandT = 2
	SPI_CMD_HD_WRDMA   SpiCommandT = 4
	SPI_CMD_HD_RDDMA   SpiCommandT = 8
	SPI_CMD_HD_SEG_END SpiCommandT = 16
	SPI_CMD_HD_EN_QPI  SpiCommandT = 32
	SPI_CMD_HD_WR_END  SpiCommandT = 64
	SPI_CMD_HD_INT0    SpiCommandT = 128
	SPI_CMD_HD_INT1    SpiCommandT = 256
	SPI_CMD_HD_INT2    SpiCommandT = 512
)

type SpiSamplingPointT c.Int

const (
	SPI_SAMPLING_POINT_PHASE_0 SpiSamplingPointT = 0
	SPI_SAMPLING_POINT_PHASE_1 SpiSamplingPointT = 1
)

type GpspiFlashLlClockRegT c.Uint

/** Group: Configuration Register */
/** Type of uart0_conf register
 *  UART0 configuration register
 */

type PcrUart0ConfRegT struct {
	Val c.Uint32T
}

/** Type of uart0_sclk_conf register
 *  UART0_SCLK configuration register
 */

type PcrUart0SclkConfRegT struct {
	Val c.Uint32T
}

/** Type of uart0_pd_ctrl register
 *  UART0 power control register
 */

type PcrUart0PdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of uart1_conf register
 *  UART1 configuration register
 */

type PcrUart1ConfRegT struct {
	Val c.Uint32T
}

/** Type of uart1_sclk_conf register
 *  UART1_SCLK configuration register
 */

type PcrUart1SclkConfRegT struct {
	Val c.Uint32T
}

/** Type of uart1_pd_ctrl register
 *  UART1 power control register
 */

type PcrUart1PdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of mspi_conf register
 *  MSPI configuration register
 */

type PcrMspiConfRegT struct {
	Val c.Uint32T
}

/** Type of mspi_clk_conf register
 *  MSPI_CLK configuration register
 */

type PcrMspiClkConfRegT struct {
	Val c.Uint32T
}

/** Type of i2c_conf register
 *  I2C configuration register
 */

type PcrI2cConfRegT struct {
	Val c.Uint32T
}

/** Type of i2c_sclk_conf register
 *  I2C_SCLK configuration register
 */

type PcrI2cSclkConfRegT struct {
	Val c.Uint32T
}

/** Type of uhci_conf register
 *  UHCI configuration register
 */

type PcrUhciConfRegT struct {
	Val c.Uint32T
}

/** Type of rmt_conf register
 *  RMT configuration register
 */

type PcrRmtConfRegT struct {
	Val c.Uint32T
}

/** Type of rmt_sclk_conf register
 *  RMT_SCLK configuration register
 */

type PcrRmtSclkConfRegT struct {
	Val c.Uint32T
}

/** Type of ledc_conf register
 *  LEDC configuration register
 */

type PcrLedcConfRegT struct {
	Val c.Uint32T
}

/** Type of ledc_sclk_conf register
 *  LEDC_SCLK configuration register
 */

type PcrLedcSclkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup0_conf register
 *  TIMERGROUP0 configuration register
 */

type PcrTimergroup0ConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup0_timer_clk_conf register
 *  TIMERGROUP0_TIMER_CLK configuration register
 */

type PcrTimergroup0TimerClkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup0_wdt_clk_conf register
 *  TIMERGROUP0_WDT_CLK configuration register
 */

type PcrTimergroup0WdtClkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup1_conf register
 *  TIMERGROUP1 configuration register
 */

type PcrTimergroup1ConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup1_timer_clk_conf register
 *  TIMERGROUP1_TIMER_CLK configuration register
 */

type PcrTimergroup1TimerClkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup1_wdt_clk_conf register
 *  TIMERGROUP1_WDT_CLK configuration register
 */

type PcrTimergroup1WdtClkConfRegT struct {
	Val c.Uint32T
}

/** Type of systimer_conf register
 *  SYSTIMER configuration register
 */

type PcrSystimerConfRegT struct {
	Val c.Uint32T
}

/** Type of systimer_func_clk_conf register
 *  SYSTIMER_FUNC_CLK configuration register
 */

type PcrSystimerFuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of twai0_conf register
 *  TWAI0 configuration register
 */

type PcrTwai0ConfRegT struct {
	Val c.Uint32T
}

/** Type of twai0_func_clk_conf register
 *  TWAI0_FUNC_CLK configuration register
 */

type PcrTwai0FuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of twai1_conf register
 *  TWAI1 configuration register
 */

type PcrTwai1ConfRegT struct {
	Val c.Uint32T
}

/** Type of twai1_func_clk_conf register
 *  TWAI1_FUNC_CLK configuration register
 */

type PcrTwai1FuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_conf register
 *  I2S configuration register
 */

type PcrI2sConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_tx_clkm_conf register
 *  I2S_TX_CLKM configuration register
 */

type PcrI2sTxClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_tx_clkm_div_conf register
 *  I2S_TX_CLKM_DIV configuration register
 */

type PcrI2sTxClkmDivConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_rx_clkm_conf register
 *  I2S_RX_CLKM configuration register
 */

type PcrI2sRxClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_rx_clkm_div_conf register
 *  I2S_RX_CLKM_DIV configuration register
 */

type PcrI2sRxClkmDivConfRegT struct {
	Val c.Uint32T
}

/** Type of saradc_conf register
 *  SARADC configuration register
 */

type PcrSaradcConfRegT struct {
	Val c.Uint32T
}

/** Type of saradc_clkm_conf register
 *  SARADC_CLKM configuration register
 */

type PcrSaradcClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of tsens_clk_conf register
 *  TSENS_CLK configuration register
 */

type PcrTsensClkConfRegT struct {
	Val c.Uint32T
}

/** Type of usb_device_conf register
 *  USB_DEVICE configuration register
 */

type PcrUsbDeviceConfRegT struct {
	Val c.Uint32T
}

/** Type of intmtx_conf register
 *  INTMTX configuration register
 */

type PcrIntmtxConfRegT struct {
	Val c.Uint32T
}

/** Type of pcnt_conf register
 *  PCNT configuration register
 */

type PcrPcntConfRegT struct {
	Val c.Uint32T
}

/** Type of etm_conf register
 *  ETM configuration register
 */

type PcrEtmConfRegT struct {
	Val c.Uint32T
}

/** Type of pwm_conf register
 *  PWM configuration register
 */

type PcrPwmConfRegT struct {
	Val c.Uint32T
}

/** Type of pwm_clk_conf register
 *  PWM_CLK configuration register
 */

type PcrPwmClkConfRegT struct {
	Val c.Uint32T
}

/** Type of parl_io_conf register
 *  PARL_IO configuration register
 */

type PcrParlIoConfRegT struct {
	Val c.Uint32T
}

/** Type of parl_clk_rx_conf register
 *  PARL_CLK_RX configuration register
 */

type PcrParlClkRxConfRegT struct {
	Val c.Uint32T
}

/** Type of parl_clk_tx_conf register
 *  PARL_CLK_TX configuration register
 */

type PcrParlClkTxConfRegT struct {
	Val c.Uint32T
}

/** Type of sdio_slave_conf register
 *  SDIO_SLAVE configuration register
 */

type PcrSdioSlaveConfRegT struct {
	Val c.Uint32T
}

/** Type of pvt_monitor_conf register
 *  PVT_MONITOR configuration register
 */

type PcrPvtMonitorConfRegT struct {
	Val c.Uint32T
}

/** Type of pvt_monitor_func_clk_conf register
 *  PVT_MONITOR function clock configuration register
 */

type PcrPvtMonitorFuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of gdma_conf register
 *  GDMA configuration register
 */

type PcrGdmaConfRegT struct {
	Val c.Uint32T
}

/** Type of spi2_conf register
 *  SPI2 configuration register
 */

type PcrSpi2ConfRegT struct {
	Val c.Uint32T
}

/** Type of spi2_clkm_conf register
 *  SPI2_CLKM configuration register
 */

type PcrSpi2ClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of aes_conf register
 *  AES configuration register
 */

type PcrAesConfRegT struct {
	Val c.Uint32T
}

/** Type of sha_conf register
 *  SHA configuration register
 */

type PcrShaConfRegT struct {
	Val c.Uint32T
}

/** Type of rsa_conf register
 *  RSA configuration register
 */

type PcrRsaConfRegT struct {
	Val c.Uint32T
}

/** Type of rsa_pd_ctrl register
 *  RSA power control register
 */

type PcrRsaPdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of ecc_conf register
 *  ECC configuration register
 */

type PcrEccConfRegT struct {
	Val c.Uint32T
}

/** Type of ecc_pd_ctrl register
 *  ECC power control register
 */

type PcrEccPdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of ds_conf register
 *  DS configuration register
 */

type PcrDsConfRegT struct {
	Val c.Uint32T
}

/** Type of hmac_conf register
 *  HMAC configuration register
 */

type PcrHmacConfRegT struct {
	Val c.Uint32T
}

/** Type of iomux_conf register
 *  IOMUX configuration register
 */

type PcrIomuxConfRegT struct {
	Val c.Uint32T
}

/** Type of iomux_clk_conf register
 *  IOMUX_CLK configuration register
 */

type PcrIomuxClkConfRegT struct {
	Val c.Uint32T
}

/** Type of mem_monitor_conf register
 *  MEM_MONITOR configuration register
 */

type PcrMemMonitorConfRegT struct {
	Val c.Uint32T
}

/** Type of regdma_conf register
 *  REGDMA configuration register
 */

type PcrRegdmaConfRegT struct {
	Val c.Uint32T
}

/** Type of retention_conf register
 *  retention configuration register
 */

type PcrRetentionConfRegT struct {
	Val c.Uint32T
}

/** Type of trace_conf register
 *  TRACE configuration register
 */

type PcrTraceConfRegT struct {
	Val c.Uint32T
}

/** Type of assist_conf register
 *  ASSIST configuration register
 */

type PcrAssistConfRegT struct {
	Val c.Uint32T
}

/** Type of cache_conf register
 *  CACHE configuration register
 */

type PcrCacheConfRegT struct {
	Val c.Uint32T
}

/** Type of modem_apb_conf register
 *  MODEM_APB configuration register
 */

type PcrModemApbConfRegT struct {
	Val c.Uint32T
}

/** Type of timeout_conf register
 *  TIMEOUT configuration register
 */

type PcrTimeoutConfRegT struct {
	Val c.Uint32T
}

/** Type of sysclk_conf register
 *  SYSCLK configuration register
 */

type PcrSysclkConfRegT struct {
	Val c.Uint32T
}

/** Type of cpu_waiti_conf register
 *  CPU_WAITI configuration register
 */

type PcrCpuWaitiConfRegT struct {
	Val c.Uint32T
}

/** Type of cpu_freq_conf register
 *  CPU_FREQ configuration register
 */

type PcrCpuFreqConfRegT struct {
	Val c.Uint32T
}

/** Type of ahb_freq_conf register
 *  AHB_FREQ configuration register
 */

type PcrAhbFreqConfRegT struct {
	Val c.Uint32T
}

/** Type of apb_freq_conf register
 *  APB_FREQ configuration register
 */

type PcrApbFreqConfRegT struct {
	Val c.Uint32T
}

/** Type of pll_div_clk_en register
 *  SPLL DIV clock-gating configuration register
 */

type PcrPllDivClkEnRegT struct {
	Val c.Uint32T
}

/** Type of ctrl_clk_out_en register
 *  CLK_OUT_EN configuration register
 */

type PcrCtrlClkOutEnRegT struct {
	Val c.Uint32T
}

/** Type of ctrl_tick_conf register
 *  TICK configuration register
 */

type PcrCtrlTickConfRegT struct {
	Val c.Uint32T
}

/** Type of ctrl_32k_conf register
 *  32KHz clock configuration register
 */

type PcrCtrl32kConfRegT struct {
	Val c.Uint32T
}

/** Type of sram_power_conf register
 *  HP SRAM/ROM configuration register
 */

type PcrSramPowerConfRegT struct {
	Val c.Uint32T
}

/** Type of reset_event_bypass register
 *  reset event bypass backdoor configuration register
 */

type PcrResetEventBypassRegT struct {
	Val c.Uint32T
}

/** Type of clock_gate register
 *  PCR clock gating configure register
 */

type PcrClockGateRegT struct {
	Val c.Uint32T
}

/** Group: Frequency Statistics Register */
/** Type of sysclk_freq_query_0 register
 *  SYSCLK frequency query 0 register
 */

type PcrSysclkFreqQuery0RegT struct {
	Val c.Uint32T
}

/** Group: FPGA Debug Register */
/** Type of fpga_debug register
 *  fpga debug register
 */

type PcrFpgaDebugRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  Date register.
 */

type PcrDateRegT struct {
	Val c.Uint32T
}

type PcrDevT struct {
	Uart0Conf               PcrUart0ConfRegT
	Uart0SclkConf           PcrUart0SclkConfRegT
	Uart0PdCtrl             PcrUart0PdCtrlRegT
	Uart1Conf               PcrUart1ConfRegT
	Uart1SclkConf           PcrUart1SclkConfRegT
	Uart1PdCtrl             PcrUart1PdCtrlRegT
	MspiConf                PcrMspiConfRegT
	MspiClkConf             PcrMspiClkConfRegT
	I2cConf                 PcrI2cConfRegT
	I2cSclkConf             PcrI2cSclkConfRegT
	UhciConf                PcrUhciConfRegT
	RmtConf                 PcrRmtConfRegT
	RmtSclkConf             PcrRmtSclkConfRegT
	LedcConf                PcrLedcConfRegT
	LedcSclkConf            PcrLedcSclkConfRegT
	Timergroup0Conf         PcrTimergroup0ConfRegT
	Timergroup0TimerClkConf PcrTimergroup0TimerClkConfRegT
	Timergroup0WdtClkConf   PcrTimergroup0WdtClkConfRegT
	Timergroup1Conf         PcrTimergroup1ConfRegT
	Timergroup1TimerClkConf PcrTimergroup1TimerClkConfRegT
	Timergroup1WdtClkConf   PcrTimergroup1WdtClkConfRegT
	SystimerConf            PcrSystimerConfRegT
	SystimerFuncClkConf     PcrSystimerFuncClkConfRegT
	Twai0Conf               PcrTwai0ConfRegT
	Twai0FuncClkConf        PcrTwai0FuncClkConfRegT
	Twai1Conf               PcrTwai1ConfRegT
	Twai1FuncClkConf        PcrTwai1FuncClkConfRegT
	I2sConf                 PcrI2sConfRegT
	I2sTxClkmConf           PcrI2sTxClkmConfRegT
	I2sTxClkmDivConf        PcrI2sTxClkmDivConfRegT
	I2sRxClkmConf           PcrI2sRxClkmConfRegT
	I2sRxClkmDivConf        PcrI2sRxClkmDivConfRegT
	SaradcConf              PcrSaradcConfRegT
	SaradcClkmConf          PcrSaradcClkmConfRegT
	TsensClkConf            PcrTsensClkConfRegT
	UsbDeviceConf           PcrUsbDeviceConfRegT
	IntmtxConf              PcrIntmtxConfRegT
	PcntConf                PcrPcntConfRegT
	EtmConf                 PcrEtmConfRegT
	PwmConf                 PcrPwmConfRegT
	PwmClkConf              PcrPwmClkConfRegT
	ParlIoConf              PcrParlIoConfRegT
	ParlClkRxConf           PcrParlClkRxConfRegT
	ParlClkTxConf           PcrParlClkTxConfRegT
	SdioSlaveConf           PcrSdioSlaveConfRegT
	PvtMonitorConf          PcrPvtMonitorConfRegT
	PvtMonitorFuncClkConf   PcrPvtMonitorFuncClkConfRegT
	GdmaConf                PcrGdmaConfRegT
	Spi2Conf                PcrSpi2ConfRegT
	Spi2ClkmConf            PcrSpi2ClkmConfRegT
	AesConf                 PcrAesConfRegT
	ShaConf                 PcrShaConfRegT
	RsaConf                 PcrRsaConfRegT
	RsaPdCtrl               PcrRsaPdCtrlRegT
	EccConf                 PcrEccConfRegT
	EccPdCtrl               PcrEccPdCtrlRegT
	DsConf                  PcrDsConfRegT
	HmacConf                PcrHmacConfRegT
	IomuxConf               PcrIomuxConfRegT
	IomuxClkConf            PcrIomuxClkConfRegT
	MemMonitorConf          PcrMemMonitorConfRegT
	RegdmaConf              PcrRegdmaConfRegT
	RetentionConf           PcrRetentionConfRegT
	TraceConf               PcrTraceConfRegT
	AssistConf              PcrAssistConfRegT
	CacheConf               PcrCacheConfRegT
	ModemApbConf            PcrModemApbConfRegT
	TimeoutConf             PcrTimeoutConfRegT
	SysclkConf              PcrSysclkConfRegT
	CpuWaitiConf            PcrCpuWaitiConfRegT
	CpuFreqConf             PcrCpuFreqConfRegT
	AhbFreqConf             PcrAhbFreqConfRegT
	ApbFreqConf             PcrApbFreqConfRegT
	SysclkFreqQuery0        PcrSysclkFreqQuery0RegT
	PllDivClkEn             PcrPllDivClkEnRegT
	CtrlClkOutEn            PcrCtrlClkOutEnRegT
	CtrlTickConf            PcrCtrlTickConfRegT
	Ctrl32kConf             PcrCtrl32kConfRegT
	SramPowerConf           PcrSramPowerConfRegT
	Reserved13c             [941]c.Uint32T
	ResetEventBypass        PcrResetEventBypassRegT
	FpgaDebug               PcrFpgaDebugRegT
	ClockGate               PcrClockGateRegT
	Date                    PcrDateRegT
}
type SpimemFlashLlClockRegT c.Uint

type SpiFlashLlClockRegT struct {
	Gpspi GpspiFlashLlClockRegT
}

/**
 * Generic driver context structure for all chips using the SPI peripheral.
 * Include this into the HEAD of the driver data for other driver
 * implementations that also use the SPI peripheral.
 */

type SpiFlashHalContextT struct {
	Inst         SpiFlashHostInstT
	Spi          *SpiDevT
	CsNum        c.Int
	ClockConf    SpiFlashLlClockRegT
	BaseIoMode   EspFlashIoModeT
	Flags        c.Uint32T
	SusCfg       SpiFlashSusCmdConf
	SlicerFlags  c.Uint32T
	FreqMhz      c.Int
	TsusVal      c.Uint8T
	AutoWaitiPes bool
}

// / This struct provide MSPI Flash necessary timing related config, should be consistent with that in union in `spi_flash_hal_config_t`.
type SpiFlashHalTimingConfigT struct {
	ExtraDummy  c.Uint32T
	CsHold      c.Uint32T
	CsSetup     c.Uint8T
	ClockConfig SpiFlashLlClockRegT
}

// / Configuration structure for the SPI driver.
type SpiFlashHalConfigT struct {
	Iomux             bool
	InputDelayNs      c.Int
	Speed             EspFlashSpeedS
	HostId            SpiHostDeviceT
	CsNum             c.Int
	AutoSusEn         bool
	OctalModeEn       bool
	UsingTimingTuning bool
	DefaultIoMode     EspFlashIoModeT
	FreqMhz           c.Int
	ClockSrcFreq      c.Int
	TsusVal           c.Uint8T
	AutoWaitiPes      bool
}

/**
 * @brief Structure for flash dummy bits.
 *        For some flash chips, dummy bits are configurable under different conditions.
 */

type SpiFlashHpmDummyConfT struct {
	DioDummy    c.Uint8T
	DoutDummy   c.Uint8T
	QioDummy    c.Uint8T
	QoutDummy   c.Uint8T
	FastrdDummy c.Uint8T
}
type SpiFlashRequirementT c.Int

const (
	SPI_FLASH_HPM_CMD_NEEDED      SpiFlashRequirementT = 0
	SPI_FLASH_HPM_DUMMY_NEEDED    SpiFlashRequirementT = 1
	SPI_FLASH_HPM_WRITE_SR_NEEDED SpiFlashRequirementT = 2
	SPI_FLASH_HPM_UNNEEDED        SpiFlashRequirementT = 3
	SPI_FLASH_HPM_BEYOND_LIMIT    SpiFlashRequirementT = 4
)

// llgo:type C
type SpiFlashHpmEnableFnT func()

// llgo:type C
type SpiFlashHpfCheckFnT func() EspErrT

// llgo:type C
type SpiFlashGetChipDummyFnT func(*SpiFlashHpmDummyConfT)

// llgo:type C
type SpiFlashHpmProbeFnT func(c.Uint32T) EspErrT

// llgo:type C
type SpiFlashHpmChipRequirementCheckT func(c.Uint32T, c.Uint32T, c.Int, c.Int) SpiFlashRequirementT

type SpiFlashHpmInfoT struct {
	Method                  *c.Char
	Probe                   SpiFlashHpmProbeFnT
	ChipHpmRequirementCheck SpiFlashHpmChipRequirementCheckT
	FlashHpmEnable          SpiFlashHpmEnableFnT
	FlashHpfCheck           SpiFlashHpfCheckFnT
	FlashGetDummy           SpiFlashGetChipDummyFnT
}
type SpiFlashWrapSizeT c.Int

const (
	FLASH_WRAP_SIZE_8B  SpiFlashWrapSizeT = 8
	FLASH_WRAP_SIZE_16B SpiFlashWrapSizeT = 16
	FLASH_WRAP_SIZE_32B SpiFlashWrapSizeT = 32
	FLASH_WRAP_SIZE_64B SpiFlashWrapSizeT = 64
)

// llgo:type C
type SpiFlashWrapProbeFnT func(c.Uint32T) EspErrT

// llgo:type C
type SpiFlashWrapSetFnT func(SpiFlashWrapSizeT) EspErrT

// llgo:type C
type SpiFlashWrapClrFnT func() EspErrT

type SpiFlashWrapInfoT struct {
	Method      *c.Char
	Probe       SpiFlashWrapProbeFnT
	ChipWrapSet SpiFlashWrapSetFnT
	ChipWrapClr SpiFlashWrapClrFnT
}
type EspMspiIoT c.Int

const (
	ESP_MSPI_IO_CLK EspMspiIoT = 0
	ESP_MSPI_IO_Q   EspMspiIoT = 1
	ESP_MSPI_IO_D   EspMspiIoT = 2
	ESP_MSPI_IO_CS0 EspMspiIoT = 3
	ESP_MSPI_IO_HD  EspMspiIoT = 4
	ESP_MSPI_IO_WP  EspMspiIoT = 5
	ESP_MSPI_IO_MAX EspMspiIoT = 6
)

// llgo:type C
type SpiFlashGuardStartFuncT func()

// llgo:type C
type SpiFlashGuardEndFuncT func()

/**
 * Structure holding SPI flash access critical sections management functions.
 *
 * Flash API uses two types of flash access management functions:
 * 1) Functions which prepare/restore flash cache and interrupts before calling
 *    appropriate ROM functions (SPIWrite, SPIRead and SPIEraseBlock):
 *   - 'start' function should disables flash cache and non-IRAM interrupts and
 *      is invoked before the call to one of ROM function above.
 *   - 'end' function should restore state of flash cache and non-IRAM interrupts and
 *      is invoked after the call to one of ROM function above.
 *    These two functions are not recursive.
 *
 * Different versions of the guarding functions should be used depending on the context of
 * execution (with or without functional OS). In normal conditions when flash API is called
 * from task the functions use OS primitives. When there is no OS at all or when
 * it is not guaranteed that OS is functional (accessing flash from exception handler) these
 * functions cannot use OS primitives or even does not need them (multithreaded access is not possible).
 *
 * @note Structure and corresponding guard functions should not reside in flash.
 *       For example structure can be placed in DRAM and functions in IRAM sections.
 */

type SpiFlashGuardFuncsT struct {
	Start SpiFlashGuardStartFuncT
	End   SpiFlashGuardEndFuncT
}
