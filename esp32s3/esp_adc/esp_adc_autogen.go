package esp_adc

import (
	"github.com/goplus/lib/c"
	_ "unsafe"
)

const X__has_safe_buffers = 1
const X__DARWIN_ONLY_64_BIT_INO_T = 1
const X__DARWIN_ONLY_UNIX_CONFORMANCE = 1
const X__DARWIN_ONLY_VERS_1050 = 1
const X__DARWIN_UNIX03 = 1
const X__DARWIN_64_BIT_INO_T = 1
const X__DARWIN_VERS_1050 = 1
const X__DARWIN_NON_CANCELABLE = 0
const X__DARWIN_SUF_EXTSN = "$DARWIN_EXTSN"
const X__STDC_WANT_LIB_EXT1__ = 1
const X__DARWIN_NO_LONG_LONG = 0
const X_DARWIN_FEATURE_64_BIT_INODE = 1
const X_DARWIN_FEATURE_ONLY_64_BIT_INODE = 1
const X_DARWIN_FEATURE_ONLY_VERS_1050 = 1
const X_DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1
const X_DARWIN_FEATURE_UNIX_CONFORMANCE = 3
const X__has_ptrcheck = 0
const X__WORDSIZE = 64
const X__PTHREAD_SIZE__ = 8176
const X__PTHREAD_ATTR_SIZE__ = 56
const X__PTHREAD_MUTEXATTR_SIZE__ = 8
const X__PTHREAD_MUTEX_SIZE__ = 56
const X__PTHREAD_CONDATTR_SIZE__ = 8
const X__PTHREAD_COND_SIZE__ = 40
const X__PTHREAD_ONCE_SIZE__ = 8
const X__PTHREAD_RWLOCK_SIZE__ = 192
const X__PTHREAD_RWLOCKATTR_SIZE__ = 16
const INT8_MAX = 127
const INT16_MAX = 32767
const INT32_MAX = 2147483647
const UINT8_MAX = 255
const UINT16_MAX = 65535
const X__bool_true_false_are_defined = 1
const True = 1
const False = 0
const X__API_TO_BE_DEPRECATED = 100000
const X__API_TO_BE_DEPRECATED_MACOS = 100000
const X__API_TO_BE_DEPRECATED_IOS = 100000
const X__API_TO_BE_DEPRECATED_MACCATALYST = 100000
const X__API_TO_BE_DEPRECATED_WATCHOS = 100000
const X__API_TO_BE_DEPRECATED_TVOS = 100000
const X__API_TO_BE_DEPRECATED_DRIVERKIT = 100000
const X__API_TO_BE_DEPRECATED_VISIONOS = 100000
const X__MAC_10_0 = 1000
const X__MAC_10_1 = 1010
const X__MAC_10_2 = 1020
const X__MAC_10_3 = 1030
const X__MAC_10_4 = 1040
const X__MAC_10_5 = 1050
const X__MAC_10_6 = 1060
const X__MAC_10_7 = 1070
const X__MAC_10_8 = 1080
const X__MAC_10_9 = 1090
const X__MAC_10_10 = 101000
const X__MAC_10_10_2 = 101002
const X__MAC_10_10_3 = 101003
const X__MAC_10_11 = 101100
const X__MAC_10_11_2 = 101102
const X__MAC_10_11_3 = 101103
const X__MAC_10_11_4 = 101104
const X__MAC_10_12 = 101200
const X__MAC_10_12_1 = 101201
const X__MAC_10_12_2 = 101202
const X__MAC_10_12_4 = 101204
const X__MAC_10_13 = 101300
const X__MAC_10_13_1 = 101301
const X__MAC_10_13_2 = 101302
const X__MAC_10_13_4 = 101304
const X__MAC_10_14 = 101400
const X__MAC_10_14_1 = 101401
const X__MAC_10_14_4 = 101404
const X__MAC_10_14_5 = 101405
const X__MAC_10_14_6 = 101406
const X__MAC_10_15 = 101500
const X__MAC_10_15_1 = 101501
const X__MAC_10_15_4 = 101504
const X__MAC_10_16 = 101600
const X__MAC_11_0 = 110000
const X__MAC_11_1 = 110100
const X__MAC_11_3 = 110300
const X__MAC_11_4 = 110400
const X__MAC_11_5 = 110500
const X__MAC_11_6 = 110600
const X__MAC_12_0 = 120000
const X__MAC_12_1 = 120100
const X__MAC_12_2 = 120200
const X__MAC_12_3 = 120300
const X__MAC_12_4 = 120400
const X__MAC_12_5 = 120500
const X__MAC_12_6 = 120600
const X__MAC_12_7 = 120700
const X__MAC_13_0 = 130000
const X__MAC_13_1 = 130100
const X__MAC_13_2 = 130200
const X__MAC_13_3 = 130300
const X__MAC_13_4 = 130400
const X__MAC_13_5 = 130500
const X__MAC_13_6 = 130600
const X__MAC_14_0 = 140000
const X__MAC_14_1 = 140100
const X__MAC_14_2 = 140200
const X__MAC_14_3 = 140300
const X__MAC_14_4 = 140400
const X__IPHONE_2_0 = 20000
const X__IPHONE_2_1 = 20100
const X__IPHONE_2_2 = 20200
const X__IPHONE_3_0 = 30000
const X__IPHONE_3_1 = 30100
const X__IPHONE_3_2 = 30200
const X__IPHONE_4_0 = 40000
const X__IPHONE_4_1 = 40100
const X__IPHONE_4_2 = 40200
const X__IPHONE_4_3 = 40300
const X__IPHONE_5_0 = 50000
const X__IPHONE_5_1 = 50100
const X__IPHONE_6_0 = 60000
const X__IPHONE_6_1 = 60100
const X__IPHONE_7_0 = 70000
const X__IPHONE_7_1 = 70100
const X__IPHONE_8_0 = 80000
const X__IPHONE_8_1 = 80100
const X__IPHONE_8_2 = 80200
const X__IPHONE_8_3 = 80300
const X__IPHONE_8_4 = 80400
const X__IPHONE_9_0 = 90000
const X__IPHONE_9_1 = 90100
const X__IPHONE_9_2 = 90200
const X__IPHONE_9_3 = 90300
const X__IPHONE_10_0 = 100000
const X__IPHONE_10_1 = 100100
const X__IPHONE_10_2 = 100200
const X__IPHONE_10_3 = 100300
const X__IPHONE_11_0 = 110000
const X__IPHONE_11_1 = 110100
const X__IPHONE_11_2 = 110200
const X__IPHONE_11_3 = 110300
const X__IPHONE_11_4 = 110400
const X__IPHONE_12_0 = 120000
const X__IPHONE_12_1 = 120100
const X__IPHONE_12_2 = 120200
const X__IPHONE_12_3 = 120300
const X__IPHONE_12_4 = 120400
const X__IPHONE_13_0 = 130000
const X__IPHONE_13_1 = 130100
const X__IPHONE_13_2 = 130200
const X__IPHONE_13_3 = 130300
const X__IPHONE_13_4 = 130400
const X__IPHONE_13_5 = 130500
const X__IPHONE_13_6 = 130600
const X__IPHONE_13_7 = 130700
const X__IPHONE_14_0 = 140000
const X__IPHONE_14_1 = 140100
const X__IPHONE_14_2 = 140200
const X__IPHONE_14_3 = 140300
const X__IPHONE_14_5 = 140500
const X__IPHONE_14_4 = 140400
const X__IPHONE_14_6 = 140600
const X__IPHONE_14_7 = 140700
const X__IPHONE_14_8 = 140800
const X__IPHONE_15_0 = 150000
const X__IPHONE_15_1 = 150100
const X__IPHONE_15_2 = 150200
const X__IPHONE_15_3 = 150300
const X__IPHONE_15_4 = 150400
const X__IPHONE_15_5 = 150500
const X__IPHONE_15_6 = 150600
const X__IPHONE_15_7 = 150700
const X__IPHONE_15_8 = 150800
const X__IPHONE_16_0 = 160000
const X__IPHONE_16_1 = 160100
const X__IPHONE_16_2 = 160200
const X__IPHONE_16_3 = 160300
const X__IPHONE_16_4 = 160400
const X__IPHONE_16_5 = 160500
const X__IPHONE_16_6 = 160600
const X__IPHONE_16_7 = 160700
const X__IPHONE_17_0 = 170000
const X__IPHONE_17_1 = 170100
const X__IPHONE_17_2 = 170200
const X__IPHONE_17_3 = 170300
const X__IPHONE_17_4 = 170400
const X__WATCHOS_1_0 = 10000
const X__WATCHOS_2_0 = 20000
const X__WATCHOS_2_1 = 20100
const X__WATCHOS_2_2 = 20200
const X__WATCHOS_3_0 = 30000
const X__WATCHOS_3_1 = 30100
const X__WATCHOS_3_1_1 = 30101
const X__WATCHOS_3_2 = 30200
const X__WATCHOS_4_0 = 40000
const X__WATCHOS_4_1 = 40100
const X__WATCHOS_4_2 = 40200
const X__WATCHOS_4_3 = 40300
const X__WATCHOS_5_0 = 50000
const X__WATCHOS_5_1 = 50100
const X__WATCHOS_5_2 = 50200
const X__WATCHOS_5_3 = 50300
const X__WATCHOS_6_0 = 60000
const X__WATCHOS_6_1 = 60100
const X__WATCHOS_6_2 = 60200
const X__WATCHOS_7_0 = 70000
const X__WATCHOS_7_1 = 70100
const X__WATCHOS_7_2 = 70200
const X__WATCHOS_7_3 = 70300
const X__WATCHOS_7_4 = 70400
const X__WATCHOS_7_5 = 70500
const X__WATCHOS_7_6 = 70600
const X__WATCHOS_8_0 = 80000
const X__WATCHOS_8_1 = 80100
const X__WATCHOS_8_3 = 80300
const X__WATCHOS_8_4 = 80400
const X__WATCHOS_8_5 = 80500
const X__WATCHOS_8_6 = 80600
const X__WATCHOS_8_7 = 80700
const X__WATCHOS_8_8 = 80800
const X__WATCHOS_9_0 = 90000
const X__WATCHOS_9_1 = 90100
const X__WATCHOS_9_2 = 90200
const X__WATCHOS_9_3 = 90300
const X__WATCHOS_9_4 = 90400
const X__WATCHOS_9_5 = 90500
const X__WATCHOS_9_6 = 90600
const X__WATCHOS_10_0 = 100000
const X__WATCHOS_10_1 = 100100
const X__WATCHOS_10_2 = 100200
const X__WATCHOS_10_3 = 100300
const X__WATCHOS_10_4 = 100400
const X__TVOS_9_0 = 90000
const X__TVOS_9_1 = 90100
const X__TVOS_9_2 = 90200
const X__TVOS_10_0 = 100000
const X__TVOS_10_0_1 = 100001
const X__TVOS_10_1 = 100100
const X__TVOS_10_2 = 100200
const X__TVOS_11_0 = 110000
const X__TVOS_11_1 = 110100
const X__TVOS_11_2 = 110200
const X__TVOS_11_3 = 110300
const X__TVOS_11_4 = 110400
const X__TVOS_12_0 = 120000
const X__TVOS_12_1 = 120100
const X__TVOS_12_2 = 120200
const X__TVOS_12_3 = 120300
const X__TVOS_12_4 = 120400
const X__TVOS_13_0 = 130000
const X__TVOS_13_2 = 130200
const X__TVOS_13_3 = 130300
const X__TVOS_13_4 = 130400
const X__TVOS_14_0 = 140000
const X__TVOS_14_1 = 140100
const X__TVOS_14_2 = 140200
const X__TVOS_14_3 = 140300
const X__TVOS_14_5 = 140500
const X__TVOS_14_6 = 140600
const X__TVOS_14_7 = 140700
const X__TVOS_15_0 = 150000
const X__TVOS_15_1 = 150100
const X__TVOS_15_2 = 150200
const X__TVOS_15_3 = 150300
const X__TVOS_15_4 = 150400
const X__TVOS_15_5 = 150500
const X__TVOS_15_6 = 150600
const X__TVOS_16_0 = 160000
const X__TVOS_16_1 = 160100
const X__TVOS_16_2 = 160200
const X__TVOS_16_3 = 160300
const X__TVOS_16_4 = 160400
const X__TVOS_16_5 = 160500
const X__TVOS_16_6 = 160600
const X__TVOS_17_0 = 170000
const X__TVOS_17_1 = 170100
const X__TVOS_17_2 = 170200
const X__TVOS_17_3 = 170300
const X__TVOS_17_4 = 170400
const X__BRIDGEOS_2_0 = 20000
const X__BRIDGEOS_3_0 = 30000
const X__BRIDGEOS_3_1 = 30100
const X__BRIDGEOS_3_4 = 30400
const X__BRIDGEOS_4_0 = 40000
const X__BRIDGEOS_4_1 = 40100
const X__BRIDGEOS_5_0 = 50000
const X__BRIDGEOS_5_1 = 50100
const X__BRIDGEOS_5_3 = 50300
const X__BRIDGEOS_6_0 = 60000
const X__BRIDGEOS_6_2 = 60200
const X__BRIDGEOS_6_4 = 60400
const X__BRIDGEOS_6_5 = 60500
const X__BRIDGEOS_6_6 = 60600
const X__BRIDGEOS_7_0 = 70000
const X__BRIDGEOS_7_1 = 70100
const X__BRIDGEOS_7_2 = 70200
const X__BRIDGEOS_7_3 = 70300
const X__BRIDGEOS_7_4 = 70400
const X__BRIDGEOS_7_6 = 70600
const X__BRIDGEOS_8_0 = 80000
const X__BRIDGEOS_8_1 = 80100
const X__BRIDGEOS_8_2 = 80200
const X__BRIDGEOS_8_3 = 80300
const X__BRIDGEOS_8_4 = 80400
const X__DRIVERKIT_19_0 = 190000
const X__DRIVERKIT_20_0 = 200000
const X__DRIVERKIT_21_0 = 210000
const X__DRIVERKIT_22_0 = 220000
const X__DRIVERKIT_22_4 = 220400
const X__DRIVERKIT_22_5 = 220500
const X__DRIVERKIT_22_6 = 220600
const X__DRIVERKIT_23_0 = 230000
const X__DRIVERKIT_23_1 = 230100
const X__DRIVERKIT_23_2 = 230200
const X__DRIVERKIT_23_3 = 230300
const X__DRIVERKIT_23_4 = 230400
const X__VISIONOS_1_0 = 10000
const X__VISIONOS_1_1 = 10100
const X__ENABLE_LEGACY_MAC_AVAILABILITY = 1
const X_FORTIFY_SOURCE = 2
const RENAME_SECLUDE = 0x00000001
const RENAME_SWAP = 0x00000002
const RENAME_EXCL = 0x00000004
const RENAME_RESERVED1 = 0x00000008
const RENAME_NOFOLLOW_ANY = 0x00000010
const SEEK_SET = 0
const SEEK_CUR = 1
const SEEK_END = 2
const SEEK_HOLE = 3
const SEEK_DATA = 4
const X__SLBF = 0x0001
const X__SNBF = 0x0002
const X__SRD = 0x0004
const X__SWR = 0x0008
const X__SRW = 0x0010
const X__SEOF = 0x0020
const X__SERR = 0x0040
const X__SMBF = 0x0080
const X__SAPP = 0x0100
const X__SSTR = 0x0200
const X__SOPT = 0x0400
const X__SNPT = 0x0800
const X__SOFF = 0x1000
const X__SMOD = 0x2000
const X__SALC = 0x4000
const X__SIGN = 0x8000
const X_IOFBF = 0
const X_IOLBF = 1
const X_IONBF = 2
const BUFSIZ = 1024
const FOPEN_MAX = 20
const FILENAME_MAX = 1024
const P_tmpdir = "/var/tmp/"
const L_tmpnam = 1024
const TMP_MAX = 308915776
const L_ctermid = 1024
const X_USE_FORTIFY_LEVEL = 2
const CONFIG_SOC_MPU_MIN_REGION_SIZE = 0x20000000
const CONFIG_SOC_MPU_REGIONS_MAX_NUM = 8
const CONFIG_SOC_ADC_SUPPORTED = 1
const CONFIG_SOC_UART_SUPPORTED = 1
const CONFIG_SOC_PCNT_SUPPORTED = 1
const CONFIG_SOC_PHY_SUPPORTED = 1
const CONFIG_SOC_WIFI_SUPPORTED = 1
const CONFIG_SOC_TWAI_SUPPORTED = 1
const CONFIG_SOC_GDMA_SUPPORTED = 1
const CONFIG_SOC_AHB_GDMA_SUPPORTED = 1
const CONFIG_SOC_GPTIMER_SUPPORTED = 1
const CONFIG_SOC_LCDCAM_SUPPORTED = 1
const CONFIG_SOC_LCDCAM_I80_LCD_SUPPORTED = 1
const CONFIG_SOC_LCDCAM_RGB_LCD_SUPPORTED = 1
const CONFIG_SOC_MCPWM_SUPPORTED = 1
const CONFIG_SOC_DEDICATED_GPIO_SUPPORTED = 1
const CONFIG_SOC_CACHE_SUPPORT_WRAP = 1
const CONFIG_SOC_ULP_SUPPORTED = 1
const CONFIG_SOC_ULP_FSM_SUPPORTED = 1
const CONFIG_SOC_RISCV_COPROC_SUPPORTED = 1
const CONFIG_SOC_BT_SUPPORTED = 1
const CONFIG_SOC_USB_OTG_SUPPORTED = 1
const CONFIG_SOC_USB_SERIAL_JTAG_SUPPORTED = 1
const CONFIG_SOC_CCOMP_TIMER_SUPPORTED = 1
const CONFIG_SOC_ASYNC_MEMCPY_SUPPORTED = 1
const CONFIG_SOC_SUPPORTS_SECURE_DL_MODE = 1
const CONFIG_SOC_EFUSE_KEY_PURPOSE_FIELD = 1
const CONFIG_SOC_EFUSE_SUPPORTED = 1
const CONFIG_SOC_SDMMC_HOST_SUPPORTED = 1
const CONFIG_SOC_RTC_FAST_MEM_SUPPORTED = 1
const CONFIG_SOC_RTC_SLOW_MEM_SUPPORTED = 1
const CONFIG_SOC_RTC_MEM_SUPPORTED = 1
const CONFIG_SOC_PSRAM_DMA_CAPABLE = 1
const CONFIG_SOC_XT_WDT_SUPPORTED = 1
const CONFIG_SOC_I2S_SUPPORTED = 1
const CONFIG_SOC_RMT_SUPPORTED = 1
const CONFIG_SOC_SDM_SUPPORTED = 1
const CONFIG_SOC_GPSPI_SUPPORTED = 1
const CONFIG_SOC_LEDC_SUPPORTED = 1
const CONFIG_SOC_I2C_SUPPORTED = 1
const CONFIG_SOC_SYSTIMER_SUPPORTED = 1
const CONFIG_SOC_SUPPORT_COEXISTENCE = 1
const CONFIG_SOC_TEMP_SENSOR_SUPPORTED = 1
const CONFIG_SOC_AES_SUPPORTED = 1
const CONFIG_SOC_MPI_SUPPORTED = 1
const CONFIG_SOC_SHA_SUPPORTED = 1
const CONFIG_SOC_HMAC_SUPPORTED = 1
const CONFIG_SOC_DIG_SIGN_SUPPORTED = 1
const CONFIG_SOC_FLASH_ENC_SUPPORTED = 1
const CONFIG_SOC_SECURE_BOOT_SUPPORTED = 1
const CONFIG_SOC_MEMPROT_SUPPORTED = 1
const CONFIG_SOC_TOUCH_SENSOR_SUPPORTED = 1
const CONFIG_SOC_BOD_SUPPORTED = 1
const CONFIG_SOC_CLK_TREE_SUPPORTED = 1
const CONFIG_SOC_MPU_SUPPORTED = 1
const CONFIG_SOC_WDT_SUPPORTED = 1
const CONFIG_SOC_SPI_FLASH_SUPPORTED = 1
const CONFIG_SOC_RNG_SUPPORTED = 1
const CONFIG_SOC_LIGHT_SLEEP_SUPPORTED = 1
const CONFIG_SOC_DEEP_SLEEP_SUPPORTED = 1
const CONFIG_SOC_LP_PERIPH_SHARE_INTERRUPT = 1
const CONFIG_SOC_PM_SUPPORTED = 1
const CONFIG_SOC_SIMD_INSTRUCTION_SUPPORTED = 1
const CONFIG_SOC_XTAL_SUPPORT_40M = 1
const CONFIG_SOC_APPCPU_HAS_CLOCK_GATING_BUG = 1
const CONFIG_SOC_ADC_RTC_CTRL_SUPPORTED = 1
const CONFIG_SOC_ADC_DIG_CTRL_SUPPORTED = 1
const CONFIG_SOC_ADC_ARBITER_SUPPORTED = 1
const CONFIG_SOC_ADC_DIG_IIR_FILTER_SUPPORTED = 1
const CONFIG_SOC_ADC_MONITOR_SUPPORTED = 1
const CONFIG_SOC_ADC_DMA_SUPPORTED = 1
const CONFIG_SOC_ADC_PERIPH_NUM = 2
const CONFIG_SOC_ADC_MAX_CHANNEL_NUM = 10
const CONFIG_SOC_ADC_ATTEN_NUM = 4
const CONFIG_SOC_ADC_DIGI_CONTROLLER_NUM = 2
const CONFIG_SOC_ADC_PATT_LEN_MAX = 24
const CONFIG_SOC_ADC_DIGI_MIN_BITWIDTH = 12
const CONFIG_SOC_ADC_DIGI_MAX_BITWIDTH = 12
const CONFIG_SOC_ADC_DIGI_RESULT_BYTES = 4
const CONFIG_SOC_ADC_DIGI_DATA_BYTES_PER_CONV = 4
const CONFIG_SOC_ADC_DIGI_IIR_FILTER_NUM = 2
const CONFIG_SOC_ADC_DIGI_MONITOR_NUM = 2
const CONFIG_SOC_ADC_SAMPLE_FREQ_THRES_HIGH = 83333
const CONFIG_SOC_ADC_SAMPLE_FREQ_THRES_LOW = 611
const CONFIG_SOC_ADC_RTC_MIN_BITWIDTH = 12
const CONFIG_SOC_ADC_RTC_MAX_BITWIDTH = 12
const CONFIG_SOC_ADC_CALIBRATION_V1_SUPPORTED = 1
const CONFIG_SOC_ADC_SELF_HW_CALI_SUPPORTED = 1
const CONFIG_SOC_ADC_SHARED_POWER = 1
const CONFIG_SOC_APB_BACKUP_DMA = 1
const CONFIG_SOC_BROWNOUT_RESET_SUPPORTED = 1
const CONFIG_SOC_CACHE_WRITEBACK_SUPPORTED = 1
const CONFIG_SOC_CACHE_FREEZE_SUPPORTED = 1
const CONFIG_SOC_CPU_CORES_NUM = 2
const CONFIG_SOC_CPU_INTR_NUM = 32
const CONFIG_SOC_CPU_HAS_FPU = 1
const CONFIG_SOC_HP_CPU_HAS_MULTIPLE_CORES = 1
const CONFIG_SOC_CPU_BREAKPOINTS_NUM = 2
const CONFIG_SOC_CPU_WATCHPOINTS_NUM = 2
const CONFIG_SOC_CPU_WATCHPOINT_MAX_REGION_SIZE = 64
const CONFIG_SOC_SIMD_PREFERRED_DATA_ALIGNMENT = 16
const CONFIG_SOC_DS_SIGNATURE_MAX_BIT_LEN = 4096
const CONFIG_SOC_DS_KEY_PARAM_MD_IV_LENGTH = 16
const CONFIG_SOC_DS_KEY_CHECK_MAX_WAIT_US = 1100
const CONFIG_SOC_AHB_GDMA_VERSION = 1
const CONFIG_SOC_GDMA_NUM_GROUPS_MAX = 1
const CONFIG_SOC_GDMA_PAIRS_PER_GROUP = 5
const CONFIG_SOC_GDMA_PAIRS_PER_GROUP_MAX = 5
const CONFIG_SOC_AHB_GDMA_SUPPORT_PSRAM = 1
const CONFIG_SOC_GPIO_PORT = 1
const CONFIG_SOC_GPIO_PIN_COUNT = 49
const CONFIG_SOC_GPIO_SUPPORT_PIN_GLITCH_FILTER = 1
const CONFIG_SOC_GPIO_FILTER_CLK_SUPPORT_APB = 1
const CONFIG_SOC_GPIO_SUPPORT_RTC_INDEPENDENT = 1
const CONFIG_SOC_GPIO_SUPPORT_FORCE_HOLD = 1
const CONFIG_SOC_GPIO_VALID_GPIO_MASK = 0x1FFFFFFFFFFFF
const CONFIG_SOC_GPIO_IN_RANGE_MAX = 48
const CONFIG_SOC_GPIO_OUT_RANGE_MAX = 48
const CONFIG_SOC_GPIO_VALID_DIGITAL_IO_PAD_MASK = 0x0001FFFFFC000000
const CONFIG_SOC_GPIO_CLOCKOUT_BY_IO_MUX = 1
const CONFIG_SOC_GPIO_CLOCKOUT_CHANNEL_NUM = 3
const CONFIG_SOC_GPIO_SUPPORT_HOLD_IO_IN_DSLP = 1
const CONFIG_SOC_DEDIC_GPIO_OUT_CHANNELS_NUM = 8
const CONFIG_SOC_DEDIC_GPIO_IN_CHANNELS_NUM = 8
const CONFIG_SOC_DEDIC_GPIO_OUT_AUTO_ENABLE = 1
const CONFIG_SOC_I2C_NUM = 2
const CONFIG_SOC_HP_I2C_NUM = 2
const CONFIG_SOC_I2C_FIFO_LEN = 32
const CONFIG_SOC_I2C_CMD_REG_NUM = 8
const CONFIG_SOC_I2C_SUPPORT_SLAVE = 1
const CONFIG_SOC_I2C_SUPPORT_HW_CLR_BUS = 1
const CONFIG_SOC_I2C_SUPPORT_XTAL = 1
const CONFIG_SOC_I2C_SUPPORT_RTC = 1
const CONFIG_SOC_I2C_SUPPORT_10BIT_ADDR = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_BROADCAST = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_I2CRAM_ACCESS = 1
const CONFIG_SOC_I2C_SLAVE_CAN_GET_STRETCH_CAUSE = 1
const CONFIG_SOC_I2S_NUM = 2
const CONFIG_SOC_I2S_HW_VERSION_2 = 1
const CONFIG_SOC_I2S_SUPPORTS_XTAL = 1
const CONFIG_SOC_I2S_SUPPORTS_PLL_F160M = 1
const CONFIG_SOC_I2S_SUPPORTS_PCM = 1
const CONFIG_SOC_I2S_SUPPORTS_PDM = 1
const CONFIG_SOC_I2S_SUPPORTS_PDM_TX = 1
const CONFIG_SOC_I2S_PDM_MAX_TX_LINES = 2
const CONFIG_SOC_I2S_SUPPORTS_PDM_RX = 1
const CONFIG_SOC_I2S_PDM_MAX_RX_LINES = 4
const CONFIG_SOC_I2S_SUPPORTS_TDM = 1
const CONFIG_SOC_LEDC_SUPPORT_APB_CLOCK = 1
const CONFIG_SOC_LEDC_SUPPORT_XTAL_CLOCK = 1
const CONFIG_SOC_LEDC_TIMER_NUM = 4
const CONFIG_SOC_LEDC_CHANNEL_NUM = 8
const CONFIG_SOC_LEDC_TIMER_BIT_WIDTH = 14
const CONFIG_SOC_LEDC_SUPPORT_FADE_STOP = 1
const CONFIG_SOC_MCPWM_GROUPS = 2
const CONFIG_SOC_MCPWM_TIMERS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_OPERATORS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_COMPARATORS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_GENERATORS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_TRIGGERS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_GPIO_FAULTS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_CAPTURE_TIMERS_PER_GROUP = 1
const CONFIG_SOC_MCPWM_CAPTURE_CHANNELS_PER_TIMER = 3
const CONFIG_SOC_MCPWM_GPIO_SYNCHROS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_SWSYNC_CAN_PROPAGATE = 1
const CONFIG_SOC_MMU_LINEAR_ADDRESS_REGION_NUM = 1
const CONFIG_SOC_MMU_PERIPH_NUM = 1
const CONFIG_SOC_PCNT_GROUPS = 1
const CONFIG_SOC_PCNT_UNITS_PER_GROUP = 4
const CONFIG_SOC_PCNT_CHANNELS_PER_UNIT = 2
const CONFIG_SOC_PCNT_THRES_POINT_PER_UNIT = 2
const CONFIG_SOC_RMT_GROUPS = 1
const CONFIG_SOC_RMT_TX_CANDIDATES_PER_GROUP = 4
const CONFIG_SOC_RMT_RX_CANDIDATES_PER_GROUP = 4
const CONFIG_SOC_RMT_CHANNELS_PER_GROUP = 8
const CONFIG_SOC_RMT_MEM_WORDS_PER_CHANNEL = 48
const CONFIG_SOC_RMT_SUPPORT_RX_PINGPONG = 1
const CONFIG_SOC_RMT_SUPPORT_RX_DEMODULATION = 1
const CONFIG_SOC_RMT_SUPPORT_TX_ASYNC_STOP = 1
const CONFIG_SOC_RMT_SUPPORT_TX_LOOP_COUNT = 1
const CONFIG_SOC_RMT_SUPPORT_TX_LOOP_AUTO_STOP = 1
const CONFIG_SOC_RMT_SUPPORT_TX_SYNCHRO = 1
const CONFIG_SOC_RMT_SUPPORT_TX_CARRIER_DATA_ONLY = 1
const CONFIG_SOC_RMT_SUPPORT_XTAL = 1
const CONFIG_SOC_RMT_SUPPORT_RC_FAST = 1
const CONFIG_SOC_RMT_SUPPORT_APB = 1
const CONFIG_SOC_RMT_SUPPORT_DMA = 1
const CONFIG_SOC_LCD_I80_SUPPORTED = 1
const CONFIG_SOC_LCD_RGB_SUPPORTED = 1
const CONFIG_SOC_LCD_I80_BUSES = 1
const CONFIG_SOC_LCD_RGB_PANELS = 1
const CONFIG_SOC_LCD_I80_BUS_WIDTH = 16
const CONFIG_SOC_LCD_RGB_DATA_WIDTH = 16
const CONFIG_SOC_LCD_SUPPORT_RGB_YUV_CONV = 1
const CONFIG_SOC_LCDCAM_I80_NUM_BUSES = 1
const CONFIG_SOC_LCDCAM_I80_BUS_WIDTH = 16
const CONFIG_SOC_LCDCAM_RGB_NUM_PANELS = 1
const CONFIG_SOC_LCDCAM_RGB_DATA_WIDTH = 16
const CONFIG_SOC_RTC_CNTL_CPU_PD_DMA_BUS_WIDTH = 128
const CONFIG_SOC_RTC_CNTL_CPU_PD_REG_FILE_NUM = 549
const CONFIG_SOC_RTC_CNTL_TAGMEM_PD_DMA_BUS_WIDTH = 128
const CONFIG_SOC_RTCIO_PIN_COUNT = 22
const CONFIG_SOC_RTCIO_INPUT_OUTPUT_SUPPORTED = 1
const CONFIG_SOC_RTCIO_HOLD_SUPPORTED = 1
const CONFIG_SOC_RTCIO_WAKE_SUPPORTED = 1
const CONFIG_SOC_LP_IO_CLOCK_IS_INDEPENDENT = 1
const CONFIG_SOC_SDM_GROUPS = 1
const CONFIG_SOC_SDM_CHANNELS_PER_GROUP = 8
const CONFIG_SOC_SDM_CLK_SUPPORT_APB = 1
const CONFIG_SOC_SPI_PERIPH_NUM = 3
const CONFIG_SOC_SPI_MAX_CS_NUM = 6
const CONFIG_SOC_SPI_MAXIMUM_BUFFER_SIZE = 64
const CONFIG_SOC_SPI_SUPPORT_DDRCLK = 1
const CONFIG_SOC_SPI_SLAVE_SUPPORT_SEG_TRANS = 1
const CONFIG_SOC_SPI_SUPPORT_CD_SIG = 1
const CONFIG_SOC_SPI_SUPPORT_CONTINUOUS_TRANS = 1
const CONFIG_SOC_SPI_SUPPORT_SLAVE_HD_VER2 = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_APB = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_XTAL = 1
const CONFIG_SOC_SPI_PERIPH_SUPPORT_CONTROL_DUMMY_OUT = 1
const CONFIG_SOC_MEMSPI_IS_INDEPENDENT = 1
const CONFIG_SOC_SPI_MAX_PRE_DIVIDER = 16
const CONFIG_SOC_SPI_SUPPORT_OCT = 1
const CONFIG_SOC_SPI_SCT_SUPPORTED = 1
const CONFIG_SOC_SPI_SCT_REG_NUM = 14
const CONFIG_SOC_SPI_SCT_BUFFER_NUM_MAX = 1
const CONFIG_SOC_SPI_SCT_CONF_BITLEN_MAX = 0x3FFFA
const CONFIG_SOC_MEMSPI_SRC_FREQ_120M = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_80M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_40M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_20M_SUPPORTED = 1
const CONFIG_SOC_SPIRAM_SUPPORTED = 1
const CONFIG_SOC_SPIRAM_XIP_SUPPORTED = 1
const CONFIG_SOC_SYSTIMER_COUNTER_NUM = 2
const CONFIG_SOC_SYSTIMER_ALARM_NUM = 3
const CONFIG_SOC_SYSTIMER_BIT_WIDTH_LO = 32
const CONFIG_SOC_SYSTIMER_BIT_WIDTH_HI = 20
const CONFIG_SOC_SYSTIMER_FIXED_DIVIDER = 1
const CONFIG_SOC_SYSTIMER_INT_LEVEL = 1
const CONFIG_SOC_SYSTIMER_ALARM_MISS_COMPENSATE = 1
const CONFIG_SOC_TIMER_GROUPS = 2
const CONFIG_SOC_TIMER_GROUP_TIMERS_PER_GROUP = 2
const CONFIG_SOC_TIMER_GROUP_COUNTER_BIT_WIDTH = 54
const CONFIG_SOC_TIMER_GROUP_SUPPORT_XTAL = 1
const CONFIG_SOC_TIMER_GROUP_SUPPORT_APB = 1
const CONFIG_SOC_TIMER_GROUP_TOTAL_TIMERS = 4
const CONFIG_SOC_LP_TIMER_BIT_WIDTH_LO = 32
const CONFIG_SOC_LP_TIMER_BIT_WIDTH_HI = 16
const CONFIG_SOC_TOUCH_SENSOR_VERSION = 2
const CONFIG_SOC_TOUCH_SENSOR_NUM = 15
const CONFIG_SOC_TOUCH_SUPPORT_SLEEP_WAKEUP = 1
const CONFIG_SOC_TOUCH_SUPPORT_WATERPROOF = 1
const CONFIG_SOC_TOUCH_SUPPORT_PROX_SENSING = 1
const CONFIG_SOC_TOUCH_PROXIMITY_CHANNEL_NUM = 3
const CONFIG_SOC_TOUCH_PROXIMITY_MEAS_DONE_SUPPORTED = 1
const CONFIG_SOC_TOUCH_SAMPLE_CFG_NUM = 1
const CONFIG_SOC_TWAI_CONTROLLER_NUM = 1
const CONFIG_SOC_TWAI_CLK_SUPPORT_APB = 1
const CONFIG_SOC_TWAI_BRP_MIN = 2
const CONFIG_SOC_TWAI_BRP_MAX = 16384
const CONFIG_SOC_TWAI_SUPPORTS_RX_STATUS = 1
const CONFIG_SOC_UART_NUM = 3
const CONFIG_SOC_UART_HP_NUM = 3
const CONFIG_SOC_UART_FIFO_LEN = 128
const CONFIG_SOC_UART_BITRATE_MAX = 5000000
const CONFIG_SOC_UART_SUPPORT_FSM_TX_WAIT_SEND = 1
const CONFIG_SOC_UART_SUPPORT_WAKEUP_INT = 1
const CONFIG_SOC_UART_SUPPORT_APB_CLK = 1
const CONFIG_SOC_UART_SUPPORT_RTC_CLK = 1
const CONFIG_SOC_UART_SUPPORT_XTAL_CLK = 1
const CONFIG_SOC_USB_OTG_PERIPH_NUM = 1
const CONFIG_SOC_SHA_DMA_MAX_BUFFER_SIZE = 3968
const CONFIG_SOC_SHA_SUPPORT_DMA = 1
const CONFIG_SOC_SHA_SUPPORT_RESUME = 1
const CONFIG_SOC_SHA_GDMA = 1
const CONFIG_SOC_SHA_SUPPORT_SHA1 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA224 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA256 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA384 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA512 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA512_224 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA512_256 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA512_T = 1
const CONFIG_SOC_MPI_MEM_BLOCKS_NUM = 4
const CONFIG_SOC_MPI_OPERATIONS_NUM = 3
const CONFIG_SOC_RSA_MAX_BIT_LEN = 4096
const CONFIG_SOC_AES_SUPPORT_DMA = 1
const CONFIG_SOC_AES_GDMA = 1
const CONFIG_SOC_AES_SUPPORT_AES_128 = 1
const CONFIG_SOC_AES_SUPPORT_AES_256 = 1
const CONFIG_SOC_PM_SUPPORT_EXT0_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_EXT1_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_EXT_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_WIFI_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_BT_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_TOUCH_SENSOR_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_CPU_PD = 1
const CONFIG_SOC_PM_SUPPORT_TAGMEM_PD = 1
const CONFIG_SOC_PM_SUPPORT_RTC_PERIPH_PD = 1
const CONFIG_SOC_PM_SUPPORT_RC_FAST_PD = 1
const CONFIG_SOC_PM_SUPPORT_VDDSDIO_PD = 1
const CONFIG_SOC_PM_SUPPORT_MAC_BB_PD = 1
const CONFIG_SOC_PM_SUPPORT_MODEM_PD = 1
const CONFIG_SOC_CONFIGURABLE_VDDSDIO_SUPPORTED = 1
const CONFIG_SOC_PM_SUPPORT_DEEPSLEEP_CHECK_STUB_ONLY = 1
const CONFIG_SOC_PM_CPU_RETENTION_BY_RTCCNTL = 1
const CONFIG_SOC_PM_MODEM_RETENTION_BY_BACKUPDMA = 1
const CONFIG_SOC_PM_MODEM_PD_BY_SW = 1
const CONFIG_SOC_CLK_RC_FAST_D256_SUPPORTED = 1
const CONFIG_SOC_RTC_SLOW_CLK_SUPPORT_RC_FAST_D256 = 1
const CONFIG_SOC_CLK_RC_FAST_SUPPORT_CALIBRATION = 1
const CONFIG_SOC_CLK_XTAL32K_SUPPORTED = 1
const CONFIG_SOC_EFUSE_DIS_DOWNLOAD_ICACHE = 1
const CONFIG_SOC_EFUSE_DIS_DOWNLOAD_DCACHE = 1
const CONFIG_SOC_EFUSE_HARD_DIS_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_USB_JTAG = 1
const CONFIG_SOC_EFUSE_SOFT_DIS_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_DIRECT_BOOT = 1
const CONFIG_SOC_EFUSE_DIS_ICACHE = 1
const CONFIG_SOC_EFUSE_BLOCK9_KEY_PURPOSE_QUIRK = 1
const CONFIG_SOC_SECURE_BOOT_V2_RSA = 1
const CONFIG_SOC_EFUSE_SECURE_BOOT_KEY_DIGESTS = 3
const CONFIG_SOC_EFUSE_REVOKE_BOOT_KEY_DIGESTS = 1
const CONFIG_SOC_SUPPORT_SECURE_BOOT_REVOKE_KEY = 1
const CONFIG_SOC_FLASH_ENCRYPTED_XTS_AES_BLOCK_MAX = 64
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES = 1
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES_OPTIONS = 1
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES_128 = 1
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES_256 = 1
const CONFIG_SOC_MEMPROT_CPU_PREFETCH_PAD_SIZE = 16
const CONFIG_SOC_MEMPROT_MEM_ALIGN_SIZE = 256
const CONFIG_SOC_PHY_DIG_REGS_MEM_SIZE = 21
const CONFIG_SOC_MAC_BB_PD_MEM_SIZE = 192
const CONFIG_SOC_WIFI_LIGHT_SLEEP_CLK_WIDTH = 12
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_WAIT_IDLE = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_SUSPEND = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_RESUME = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_SW_SUSPEND = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_OPI_MODE = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_TIMING_TUNING = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_CONFIG_GPIO_BY_EFUSE = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_WRAP = 1
const CONFIG_SOC_MEMSPI_TIMING_TUNING_BY_MSPI_DELAY = 1
const CONFIG_SOC_MEMSPI_CORE_CLK_SHARED_WITH_PSRAM = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_CACHE_32BIT_ADDR_MAP = 1
const CONFIG_SOC_COEX_HW_PTI = 1
const CONFIG_SOC_EXTERNAL_COEX_LEADER_TX_LINE = 1
const CONFIG_SOC_SDMMC_USE_GPIO_MATRIX = 1
const CONFIG_SOC_SDMMC_NUM_SLOTS = 2
const CONFIG_SOC_SDMMC_SUPPORT_XTAL_CLOCK = 1
const CONFIG_SOC_SDMMC_DELAY_PHASE_NUM = 4
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_FAST_RC = 1
const CONFIG_SOC_WIFI_HW_TSF = 1
const CONFIG_SOC_WIFI_FTM_SUPPORT = 1
const CONFIG_SOC_WIFI_GCMP_SUPPORT = 1
const CONFIG_SOC_WIFI_WAPI_SUPPORT = 1
const CONFIG_SOC_WIFI_CSI_SUPPORT = 1
const CONFIG_SOC_WIFI_MESH_SUPPORT = 1
const CONFIG_SOC_WIFI_SUPPORT_VARIABLE_BEACON_WINDOW = 1
const CONFIG_SOC_WIFI_PHY_NEEDS_USB_WORKAROUND = 1
const CONFIG_SOC_BLE_SUPPORTED = 1
const CONFIG_SOC_BLE_MESH_SUPPORTED = 1
const CONFIG_SOC_BLE_50_SUPPORTED = 1
const CONFIG_SOC_BLE_DEVICE_PRIVACY_SUPPORTED = 1
const CONFIG_SOC_BLUFI_SUPPORTED = 1
const CONFIG_SOC_ULP_HAS_ADC = 1
const CONFIG_SOC_PHY_COMBO_MODULE = 1
const CONFIG_IDF_CMAKE = 1
const CONFIG_IDF_TOOLCHAIN = "gcc"
const CONFIG_IDF_TOOLCHAIN_GCC = 1
const CONFIG_IDF_TARGET_ARCH_XTENSA = 1
const CONFIG_IDF_TARGET_ARCH = "xtensa"
const CONFIG_IDF_TARGET = "esp32s3"
const CONFIG_IDF_INIT_VERSION = "5.4.2"
const CONFIG_IDF_TARGET_ESP32S3 = 1
const CONFIG_IDF_FIRMWARE_CHIP_ID = 0x0009
const CONFIG_APP_BUILD_TYPE_APP_2NDBOOT = 1
const CONFIG_APP_BUILD_GENERATE_BINARIES = 1
const CONFIG_APP_BUILD_BOOTLOADER = 1
const CONFIG_APP_BUILD_USE_FLASH_SECTIONS = 1
const CONFIG_BOOTLOADER_COMPILE_TIME_DATE = 1
const CONFIG_BOOTLOADER_PROJECT_VER = 1
const CONFIG_BOOTLOADER_OFFSET_IN_FLASH = 0x0
const CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_SIZE = 1
const CONFIG_BOOTLOADER_LOG_LEVEL_INFO = 1
const CONFIG_BOOTLOADER_LOG_LEVEL = 3
const CONFIG_BOOTLOADER_LOG_TIMESTAMP_SOURCE_CPU_TICKS = 1
const CONFIG_BOOTLOADER_FLASH_XMC_SUPPORT = 1
const CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V = 1
const CONFIG_BOOTLOADER_REGION_PROTECTION_ENABLE = 1
const CONFIG_BOOTLOADER_WDT_ENABLE = 1
const CONFIG_BOOTLOADER_WDT_TIME_MS = 9000
const CONFIG_BOOTLOADER_RESERVE_RTC_SIZE = 0x0
const CONFIG_SECURE_BOOT_V2_RSA_SUPPORTED = 1
const CONFIG_SECURE_BOOT_V2_PREFERRED = 1
const CONFIG_SECURE_ROM_DL_MODE_ENABLED = 1
const CONFIG_APP_COMPILE_TIME_DATE = 1
const CONFIG_APP_RETRIEVE_LEN_ELF_SHA = 9
const CONFIG_ESP_ROM_HAS_CRC_LE = 1
const CONFIG_ESP_ROM_HAS_CRC_BE = 1
const CONFIG_ESP_ROM_HAS_MZ_CRC32 = 1
const CONFIG_ESP_ROM_HAS_JPEG_DECODE = 1
const CONFIG_ESP_ROM_UART_CLK_IS_XTAL = 1
const CONFIG_ESP_ROM_HAS_RETARGETABLE_LOCKING = 1
const CONFIG_ESP_ROM_USB_OTG_NUM = 3
const CONFIG_ESP_ROM_USB_SERIAL_DEVICE_NUM = 4
const CONFIG_ESP_ROM_HAS_ERASE_0_REGION_BUG = 1
const CONFIG_ESP_ROM_HAS_ENCRYPTED_WRITES_USING_LEGACY_DRV = 1
const CONFIG_ESP_ROM_GET_CLK_FREQ = 1
const CONFIG_ESP_ROM_HAS_HAL_WDT = 1
const CONFIG_ESP_ROM_NEEDS_SWSETUP_WORKAROUND = 1
const CONFIG_ESP_ROM_HAS_LAYOUT_TABLE = 1
const CONFIG_ESP_ROM_HAS_SPI_FLASH = 1
const CONFIG_ESP_ROM_HAS_ETS_PRINTF_BUG = 1
const CONFIG_ESP_ROM_HAS_NEWLIB = 1
const CONFIG_ESP_ROM_HAS_NEWLIB_NANO_FORMAT = 1
const CONFIG_ESP_ROM_HAS_NEWLIB_32BIT_TIME = 1
const CONFIG_ESP_ROM_NEEDS_SET_CACHE_MMU_SIZE = 1
const CONFIG_ESP_ROM_RAM_APP_NEEDS_MMU_INIT = 1
const CONFIG_ESP_ROM_HAS_FLASH_COUNT_PAGES_BUG = 1
const CONFIG_ESP_ROM_HAS_CACHE_SUSPEND_WAITI_BUG = 1
const CONFIG_ESP_ROM_HAS_CACHE_WRITEBACK_BUG = 1
const CONFIG_ESP_ROM_HAS_SW_FLOAT = 1
const CONFIG_ESP_ROM_HAS_VERSION = 1
const CONFIG_ESP_ROM_SUPPORT_DEEP_SLEEP_WAKEUP_STUB = 1
const CONFIG_ESP_ROM_HAS_OUTPUT_PUTC_FUNC = 1
const CONFIG_BOOT_ROM_LOG_ALWAYS_ON = 1
const CONFIG_ESPTOOLPY_FLASH_MODE_AUTO_DETECT = 1
const CONFIG_ESPTOOLPY_FLASHMODE_DIO = 1
const CONFIG_ESPTOOLPY_FLASH_SAMPLE_MODE_STR = 1
const CONFIG_ESPTOOLPY_FLASHMODE = "dio"
const CONFIG_ESPTOOLPY_FLASHFREQ_80M = 1
const CONFIG_ESPTOOLPY_FLASHFREQ = "80m"
const CONFIG_ESPTOOLPY_FLASHSIZE_2MB = 1
const CONFIG_ESPTOOLPY_FLASHSIZE = "2MB"
const CONFIG_ESPTOOLPY_BEFORE_RESET = 1
const CONFIG_ESPTOOLPY_BEFORE = "default_reset"
const CONFIG_ESPTOOLPY_AFTER_RESET = 1
const CONFIG_ESPTOOLPY_AFTER = "hard_reset"
const CONFIG_ESPTOOLPY_MONITOR_BAUD = 115200
const CONFIG_PARTITION_TABLE_SINGLE_APP = 1
const CONFIG_PARTITION_TABLE_CUSTOM_FILENAME = "partitions.csv"
const CONFIG_PARTITION_TABLE_FILENAME = "partitions_singleapp.csv"
const CONFIG_PARTITION_TABLE_OFFSET = 0x8000
const CONFIG_PARTITION_TABLE_MD5 = 1
const CONFIG_COMPILER_OPTIMIZATION_DEBUG = 1
const CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE = 1
const CONFIG_COMPILER_ASSERT_NDEBUG_EVALUATE = 1
const CONFIG_COMPILER_FLOAT_LIB_FROM_GCCLIB = 1
const CONFIG_COMPILER_OPTIMIZATION_ASSERTION_LEVEL = 2
const CONFIG_COMPILER_HIDE_PATHS_MACROS = 1
const CONFIG_COMPILER_STACK_CHECK_MODE_NONE = 1
const CONFIG_COMPILER_DISABLE_DEFAULT_ERRORS = 1
const CONFIG_COMPILER_RT_LIB_GCCLIB = 1
const CONFIG_COMPILER_RT_LIB_NAME = "gcc"
const CONFIG_COMPILER_ORPHAN_SECTIONS_WARNING = 1
const CONFIG_APPTRACE_DEST_NONE = 1
const CONFIG_APPTRACE_DEST_UART_NONE = 1
const CONFIG_APPTRACE_UART_TASK_PRIO = 1
const CONFIG_APPTRACE_LOCK_ENABLE = 1
const CONFIG_TWAI_ERRATA_FIX_LISTEN_ONLY_DOM = 1
const CONFIG_EFUSE_MAX_BLK_LEN = 256
const CONFIG_ESP_TLS_USING_MBEDTLS = 1
const CONFIG_ESP_TLS_USE_DS_PERIPHERAL = 1
const CONFIG_ESP_COEX_ENABLED = 1
const CONFIG_ESP_ERR_TO_NAME_LOOKUP = 1
const CONFIG_GPTIMER_ISR_HANDLER_IN_IRAM = 1
const CONFIG_GPTIMER_OBJ_CACHE_SAFE = 1
const CONFIG_SPI_MASTER_ISR_IN_IRAM = 1
const CONFIG_SPI_SLAVE_ISR_IN_IRAM = 1
const CONFIG_USJ_ENABLE_USB_SERIAL_JTAG = 1
const CONFIG_ETH_ENABLED = 1
const CONFIG_ETH_USE_SPI_ETHERNET = 1
const CONFIG_ESP_EVENT_POST_FROM_ISR = 1
const CONFIG_ESP_EVENT_POST_FROM_IRAM_ISR = 1
const CONFIG_ESP_GDBSTUB_ENABLED = 1
const CONFIG_ESP_GDBSTUB_SUPPORT_TASKS = 1
const CONFIG_ESP_GDBSTUB_MAX_TASKS = 32
const CONFIG_ESPHID_TASK_SIZE_BT = 2048
const CONFIG_ESPHID_TASK_SIZE_BLE = 4096
const CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS = 1
const CONFIG_ESP_HTTP_CLIENT_EVENT_POST_TIMEOUT = 2000
const CONFIG_HTTPD_MAX_REQ_HDR_LEN = 512
const CONFIG_HTTPD_MAX_URI_LEN = 512
const CONFIG_HTTPD_ERR_RESP_NO_DELAY = 1
const CONFIG_HTTPD_PURGE_BUF_LEN = 32
const CONFIG_HTTPD_SERVER_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP_HTTPS_OTA_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP_HTTPS_SERVER_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP32S3_REV_MIN_0 = 1
const CONFIG_ESP32S3_REV_MIN_FULL = 0
const CONFIG_ESP_REV_MIN_FULL = 0
const CONFIG_ESP32S3_REV_MAX_FULL = 99
const CONFIG_ESP_REV_MAX_FULL = 99
const CONFIG_ESP_EFUSE_BLOCK_REV_MIN_FULL = 0
const CONFIG_ESP_EFUSE_BLOCK_REV_MAX_FULL = 199
const CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_STA = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_AP = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_BT = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_ETH = 1
const CONFIG_ESP_MAC_UNIVERSAL_MAC_ADDRESSES_FOUR = 1
const CONFIG_ESP_MAC_UNIVERSAL_MAC_ADDRESSES = 4
const CONFIG_ESP32S3_UNIVERSAL_MAC_ADDRESSES_FOUR = 1
const CONFIG_ESP32S3_UNIVERSAL_MAC_ADDRESSES = 4
const CONFIG_ESP_SLEEP_FLASH_LEAKAGE_WORKAROUND = 1
const CONFIG_ESP_SLEEP_MSPI_NEED_ALL_IO_PU = 1
const CONFIG_ESP_SLEEP_RTC_BUS_ISO_WORKAROUND = 1
const CONFIG_ESP_SLEEP_GPIO_RESET_WORKAROUND = 1
const CONFIG_ESP_SLEEP_WAIT_FLASH_READY_EXTRA_DELAY = 2000
const CONFIG_ESP_SLEEP_GPIO_ENABLE_INTERNAL_RESISTORS = 1
const CONFIG_RTC_CLK_SRC_INT_RC = 1
const CONFIG_RTC_CLK_CAL_CYCLES = 1024
const CONFIG_GDMA_CTRL_FUNC_IN_IRAM = 1
const CONFIG_GDMA_ISR_HANDLER_IN_IRAM = 1
const CONFIG_GDMA_OBJ_DRAM_SAFE = 1
const CONFIG_XTAL_FREQ_40 = 1
const CONFIG_XTAL_FREQ = 40
const CONFIG_ESP_SPI_BUS_LOCK_ISR_FUNCS_IN_IRAM = 1
const CONFIG_ESP_NETIF_IP_LOST_TIMER_INTERVAL = 120
const CONFIG_ESP_NETIF_TCPIP_LWIP = 1
const CONFIG_ESP_NETIF_USES_TCPIP_WITH_BSD_API = 1
const CONFIG_ESP_NETIF_REPORT_DATA_TRAFFIC = 1
const CONFIG_ESP_PHY_ENABLED = 1
const CONFIG_ESP_PHY_CALIBRATION_AND_DATA_STORAGE = 1
const CONFIG_ESP_PHY_MAX_WIFI_TX_POWER = 20
const CONFIG_ESP_PHY_MAX_TX_POWER = 20
const CONFIG_ESP_PHY_ENABLE_USB = 1
const CONFIG_ESP_PHY_RF_CAL_PARTIAL = 1
const CONFIG_ESP_PHY_CALIBRATION_MODE = 0
const CONFIG_PM_POWER_DOWN_CPU_IN_LIGHT_SLEEP = 1
const CONFIG_PM_RESTORE_CACHE_TAGMEM_AFTER_LIGHT_SLEEP = 1
const CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ_160 = 1
const CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ = 160
const CONFIG_ESP32S3_INSTRUCTION_CACHE_16KB = 1
const CONFIG_ESP32S3_INSTRUCTION_CACHE_SIZE = 0x4000
const CONFIG_ESP32S3_INSTRUCTION_CACHE_8WAYS = 1
const CONFIG_ESP32S3_ICACHE_ASSOCIATED_WAYS = 8
const CONFIG_ESP32S3_INSTRUCTION_CACHE_LINE_32B = 1
const CONFIG_ESP32S3_INSTRUCTION_CACHE_LINE_SIZE = 32
const CONFIG_ESP32S3_DATA_CACHE_32KB = 1
const CONFIG_ESP32S3_DATA_CACHE_SIZE = 0x8000
const CONFIG_ESP32S3_DATA_CACHE_8WAYS = 1
const CONFIG_ESP32S3_DCACHE_ASSOCIATED_WAYS = 8
const CONFIG_ESP32S3_DATA_CACHE_LINE_32B = 1
const CONFIG_ESP32S3_DATA_CACHE_LINE_SIZE = 32
const CONFIG_ESP32S3_TRACEMEM_RESERVE_DRAM = 0x0
const CONFIG_ESP_SYSTEM_PANIC_PRINT_REBOOT = 1
const CONFIG_ESP_SYSTEM_PANIC_REBOOT_DELAY_SECONDS = 0
const CONFIG_ESP_SYSTEM_RTC_FAST_MEM_AS_HEAP_DEPCHECK = 1
const CONFIG_ESP_SYSTEM_ALLOW_RTC_FAST_MEM_AS_HEAP = 1
const CONFIG_ESP_SYSTEM_MEMPROT_FEATURE = 1
const CONFIG_ESP_SYSTEM_MEMPROT_FEATURE_LOCK = 1
const CONFIG_ESP_SYSTEM_EVENT_QUEUE_SIZE = 32
const CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE = 2304
const CONFIG_ESP_MAIN_TASK_STACK_SIZE = 3584
const CONFIG_ESP_MAIN_TASK_AFFINITY_CPU0 = 1
const CONFIG_ESP_MAIN_TASK_AFFINITY = 0x0
const CONFIG_ESP_MINIMAL_SHARED_STACK_SIZE = 2048
const CONFIG_ESP_CONSOLE_UART_DEFAULT = 1
const CONFIG_ESP_CONSOLE_SECONDARY_USB_SERIAL_JTAG = 1
const CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG_ENABLED = 1
const CONFIG_ESP_CONSOLE_UART = 1
const CONFIG_ESP_CONSOLE_UART_NUM = 0
const CONFIG_ESP_CONSOLE_ROM_SERIAL_PORT_NUM = 0
const CONFIG_ESP_CONSOLE_UART_BAUDRATE = 115200
const CONFIG_ESP_INT_WDT = 1
const CONFIG_ESP_INT_WDT_TIMEOUT_MS = 300
const CONFIG_ESP_INT_WDT_CHECK_CPU1 = 1
const CONFIG_ESP_TASK_WDT_EN = 1
const CONFIG_ESP_TASK_WDT_INIT = 1
const CONFIG_ESP_TASK_WDT_TIMEOUT_S = 5
const CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU0 = 1
const CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU1 = 1
const CONFIG_ESP_DEBUG_OCDAWARE = 1
const CONFIG_ESP_SYSTEM_CHECK_INT_LEVEL_4 = 1
const CONFIG_ESP_BROWNOUT_DET = 1
const CONFIG_ESP_BROWNOUT_DET_LVL_SEL_7 = 1
const CONFIG_ESP_BROWNOUT_DET_LVL = 7
const CONFIG_ESP_SYSTEM_BROWNOUT_INTR = 1
const CONFIG_ESP_SYSTEM_BBPLL_RECALIB = 1
const CONFIG_ESP_IPC_TASK_STACK_SIZE = 1280
const CONFIG_ESP_IPC_USES_CALLERS_PRIORITY = 1
const CONFIG_ESP_IPC_ISR_ENABLE = 1
const CONFIG_ESP_TIME_FUNCS_USE_RTC_TIMER = 1
const CONFIG_ESP_TIME_FUNCS_USE_ESP_TIMER = 1
const CONFIG_ESP_TIMER_TASK_STACK_SIZE = 3584
const CONFIG_ESP_TIMER_INTERRUPT_LEVEL = 1
const CONFIG_ESP_TIMER_TASK_AFFINITY = 0x0
const CONFIG_ESP_TIMER_TASK_AFFINITY_CPU0 = 1
const CONFIG_ESP_TIMER_ISR_AFFINITY_CPU0 = 1
const CONFIG_ESP_TIMER_IMPL_SYSTIMER = 1
const CONFIG_ESP_WIFI_ENABLED = 1
const CONFIG_ESP_WIFI_STATIC_RX_BUFFER_NUM = 10
const CONFIG_ESP_WIFI_DYNAMIC_RX_BUFFER_NUM = 32
const CONFIG_ESP_WIFI_DYNAMIC_TX_BUFFER = 1
const CONFIG_ESP_WIFI_TX_BUFFER_TYPE = 1
const CONFIG_ESP_WIFI_DYNAMIC_TX_BUFFER_NUM = 32
const CONFIG_ESP_WIFI_STATIC_RX_MGMT_BUFFER = 1
const CONFIG_ESP_WIFI_DYNAMIC_RX_MGMT_BUF = 0
const CONFIG_ESP_WIFI_RX_MGMT_BUF_NUM_DEF = 5
const CONFIG_ESP_WIFI_AMPDU_TX_ENABLED = 1
const CONFIG_ESP_WIFI_TX_BA_WIN = 6
const CONFIG_ESP_WIFI_AMPDU_RX_ENABLED = 1
const CONFIG_ESP_WIFI_RX_BA_WIN = 6
const CONFIG_ESP_WIFI_NVS_ENABLED = 1
const CONFIG_ESP_WIFI_TASK_PINNED_TO_CORE_0 = 1
const CONFIG_ESP_WIFI_SOFTAP_BEACON_MAX_LEN = 752
const CONFIG_ESP_WIFI_MGMT_SBUF_NUM = 32
const CONFIG_ESP_WIFI_IRAM_OPT = 1
const CONFIG_ESP_WIFI_RX_IRAM_OPT = 1
const CONFIG_ESP_WIFI_ENABLE_WPA3_SAE = 1
const CONFIG_ESP_WIFI_ENABLE_SAE_PK = 1
const CONFIG_ESP_WIFI_SOFTAP_SAE_SUPPORT = 1
const CONFIG_ESP_WIFI_ENABLE_WPA3_OWE_STA = 1
const CONFIG_ESP_WIFI_SLP_DEFAULT_MIN_ACTIVE_TIME = 50
const CONFIG_ESP_WIFI_SLP_DEFAULT_MAX_ACTIVE_TIME = 10
const CONFIG_ESP_WIFI_SLP_DEFAULT_WAIT_BROADCAST_DATA_TIME = 15
const CONFIG_ESP_WIFI_STA_DISCONNECTED_PM_ENABLE = 1
const CONFIG_ESP_WIFI_GMAC_SUPPORT = 1
const CONFIG_ESP_WIFI_SOFTAP_SUPPORT = 1
const CONFIG_ESP_WIFI_ESPNOW_MAX_ENCRYPT_NUM = 7
const CONFIG_ESP_WIFI_MBEDTLS_CRYPTO = 1
const CONFIG_ESP_WIFI_MBEDTLS_TLS_CLIENT = 1
const CONFIG_ESP_WIFI_ENTERPRISE_SUPPORT = 1
const CONFIG_ESP_COREDUMP_ENABLE_TO_NONE = 1
const CONFIG_FATFS_VOLUME_COUNT = 2
const CONFIG_FATFS_LFN_NONE = 1
const CONFIG_FATFS_SECTOR_4096 = 1
const CONFIG_FATFS_CODEPAGE_437 = 1
const CONFIG_FATFS_CODEPAGE = 437
const CONFIG_FATFS_FS_LOCK = 0
const CONFIG_FATFS_TIMEOUT_MS = 10000
const CONFIG_FATFS_PER_FILE_CACHE = 1
const CONFIG_FATFS_USE_STRFUNC_NONE = 1
const CONFIG_FATFS_VFS_FSTAT_BLKSIZE = 0
const CONFIG_FATFS_LINK_LOCK = 1
const CONFIG_FATFS_DONT_TRUST_FREE_CLUSTER_CNT = 0
const CONFIG_FATFS_DONT_TRUST_LAST_ALLOC = 0
const CONFIG_FREERTOS_HZ = 100
const CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY = 1
const CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS = 1
const CONFIG_FREERTOS_IDLE_TASK_STACKSIZE = 1536
const CONFIG_FREERTOS_MAX_TASK_NAME_LEN = 16
const CONFIG_FREERTOS_USE_TIMERS = 1
const CONFIG_FREERTOS_TIMER_SERVICE_TASK_NAME = "Tmr Svc"
const CONFIG_FREERTOS_TIMER_TASK_NO_AFFINITY = 1
const CONFIG_FREERTOS_TIMER_SERVICE_TASK_CORE_AFFINITY = 0x7FFFFFFF
const CONFIG_FREERTOS_TIMER_TASK_PRIORITY = 1
const CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH = 2048
const CONFIG_FREERTOS_TIMER_QUEUE_LENGTH = 10
const CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE = 0
const CONFIG_FREERTOS_TASK_NOTIFICATION_ARRAY_ENTRIES = 1
const CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER = 1
const CONFIG_FREERTOS_TLSP_DELETION_CALLBACKS = 1
const CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER = 1
const CONFIG_FREERTOS_ISR_STACKSIZE = 1536
const CONFIG_FREERTOS_INTERRUPT_BACKTRACE = 1
const CONFIG_FREERTOS_TICK_SUPPORT_SYSTIMER = 1
const CONFIG_FREERTOS_CORETIMER_SYSTIMER_LVL1 = 1
const CONFIG_FREERTOS_SYSTICK_USES_SYSTIMER = 1
const CONFIG_FREERTOS_PORT = 1
const CONFIG_FREERTOS_NO_AFFINITY = 0x7FFFFFFF
const CONFIG_FREERTOS_SUPPORT_STATIC_ALLOCATION = 1
const CONFIG_FREERTOS_DEBUG_OCDAWARE = 1
const CONFIG_FREERTOS_ENABLE_TASK_SNAPSHOT = 1
const CONFIG_FREERTOS_PLACE_SNAPSHOT_FUNS_INTO_FLASH = 1
const CONFIG_FREERTOS_NUMBER_OF_CORES = 2
const CONFIG_HAL_ASSERTION_EQUALS_SYSTEM = 1
const CONFIG_HAL_DEFAULT_ASSERTION_LEVEL = 2
const CONFIG_HAL_WDT_USE_ROM_IMPL = 1
const CONFIG_HAL_SPI_MASTER_FUNC_IN_IRAM = 1
const CONFIG_HAL_SPI_SLAVE_FUNC_IN_IRAM = 1
const CONFIG_HEAP_POISONING_DISABLED = 1
const CONFIG_HEAP_TRACING_OFF = 1
const CONFIG_LOG_DEFAULT_LEVEL_INFO = 1
const CONFIG_LOG_DEFAULT_LEVEL = 3
const CONFIG_LOG_MAXIMUM_EQUALS_DEFAULT = 1
const CONFIG_LOG_MAXIMUM_LEVEL = 3
const CONFIG_LOG_DYNAMIC_LEVEL_CONTROL = 1
const CONFIG_LOG_TAG_LEVEL_IMPL_CACHE_AND_LINKED_LIST = 1
const CONFIG_LOG_TAG_LEVEL_CACHE_BINARY_MIN_HEAP = 1
const CONFIG_LOG_TAG_LEVEL_IMPL_CACHE_SIZE = 31
const CONFIG_LOG_TIMESTAMP_SOURCE_RTOS = 1
const CONFIG_LWIP_ENABLE = 1
const CONFIG_LWIP_LOCAL_HOSTNAME = "espressif"
const CONFIG_LWIP_TCPIP_TASK_PRIO = 18
const CONFIG_LWIP_DNS_SUPPORT_MDNS_QUERIES = 1
const CONFIG_LWIP_TIMERS_ONDEMAND = 1
const CONFIG_LWIP_ND6 = 1
const CONFIG_LWIP_MAX_SOCKETS = 10
const CONFIG_LWIP_SO_REUSE = 1
const CONFIG_LWIP_SO_REUSE_RXTOALL = 1
const CONFIG_LWIP_IP_DEFAULT_TTL = 64
const CONFIG_LWIP_IP4_FRAG = 1
const CONFIG_LWIP_IP6_FRAG = 1
const CONFIG_LWIP_IP_REASS_MAX_PBUFS = 10
const CONFIG_LWIP_ESP_GRATUITOUS_ARP = 1
const CONFIG_LWIP_GARP_TMR_INTERVAL = 60
const CONFIG_LWIP_ESP_MLDV6_REPORT = 1
const CONFIG_LWIP_MLDV6_TMR_INTERVAL = 40
const CONFIG_LWIP_TCPIP_RECVMBOX_SIZE = 32
const CONFIG_LWIP_DHCP_DOES_ARP_CHECK = 1
const CONFIG_LWIP_DHCP_DISABLE_VENDOR_CLASS_ID = 1
const CONFIG_LWIP_DHCP_OPTIONS_LEN = 68
const CONFIG_LWIP_NUM_NETIF_CLIENT_DATA = 0
const CONFIG_LWIP_DHCP_COARSE_TIMER_SECS = 1
const CONFIG_LWIP_DHCPS = 1
const CONFIG_LWIP_DHCPS_LEASE_UNIT = 60
const CONFIG_LWIP_DHCPS_MAX_STATION_NUM = 8
const CONFIG_LWIP_DHCPS_STATIC_ENTRIES = 1
const CONFIG_LWIP_DHCPS_ADD_DNS = 1
const CONFIG_LWIP_IPV4 = 1
const CONFIG_LWIP_IPV6 = 1
const CONFIG_LWIP_IPV6_NUM_ADDRESSES = 3
const CONFIG_LWIP_NETIF_LOOPBACK = 1
const CONFIG_LWIP_LOOPBACK_MAX_PBUFS = 8
const CONFIG_LWIP_MAX_ACTIVE_TCP = 16
const CONFIG_LWIP_MAX_LISTENING_TCP = 16
const CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION = 1
const CONFIG_LWIP_TCP_MAXRTX = 12
const CONFIG_LWIP_TCP_SYNMAXRTX = 12
const CONFIG_LWIP_TCP_MSS = 1440
const CONFIG_LWIP_TCP_TMR_INTERVAL = 250
const CONFIG_LWIP_TCP_MSL = 60000
const CONFIG_LWIP_TCP_FIN_WAIT_TIMEOUT = 20000
const CONFIG_LWIP_TCP_SND_BUF_DEFAULT = 5760
const CONFIG_LWIP_TCP_WND_DEFAULT = 5760
const CONFIG_LWIP_TCP_RECVMBOX_SIZE = 6
const CONFIG_LWIP_TCP_ACCEPTMBOX_SIZE = 6
const CONFIG_LWIP_TCP_QUEUE_OOSEQ = 1
const CONFIG_LWIP_TCP_OOSEQ_TIMEOUT = 6
const CONFIG_LWIP_TCP_OOSEQ_MAX_PBUFS = 4
const CONFIG_LWIP_TCP_OVERSIZE_MSS = 1
const CONFIG_LWIP_TCP_RTO_TIME = 1500
const CONFIG_LWIP_MAX_UDP_PCBS = 16
const CONFIG_LWIP_UDP_RECVMBOX_SIZE = 6
const CONFIG_LWIP_CHECKSUM_CHECK_ICMP = 1
const CONFIG_LWIP_TCPIP_TASK_STACK_SIZE = 3072
const CONFIG_LWIP_TCPIP_TASK_AFFINITY_NO_AFFINITY = 1
const CONFIG_LWIP_TCPIP_TASK_AFFINITY = 0x7FFFFFFF
const CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE = 3
const CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS = 5
const CONFIG_LWIP_IPV6_ND6_NUM_PREFIXES = 5
const CONFIG_LWIP_IPV6_ND6_NUM_ROUTERS = 3
const CONFIG_LWIP_IPV6_ND6_NUM_DESTINATIONS = 10
const CONFIG_LWIP_ICMP = 1
const CONFIG_LWIP_MAX_RAW_PCBS = 16
const CONFIG_LWIP_SNTP_MAX_SERVERS = 1
const CONFIG_LWIP_SNTP_UPDATE_DELAY = 3600000
const CONFIG_LWIP_SNTP_STARTUP_DELAY = 1
const CONFIG_LWIP_SNTP_MAXIMUM_STARTUP_DELAY = 5000
const CONFIG_LWIP_DNS_MAX_HOST_IP = 1
const CONFIG_LWIP_DNS_MAX_SERVERS = 3
const CONFIG_LWIP_BRIDGEIF_MAX_PORTS = 7
const CONFIG_LWIP_ESP_LWIP_ASSERT = 1
const CONFIG_LWIP_HOOK_TCP_ISN_DEFAULT = 1
const CONFIG_LWIP_HOOK_IP6_ROUTE_NONE = 1
const CONFIG_LWIP_HOOK_ND6_GET_GW_NONE = 1
const CONFIG_LWIP_HOOK_IP6_SELECT_SRC_ADDR_NONE = 1
const CONFIG_LWIP_HOOK_NETCONN_EXT_RESOLVE_NONE = 1
const CONFIG_LWIP_HOOK_DNS_EXT_RESOLVE_NONE = 1
const CONFIG_LWIP_HOOK_IP6_INPUT_DEFAULT = 1
const CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC = 1
const CONFIG_MBEDTLS_ASYMMETRIC_CONTENT_LEN = 1
const CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN = 16384
const CONFIG_MBEDTLS_SSL_OUT_CONTENT_LEN = 4096
const CONFIG_MBEDTLS_SSL_KEEP_PEER_CERTIFICATE = 1
const CONFIG_MBEDTLS_PKCS7_C = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_FULL = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_MAX_CERTS = 200
const CONFIG_MBEDTLS_CMAC_C = 1
const CONFIG_MBEDTLS_HARDWARE_AES = 1
const CONFIG_MBEDTLS_AES_USE_INTERRUPT = 1
const CONFIG_MBEDTLS_AES_INTERRUPT_LEVEL = 0
const CONFIG_MBEDTLS_GCM_SUPPORT_NON_AES_CIPHER = 1
const CONFIG_MBEDTLS_HARDWARE_MPI = 1
const CONFIG_MBEDTLS_MPI_USE_INTERRUPT = 1
const CONFIG_MBEDTLS_MPI_INTERRUPT_LEVEL = 0
const CONFIG_MBEDTLS_HARDWARE_SHA = 1
const CONFIG_MBEDTLS_ROM_MD5 = 1
const CONFIG_MBEDTLS_HAVE_TIME = 1
const CONFIG_MBEDTLS_ECDSA_DETERMINISTIC = 1
const CONFIG_MBEDTLS_SHA1_C = 1
const CONFIG_MBEDTLS_SHA512_C = 1
const CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT = 1
const CONFIG_MBEDTLS_TLS_SERVER = 1
const CONFIG_MBEDTLS_TLS_CLIENT = 1
const CONFIG_MBEDTLS_TLS_ENABLED = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_RSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA = 1
const CONFIG_MBEDTLS_SSL_RENEGOTIATION = 1
const CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 = 1
const CONFIG_MBEDTLS_SSL_ALPN = 1
const CONFIG_MBEDTLS_CLIENT_SSL_SESSION_TICKETS = 1
const CONFIG_MBEDTLS_SERVER_SSL_SESSION_TICKETS = 1
const CONFIG_MBEDTLS_AES_C = 1
const CONFIG_MBEDTLS_CCM_C = 1
const CONFIG_MBEDTLS_GCM_C = 1
const CONFIG_MBEDTLS_PEM_PARSE_C = 1
const CONFIG_MBEDTLS_PEM_WRITE_C = 1
const CONFIG_MBEDTLS_X509_CRL_PARSE_C = 1
const CONFIG_MBEDTLS_X509_CSR_PARSE_C = 1
const CONFIG_MBEDTLS_ECP_C = 1
const CONFIG_MBEDTLS_PK_PARSE_EC_EXTENDED = 1
const CONFIG_MBEDTLS_PK_PARSE_EC_COMPRESSED = 1
const CONFIG_MBEDTLS_ECDH_C = 1
const CONFIG_MBEDTLS_ECDSA_C = 1
const CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED = 1
const CONFIG_MBEDTLS_ECP_NIST_OPTIM = 1
const CONFIG_MBEDTLS_ERROR_STRINGS = 1
const CONFIG_MBEDTLS_FS_IO = 1
const CONFIG_MQTT_PROTOCOL_311 = 1
const CONFIG_MQTT_TRANSPORT_SSL = 1
const CONFIG_MQTT_TRANSPORT_WEBSOCKET = 1
const CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE = 1
const CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF = 1
const CONFIG_NEWLIB_STDIN_LINE_ENDING_CR = 1
const CONFIG_NEWLIB_TIME_SYSCALL_USE_RTC_HRT = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_0 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_1 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_2 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_PATCH_VERSION = 1
const CONFIG_PTHREAD_TASK_PRIO_DEFAULT = 5
const CONFIG_PTHREAD_TASK_STACK_SIZE_DEFAULT = 3072
const CONFIG_PTHREAD_STACK_MIN = 768
const CONFIG_PTHREAD_DEFAULT_CORE_NO_AFFINITY = 1
const CONFIG_PTHREAD_TASK_NAME_DEFAULT = "pthread"
const CONFIG_MMU_PAGE_SIZE_64KB = 1
const CONFIG_MMU_PAGE_MODE = "64KB"
const CONFIG_MMU_PAGE_SIZE = 0x10000
const CONFIG_SPI_FLASH_BROWNOUT_RESET_XMC = 1
const CONFIG_SPI_FLASH_BROWNOUT_RESET = 1
const CONFIG_SPI_FLASH_HPM_AUTO = 1
const CONFIG_SPI_FLASH_HPM_ON = 1
const CONFIG_SPI_FLASH_HPM_DC_AUTO = 1
const CONFIG_SPI_FLASH_SUSPEND_TSUS_VAL_US = 50
const CONFIG_SPI_FLASH_ROM_DRIVER_PATCH = 1
const CONFIG_SPI_FLASH_DANGEROUS_WRITE_ABORTS = 1
const CONFIG_SPI_FLASH_YIELD_DURING_ERASE = 1
const CONFIG_SPI_FLASH_ERASE_YIELD_DURATION_MS = 20
const CONFIG_SPI_FLASH_ERASE_YIELD_TICKS = 1
const CONFIG_SPI_FLASH_WRITE_CHUNK_SIZE = 8192
const CONFIG_SPI_FLASH_VENDOR_XMC_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_GD_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_ISSI_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_MXIC_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_WINBOND_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_BOYA_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_TH_SUPPORTED = 1
const CONFIG_SPI_FLASH_SUPPORT_ISSI_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_MXIC_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_GD_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_WINBOND_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_BOYA_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_TH_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_MXIC_OPI_CHIP = 1
const CONFIG_SPI_FLASH_ENABLE_ENCRYPTED_READ_WRITE = 1
const CONFIG_SPIFFS_MAX_PARTITIONS = 3
const CONFIG_SPIFFS_CACHE = 1
const CONFIG_SPIFFS_CACHE_WR = 1
const CONFIG_SPIFFS_PAGE_CHECK = 1
const CONFIG_SPIFFS_GC_MAX_RUNS = 10
const CONFIG_SPIFFS_PAGE_SIZE = 256
const CONFIG_SPIFFS_OBJ_NAME_LEN = 32
const CONFIG_SPIFFS_USE_MAGIC = 1
const CONFIG_SPIFFS_USE_MAGIC_LENGTH = 1
const CONFIG_SPIFFS_META_LENGTH = 4
const CONFIG_SPIFFS_USE_MTIME = 1
const CONFIG_WS_TRANSPORT = 1
const CONFIG_WS_BUFFER_SIZE = 1024
const CONFIG_UNITY_ENABLE_FLOAT = 1
const CONFIG_UNITY_ENABLE_DOUBLE = 1
const CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER = 1
const CONFIG_USB_HOST_CONTROL_TRANSFER_MAX_SIZE = 256
const CONFIG_USB_HOST_HW_BUFFER_BIAS_BALANCED = 1
const CONFIG_USB_HOST_DEBOUNCE_DELAY_MS = 250
const CONFIG_USB_HOST_RESET_HOLD_MS = 30
const CONFIG_USB_HOST_RESET_RECOVERY_MS = 30
const CONFIG_USB_HOST_SET_ADDR_RECOVERY_MS = 10
const CONFIG_USB_OTG_SUPPORTED = 1
const CONFIG_VFS_SUPPORT_IO = 1
const CONFIG_VFS_SUPPORT_DIR = 1
const CONFIG_VFS_SUPPORT_SELECT = 1
const CONFIG_VFS_SUPPRESS_SELECT_DEBUG_OUTPUT = 1
const CONFIG_VFS_SUPPORT_TERMIOS = 1
const CONFIG_VFS_MAX_COUNT = 8
const CONFIG_VFS_SEMIHOSTFS_MAX_MOUNT_POINTS = 1
const CONFIG_VFS_INITIALIZE_DEV_NULL = 1
const CONFIG_WL_SECTOR_SIZE_4096 = 1
const CONFIG_WL_SECTOR_SIZE = 4096
const CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES = 16
const CONFIG_WIFI_PROV_AUTOSTOP_TIMEOUT = 30
const CONFIG_WIFI_PROV_STA_ALL_CHANNEL_SCAN = 1
const X__DARWIN_NSIG = 32
const X_ARM_SIGNAL_ = 1
const SIGHUP = 1
const SIGINT = 2
const SIGQUIT = 3
const SIGILL = 4
const SIGTRAP = 5
const SIGABRT = 6
const SIGEMT = 7
const SIGFPE = 8
const SIGKILL = 9
const SIGBUS = 10
const SIGSEGV = 11
const SIGSYS = 12
const SIGPIPE = 13
const SIGALRM = 14
const SIGTERM = 15
const SIGURG = 16
const SIGSTOP = 17
const SIGTSTP = 18
const SIGCONT = 19
const SIGCHLD = 20
const SIGTTIN = 21
const SIGTTOU = 22
const SIGIO = 23
const SIGXCPU = 24
const SIGXFSZ = 25
const SIGVTALRM = 26
const SIGPROF = 27
const SIGWINCH = 28
const SIGINFO = 29
const SIGUSR1 = 30
const SIGUSR2 = 31
const X__DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0
const SIGEV_NONE = 0
const SIGEV_SIGNAL = 1
const SIGEV_THREAD = 3
const ILL_NOOP = 0
const ILL_ILLOPC = 1
const ILL_ILLTRP = 2
const ILL_PRVOPC = 3
const ILL_ILLOPN = 4
const ILL_ILLADR = 5
const ILL_PRVREG = 6
const ILL_COPROC = 7
const ILL_BADSTK = 8
const FPE_NOOP = 0
const FPE_FLTDIV = 1
const FPE_FLTOVF = 2
const FPE_FLTUND = 3
const FPE_FLTRES = 4
const FPE_FLTINV = 5
const FPE_FLTSUB = 6
const FPE_INTDIV = 7
const FPE_INTOVF = 8
const SEGV_NOOP = 0
const SEGV_MAPERR = 1
const SEGV_ACCERR = 2
const BUS_NOOP = 0
const BUS_ADRALN = 1
const BUS_ADRERR = 2
const BUS_OBJERR = 3
const TRAP_BRKPT = 1
const TRAP_TRACE = 2
const CLD_NOOP = 0
const CLD_EXITED = 1
const CLD_KILLED = 2
const CLD_DUMPED = 3
const CLD_TRAPPED = 4
const CLD_STOPPED = 5
const CLD_CONTINUED = 6
const POLL_IN = 1
const POLL_OUT = 2
const POLL_MSG = 3
const POLL_ERR = 4
const POLL_PRI = 5
const POLL_HUP = 6
const SA_ONSTACK = 0x0001
const SA_RESTART = 0x0002
const SA_RESETHAND = 0x0004
const SA_NOCLDSTOP = 0x0008
const SA_NODEFER = 0x0010
const SA_NOCLDWAIT = 0x0020
const SA_SIGINFO = 0x0040
const SA_USERTRAMP = 0x0100
const SA_64REGSET = 0x0200
const SIG_BLOCK = 1
const SIG_UNBLOCK = 2
const SIG_SETMASK = 3
const SI_USER = 0x10001
const SI_QUEUE = 0x10002
const SI_TIMER = 0x10003
const SI_ASYNCIO = 0x10004
const SI_MESGQ = 0x10005
const SS_ONSTACK = 0x0001
const SS_DISABLE = 0x0004
const MINSIGSTKSZ = 32768
const SIGSTKSZ = 131072
const PRIO_PROCESS = 0
const PRIO_PGRP = 1
const PRIO_USER = 2
const PRIO_DARWIN_THREAD = 3
const PRIO_DARWIN_PROCESS = 4
const PRIO_MAX = 20
const PRIO_DARWIN_BG = 0x1000
const PRIO_DARWIN_NONUI = 0x1001
const RUSAGE_SELF = 0
const RUSAGE_INFO_V0 = 0
const RUSAGE_INFO_V1 = 1
const RUSAGE_INFO_V2 = 2
const RUSAGE_INFO_V3 = 3
const RUSAGE_INFO_V4 = 4
const RUSAGE_INFO_V5 = 5
const RUSAGE_INFO_V6 = 6
const RU_PROC_RUNS_RESLIDE = 0x00000001
const RLIMIT_CPU = 0
const RLIMIT_FSIZE = 1
const RLIMIT_DATA = 2
const RLIMIT_STACK = 3
const RLIMIT_CORE = 4
const RLIMIT_AS = 5
const RLIMIT_MEMLOCK = 6
const RLIMIT_NPROC = 7
const RLIMIT_NOFILE = 8
const RLIM_NLIMITS = 9
const X_RLIMIT_POSIX_FLAG = 0x1000
const RLIMIT_WAKEUPS_MONITOR = 0x1
const RLIMIT_CPU_USAGE_MONITOR = 0x2
const RLIMIT_THREAD_CPULIMITS = 0x3
const RLIMIT_FOOTPRINT_INTERVAL = 0x4
const WAKEMON_ENABLE = 0x01
const WAKEMON_DISABLE = 0x02
const WAKEMON_GET_PARAMS = 0x04
const WAKEMON_SET_DEFAULTS = 0x08
const WAKEMON_MAKE_FATAL = 0x10
const CPUMON_MAKE_FATAL = 0x1000
const FOOTPRINT_INTERVAL_RESET = 0x1
const IOPOL_TYPE_DISK = 0
const IOPOL_TYPE_VFS_ATIME_UPDATES = 2
const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3
const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4
const IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5
const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6
const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7
const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8
const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9
const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = 10
const IOPOL_SCOPE_PROCESS = 0
const IOPOL_SCOPE_THREAD = 1
const IOPOL_SCOPE_DARWIN_BG = 2
const IOPOL_DEFAULT = 0
const IOPOL_IMPORTANT = 1
const IOPOL_PASSIVE = 2
const IOPOL_THROTTLE = 3
const IOPOL_UTILITY = 4
const IOPOL_STANDARD = 5
const IOPOL_ATIME_UPDATES_DEFAULT = 0
const IOPOL_ATIME_UPDATES_OFF = 1
const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0
const IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1
const IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2
const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0
const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1
const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0
const IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1
const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0
const IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1
const IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0
const IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1
const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0
const IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1
const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0
const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1
const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = 0
const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = 1
const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT = 0
const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON = 1
const WNOHANG = 0x00000001
const WUNTRACED = 0x00000002
const WCOREFLAG = 0200
const X_WSTOPPED = 0177
const WEXITED = 0x00000004
const WSTOPPED = 0x00000008
const WCONTINUED = 0x00000010
const WNOWAIT = 0x00000020
const WAIT_MYPGRP = 0
const X_QUAD_HIGHWORD = 1
const X_QUAD_LOWWORD = 0
const X__DARWIN_LITTLE_ENDIAN = 1234
const X__DARWIN_BIG_ENDIAN = 4321
const X__DARWIN_PDP_ENDIAN = 3412
const EXIT_FAILURE = 1
const EXIT_SUCCESS = 0
const RAND_MAX = 0x7fffffff
const ESP_OK = 0
const ESP_ERR_NO_MEM = 0x101
const ESP_ERR_INVALID_ARG = 0x102
const ESP_ERR_INVALID_STATE = 0x103
const ESP_ERR_INVALID_SIZE = 0x104
const ESP_ERR_NOT_FOUND = 0x105
const ESP_ERR_NOT_SUPPORTED = 0x106
const ESP_ERR_TIMEOUT = 0x107
const ESP_ERR_INVALID_RESPONSE = 0x108
const ESP_ERR_INVALID_CRC = 0x109
const ESP_ERR_INVALID_VERSION = 0x10A
const ESP_ERR_INVALID_MAC = 0x10B
const ESP_ERR_NOT_FINISHED = 0x10C
const ESP_ERR_NOT_ALLOWED = 0x10D
const ESP_ERR_WIFI_BASE = 0x3000
const ESP_ERR_MESH_BASE = 0x4000
const ESP_ERR_FLASH_BASE = 0x6000
const ESP_ERR_HW_CRYPTO_BASE = 0xc000
const ESP_ERR_MEMPROT_BASE = 0xd000
const X__ASSERT_FUNC = "??"
const SOC_ADC_SUPPORTED = 1
const SOC_UART_SUPPORTED = 1
const SOC_PCNT_SUPPORTED = 1
const SOC_PHY_SUPPORTED = 1
const SOC_WIFI_SUPPORTED = 1
const SOC_TWAI_SUPPORTED = 1
const SOC_GDMA_SUPPORTED = 1
const SOC_AHB_GDMA_SUPPORTED = 1
const SOC_GPTIMER_SUPPORTED = 1
const SOC_LCDCAM_SUPPORTED = 1
const SOC_LCDCAM_I80_LCD_SUPPORTED = 1
const SOC_LCDCAM_RGB_LCD_SUPPORTED = 1
const SOC_MCPWM_SUPPORTED = 1
const SOC_DEDICATED_GPIO_SUPPORTED = 1
const SOC_CACHE_SUPPORT_WRAP = 1
const SOC_ULP_SUPPORTED = 1
const SOC_ULP_FSM_SUPPORTED = 1
const SOC_RISCV_COPROC_SUPPORTED = 1
const SOC_BT_SUPPORTED = 1
const SOC_USB_OTG_SUPPORTED = 1
const SOC_USB_SERIAL_JTAG_SUPPORTED = 1
const SOC_CCOMP_TIMER_SUPPORTED = 1
const SOC_ASYNC_MEMCPY_SUPPORTED = 1
const SOC_SUPPORTS_SECURE_DL_MODE = 1
const SOC_EFUSE_KEY_PURPOSE_FIELD = 1
const SOC_EFUSE_SUPPORTED = 1
const SOC_SDMMC_HOST_SUPPORTED = 1
const SOC_RTC_FAST_MEM_SUPPORTED = 1
const SOC_RTC_SLOW_MEM_SUPPORTED = 1
const SOC_RTC_MEM_SUPPORTED = 1
const SOC_PSRAM_DMA_CAPABLE = 1
const SOC_XT_WDT_SUPPORTED = 1
const SOC_I2S_SUPPORTED = 1
const SOC_RMT_SUPPORTED = 1
const SOC_SDM_SUPPORTED = 1
const SOC_GPSPI_SUPPORTED = 1
const SOC_LEDC_SUPPORTED = 1
const SOC_I2C_SUPPORTED = 1
const SOC_SYSTIMER_SUPPORTED = 1
const SOC_SUPPORT_COEXISTENCE = 1
const SOC_TEMP_SENSOR_SUPPORTED = 1
const SOC_AES_SUPPORTED = 1
const SOC_MPI_SUPPORTED = 1
const SOC_SHA_SUPPORTED = 1
const SOC_HMAC_SUPPORTED = 1
const SOC_DIG_SIGN_SUPPORTED = 1
const SOC_FLASH_ENC_SUPPORTED = 1
const SOC_SECURE_BOOT_SUPPORTED = 1
const SOC_MEMPROT_SUPPORTED = 1
const SOC_TOUCH_SENSOR_SUPPORTED = 1
const SOC_BOD_SUPPORTED = 1
const SOC_CLK_TREE_SUPPORTED = 1
const SOC_MPU_SUPPORTED = 1
const SOC_WDT_SUPPORTED = 1
const SOC_SPI_FLASH_SUPPORTED = 1
const SOC_RNG_SUPPORTED = 1
const SOC_LIGHT_SLEEP_SUPPORTED = 1
const SOC_DEEP_SLEEP_SUPPORTED = 1
const SOC_LP_PERIPH_SHARE_INTERRUPT = 1
const SOC_PM_SUPPORTED = 1
const SOC_SIMD_INSTRUCTION_SUPPORTED = 1
const SOC_XTAL_SUPPORT_40M = 1
const SOC_ADC_RTC_CTRL_SUPPORTED = 1
const SOC_ADC_DIG_CTRL_SUPPORTED = 1
const SOC_ADC_ARBITER_SUPPORTED = 1
const SOC_ADC_DIG_IIR_FILTER_SUPPORTED = 1
const SOC_ADC_MONITOR_SUPPORTED = 1
const SOC_ADC_DMA_SUPPORTED = 1
const SOC_ADC_SAMPLE_FREQ_THRES_HIGH = 83333
const SOC_ADC_SAMPLE_FREQ_THRES_LOW = 611
const SOC_ADC_SHARED_POWER = 1
const SOC_BROWNOUT_RESET_SUPPORTED = 1
const SOC_CACHE_WRITEBACK_SUPPORTED = 1
const SOC_CACHE_FREEZE_SUPPORTED = 1
const SOC_CPU_CORES_NUM = 2
const SOC_CPU_INTR_NUM = 32
const SOC_CPU_HAS_FPU = 1
const SOC_HP_CPU_HAS_MULTIPLE_CORES = 1
const SOC_CPU_BREAKPOINTS_NUM = 2
const SOC_CPU_WATCHPOINTS_NUM = 2
const SOC_CPU_WATCHPOINT_MAX_REGION_SIZE = 64
const SOC_SIMD_PREFERRED_DATA_ALIGNMENT = 16
const SOC_GDMA_PAIRS_PER_GROUP = 5
const SOC_GDMA_PAIRS_PER_GROUP_MAX = 5
const SOC_AHB_GDMA_SUPPORT_PSRAM = 1
const SOC_GPIO_PIN_COUNT = 49
const SOC_GPIO_SUPPORT_PIN_GLITCH_FILTER = 1
const SOC_GPIO_FILTER_CLK_SUPPORT_APB = 1
const SOC_GPIO_IN_RANGE_MAX = 48
const SOC_GPIO_OUT_RANGE_MAX = 48
const SOC_MPU_CONFIGURABLE_REGIONS_SUPPORTED = 0
const SOC_MPU_REGIONS_MAX_NUM = 8
const SOC_MPU_REGION_RO_SUPPORTED = 0
const SOC_MPU_REGION_WO_SUPPORTED = 0
const SOC_RMT_TX_CANDIDATES_PER_GROUP = 4
const SOC_RMT_RX_CANDIDATES_PER_GROUP = 4
const SOC_RMT_CHANNELS_PER_GROUP = 8
const SOC_RMT_MEM_WORDS_PER_CHANNEL = 48
const SOC_RMT_SUPPORT_RX_PINGPONG = 1
const SOC_RMT_SUPPORT_RX_DEMODULATION = 1
const SOC_RMT_SUPPORT_TX_ASYNC_STOP = 1
const SOC_RMT_SUPPORT_TX_LOOP_COUNT = 1
const SOC_RMT_SUPPORT_TX_LOOP_AUTO_STOP = 1
const SOC_RMT_SUPPORT_TX_SYNCHRO = 1
const SOC_RMT_SUPPORT_TX_CARRIER_DATA_ONLY = 1
const SOC_RMT_SUPPORT_XTAL = 1
const SOC_RMT_SUPPORT_RC_FAST = 1
const SOC_RMT_SUPPORT_APB = 1
const SOC_RMT_SUPPORT_DMA = 1
const SOC_RTCIO_PIN_COUNT = 22
const SOC_RTCIO_INPUT_OUTPUT_SUPPORTED = 1
const SOC_RTCIO_HOLD_SUPPORTED = 1
const SOC_RTCIO_WAKE_SUPPORTED = 1
const SOC_LP_IO_CLOCK_IS_INDEPENDENT = 1
const SOC_SDM_GROUPS = 1
const SOC_SDM_CHANNELS_PER_GROUP = 8
const SOC_SDM_CLK_SUPPORT_APB = 1
const SOC_SPI_PERIPH_NUM = 3
const SOC_SPI_MAX_CS_NUM = 6
const SOC_SPI_MAXIMUM_BUFFER_SIZE = 64
const SOC_SPI_SUPPORT_DDRCLK = 1
const SOC_SPI_SLAVE_SUPPORT_SEG_TRANS = 1
const SOC_SPI_SUPPORT_CD_SIG = 1
const SOC_SPI_SUPPORT_CONTINUOUS_TRANS = 1
const SOC_SPI_SUPPORT_SLAVE_HD_VER2 = 1
const SOC_SPI_SUPPORT_CLK_APB = 1
const SOC_SPI_SUPPORT_CLK_XTAL = 1
const SOC_SPI_PERIPH_SUPPORT_CONTROL_DUMMY_OUT = 1
const SOC_MEMSPI_IS_INDEPENDENT = 1
const SOC_SPI_MAX_PRE_DIVIDER = 16
const SOC_SPI_SUPPORT_OCT = 1
const SOC_SPI_SCT_SUPPORTED = 1
const SOC_SPI_SCT_REG_NUM = 14
const SOC_SPI_SCT_CONF_BITLEN_MAX = 0x3FFFA
const SOC_MEMSPI_SRC_FREQ_120M = 1
const SOC_MEMSPI_SRC_FREQ_80M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_40M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_20M_SUPPORTED = 1
const SOC_SPIRAM_SUPPORTED = 1
const SOC_SPIRAM_XIP_SUPPORTED = 1
const SOC_SYSTIMER_COUNTER_NUM = 2
const SOC_SYSTIMER_ALARM_NUM = 3
const SOC_SYSTIMER_BIT_WIDTH_LO = 32
const SOC_SYSTIMER_BIT_WIDTH_HI = 20
const SOC_SYSTIMER_FIXED_DIVIDER = 1
const SOC_SYSTIMER_INT_LEVEL = 1
const SOC_SYSTIMER_ALARM_MISS_COMPENSATE = 1
const SOC_LP_TIMER_BIT_WIDTH_LO = 32
const SOC_LP_TIMER_BIT_WIDTH_HI = 16
const SOC_TWAI_CLK_SUPPORT_APB = 1
const SOC_TWAI_BRP_MIN = 2
const SOC_TWAI_BRP_MAX = 16384
const SOC_TWAI_SUPPORTS_RX_STATUS = 1
const SOC_EFUSE_DIS_DOWNLOAD_ICACHE = 1
const SOC_EFUSE_DIS_DOWNLOAD_DCACHE = 1
const SOC_EFUSE_HARD_DIS_JTAG = 1
const SOC_EFUSE_DIS_USB_JTAG = 1
const SOC_EFUSE_SOFT_DIS_JTAG = 1
const SOC_EFUSE_DIS_DIRECT_BOOT = 1
const SOC_EFUSE_DIS_ICACHE = 1
const SOC_EFUSE_BLOCK9_KEY_PURPOSE_QUIRK = 1
const SOC_SECURE_BOOT_V2_RSA = 1
const SOC_EFUSE_SECURE_BOOT_KEY_DIGESTS = 3
const SOC_EFUSE_REVOKE_BOOT_KEY_DIGESTS = 1
const SOC_SUPPORT_SECURE_BOOT_REVOKE_KEY = 1
const SOC_FLASH_ENCRYPTION_XTS_AES = 1
const SOC_FLASH_ENCRYPTION_XTS_AES_OPTIONS = 1
const SOC_FLASH_ENCRYPTION_XTS_AES_128 = 1
const SOC_FLASH_ENCRYPTION_XTS_AES_256 = 1
const SOC_MEMPROT_CPU_PREFETCH_PAD_SIZE = 16
const SOC_MEMPROT_MEM_ALIGN_SIZE = 256
const SOC_SDMMC_USE_GPIO_MATRIX = 1
const SOC_SDMMC_NUM_SLOTS = 2
const SOC_SDMMC_SUPPORT_XTAL_CLOCK = 1
const SOC_SDMMC_DELAY_PHASE_NUM = 4
const SOC_CLK_RC_FAST_FREQ_APPROX = 17500000
const SOC_CLK_RC_SLOW_FREQ_APPROX = 136000
const SOC_CLK_XTAL32K_FREQ_APPROX = 32768
const BIT31 = 0x80000000
const BIT30 = 0x40000000
const BIT29 = 0x20000000
const BIT28 = 0x10000000
const BIT27 = 0x08000000
const BIT26 = 0x04000000
const BIT25 = 0x02000000
const BIT24 = 0x01000000
const BIT23 = 0x00800000
const BIT22 = 0x00400000
const BIT21 = 0x00200000
const BIT20 = 0x00100000
const BIT19 = 0x00080000
const BIT18 = 0x00040000
const BIT17 = 0x00020000
const BIT16 = 0x00010000
const BIT15 = 0x00008000
const BIT14 = 0x00004000
const BIT13 = 0x00002000
const BIT12 = 0x00001000
const BIT11 = 0x00000800
const BIT10 = 0x00000400
const BIT9 = 0x00000200
const BIT8 = 0x00000100
const BIT7 = 0x00000080
const BIT6 = 0x00000040
const BIT5 = 0x00000020
const BIT4 = 0x00000010
const BIT3 = 0x00000008
const BIT2 = 0x00000004
const BIT1 = 0x00000002
const BIT0 = 0x00000001
const DR_REG_UART_BASE = 0x60000000
const DR_REG_SPI1_BASE = 0x60002000
const DR_REG_SPI0_BASE = 0x60003000
const DR_REG_GPIO_BASE = 0x60004000
const DR_REG_GPIO_SD_BASE = 0x60004f00
const DR_REG_FE2_BASE = 0x60005000
const DR_REG_FE_BASE = 0x60006000
const DR_REG_EFUSE_BASE = 0x60007000
const DR_REG_RTCCNTL_BASE = 0x60008000
const DR_REG_RTCIO_BASE = 0x60008400
const DR_REG_SENS_BASE = 0x60008800
const DR_REG_RTC_I2C_BASE = 0x60008C00
const DR_REG_IO_MUX_BASE = 0x60009000
const DR_REG_HINF_BASE = 0x6000B000
const DR_REG_UHCI1_BASE = 0x6000C000
const DR_REG_I2S_BASE = 0x6000F000
const DR_REG_UART1_BASE = 0x60010000
const DR_REG_BT_BASE = 0x60011000
const DR_REG_I2C_EXT_BASE = 0x60013000
const DR_REG_UHCI0_BASE = 0x60014000
const DR_REG_SLCHOST_BASE = 0x60015000
const DR_REG_RMT_BASE = 0x60016000
const DR_REG_PCNT_BASE = 0x60017000
const DR_REG_SLC_BASE = 0x60018000
const DR_REG_LEDC_BASE = 0x60019000
const DR_REG_NRX_BASE = 0x6001CC00
const DR_REG_BB_BASE = 0x6001D000
const DR_REG_PWM0_BASE = 0x6001E000
const DR_REG_TIMERGROUP0_BASE = 0x6001F000
const DR_REG_TIMERGROUP1_BASE = 0x60020000
const DR_REG_RTC_SLOWMEM_BASE = 0x60021000
const DR_REG_SYSTIMER_BASE = 0x60023000
const DR_REG_SPI2_BASE = 0x60024000
const DR_REG_SPI3_BASE = 0x60025000
const DR_REG_SYSCON_BASE = 0x60026000
const DR_REG_APB_CTRL_BASE = 0x60026000
const DR_REG_I2C1_EXT_BASE = 0x60027000
const DR_REG_SDMMC_BASE = 0x60028000
const DR_REG_PERI_BACKUP_BASE = 0x6002A000
const DR_REG_TWAI_BASE = 0x6002B000
const DR_REG_PWM1_BASE = 0x6002C000
const DR_REG_I2S1_BASE = 0x6002D000
const DR_REG_UART2_BASE = 0x6002E000
const DR_REG_USB_SERIAL_JTAG_BASE = 0x60038000
const DR_REG_USB_WRAP_BASE = 0x60039000
const DR_REG_AES_BASE = 0x6003A000
const DR_REG_SHA_BASE = 0x6003B000
const DR_REG_RSA_BASE = 0x6003C000
const DR_REG_HMAC_BASE = 0x6003E000
const DR_REG_DIGITAL_SIGNATURE_BASE = 0x6003D000
const DR_REG_GDMA_BASE = 0x6003F000
const DR_REG_APB_SARADC_BASE = 0x60040000
const DR_REG_LCD_CAM_BASE = 0x60041000
const DR_REG_SYSTEM_BASE = 0x600C0000
const DR_REG_SENSITIVE_BASE = 0x600C1000
const DR_REG_INTERRUPT_BASE = 0x600C2000
const DR_REG_EXTMEM_BASE = 0x600C4000
const DR_REG_ASSIST_DEBUG_BASE = 0x600CE000
const DR_REG_WCL_BASE = 0x600D0000
const DR_REG_MMU_TABLE = 0x600C5000
const DR_REG_ITAG_TABLE = 0x600C6000
const DR_REG_DTAG_TABLE = 0x600C8000
const DR_REG_EXT_MEM_ENC = 0x600CC000
const SPI_CLK_DIV = 4
const TICKS_PER_US_ROM = 40
const SOC_DROM_LOW = 0x3C000000
const SOC_DROM_HIGH = 0x3E000000
const SOC_IROM_LOW = 0x42000000
const SOC_IROM_HIGH = 0x44000000
const SOC_IRAM_LOW = 0x40370000
const SOC_IRAM_HIGH = 0x403E0000
const SOC_DRAM_LOW = 0x3FC88000
const SOC_DRAM_HIGH = 0x3FD00000
const SOC_RTC_IRAM_LOW = 0x600FE000
const SOC_RTC_IRAM_HIGH = 0x60100000
const SOC_RTC_DRAM_LOW = 0x600FE000
const SOC_RTC_DRAM_HIGH = 0x60100000
const SOC_RTC_DATA_LOW = 0x50000000
const SOC_RTC_DATA_HIGH = 0x50002000
const SOC_EXTRAM_DATA_LOW = 0x3C000000
const SOC_EXTRAM_DATA_HIGH = 0x3E000000
const SOC_IROM_MASK_LOW = 0x40000000
const SOC_IROM_MASK_HIGH = 0x40060000
const SOC_DIRAM_IRAM_LOW = 0x40378000
const SOC_DIRAM_IRAM_HIGH = 0x403E0000
const SOC_DIRAM_DRAM_LOW = 0x3FC88000
const SOC_DIRAM_DRAM_HIGH = 0x3FCF0000
const SOC_DMA_LOW = 0x3FC88000
const SOC_DMA_HIGH = 0x3FD00000
const SOC_BYTE_ACCESSIBLE_LOW = 0x3FC88000
const SOC_BYTE_ACCESSIBLE_HIGH = 0x3FD00000
const SOC_MEM_INTERNAL_LOW = 0x3FC88000
const SOC_MEM_INTERNAL_HIGH = 0x403E0000
const SOC_ROM_STACK_START = 0x3fceb710
const SOC_ROM_STACK_SIZE = 0x2000
const ETS_WMAC_INUM = 0
const ETS_WBB_INUM = 4
const ETS_T1_WDT_INUM = 24
const ETS_MEMACCESS_ERR_INUM = 25
const ETS_IPC_ISR_INUM = 28
const ETS_SLC_INUM = 1
const ETS_UART0_INUM = 5
const ETS_UART1_INUM = 5
const ETS_SPI2_INUM = 1
const ETS_FRC_TIMER2_INUM = 10
const ETS_GPIO_INUM = 4
const ETS_INVALID_INUM = 6
const ADC1_GPIO1_CHANNEL = 0
const ADC1_CHANNEL_0_GPIO_NUM = 1
const ADC1_GPIO2_CHANNEL = 1
const ADC1_CHANNEL_1_GPIO_NUM = 2
const ADC1_GPIO3_CHANNEL = 2
const ADC1_CHANNEL_2_GPIO_NUM = 3
const ADC1_GPIO4_CHANNEL = 3
const ADC1_CHANNEL_3_GPIO_NUM = 4
const ADC1_GPIO5_CHANNEL = 4
const ADC1_CHANNEL_4_GPIO_NUM = 5
const ADC1_GPIO6_CHANNEL = 5
const ADC1_CHANNEL_5_GPIO_NUM = 6
const ADC1_GPIO7_CHANNEL = 6
const ADC1_CHANNEL_6_GPIO_NUM = 7
const ADC1_GPIO8_CHANNEL = 7
const ADC1_CHANNEL_7_GPIO_NUM = 8
const ADC1_GPIO9_CHANNEL = 8
const ADC1_CHANNEL_8_GPIO_NUM = 9
const ADC1_GPIO10_CHANNEL = 9
const ADC1_CHANNEL_9_GPIO_NUM = 10
const ADC2_GPIO11_CHANNEL = 0
const ADC2_CHANNEL_0_GPIO_NUM = 11
const ADC2_GPIO12_CHANNEL = 1
const ADC2_CHANNEL_1_GPIO_NUM = 12
const ADC2_GPIO13_CHANNEL = 2
const ADC2_CHANNEL_2_GPIO_NUM = 13
const ADC2_GPIO14_CHANNEL = 3
const ADC2_CHANNEL_3_GPIO_NUM = 14
const ADC2_GPIO15_CHANNEL = 4
const ADC2_CHANNEL_4_GPIO_NUM = 15
const ADC2_GPIO16_CHANNEL = 5
const ADC2_CHANNEL_5_GPIO_NUM = 16
const ADC2_GPIO17_CHANNEL = 6
const ADC2_CHANNEL_6_GPIO_NUM = 17
const ADC2_GPIO18_CHANNEL = 7
const ADC2_CHANNEL_7_GPIO_NUM = 18
const ADC2_GPIO19_CHANNEL = 8
const ADC2_CHANNEL_8_GPIO_NUM = 19
const ADC2_GPIO20_CHANNEL = 9
const ADC2_CHANNEL_9_GPIO_NUM = 20
const X__HAS_FIXED_CHK_PROTOTYPES = 1
const APB_SARADC_WAIT_ARB_CYCLE = 0x00000003
const APB_SARADC_WAIT_ARB_CYCLE_V = 0x3
const APB_SARADC_WAIT_ARB_CYCLE_S = 30
const APB_SARADC_XPD_SAR_FORCE = 0x00000003
const APB_SARADC_XPD_SAR_FORCE_V = 0x3
const APB_SARADC_XPD_SAR_FORCE_S = 27
const APB_SARADC_DATA_TO_I2S_V = 0x1
const APB_SARADC_DATA_TO_I2S_S = 26
const APB_SARADC_DATA_SAR_SEL_V = 0x1
const APB_SARADC_DATA_SAR_SEL_S = 25
const APB_SARADC_SAR2_PATT_P_CLEAR_V = 0x1
const APB_SARADC_SAR2_PATT_P_CLEAR_S = 24
const APB_SARADC_SAR1_PATT_P_CLEAR_V = 0x1
const APB_SARADC_SAR1_PATT_P_CLEAR_S = 23
const APB_SARADC_SAR2_PATT_LEN = 0x0000000F
const APB_SARADC_SAR2_PATT_LEN_V = 0xF
const APB_SARADC_SAR2_PATT_LEN_S = 19
const APB_SARADC_SAR1_PATT_LEN = 0x0000000F
const APB_SARADC_SAR1_PATT_LEN_V = 0xF
const APB_SARADC_SAR1_PATT_LEN_S = 15
const APB_SARADC_SAR_CLK_DIV = 0x000000FF
const APB_SARADC_SAR_CLK_DIV_V = 0xFF
const APB_SARADC_SAR_CLK_DIV_S = 7
const APB_SARADC_SAR_CLK_GATED_V = 0x1
const APB_SARADC_SAR_CLK_GATED_S = 6
const APB_SARADC_SAR_SEL_V = 0x1
const APB_SARADC_SAR_SEL_S = 5
const APB_SARADC_WORK_MODE = 0x00000003
const APB_SARADC_WORK_MODE_V = 0x3
const APB_SARADC_WORK_MODE_S = 3
const APB_SARADC_START_V = 0x1
const APB_SARADC_START_S = 1
const APB_SARADC_START_FORCE_V = 0x1
const APB_SARADC_START_FORCE_S = 0
const APB_SARADC_TIMER_EN_V = 0x1
const APB_SARADC_TIMER_EN_S = 24
const APB_SARADC_TIMER_TARGET = 0x00000FFF
const APB_SARADC_TIMER_TARGET_V = 0xFFF
const APB_SARADC_TIMER_TARGET_S = 12
const APB_SARADC_TIMER_SEL_V = 0x1
const APB_SARADC_TIMER_SEL_S = 11
const APB_SARADC_SAR2_INV_V = 0x1
const APB_SARADC_SAR2_INV_S = 10
const APB_SARADC_SAR1_INV_V = 0x1
const APB_SARADC_SAR1_INV_S = 9
const APB_SARADC_MAX_MEAS_NUM = 0x000000FF
const APB_SARADC_MAX_MEAS_NUM_V = 0xFF
const APB_SARADC_MAX_MEAS_NUM_S = 1
const APB_SARADC_MEAS_NUM_LIMIT_V = 0x1
const APB_SARADC_MEAS_NUM_LIMIT_S = 0
const APB_SARADC_FILTER_FACTOR0 = 0x00000007
const APB_SARADC_FILTER_FACTOR0_V = 0x7
const APB_SARADC_FILTER_FACTOR0_S = 29
const APB_SARADC_FILTER_FACTOR1 = 0x00000007
const APB_SARADC_FILTER_FACTOR1_V = 0x7
const APB_SARADC_FILTER_FACTOR1_S = 26
const APB_SARADC_STANDBY_WAIT = 0x000000FF
const APB_SARADC_STANDBY_WAIT_V = 0xFF
const APB_SARADC_STANDBY_WAIT_S = 16
const APB_SARADC_RSTB_WAIT = 0x000000FF
const APB_SARADC_RSTB_WAIT_V = 0xFF
const APB_SARADC_RSTB_WAIT_S = 8
const APB_SARADC_XPD_WAIT = 0x000000FF
const APB_SARADC_XPD_WAIT_V = 0xFF
const APB_SARADC_XPD_WAIT_S = 0
const APB_SARADC_SAR1_STATUS = 0xFFFFFFFF
const APB_SARADC_SAR1_STATUS_V = 0xFFFFFFFF
const APB_SARADC_SAR1_STATUS_S = 0
const APB_SARADC_SAR2_STATUS = 0xFFFFFFFF
const APB_SARADC_SAR2_STATUS_V = 0xFFFFFFFF
const APB_SARADC_SAR2_STATUS_S = 0
const APB_SARADC_SAR1_PATT_TAB1 = 0x00FFFFFF
const APB_SARADC_SAR1_PATT_TAB1_V = 0xFFFFFF
const APB_SARADC_SAR1_PATT_TAB1_S = 0
const APB_SARADC_SAR1_PATT_TAB2 = 0x00FFFFFF
const APB_SARADC_SAR1_PATT_TAB2_V = 0xFFFFFF
const APB_SARADC_SAR1_PATT_TAB2_S = 0
const APB_SARADC_SAR1_PATT_TAB3 = 0x00FFFFFF
const APB_SARADC_SAR1_PATT_TAB3_V = 0xFFFFFF
const APB_SARADC_SAR1_PATT_TAB3_S = 0
const APB_SARADC_SAR1_PATT_TAB4 = 0x00FFFFFF
const APB_SARADC_SAR1_PATT_TAB4_V = 0xFFFFFF
const APB_SARADC_SAR1_PATT_TAB4_S = 0
const APB_SARADC_SAR2_PATT_TAB1 = 0x00FFFFFF
const APB_SARADC_SAR2_PATT_TAB1_V = 0xFFFFFF
const APB_SARADC_SAR2_PATT_TAB1_S = 0
const APB_SARADC_SAR2_PATT_TAB2 = 0x00FFFFFF
const APB_SARADC_SAR2_PATT_TAB2_V = 0xFFFFFF
const APB_SARADC_SAR2_PATT_TAB2_S = 0
const APB_SARADC_SAR2_PATT_TAB3 = 0x00FFFFFF
const APB_SARADC_SAR2_PATT_TAB3_V = 0xFFFFFF
const APB_SARADC_SAR2_PATT_TAB3_S = 0
const APB_SARADC_SAR2_PATT_TAB4 = 0x00FFFFFF
const APB_SARADC_SAR2_PATT_TAB4_V = 0xFFFFFF
const APB_SARADC_SAR2_PATT_TAB4_S = 0
const APB_SARADC_ADC_ARB_FIX_PRIORITY_V = 0x1
const APB_SARADC_ADC_ARB_FIX_PRIORITY_S = 12
const APB_SARADC_ADC_ARB_WIFI_PRIORITY = 0x00000003
const APB_SARADC_ADC_ARB_WIFI_PRIORITY_V = 0x3
const APB_SARADC_ADC_ARB_WIFI_PRIORITY_S = 10
const APB_SARADC_ADC_ARB_RTC_PRIORITY = 0x00000003
const APB_SARADC_ADC_ARB_RTC_PRIORITY_V = 0x3
const APB_SARADC_ADC_ARB_RTC_PRIORITY_S = 8
const APB_SARADC_ADC_ARB_APB_PRIORITY = 0x00000003
const APB_SARADC_ADC_ARB_APB_PRIORITY_V = 0x3
const APB_SARADC_ADC_ARB_APB_PRIORITY_S = 6
const APB_SARADC_ADC_ARB_GRANT_FORCE_V = 0x1
const APB_SARADC_ADC_ARB_GRANT_FORCE_S = 5
const APB_SARADC_ADC_ARB_WIFI_FORCE_V = 0x1
const APB_SARADC_ADC_ARB_WIFI_FORCE_S = 4
const APB_SARADC_ADC_ARB_RTC_FORCE_V = 0x1
const APB_SARADC_ADC_ARB_RTC_FORCE_S = 3
const APB_SARADC_ADC_ARB_APB_FORCE_V = 0x1
const APB_SARADC_ADC_ARB_APB_FORCE_S = 2
const APB_SARADC_FILTER_RESET_V = 0x1
const APB_SARADC_FILTER_RESET_S = 31
const APB_SARADC_FILTER_CHANNEL0 = 0x0000001F
const APB_SARADC_FILTER_CHANNEL0_V = 0x1F
const APB_SARADC_FILTER_CHANNEL0_S = 19
const APB_SARADC_FILTER_CHANNEL1 = 0x0000001F
const APB_SARADC_FILTER_CHANNEL1_V = 0x1F
const APB_SARADC_FILTER_CHANNEL1_S = 14
const APB_SARADC_ADC1_DATA = 0x0001FFFF
const APB_SARADC_ADC1_DATA_V = 0x1FFFF
const APB_SARADC_ADC1_DATA_S = 0
const APB_SARADC_THRES0_LOW = 0x00001FFF
const APB_SARADC_THRES0_LOW_V = 0x1FFF
const APB_SARADC_THRES0_LOW_S = 18
const APB_SARADC_THRES0_HIGH = 0x00001FFF
const APB_SARADC_THRES0_HIGH_V = 0x1FFF
const APB_SARADC_THRES0_HIGH_S = 5
const APB_SARADC_THRES0_CHANNEL = 0x0000001F
const APB_SARADC_THRES0_CHANNEL_V = 0x1F
const APB_SARADC_THRES0_CHANNEL_S = 0
const APB_SARADC_THRES1_LOW = 0x00001FFF
const APB_SARADC_THRES1_LOW_V = 0x1FFF
const APB_SARADC_THRES1_LOW_S = 18
const APB_SARADC_THRES1_HIGH = 0x00001FFF
const APB_SARADC_THRES1_HIGH_V = 0x1FFF
const APB_SARADC_THRES1_HIGH_S = 5
const APB_SARADC_THRES1_CHANNEL = 0x0000001F
const APB_SARADC_THRES1_CHANNEL_V = 0x1F
const APB_SARADC_THRES1_CHANNEL_S = 0
const APB_SARADC_THRES0_EN_V = 0x1
const APB_SARADC_THRES0_EN_S = 31
const APB_SARADC_THRES1_EN_V = 0x1
const APB_SARADC_THRES1_EN_S = 30
const APB_SARADC_THRES2_EN_V = 0x1
const APB_SARADC_THRES2_EN_S = 29
const APB_SARADC_THRES3_EN_V = 0x1
const APB_SARADC_THRES3_EN_S = 28
const APB_SARADC_THRES_ALL_EN_V = 0x1
const APB_SARADC_THRES_ALL_EN_S = 27
const APB_SARADC_ADC1_DONE_INT_ENA_V = 0x1
const APB_SARADC_ADC1_DONE_INT_ENA_S = 31
const APB_SARADC_ADC2_DONE_INT_ENA_V = 0x1
const APB_SARADC_ADC2_DONE_INT_ENA_S = 30
const APB_SARADC_THRES0_HIGH_INT_ENA_V = 0x1
const APB_SARADC_THRES0_HIGH_INT_ENA_S = 29
const APB_SARADC_THRES1_HIGH_INT_ENA_V = 0x1
const APB_SARADC_THRES1_HIGH_INT_ENA_S = 28
const APB_SARADC_THRES0_LOW_INT_ENA_V = 0x1
const APB_SARADC_THRES0_LOW_INT_ENA_S = 27
const APB_SARADC_THRES1_LOW_INT_ENA_V = 0x1
const APB_SARADC_THRES1_LOW_INT_ENA_S = 26
const APB_SARADC_ADC1_DONE_INT_RAW_V = 0x1
const APB_SARADC_ADC1_DONE_INT_RAW_S = 31
const APB_SARADC_ADC2_DONE_INT_RAW_V = 0x1
const APB_SARADC_ADC2_DONE_INT_RAW_S = 30
const APB_SARADC_THRES0_HIGH_INT_RAW_V = 0x1
const APB_SARADC_THRES0_HIGH_INT_RAW_S = 29
const APB_SARADC_THRES1_HIGH_INT_RAW_V = 0x1
const APB_SARADC_THRES1_HIGH_INT_RAW_S = 28
const APB_SARADC_THRES0_LOW_INT_RAW_V = 0x1
const APB_SARADC_THRES0_LOW_INT_RAW_S = 27
const APB_SARADC_THRES1_LOW_INT_RAW_V = 0x1
const APB_SARADC_THRES1_LOW_INT_RAW_S = 26
const APB_SARADC_ADC1_DONE_INT_ST_V = 0x1
const APB_SARADC_ADC1_DONE_INT_ST_S = 31
const APB_SARADC_ADC2_DONE_INT_ST_V = 0x1
const APB_SARADC_ADC2_DONE_INT_ST_S = 30
const APB_SARADC_THRES0_HIGH_INT_ST_V = 0x1
const APB_SARADC_THRES0_HIGH_INT_ST_S = 29
const APB_SARADC_THRES1_HIGH_INT_ST_V = 0x1
const APB_SARADC_THRES1_HIGH_INT_ST_S = 28
const APB_SARADC_THRES0_LOW_INT_ST_V = 0x1
const APB_SARADC_THRES0_LOW_INT_ST_S = 27
const APB_SARADC_THRES1_LOW_INT_ST_V = 0x1
const APB_SARADC_THRES1_LOW_INT_ST_S = 26
const APB_SARADC_ADC1_DONE_INT_CLR_V = 0x1
const APB_SARADC_ADC1_DONE_INT_CLR_S = 31
const APB_SARADC_ADC2_DONE_INT_CLR_V = 0x1
const APB_SARADC_ADC2_DONE_INT_CLR_S = 30
const APB_SARADC_THRES0_HIGH_INT_CLR_V = 0x1
const APB_SARADC_THRES0_HIGH_INT_CLR_S = 29
const APB_SARADC_THRES1_HIGH_INT_CLR_V = 0x1
const APB_SARADC_THRES1_HIGH_INT_CLR_S = 28
const APB_SARADC_THRES0_LOW_INT_CLR_V = 0x1
const APB_SARADC_THRES0_LOW_INT_CLR_S = 27
const APB_SARADC_THRES1_LOW_INT_CLR_V = 0x1
const APB_SARADC_THRES1_LOW_INT_CLR_S = 26
const APB_SARADC_APB_ADC_TRANS_V = 0x1
const APB_SARADC_APB_ADC_TRANS_S = 31
const APB_SARADC_APB_ADC_RESET_FSM_V = 0x1
const APB_SARADC_APB_ADC_RESET_FSM_S = 30
const APB_SARADC_APB_ADC_EOF_NUM = 0x0000FFFF
const APB_SARADC_APB_ADC_EOF_NUM_V = 0xFFFF
const APB_SARADC_APB_ADC_EOF_NUM_S = 0
const APB_SARADC_CLK_SEL = 0x00000003
const APB_SARADC_CLK_SEL_V = 0x3
const APB_SARADC_CLK_SEL_S = 21
const APB_SARADC_CLK_EN_V = 0x1
const APB_SARADC_CLK_EN_S = 20
const APB_SARADC_CLKM_DIV_A = 0x0000003F
const APB_SARADC_CLKM_DIV_A_V = 0x3F
const APB_SARADC_CLKM_DIV_A_S = 14
const APB_SARADC_CLKM_DIV_B = 0x0000003F
const APB_SARADC_CLKM_DIV_B_V = 0x3F
const APB_SARADC_CLKM_DIV_B_S = 8
const APB_SARADC_CLKM_DIV_NUM = 0x000000FF
const APB_SARADC_CLKM_DIV_NUM_V = 0xFF
const APB_SARADC_CLKM_DIV_NUM_S = 0
const APB_SARADC_ADC2_DATA = 0x0001FFFF
const APB_SARADC_ADC2_DATA_V = 0x1FFFF
const APB_SARADC_ADC2_DATA_S = 0
const APB_SARADC_APB_CTRL_DATE = 0xFFFFFFFF
const APB_SARADC_APB_CTRL_DATE_V = 0xFFFFFFFF
const APB_SARADC_APB_CTRL_DATE_S = 0
const RTC_CNTL_SWD_WKEY_VALUE = 0x8F1D312A
const RTC_CNTL_SW_SYS_RST_V = 0x1
const RTC_CNTL_SW_SYS_RST_S = 31
const RTC_CNTL_DG_WRAP_FORCE_NORST_V = 0x1
const RTC_CNTL_DG_WRAP_FORCE_NORST_S = 30
const RTC_CNTL_DG_WRAP_FORCE_RST_V = 0x1
const RTC_CNTL_DG_WRAP_FORCE_RST_S = 29
const RTC_CNTL_ANALOG_FORCE_NOISO_V = 0x1
const RTC_CNTL_ANALOG_FORCE_NOISO_S = 28
const RTC_CNTL_PLL_FORCE_NOISO_V = 0x1
const RTC_CNTL_PLL_FORCE_NOISO_S = 27
const RTC_CNTL_XTL_FORCE_NOISO_V = 0x1
const RTC_CNTL_XTL_FORCE_NOISO_S = 26
const RTC_CNTL_ANALOG_FORCE_ISO_V = 0x1
const RTC_CNTL_ANALOG_FORCE_ISO_S = 25
const RTC_CNTL_PLL_FORCE_ISO_V = 0x1
const RTC_CNTL_PLL_FORCE_ISO_S = 24
const RTC_CNTL_XTL_FORCE_ISO_V = 0x1
const RTC_CNTL_XTL_FORCE_ISO_S = 23
const RTC_CNTL_XTL_EN_WAIT = 0x0000000F
const RTC_CNTL_XTL_EN_WAIT_V = 0xF
const RTC_CNTL_XTL_EN_WAIT_S = 14
const RTC_CNTL_XTL_FORCE_PU_V = 0x1
const RTC_CNTL_XTL_FORCE_PU_S = 13
const RTC_CNTL_XTL_FORCE_PD_V = 0x1
const RTC_CNTL_XTL_FORCE_PD_S = 12
const RTC_CNTL_BBPLL_FORCE_PU_V = 0x1
const RTC_CNTL_BBPLL_FORCE_PU_S = 11
const RTC_CNTL_BBPLL_FORCE_PD_V = 0x1
const RTC_CNTL_BBPLL_FORCE_PD_S = 10
const RTC_CNTL_BBPLL_I2C_FORCE_PU_V = 0x1
const RTC_CNTL_BBPLL_I2C_FORCE_PU_S = 9
const RTC_CNTL_BBPLL_I2C_FORCE_PD_V = 0x1
const RTC_CNTL_BBPLL_I2C_FORCE_PD_S = 8
const RTC_CNTL_BB_I2C_FORCE_PU_V = 0x1
const RTC_CNTL_BB_I2C_FORCE_PU_S = 7
const RTC_CNTL_BB_I2C_FORCE_PD_V = 0x1
const RTC_CNTL_BB_I2C_FORCE_PD_S = 6
const RTC_CNTL_SW_PROCPU_RST_V = 0x1
const RTC_CNTL_SW_PROCPU_RST_S = 5
const RTC_CNTL_SW_APPCPU_RST_V = 0x1
const RTC_CNTL_SW_APPCPU_RST_S = 4
const RTC_CNTL_SW_STALL_PROCPU_C0 = 0x00000003
const RTC_CNTL_SW_STALL_PROCPU_C0_V = 0x3
const RTC_CNTL_SW_STALL_PROCPU_C0_S = 2
const RTC_CNTL_SW_STALL_APPCPU_C0 = 0x00000003
const RTC_CNTL_SW_STALL_APPCPU_C0_V = 0x3
const RTC_CNTL_SW_STALL_APPCPU_C0_S = 0
const RTC_CNTL_SLP_VAL_LO = 0xFFFFFFFF
const RTC_CNTL_SLP_VAL_LO_V = 0xFFFFFFFF
const RTC_CNTL_SLP_VAL_LO_S = 0
const RTC_CNTL_MAIN_TIMER_ALARM_EN_V = 0x1
const RTC_CNTL_MAIN_TIMER_ALARM_EN_S = 16
const RTC_CNTL_SLP_VAL_HI = 0x0000FFFF
const RTC_CNTL_SLP_VAL_HI_V = 0xFFFF
const RTC_CNTL_SLP_VAL_HI_S = 0
const RTC_CNTL_TIME_UPDATE_V = 0x1
const RTC_CNTL_TIME_UPDATE_S = 31
const RTC_CNTL_TIMER_SYS_RST_V = 0x1
const RTC_CNTL_TIMER_SYS_RST_S = 29
const RTC_CNTL_TIMER_XTL_OFF_V = 0x1
const RTC_CNTL_TIMER_XTL_OFF_S = 28
const RTC_CNTL_TIMER_SYS_STALL_V = 0x1
const RTC_CNTL_TIMER_SYS_STALL_S = 27
const RTC_CNTL_TIMER_VALUE0_LOW = 0xFFFFFFFF
const RTC_CNTL_TIMER_VALUE0_LOW_V = 0xFFFFFFFF
const RTC_CNTL_TIMER_VALUE0_LOW_S = 0
const RTC_CNTL_TIMER_VALUE0_HIGH = 0x0000FFFF
const RTC_CNTL_TIMER_VALUE0_HIGH_V = 0xFFFF
const RTC_CNTL_TIMER_VALUE0_HIGH_S = 0
const RTC_CNTL_SLEEP_EN_V = 0x1
const RTC_CNTL_SLEEP_EN_S = 31
const RTC_CNTL_SLP_REJECT_V = 0x1
const RTC_CNTL_SLP_REJECT_S = 30
const RTC_CNTL_SLP_WAKEUP_V = 0x1
const RTC_CNTL_SLP_WAKEUP_S = 29
const RTC_CNTL_SDIO_ACTIVE_IND_V = 0x1
const RTC_CNTL_SDIO_ACTIVE_IND_S = 28
const RTC_CNTL_APB2RTC_BRIDGE_SEL_V = 0x1
const RTC_CNTL_APB2RTC_BRIDGE_SEL_S = 22
const RTC_CNTL_SLP_REJECT_CAUSE_CLR_V = 0x1
const RTC_CNTL_SLP_REJECT_CAUSE_CLR_S = 1
const RTC_CNTL_SW_CPU_INT_V = 0x1
const RTC_CNTL_SW_CPU_INT_S = 0
const RTC_CNTL_PLL_BUF_WAIT = 0x000000FF
const RTC_CNTL_PLL_BUF_WAIT_V = 0xFF
const RTC_CNTL_PLL_BUF_WAIT_S = 24
const RTC_CNTL_XTL_BUF_WAIT = 0x000003FF
const RTC_CNTL_XTL_BUF_WAIT_V = 0x3FF
const RTC_CNTL_XTL_BUF_WAIT_S = 14
const RTC_CNTL_CK8M_WAIT = 0x000000FF
const RTC_CNTL_CK8M_WAIT_V = 0xFF
const RTC_CNTL_CK8M_WAIT_S = 6
const RTC_CNTL_CPU_STALL_WAIT = 0x0000001F
const RTC_CNTL_CPU_STALL_WAIT_V = 0x1F
const RTC_CNTL_CPU_STALL_WAIT_S = 1
const RTC_CNTL_CPU_STALL_EN_V = 0x1
const RTC_CNTL_CPU_STALL_EN_S = 0
const RTC_CNTL_MIN_TIME_CK8M_OFF = 0x000000FF
const RTC_CNTL_MIN_TIME_CK8M_OFF_V = 0xFF
const RTC_CNTL_MIN_TIME_CK8M_OFF_S = 24
const RTC_CNTL_ULPCP_TOUCH_START_WAIT = 0x000001FF
const RTC_CNTL_ULPCP_TOUCH_START_WAIT_V = 0x1FF
const RTC_CNTL_ULPCP_TOUCH_START_WAIT_S = 15
const RTC_CNTL_BT_POWERUP_TIMER = 0x0000007F
const RTC_CNTL_BT_POWERUP_TIMER_V = 0x7F
const RTC_CNTL_BT_POWERUP_TIMER_S = 25
const RTC_CNTL_BT_WAIT_TIMER = 0x000001FF
const RTC_CNTL_BT_WAIT_TIMER_V = 0x1FF
const RTC_CNTL_BT_WAIT_TIMER_S = 16
const RTC_CNTL_WIFI_POWERUP_TIMER = 0x0000007F
const RTC_CNTL_WIFI_POWERUP_TIMER_V = 0x7F
const RTC_CNTL_WIFI_POWERUP_TIMER_S = 9
const RTC_CNTL_WIFI_WAIT_TIMER = 0x000001FF
const RTC_CNTL_WIFI_WAIT_TIMER_V = 0x1FF
const RTC_CNTL_WIFI_WAIT_TIMER_S = 0
const RTC_CNTL_DG_WRAP_POWERUP_TIMER = 0x0000007F
const RTC_CNTL_DG_WRAP_POWERUP_TIMER_V = 0x7F
const RTC_CNTL_DG_WRAP_POWERUP_TIMER_S = 25
const RTC_CNTL_DG_WRAP_WAIT_TIMER = 0x000001FF
const RTC_CNTL_DG_WRAP_WAIT_TIMER_V = 0x1FF
const RTC_CNTL_DG_WRAP_WAIT_TIMER_S = 16
const RTC_CNTL_POWERUP_TIMER = 0x0000007F
const RTC_CNTL_POWERUP_TIMER_V = 0x7F
const RTC_CNTL_POWERUP_TIMER_S = 9
const RTC_CNTL_WAIT_TIMER = 0x000001FF
const RTC_CNTL_WAIT_TIMER_V = 0x1FF
const RTC_CNTL_WAIT_TIMER_S = 0
const RTC_CNTL_MIN_SLP_VAL = 0x000000FF
const RTC_CNTL_MIN_SLP_VAL_V = 0xFF
const RTC_CNTL_MIN_SLP_VAL_S = 8
const RTC_CNTL_DG_PERI_POWERUP_TIMER = 0x0000007F
const RTC_CNTL_DG_PERI_POWERUP_TIMER_V = 0x7F
const RTC_CNTL_DG_PERI_POWERUP_TIMER_S = 25
const RTC_CNTL_DG_PERI_WAIT_TIMER = 0x000001FF
const RTC_CNTL_DG_PERI_WAIT_TIMER_V = 0x1FF
const RTC_CNTL_DG_PERI_WAIT_TIMER_S = 16
const RTC_CNTL_CPU_TOP_POWERUP_TIMER = 0x0000007F
const RTC_CNTL_CPU_TOP_POWERUP_TIMER_V = 0x7F
const RTC_CNTL_CPU_TOP_POWERUP_TIMER_S = 9
const RTC_CNTL_CPU_TOP_WAIT_TIMER = 0x000001FF
const RTC_CNTL_CPU_TOP_WAIT_TIMER_V = 0x1FF
const RTC_CNTL_CPU_TOP_WAIT_TIMER_S = 0
const RTC_CNTL_PLL_I2C_PU_V = 0x1
const RTC_CNTL_PLL_I2C_PU_S = 31
const RTC_CNTL_CKGEN_I2C_PU_V = 0x1
const RTC_CNTL_CKGEN_I2C_PU_S = 30
const RTC_CNTL_RFRX_PBUS_PU_V = 0x1
const RTC_CNTL_RFRX_PBUS_PU_S = 28
const RTC_CNTL_TXRF_I2C_PU_V = 0x1
const RTC_CNTL_TXRF_I2C_PU_S = 27
const RTC_CNTL_PVTMON_PU_V = 0x1
const RTC_CNTL_PVTMON_PU_S = 26
const RTC_CNTL_BBPLL_CAL_SLP_START_V = 0x1
const RTC_CNTL_BBPLL_CAL_SLP_START_S = 25
const RTC_CNTL_ANALOG_TOP_ISO_MONITOR_V = 0x1
const RTC_CNTL_ANALOG_TOP_ISO_MONITOR_S = 24
const RTC_CNTL_ANALOG_TOP_ISO_SLEEP_V = 0x1
const RTC_CNTL_ANALOG_TOP_ISO_SLEEP_S = 23
const RTC_CNTL_SAR_I2C_PU_V = 0x1
const RTC_CNTL_SAR_I2C_PU_S = 22
const RTC_CNTL_GLITCH_RST_EN_V = 0x1
const RTC_CNTL_GLITCH_RST_EN_S = 20
const RTC_CNTL_I2C_RESET_POR_FORCE_PU_V = 0x1
const RTC_CNTL_I2C_RESET_POR_FORCE_PU_S = 19
const RTC_CNTL_I2C_RESET_POR_FORCE_PD_V = 0x1
const RTC_CNTL_I2C_RESET_POR_FORCE_PD_S = 18
const RTC_CNTL_PRO_DRESET_MASK_V = 0x1
const RTC_CNTL_PRO_DRESET_MASK_S = 25
const RTC_CNTL_APP_DRESET_MASK_V = 0x1
const RTC_CNTL_APP_DRESET_MASK_S = 24
const RTC_CNTL_RESET_FLAG_JTAG_APPCPU_CLR_V = 0x1
const RTC_CNTL_RESET_FLAG_JTAG_APPCPU_CLR_S = 23
const RTC_CNTL_RESET_FLAG_JTAG_PROCPU_CLR_V = 0x1
const RTC_CNTL_RESET_FLAG_JTAG_PROCPU_CLR_S = 22
const RTC_CNTL_RESET_FLAG_JTAG_APPCPU_V = 0x1
const RTC_CNTL_RESET_FLAG_JTAG_APPCPU_S = 21
const RTC_CNTL_RESET_FLAG_JTAG_PROCPU_V = 0x1
const RTC_CNTL_RESET_FLAG_JTAG_PROCPU_S = 20
const RTC_CNTL_PROCPU_OCD_HALT_ON_RESET_V = 0x1
const RTC_CNTL_PROCPU_OCD_HALT_ON_RESET_S = 19
const RTC_CNTL_APPCPU_OCD_HALT_ON_RESET_V = 0x1
const RTC_CNTL_APPCPU_OCD_HALT_ON_RESET_S = 18
const RTC_CNTL_RESET_FLAG_APPCPU_CLR_V = 0x1
const RTC_CNTL_RESET_FLAG_APPCPU_CLR_S = 17
const RTC_CNTL_RESET_FLAG_PROCPU_CLR_V = 0x1
const RTC_CNTL_RESET_FLAG_PROCPU_CLR_S = 16
const RTC_CNTL_RESET_FLAG_APPCPU_V = 0x1
const RTC_CNTL_RESET_FLAG_APPCPU_S = 15
const RTC_CNTL_RESET_FLAG_PROCPU_V = 0x1
const RTC_CNTL_RESET_FLAG_PROCPU_S = 14
const RTC_CNTL_PROCPU_STAT_VECTOR_SEL_V = 0x1
const RTC_CNTL_PROCPU_STAT_VECTOR_SEL_S = 13
const RTC_CNTL_APPCPU_STAT_VECTOR_SEL_V = 0x1
const RTC_CNTL_APPCPU_STAT_VECTOR_SEL_S = 12
const RTC_CNTL_RESET_CAUSE_APPCPU = 0x0000003F
const RTC_CNTL_RESET_CAUSE_APPCPU_V = 0x3F
const RTC_CNTL_RESET_CAUSE_APPCPU_S = 6
const RTC_CNTL_RESET_CAUSE_PROCPU = 0x0000003F
const RTC_CNTL_RESET_CAUSE_PROCPU_V = 0x3F
const RTC_CNTL_RESET_CAUSE_PROCPU_S = 0
const RTC_CNTL_WAKEUP_ENA = 0x0001FFFF
const RTC_CNTL_WAKEUP_ENA_V = 0x1FFFF
const RTC_CNTL_WAKEUP_ENA_S = 15
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_ENA_V = 0x1
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_ENA_S = 20
const RTC_CNTL_GLITCH_DET_INT_ENA_V = 0x1
const RTC_CNTL_GLITCH_DET_INT_ENA_S = 19
const RTC_CNTL_TOUCH_TIMEOUT_INT_ENA_V = 0x1
const RTC_CNTL_TOUCH_TIMEOUT_INT_ENA_S = 18
const RTC_CNTL_COCPU_TRAP_INT_ENA_V = 0x1
const RTC_CNTL_COCPU_TRAP_INT_ENA_S = 17
const RTC_CNTL_XTAL32K_DEAD_INT_ENA_V = 0x1
const RTC_CNTL_XTAL32K_DEAD_INT_ENA_S = 16
const RTC_CNTL_SWD_INT_ENA_V = 0x1
const RTC_CNTL_SWD_INT_ENA_S = 15
const RTC_CNTL_SARADC2_INT_ENA_V = 0x1
const RTC_CNTL_SARADC2_INT_ENA_S = 14
const RTC_CNTL_COCPU_INT_ENA_V = 0x1
const RTC_CNTL_COCPU_INT_ENA_S = 13
const RTC_CNTL_TSENS_INT_ENA_V = 0x1
const RTC_CNTL_TSENS_INT_ENA_S = 12
const RTC_CNTL_SARADC1_INT_ENA_V = 0x1
const RTC_CNTL_SARADC1_INT_ENA_S = 11
const RTC_CNTL_MAIN_TIMER_INT_ENA_V = 0x1
const RTC_CNTL_MAIN_TIMER_INT_ENA_S = 10
const RTC_CNTL_BROWN_OUT_INT_ENA_V = 0x1
const RTC_CNTL_BROWN_OUT_INT_ENA_S = 9
const RTC_CNTL_TOUCH_INACTIVE_INT_ENA_V = 0x1
const RTC_CNTL_TOUCH_INACTIVE_INT_ENA_S = 8
const RTC_CNTL_TOUCH_ACTIVE_INT_ENA_V = 0x1
const RTC_CNTL_TOUCH_ACTIVE_INT_ENA_S = 7
const RTC_CNTL_TOUCH_DONE_INT_ENA_V = 0x1
const RTC_CNTL_TOUCH_DONE_INT_ENA_S = 6
const RTC_CNTL_ULP_CP_INT_ENA_V = 0x1
const RTC_CNTL_ULP_CP_INT_ENA_S = 5
const RTC_CNTL_TOUCH_SCAN_DONE_INT_ENA_V = 0x1
const RTC_CNTL_TOUCH_SCAN_DONE_INT_ENA_S = 4
const RTC_CNTL_WDT_INT_ENA_V = 0x1
const RTC_CNTL_WDT_INT_ENA_S = 3
const RTC_CNTL_SDIO_IDLE_INT_ENA_V = 0x1
const RTC_CNTL_SDIO_IDLE_INT_ENA_S = 2
const RTC_CNTL_SLP_REJECT_INT_ENA_V = 0x1
const RTC_CNTL_SLP_REJECT_INT_ENA_S = 1
const RTC_CNTL_SLP_WAKEUP_INT_ENA_V = 0x1
const RTC_CNTL_SLP_WAKEUP_INT_ENA_S = 0
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_RAW_V = 0x1
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_RAW_S = 20
const RTC_CNTL_GLITCH_DET_INT_RAW_V = 0x1
const RTC_CNTL_GLITCH_DET_INT_RAW_S = 19
const RTC_CNTL_TOUCH_TIMEOUT_INT_RAW_V = 0x1
const RTC_CNTL_TOUCH_TIMEOUT_INT_RAW_S = 18
const RTC_CNTL_COCPU_TRAP_INT_RAW_V = 0x1
const RTC_CNTL_COCPU_TRAP_INT_RAW_S = 17
const RTC_CNTL_XTAL32K_DEAD_INT_RAW_V = 0x1
const RTC_CNTL_XTAL32K_DEAD_INT_RAW_S = 16
const RTC_CNTL_SWD_INT_RAW_V = 0x1
const RTC_CNTL_SWD_INT_RAW_S = 15
const RTC_CNTL_SARADC2_INT_RAW_V = 0x1
const RTC_CNTL_SARADC2_INT_RAW_S = 14
const RTC_CNTL_COCPU_INT_RAW_V = 0x1
const RTC_CNTL_COCPU_INT_RAW_S = 13
const RTC_CNTL_TSENS_INT_RAW_V = 0x1
const RTC_CNTL_TSENS_INT_RAW_S = 12
const RTC_CNTL_SARADC1_INT_RAW_V = 0x1
const RTC_CNTL_SARADC1_INT_RAW_S = 11
const RTC_CNTL_MAIN_TIMER_INT_RAW_V = 0x1
const RTC_CNTL_MAIN_TIMER_INT_RAW_S = 10
const RTC_CNTL_BROWN_OUT_INT_RAW_V = 0x1
const RTC_CNTL_BROWN_OUT_INT_RAW_S = 9
const RTC_CNTL_TOUCH_INACTIVE_INT_RAW_V = 0x1
const RTC_CNTL_TOUCH_INACTIVE_INT_RAW_S = 8
const RTC_CNTL_TOUCH_ACTIVE_INT_RAW_V = 0x1
const RTC_CNTL_TOUCH_ACTIVE_INT_RAW_S = 7
const RTC_CNTL_TOUCH_DONE_INT_RAW_V = 0x1
const RTC_CNTL_TOUCH_DONE_INT_RAW_S = 6
const RTC_CNTL_ULP_CP_INT_RAW_V = 0x1
const RTC_CNTL_ULP_CP_INT_RAW_S = 5
const RTC_CNTL_TOUCH_SCAN_DONE_INT_RAW_V = 0x1
const RTC_CNTL_TOUCH_SCAN_DONE_INT_RAW_S = 4
const RTC_CNTL_WDT_INT_RAW_V = 0x1
const RTC_CNTL_WDT_INT_RAW_S = 3
const RTC_CNTL_SDIO_IDLE_INT_RAW_V = 0x1
const RTC_CNTL_SDIO_IDLE_INT_RAW_S = 2
const RTC_CNTL_SLP_REJECT_INT_RAW_V = 0x1
const RTC_CNTL_SLP_REJECT_INT_RAW_S = 1
const RTC_CNTL_SLP_WAKEUP_INT_RAW_V = 0x1
const RTC_CNTL_SLP_WAKEUP_INT_RAW_S = 0
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_ST_V = 0x1
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_ST_S = 20
const RTC_CNTL_GLITCH_DET_INT_ST_V = 0x1
const RTC_CNTL_GLITCH_DET_INT_ST_S = 19
const RTC_CNTL_TOUCH_TIMEOUT_INT_ST_V = 0x1
const RTC_CNTL_TOUCH_TIMEOUT_INT_ST_S = 18
const RTC_CNTL_COCPU_TRAP_INT_ST_V = 0x1
const RTC_CNTL_COCPU_TRAP_INT_ST_S = 17
const RTC_CNTL_XTAL32K_DEAD_INT_ST_V = 0x1
const RTC_CNTL_XTAL32K_DEAD_INT_ST_S = 16
const RTC_CNTL_SWD_INT_ST_V = 0x1
const RTC_CNTL_SWD_INT_ST_S = 15
const RTC_CNTL_SARADC2_INT_ST_V = 0x1
const RTC_CNTL_SARADC2_INT_ST_S = 14
const RTC_CNTL_COCPU_INT_ST_V = 0x1
const RTC_CNTL_COCPU_INT_ST_S = 13
const RTC_CNTL_TSENS_INT_ST_V = 0x1
const RTC_CNTL_TSENS_INT_ST_S = 12
const RTC_CNTL_SARADC1_INT_ST_V = 0x1
const RTC_CNTL_SARADC1_INT_ST_S = 11
const RTC_CNTL_MAIN_TIMER_INT_ST_V = 0x1
const RTC_CNTL_MAIN_TIMER_INT_ST_S = 10
const RTC_CNTL_BROWN_OUT_INT_ST_V = 0x1
const RTC_CNTL_BROWN_OUT_INT_ST_S = 9
const RTC_CNTL_TOUCH_INACTIVE_INT_ST_V = 0x1
const RTC_CNTL_TOUCH_INACTIVE_INT_ST_S = 8
const RTC_CNTL_TOUCH_ACTIVE_INT_ST_V = 0x1
const RTC_CNTL_TOUCH_ACTIVE_INT_ST_S = 7
const RTC_CNTL_TOUCH_DONE_INT_ST_V = 0x1
const RTC_CNTL_TOUCH_DONE_INT_ST_S = 6
const RTC_CNTL_ULP_CP_INT_ST_V = 0x1
const RTC_CNTL_ULP_CP_INT_ST_S = 5
const RTC_CNTL_TOUCH_SCAN_DONE_INT_ST_V = 0x1
const RTC_CNTL_TOUCH_SCAN_DONE_INT_ST_S = 4
const RTC_CNTL_WDT_INT_ST_V = 0x1
const RTC_CNTL_WDT_INT_ST_S = 3
const RTC_CNTL_SDIO_IDLE_INT_ST_V = 0x1
const RTC_CNTL_SDIO_IDLE_INT_ST_S = 2
const RTC_CNTL_SLP_REJECT_INT_ST_V = 0x1
const RTC_CNTL_SLP_REJECT_INT_ST_S = 1
const RTC_CNTL_SLP_WAKEUP_INT_ST_V = 0x1
const RTC_CNTL_SLP_WAKEUP_INT_ST_S = 0
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_CLR_V = 0x1
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_CLR_S = 20
const RTC_CNTL_GLITCH_DET_INT_CLR_V = 0x1
const RTC_CNTL_GLITCH_DET_INT_CLR_S = 19
const RTC_CNTL_TOUCH_TIMEOUT_INT_CLR_V = 0x1
const RTC_CNTL_TOUCH_TIMEOUT_INT_CLR_S = 18
const RTC_CNTL_COCPU_TRAP_INT_CLR_V = 0x1
const RTC_CNTL_COCPU_TRAP_INT_CLR_S = 17
const RTC_CNTL_XTAL32K_DEAD_INT_CLR_V = 0x1
const RTC_CNTL_XTAL32K_DEAD_INT_CLR_S = 16
const RTC_CNTL_SWD_INT_CLR_V = 0x1
const RTC_CNTL_SWD_INT_CLR_S = 15
const RTC_CNTL_SARADC2_INT_CLR_V = 0x1
const RTC_CNTL_SARADC2_INT_CLR_S = 14
const RTC_CNTL_COCPU_INT_CLR_V = 0x1
const RTC_CNTL_COCPU_INT_CLR_S = 13
const RTC_CNTL_TSENS_INT_CLR_V = 0x1
const RTC_CNTL_TSENS_INT_CLR_S = 12
const RTC_CNTL_SARADC1_INT_CLR_V = 0x1
const RTC_CNTL_SARADC1_INT_CLR_S = 11
const RTC_CNTL_MAIN_TIMER_INT_CLR_V = 0x1
const RTC_CNTL_MAIN_TIMER_INT_CLR_S = 10
const RTC_CNTL_BROWN_OUT_INT_CLR_V = 0x1
const RTC_CNTL_BROWN_OUT_INT_CLR_S = 9
const RTC_CNTL_TOUCH_INACTIVE_INT_CLR_V = 0x1
const RTC_CNTL_TOUCH_INACTIVE_INT_CLR_S = 8
const RTC_CNTL_TOUCH_ACTIVE_INT_CLR_V = 0x1
const RTC_CNTL_TOUCH_ACTIVE_INT_CLR_S = 7
const RTC_CNTL_TOUCH_DONE_INT_CLR_V = 0x1
const RTC_CNTL_TOUCH_DONE_INT_CLR_S = 6
const RTC_CNTL_ULP_CP_INT_CLR_V = 0x1
const RTC_CNTL_ULP_CP_INT_CLR_S = 5
const RTC_CNTL_TOUCH_SCAN_DONE_INT_CLR_V = 0x1
const RTC_CNTL_TOUCH_SCAN_DONE_INT_CLR_S = 4
const RTC_CNTL_WDT_INT_CLR_V = 0x1
const RTC_CNTL_WDT_INT_CLR_S = 3
const RTC_CNTL_SDIO_IDLE_INT_CLR_V = 0x1
const RTC_CNTL_SDIO_IDLE_INT_CLR_S = 2
const RTC_CNTL_SLP_REJECT_INT_CLR_V = 0x1
const RTC_CNTL_SLP_REJECT_INT_CLR_S = 1
const RTC_CNTL_SLP_WAKEUP_INT_CLR_V = 0x1
const RTC_CNTL_SLP_WAKEUP_INT_CLR_S = 0
const RTC_CNTL_SCRATCH0 = 0xFFFFFFFF
const RTC_CNTL_SCRATCH0_V = 0xFFFFFFFF
const RTC_CNTL_SCRATCH0_S = 0
const RTC_CNTL_SCRATCH1 = 0xFFFFFFFF
const RTC_CNTL_SCRATCH1_V = 0xFFFFFFFF
const RTC_CNTL_SCRATCH1_S = 0
const RTC_CNTL_SCRATCH2 = 0xFFFFFFFF
const RTC_CNTL_SCRATCH2_V = 0xFFFFFFFF
const RTC_CNTL_SCRATCH2_S = 0
const RTC_CNTL_SCRATCH3 = 0xFFFFFFFF
const RTC_CNTL_SCRATCH3_V = 0xFFFFFFFF
const RTC_CNTL_SCRATCH3_S = 0
const RTC_CNTL_XTL_EXT_CTR_EN_V = 0x1
const RTC_CNTL_XTL_EXT_CTR_EN_S = 31
const RTC_CNTL_XTL_EXT_CTR_LV_V = 0x1
const RTC_CNTL_XTL_EXT_CTR_LV_S = 30
const RTC_CNTL_XTAL32K_GPIO_SEL_V = 0x1
const RTC_CNTL_XTAL32K_GPIO_SEL_S = 23
const RTC_CNTL_WDT_STATE = 0x00000007
const RTC_CNTL_WDT_STATE_V = 0x7
const RTC_CNTL_WDT_STATE_S = 20
const RTC_CNTL_DAC_XTAL_32K = 0x00000007
const RTC_CNTL_DAC_XTAL_32K_V = 0x7
const RTC_CNTL_DAC_XTAL_32K_S = 17
const RTC_CNTL_XPD_XTAL_32K_V = 0x1
const RTC_CNTL_XPD_XTAL_32K_S = 16
const RTC_CNTL_DRES_XTAL_32K = 0x00000007
const RTC_CNTL_DRES_XTAL_32K_V = 0x7
const RTC_CNTL_DRES_XTAL_32K_S = 13
const RTC_CNTL_DGM_XTAL_32K = 0x00000007
const RTC_CNTL_DGM_XTAL_32K_V = 0x7
const RTC_CNTL_DGM_XTAL_32K_S = 10
const RTC_CNTL_DBUF_XTAL_32K_V = 0x1
const RTC_CNTL_DBUF_XTAL_32K_S = 9
const RTC_CNTL_ENCKINIT_XTAL_32K_V = 0x1
const RTC_CNTL_ENCKINIT_XTAL_32K_S = 8
const RTC_CNTL_XTAL32K_XPD_FORCE_V = 0x1
const RTC_CNTL_XTAL32K_XPD_FORCE_S = 7
const RTC_CNTL_XTAL32K_AUTO_RETURN_V = 0x1
const RTC_CNTL_XTAL32K_AUTO_RETURN_S = 6
const RTC_CNTL_XTAL32K_AUTO_RESTART_V = 0x1
const RTC_CNTL_XTAL32K_AUTO_RESTART_S = 5
const RTC_CNTL_XTAL32K_AUTO_BACKUP_V = 0x1
const RTC_CNTL_XTAL32K_AUTO_BACKUP_S = 4
const RTC_CNTL_XTAL32K_EXT_CLK_FO_V = 0x1
const RTC_CNTL_XTAL32K_EXT_CLK_FO_S = 3
const RTC_CNTL_XTAL32K_WDT_RESET_V = 0x1
const RTC_CNTL_XTAL32K_WDT_RESET_S = 2
const RTC_CNTL_XTAL32K_WDT_CLK_FO_V = 0x1
const RTC_CNTL_XTAL32K_WDT_CLK_FO_S = 1
const RTC_CNTL_XTAL32K_WDT_EN_V = 0x1
const RTC_CNTL_XTAL32K_WDT_EN_S = 0
const RTC_CNTL_EXT_WAKEUP1_LV_V = 0x1
const RTC_CNTL_EXT_WAKEUP1_LV_S = 31
const RTC_CNTL_EXT_WAKEUP0_LV_V = 0x1
const RTC_CNTL_EXT_WAKEUP0_LV_S = 30
const RTC_CNTL_GPIO_WAKEUP_FILTER_V = 0x1
const RTC_CNTL_GPIO_WAKEUP_FILTER_S = 29
const RTC_CNTL_DEEP_SLP_REJECT_EN_V = 0x1
const RTC_CNTL_DEEP_SLP_REJECT_EN_S = 31
const RTC_CNTL_LIGHT_SLP_REJECT_EN_V = 0x1
const RTC_CNTL_LIGHT_SLP_REJECT_EN_S = 30
const RTC_CNTL_SLEEP_REJECT_ENA = 0x0003FFFF
const RTC_CNTL_SLEEP_REJECT_ENA_V = 0x3FFFF
const RTC_CNTL_SLEEP_REJECT_ENA_S = 12
const RTC_CNTL_CPUPERIOD_SEL = 0x00000003
const RTC_CNTL_CPUPERIOD_SEL_V = 0x3
const RTC_CNTL_CPUPERIOD_SEL_S = 30
const RTC_CNTL_CPUSEL_CONF_V = 0x1
const RTC_CNTL_CPUSEL_CONF_S = 29
const RTC_CNTL_SDIO_ACT_DNUM = 0x000003FF
const RTC_CNTL_SDIO_ACT_DNUM_V = 0x3FF
const RTC_CNTL_SDIO_ACT_DNUM_S = 22
const RTC_CNTL_ANA_CLK_RTC_SEL = 0x00000003
const RTC_CNTL_ANA_CLK_RTC_SEL_V = 0x3
const RTC_CNTL_ANA_CLK_RTC_SEL_S = 30
const RTC_CNTL_FAST_CLK_RTC_SEL_V = 0x1
const RTC_CNTL_FAST_CLK_RTC_SEL_S = 29
const RTC_CNTL_XTAL_GLOBAL_FORCE_NOGATING_V = 0x1
const RTC_CNTL_XTAL_GLOBAL_FORCE_NOGATING_S = 28
const RTC_CNTL_XTAL_GLOBAL_FORCE_GATING_V = 0x1
const RTC_CNTL_XTAL_GLOBAL_FORCE_GATING_S = 27
const RTC_CNTL_CK8M_FORCE_PU_V = 0x1
const RTC_CNTL_CK8M_FORCE_PU_S = 26
const RTC_CNTL_CK8M_FORCE_PD_V = 0x1
const RTC_CNTL_CK8M_FORCE_PD_S = 25
const RTC_CNTL_CK8M_DFREQ = 0x000000FF
const RTC_CNTL_CK8M_DFREQ_V = 0xFF
const RTC_CNTL_CK8M_DFREQ_S = 17
const RTC_CNTL_CK8M_FORCE_NOGATING_V = 0x1
const RTC_CNTL_CK8M_FORCE_NOGATING_S = 16
const RTC_CNTL_XTAL_FORCE_NOGATING_V = 0x1
const RTC_CNTL_XTAL_FORCE_NOGATING_S = 15
const RTC_CNTL_CK8M_DIV_SEL = 0x00000007
const RTC_CNTL_CK8M_DIV_SEL_V = 0x7
const RTC_CNTL_CK8M_DIV_SEL_S = 12
const RTC_CNTL_DIG_CLK8M_EN_V = 0x1
const RTC_CNTL_DIG_CLK8M_EN_S = 10
const RTC_CNTL_DIG_CLK8M_D256_EN_V = 0x1
const RTC_CNTL_DIG_CLK8M_D256_EN_S = 9
const RTC_CNTL_DIG_XTAL32K_EN_V = 0x1
const RTC_CNTL_DIG_XTAL32K_EN_S = 8
const RTC_CNTL_ENB_CK8M_DIV_V = 0x1
const RTC_CNTL_ENB_CK8M_DIV_S = 7
const RTC_CNTL_ENB_CK8M_V = 0x1
const RTC_CNTL_ENB_CK8M_S = 6
const RTC_CNTL_CK8M_DIV = 0x00000003
const RTC_CNTL_CK8M_DIV_V = 0x3
const RTC_CNTL_CK8M_DIV_S = 4
const RTC_CNTL_CK8M_DIV_SEL_VLD_V = 0x1
const RTC_CNTL_CK8M_DIV_SEL_VLD_S = 3
const RTC_CNTL_EFUSE_CLK_FORCE_NOGATING_V = 0x1
const RTC_CNTL_EFUSE_CLK_FORCE_NOGATING_S = 2
const RTC_CNTL_EFUSE_CLK_FORCE_GATING_V = 0x1
const RTC_CNTL_EFUSE_CLK_FORCE_GATING_S = 1
const RTC_CNTL_SLOW_CLK_NEXT_EDGE_V = 0x1
const RTC_CNTL_SLOW_CLK_NEXT_EDGE_S = 31
const RTC_CNTL_ANA_CLK_DIV = 0x000000FF
const RTC_CNTL_ANA_CLK_DIV_V = 0xFF
const RTC_CNTL_ANA_CLK_DIV_S = 23
const RTC_CNTL_ANA_CLK_DIV_VLD_V = 0x1
const RTC_CNTL_ANA_CLK_DIV_VLD_S = 22
const RTC_CNTL_XPD_SDIO_REG_V = 0x1
const RTC_CNTL_XPD_SDIO_REG_S = 31
const RTC_CNTL_DREFH_SDIO = 0x00000003
const RTC_CNTL_DREFH_SDIO_V = 0x3
const RTC_CNTL_DREFH_SDIO_S = 29
const RTC_CNTL_DREFM_SDIO = 0x00000003
const RTC_CNTL_DREFM_SDIO_V = 0x3
const RTC_CNTL_DREFM_SDIO_S = 27
const RTC_CNTL_DREFL_SDIO = 0x00000003
const RTC_CNTL_DREFL_SDIO_V = 0x3
const RTC_CNTL_DREFL_SDIO_S = 25
const RTC_CNTL_REG1P8_READY_V = 0x1
const RTC_CNTL_REG1P8_READY_S = 24
const RTC_CNTL_SDIO_TIEH_V = 0x1
const RTC_CNTL_SDIO_TIEH_S = 23
const RTC_CNTL_SDIO_FORCE_V = 0x1
const RTC_CNTL_SDIO_FORCE_S = 22
const RTC_CNTL_SDIO_PD_EN_V = 0x1
const RTC_CNTL_SDIO_PD_EN_S = 21
const RTC_CNTL_SDIO_ENCURLIM_V = 0x1
const RTC_CNTL_SDIO_ENCURLIM_S = 20
const RTC_CNTL_SDIO_MODECURLIM_V = 0x1
const RTC_CNTL_SDIO_MODECURLIM_S = 19
const RTC_CNTL_SDIO_DCURLIM = 0x00000007
const RTC_CNTL_SDIO_DCURLIM_V = 0x7
const RTC_CNTL_SDIO_DCURLIM_S = 16
const RTC_CNTL_SDIO_EN_INITI_V = 0x1
const RTC_CNTL_SDIO_EN_INITI_S = 15
const RTC_CNTL_SDIO_INITI = 0x00000003
const RTC_CNTL_SDIO_INITI_V = 0x3
const RTC_CNTL_SDIO_INITI_S = 13
const RTC_CNTL_SDIO_DCAP = 0x00000003
const RTC_CNTL_SDIO_DCAP_V = 0x3
const RTC_CNTL_SDIO_DCAP_S = 11
const RTC_CNTL_SDIO_DTHDRV = 0x00000003
const RTC_CNTL_SDIO_DTHDRV_V = 0x3
const RTC_CNTL_SDIO_DTHDRV_S = 9
const RTC_CNTL_SDIO_TIMER_TARGET = 0x000000FF
const RTC_CNTL_SDIO_TIMER_TARGET_V = 0xFF
const RTC_CNTL_SDIO_TIMER_TARGET_S = 0
const RTC_CNTL_DBG_ATTEN_WAKEUP = 0x0000000F
const RTC_CNTL_DBG_ATTEN_WAKEUP_V = 0xF
const RTC_CNTL_DBG_ATTEN_WAKEUP_S = 26
const RTC_CNTL_DBG_ATTEN_MONITOR = 0x0000000F
const RTC_CNTL_DBG_ATTEN_MONITOR_V = 0xF
const RTC_CNTL_DBG_ATTEN_MONITOR_S = 22
const RTC_CNTL_DBG_ATTEN_DEEP_SLP = 0x0000000F
const RTC_CNTL_DBG_ATTEN_DEEP_SLP_V = 0xF
const RTC_CNTL_DBG_ATTEN_DEEP_SLP_S = 18
const RTC_CNTL_BIAS_SLEEP_MONITOR_V = 0x1
const RTC_CNTL_BIAS_SLEEP_MONITOR_S = 17
const RTC_CNTL_BIAS_SLEEP_DEEP_SLP_V = 0x1
const RTC_CNTL_BIAS_SLEEP_DEEP_SLP_S = 16
const RTC_CNTL_PD_CUR_MONITOR_V = 0x1
const RTC_CNTL_PD_CUR_MONITOR_S = 15
const RTC_CNTL_PD_CUR_DEEP_SLP_V = 0x1
const RTC_CNTL_PD_CUR_DEEP_SLP_S = 14
const RTC_CNTL_BIAS_BUF_MONITOR_V = 0x1
const RTC_CNTL_BIAS_BUF_MONITOR_S = 13
const RTC_CNTL_BIAS_BUF_DEEP_SLP_V = 0x1
const RTC_CNTL_BIAS_BUF_DEEP_SLP_S = 12
const RTC_CNTL_BIAS_BUF_WAKE_V = 0x1
const RTC_CNTL_BIAS_BUF_WAKE_S = 11
const RTC_CNTL_BIAS_BUF_IDLE_V = 0x1
const RTC_CNTL_BIAS_BUF_IDLE_S = 10
const RTC_CNTL_REGULATOR_FORCE_PU_V = 0x1
const RTC_CNTL_REGULATOR_FORCE_PU_S = 31
const RTC_CNTL_REGULATOR_FORCE_PD_V = 0x1
const RTC_CNTL_REGULATOR_FORCE_PD_S = 30
const RTC_CNTL_DBOOST_FORCE_PU_V = 0x1
const RTC_CNTL_DBOOST_FORCE_PU_S = 29
const RTC_CNTL_DBOOST_FORCE_PD_V = 0x1
const RTC_CNTL_DBOOST_FORCE_PD_S = 28
const RTC_CNTL_DIG_DBIAS_0V85 = 0
const RTC_CNTL_DIG_DBIAS_0V90 = 1
const RTC_CNTL_DIG_DBIAS_0V95 = 2
const RTC_CNTL_DIG_DBIAS_1V00 = 3
const RTC_CNTL_DIG_DBIAS_1V05 = 4
const RTC_CNTL_DIG_DBIAS_1V10 = 5
const RTC_CNTL_DIG_DBIAS_1V15 = 6
const RTC_CNTL_DIG_DBIAS_1V20 = 7
const RTC_CNTL_SCK_DCAP = 0x000000FF
const RTC_CNTL_SCK_DCAP_V = 0xFF
const RTC_CNTL_SCK_DCAP_S = 14
const RTC_CNTL_DIG_CAL_EN_V = 0x1
const RTC_CNTL_DIG_CAL_EN_S = 7
const RTC_CNTL_PAD_FORCE_HOLD_V = 0x1
const RTC_CNTL_PAD_FORCE_HOLD_S = 21
const RTC_CNTL_PD_EN_V = 0x1
const RTC_CNTL_PD_EN_S = 20
const RTC_CNTL_FORCE_PU_V = 0x1
const RTC_CNTL_FORCE_PU_S = 19
const RTC_CNTL_FORCE_PD_V = 0x1
const RTC_CNTL_FORCE_PD_S = 18
const RTC_CNTL_SLOWMEM_FORCE_LPU_V = 0x1
const RTC_CNTL_SLOWMEM_FORCE_LPU_S = 11
const RTC_CNTL_SLOWMEM_FORCE_LPD_V = 0x1
const RTC_CNTL_SLOWMEM_FORCE_LPD_S = 10
const RTC_CNTL_SLOWMEM_FOLW_CPU_V = 0x1
const RTC_CNTL_SLOWMEM_FOLW_CPU_S = 9
const RTC_CNTL_FASTMEM_FORCE_LPU_V = 0x1
const RTC_CNTL_FASTMEM_FORCE_LPU_S = 8
const RTC_CNTL_FASTMEM_FORCE_LPD_V = 0x1
const RTC_CNTL_FASTMEM_FORCE_LPD_S = 7
const RTC_CNTL_FASTMEM_FOLW_CPU_V = 0x1
const RTC_CNTL_FASTMEM_FOLW_CPU_S = 6
const RTC_CNTL_FORCE_NOISO_V = 0x1
const RTC_CNTL_FORCE_NOISO_S = 5
const RTC_CNTL_FORCE_ISO_V = 0x1
const RTC_CNTL_FORCE_ISO_S = 4
const RTC_CNTL_SLOWMEM_FORCE_ISO_V = 0x1
const RTC_CNTL_SLOWMEM_FORCE_ISO_S = 3
const RTC_CNTL_SLOWMEM_FORCE_NOISO_V = 0x1
const RTC_CNTL_SLOWMEM_FORCE_NOISO_S = 2
const RTC_CNTL_FASTMEM_FORCE_ISO_V = 0x1
const RTC_CNTL_FASTMEM_FORCE_ISO_S = 1
const RTC_CNTL_FASTMEM_FORCE_NOISO_V = 0x1
const RTC_CNTL_FASTMEM_FORCE_NOISO_S = 0
const RTC_CNTL_DG_VDD_DRV_B_MONITOR = 0x000000FF
const RTC_CNTL_DG_VDD_DRV_B_MONITOR_V = 0xFF
const RTC_CNTL_DG_VDD_DRV_B_MONITOR_S = 20
const RTC_CNTL_DG_VDD_DRV_B_SLP = 0x000000FF
const RTC_CNTL_DG_VDD_DRV_B_SLP_V = 0xFF
const RTC_CNTL_DG_VDD_DRV_B_SLP_S = 12
const RTC_CNTL_REGULATOR_DRV_B_SLP = 0x0000003F
const RTC_CNTL_REGULATOR_DRV_B_SLP_V = 0x3F
const RTC_CNTL_REGULATOR_DRV_B_SLP_S = 6
const RTC_CNTL_REGULATOR_DRV_B_MONITOR = 0x0000003F
const RTC_CNTL_REGULATOR_DRV_B_MONITOR_V = 0x3F
const RTC_CNTL_REGULATOR_DRV_B_MONITOR_S = 0
const RTC_CNTL_DG_WRAP_PD_EN_V = 0x1
const RTC_CNTL_DG_WRAP_PD_EN_S = 31
const RTC_CNTL_WIFI_PD_EN_V = 0x1
const RTC_CNTL_WIFI_PD_EN_S = 30
const RTC_CNTL_CPU_TOP_PD_EN_V = 0x1
const RTC_CNTL_CPU_TOP_PD_EN_S = 29
const RTC_CNTL_DG_PERI_PD_EN_V = 0x1
const RTC_CNTL_DG_PERI_PD_EN_S = 28
const RTC_CNTL_CPU_TOP_FORCE_PU_V = 0x1
const RTC_CNTL_CPU_TOP_FORCE_PU_S = 22
const RTC_CNTL_CPU_TOP_FORCE_PD_V = 0x1
const RTC_CNTL_CPU_TOP_FORCE_PD_S = 21
const RTC_CNTL_DG_WRAP_FORCE_PU_V = 0x1
const RTC_CNTL_DG_WRAP_FORCE_PU_S = 20
const RTC_CNTL_DG_WRAP_FORCE_PD_V = 0x1
const RTC_CNTL_DG_WRAP_FORCE_PD_S = 19
const RTC_CNTL_WIFI_FORCE_PU_V = 0x1
const RTC_CNTL_WIFI_FORCE_PU_S = 18
const RTC_CNTL_WIFI_FORCE_PD_V = 0x1
const RTC_CNTL_WIFI_FORCE_PD_S = 17
const RTC_CNTL_DG_PERI_FORCE_PU_V = 0x1
const RTC_CNTL_DG_PERI_FORCE_PU_S = 14
const RTC_CNTL_DG_PERI_FORCE_PD_V = 0x1
const RTC_CNTL_DG_PERI_FORCE_PD_S = 13
const RTC_CNTL_BT_FORCE_PU_V = 0x1
const RTC_CNTL_BT_FORCE_PU_S = 12
const RTC_CNTL_BT_FORCE_PD_V = 0x1
const RTC_CNTL_BT_FORCE_PD_S = 11
const RTC_CNTL_LSLP_MEM_FORCE_PU_V = 0x1
const RTC_CNTL_LSLP_MEM_FORCE_PU_S = 4
const RTC_CNTL_LSLP_MEM_FORCE_PD_V = 0x1
const RTC_CNTL_LSLP_MEM_FORCE_PD_S = 3
const RTC_CNTL_DG_WRAP_FORCE_NOISO_V = 0x1
const RTC_CNTL_DG_WRAP_FORCE_NOISO_S = 31
const RTC_CNTL_DG_WRAP_FORCE_ISO_V = 0x1
const RTC_CNTL_DG_WRAP_FORCE_ISO_S = 30
const RTC_CNTL_WIFI_FORCE_NOISO_V = 0x1
const RTC_CNTL_WIFI_FORCE_NOISO_S = 29
const RTC_CNTL_WIFI_FORCE_ISO_V = 0x1
const RTC_CNTL_WIFI_FORCE_ISO_S = 28
const RTC_CNTL_CPU_TOP_FORCE_NOISO_V = 0x1
const RTC_CNTL_CPU_TOP_FORCE_NOISO_S = 27
const RTC_CNTL_CPU_TOP_FORCE_ISO_V = 0x1
const RTC_CNTL_CPU_TOP_FORCE_ISO_S = 26
const RTC_CNTL_DG_PERI_FORCE_NOISO_V = 0x1
const RTC_CNTL_DG_PERI_FORCE_NOISO_S = 25
const RTC_CNTL_DG_PERI_FORCE_ISO_V = 0x1
const RTC_CNTL_DG_PERI_FORCE_ISO_S = 24
const RTC_CNTL_BT_FORCE_NOISO_V = 0x1
const RTC_CNTL_BT_FORCE_NOISO_S = 23
const RTC_CNTL_BT_FORCE_ISO_V = 0x1
const RTC_CNTL_BT_FORCE_ISO_S = 22
const RTC_CNTL_DG_PAD_FORCE_HOLD_V = 0x1
const RTC_CNTL_DG_PAD_FORCE_HOLD_S = 15
const RTC_CNTL_DG_PAD_FORCE_UNHOLD_V = 0x1
const RTC_CNTL_DG_PAD_FORCE_UNHOLD_S = 14
const RTC_CNTL_DG_PAD_FORCE_ISO_V = 0x1
const RTC_CNTL_DG_PAD_FORCE_ISO_S = 13
const RTC_CNTL_DG_PAD_FORCE_NOISO_V = 0x1
const RTC_CNTL_DG_PAD_FORCE_NOISO_S = 12
const RTC_CNTL_DG_PAD_AUTOHOLD_EN_V = 0x1
const RTC_CNTL_DG_PAD_AUTOHOLD_EN_S = 11
const RTC_CNTL_CLR_DG_PAD_AUTOHOLD_V = 0x1
const RTC_CNTL_CLR_DG_PAD_AUTOHOLD_S = 10
const RTC_CNTL_DG_PAD_AUTOHOLD_V = 0x1
const RTC_CNTL_DG_PAD_AUTOHOLD_S = 9
const RTC_CNTL_DIG_ISO_FORCE_ON_V = 0x1
const RTC_CNTL_DIG_ISO_FORCE_ON_S = 8
const RTC_CNTL_DIG_ISO_FORCE_OFF_V = 0x1
const RTC_CNTL_DIG_ISO_FORCE_OFF_S = 7
const RTC_CNTL_WDT_EN_V = 0x1
const RTC_CNTL_WDT_EN_S = 31
const RTC_CNTL_WDT_STG0 = 0x00000007
const RTC_CNTL_WDT_STG0_V = 0x7
const RTC_CNTL_WDT_STG0_S = 28
const RTC_CNTL_WDT_STG1 = 0x00000007
const RTC_CNTL_WDT_STG1_V = 0x7
const RTC_CNTL_WDT_STG1_S = 25
const RTC_CNTL_WDT_STG2 = 0x00000007
const RTC_CNTL_WDT_STG2_V = 0x7
const RTC_CNTL_WDT_STG2_S = 22
const RTC_CNTL_WDT_STG3 = 0x00000007
const RTC_CNTL_WDT_STG3_V = 0x7
const RTC_CNTL_WDT_STG3_S = 19
const RTC_CNTL_WDT_CPU_RESET_LENGTH = 0x00000007
const RTC_CNTL_WDT_CPU_RESET_LENGTH_V = 0x7
const RTC_CNTL_WDT_CPU_RESET_LENGTH_S = 16
const RTC_CNTL_WDT_SYS_RESET_LENGTH = 0x00000007
const RTC_CNTL_WDT_SYS_RESET_LENGTH_V = 0x7
const RTC_CNTL_WDT_SYS_RESET_LENGTH_S = 13
const RTC_CNTL_WDT_FLASHBOOT_MOD_EN_V = 0x1
const RTC_CNTL_WDT_FLASHBOOT_MOD_EN_S = 12
const RTC_CNTL_WDT_PROCPU_RESET_EN_V = 0x1
const RTC_CNTL_WDT_PROCPU_RESET_EN_S = 11
const RTC_CNTL_WDT_APPCPU_RESET_EN_V = 0x1
const RTC_CNTL_WDT_APPCPU_RESET_EN_S = 10
const RTC_CNTL_WDT_PAUSE_IN_SLP_V = 0x1
const RTC_CNTL_WDT_PAUSE_IN_SLP_S = 9
const RTC_CNTL_WDT_CHIP_RESET_EN_V = 0x1
const RTC_CNTL_WDT_CHIP_RESET_EN_S = 8
const RTC_CNTL_WDT_CHIP_RESET_WIDTH = 0x000000FF
const RTC_CNTL_WDT_CHIP_RESET_WIDTH_V = 0xFF
const RTC_CNTL_WDT_CHIP_RESET_WIDTH_S = 0
const RTC_CNTL_WDT_STG0_HOLD = 0xFFFFFFFF
const RTC_CNTL_WDT_STG0_HOLD_V = 0xFFFFFFFF
const RTC_CNTL_WDT_STG0_HOLD_S = 0
const RTC_CNTL_WDT_STG1_HOLD = 0xFFFFFFFF
const RTC_CNTL_WDT_STG1_HOLD_V = 0xFFFFFFFF
const RTC_CNTL_WDT_STG1_HOLD_S = 0
const RTC_CNTL_WDT_STG2_HOLD = 0xFFFFFFFF
const RTC_CNTL_WDT_STG2_HOLD_V = 0xFFFFFFFF
const RTC_CNTL_WDT_STG2_HOLD_S = 0
const RTC_CNTL_WDT_STG3_HOLD = 0xFFFFFFFF
const RTC_CNTL_WDT_STG3_HOLD_V = 0xFFFFFFFF
const RTC_CNTL_WDT_STG3_HOLD_S = 0
const RTC_CNTL_WDT_FEED_V = 0x1
const RTC_CNTL_WDT_FEED_S = 31
const RTC_CNTL_WDT_WKEY = 0xFFFFFFFF
const RTC_CNTL_WDT_WKEY_V = 0xFFFFFFFF
const RTC_CNTL_WDT_WKEY_S = 0
const RTC_CNTL_SWD_AUTO_FEED_EN_V = 0x1
const RTC_CNTL_SWD_AUTO_FEED_EN_S = 31
const RTC_CNTL_SWD_DISABLE_V = 0x1
const RTC_CNTL_SWD_DISABLE_S = 30
const RTC_CNTL_SWD_FEED_V = 0x1
const RTC_CNTL_SWD_FEED_S = 29
const RTC_CNTL_SWD_RST_FLAG_CLR_V = 0x1
const RTC_CNTL_SWD_RST_FLAG_CLR_S = 28
const RTC_CNTL_SWD_SIGNAL_WIDTH = 0x000003FF
const RTC_CNTL_SWD_SIGNAL_WIDTH_V = 0x3FF
const RTC_CNTL_SWD_SIGNAL_WIDTH_S = 18
const RTC_CNTL_SWD_BYPASS_RST_V = 0x1
const RTC_CNTL_SWD_BYPASS_RST_S = 17
const RTC_CNTL_SWD_FEED_INT_V = 0x1
const RTC_CNTL_SWD_FEED_INT_S = 1
const RTC_CNTL_SWD_RESET_FLAG_V = 0x1
const RTC_CNTL_SWD_RESET_FLAG_S = 0
const RTC_CNTL_SWD_WKEY = 0xFFFFFFFF
const RTC_CNTL_SWD_WKEY_V = 0xFFFFFFFF
const RTC_CNTL_SWD_WKEY_S = 0
const RTC_CNTL_SW_STALL_PROCPU_C1 = 0x0000003F
const RTC_CNTL_SW_STALL_PROCPU_C1_V = 0x3F
const RTC_CNTL_SW_STALL_PROCPU_C1_S = 26
const RTC_CNTL_SW_STALL_APPCPU_C1 = 0x0000003F
const RTC_CNTL_SW_STALL_APPCPU_C1_V = 0x3F
const RTC_CNTL_SW_STALL_APPCPU_C1_S = 20
const RTC_CNTL_SCRATCH4 = 0xFFFFFFFF
const RTC_CNTL_SCRATCH4_V = 0xFFFFFFFF
const RTC_CNTL_SCRATCH4_S = 0
const RTC_CNTL_SCRATCH5 = 0xFFFFFFFF
const RTC_CNTL_SCRATCH5_V = 0xFFFFFFFF
const RTC_CNTL_SCRATCH5_S = 0
const RTC_CNTL_SCRATCH6 = 0xFFFFFFFF
const RTC_CNTL_SCRATCH6_V = 0xFFFFFFFF
const RTC_CNTL_SCRATCH6_S = 0
const RTC_CNTL_SCRATCH7 = 0xFFFFFFFF
const RTC_CNTL_SCRATCH7_V = 0xFFFFFFFF
const RTC_CNTL_SCRATCH7_S = 0
const RTC_CNTL_MAIN_STATE = 0x0000000F
const RTC_CNTL_MAIN_STATE_V = 0xF
const RTC_CNTL_MAIN_STATE_S = 28
const RTC_CNTL_MAIN_STATE_IN_IDLE_V = 0x1
const RTC_CNTL_MAIN_STATE_IN_IDLE_S = 27
const RTC_CNTL_MAIN_STATE_IN_SLP_V = 0x1
const RTC_CNTL_MAIN_STATE_IN_SLP_S = 26
const RTC_CNTL_MAIN_STATE_IN_WAIT_XTL_V = 0x1
const RTC_CNTL_MAIN_STATE_IN_WAIT_XTL_S = 25
const RTC_CNTL_MAIN_STATE_IN_WAIT_PLL_V = 0x1
const RTC_CNTL_MAIN_STATE_IN_WAIT_PLL_S = 24
const RTC_CNTL_MAIN_STATE_IN_WAIT_8M_V = 0x1
const RTC_CNTL_MAIN_STATE_IN_WAIT_8M_S = 23
const RTC_CNTL_IN_LOW_POWER_STATE_V = 0x1
const RTC_CNTL_IN_LOW_POWER_STATE_S = 22
const RTC_CNTL_IN_WAKEUP_STATE_V = 0x1
const RTC_CNTL_IN_WAKEUP_STATE_S = 21
const RTC_CNTL_MAIN_STATE_WAIT_END_V = 0x1
const RTC_CNTL_MAIN_STATE_WAIT_END_S = 20
const RTC_CNTL_RDY_FOR_WAKEUP_V = 0x1
const RTC_CNTL_RDY_FOR_WAKEUP_S = 19
const RTC_CNTL_MAIN_STATE_PLL_ON_V = 0x1
const RTC_CNTL_MAIN_STATE_PLL_ON_S = 18
const RTC_CNTL_MAIN_STATE_XTAL_ISO_V = 0x1
const RTC_CNTL_MAIN_STATE_XTAL_ISO_S = 17
const RTC_CNTL_COCPU_STATE_DONE_V = 0x1
const RTC_CNTL_COCPU_STATE_DONE_S = 16
const RTC_CNTL_COCPU_STATE_SLP_V = 0x1
const RTC_CNTL_COCPU_STATE_SLP_S = 15
const RTC_CNTL_COCPU_STATE_SWITCH_V = 0x1
const RTC_CNTL_COCPU_STATE_SWITCH_S = 14
const RTC_CNTL_COCPU_STATE_START_V = 0x1
const RTC_CNTL_COCPU_STATE_START_S = 13
const RTC_CNTL_TOUCH_STATE_DONE_V = 0x1
const RTC_CNTL_TOUCH_STATE_DONE_S = 12
const RTC_CNTL_TOUCH_STATE_SLP_V = 0x1
const RTC_CNTL_TOUCH_STATE_SLP_S = 11
const RTC_CNTL_TOUCH_STATE_SWITCH_V = 0x1
const RTC_CNTL_TOUCH_STATE_SWITCH_S = 10
const RTC_CNTL_TOUCH_STATE_START_V = 0x1
const RTC_CNTL_TOUCH_STATE_START_S = 9
const RTC_CNTL_XPD_DIG_V = 0x1
const RTC_CNTL_XPD_DIG_S = 8
const RTC_CNTL_DIG_ISO_V = 0x1
const RTC_CNTL_DIG_ISO_S = 7
const RTC_CNTL_XPD_WIFI_V = 0x1
const RTC_CNTL_XPD_WIFI_S = 6
const RTC_CNTL_WIFI_ISO_V = 0x1
const RTC_CNTL_WIFI_ISO_S = 5
const RTC_CNTL_XPD_RTC_PERI_V = 0x1
const RTC_CNTL_XPD_RTC_PERI_S = 4
const RTC_CNTL_PERI_ISO_V = 0x1
const RTC_CNTL_PERI_ISO_S = 3
const RTC_CNTL_XPD_DIG_DCDC_V = 0x1
const RTC_CNTL_XPD_DIG_DCDC_S = 2
const RTC_CNTL_XPD_ROM0_V = 0x1
const RTC_CNTL_XPD_ROM0_S = 0
const RTC_CNTL_LOW_POWER_DIAG1 = 0xFFFFFFFF
const RTC_CNTL_LOW_POWER_DIAG1_V = 0xFFFFFFFF
const RTC_CNTL_LOW_POWER_DIAG1_S = 0
const RTC_CNTL_PAD21_HOLD_V = 0x1
const RTC_CNTL_PAD21_HOLD_S = 21
const RTC_CNTL_PAD20_HOLD_V = 0x1
const RTC_CNTL_PAD20_HOLD_S = 20
const RTC_CNTL_PAD19_HOLD_V = 0x1
const RTC_CNTL_PAD19_HOLD_S = 19
const RTC_CNTL_PDAC2_HOLD_V = 0x1
const RTC_CNTL_PDAC2_HOLD_S = 18
const RTC_CNTL_PDAC1_HOLD_V = 0x1
const RTC_CNTL_PDAC1_HOLD_S = 17
const RTC_CNTL_X32N_HOLD_V = 0x1
const RTC_CNTL_X32N_HOLD_S = 16
const RTC_CNTL_X32P_HOLD_V = 0x1
const RTC_CNTL_X32P_HOLD_S = 15
const RTC_CNTL_TOUCH_PAD14_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD14_HOLD_S = 14
const RTC_CNTL_TOUCH_PAD13_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD13_HOLD_S = 13
const RTC_CNTL_TOUCH_PAD12_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD12_HOLD_S = 12
const RTC_CNTL_TOUCH_PAD11_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD11_HOLD_S = 11
const RTC_CNTL_TOUCH_PAD10_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD10_HOLD_S = 10
const RTC_CNTL_TOUCH_PAD9_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD9_HOLD_S = 9
const RTC_CNTL_TOUCH_PAD8_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD8_HOLD_S = 8
const RTC_CNTL_TOUCH_PAD7_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD7_HOLD_S = 7
const RTC_CNTL_TOUCH_PAD6_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD6_HOLD_S = 6
const RTC_CNTL_TOUCH_PAD5_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD5_HOLD_S = 5
const RTC_CNTL_TOUCH_PAD4_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD4_HOLD_S = 4
const RTC_CNTL_TOUCH_PAD3_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD3_HOLD_S = 3
const RTC_CNTL_TOUCH_PAD2_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD2_HOLD_S = 2
const RTC_CNTL_TOUCH_PAD1_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD1_HOLD_S = 1
const RTC_CNTL_TOUCH_PAD0_HOLD_V = 0x1
const RTC_CNTL_TOUCH_PAD0_HOLD_S = 0
const RTC_CNTL_DIG_PAD_HOLD = 0xFFFFFFFF
const RTC_CNTL_DIG_PAD_HOLD_V = 0xFFFFFFFF
const RTC_CNTL_DIG_PAD_HOLD_S = 0
const RTC_CNTL_EXT_WAKEUP1_STATUS_CLR_V = 0x1
const RTC_CNTL_EXT_WAKEUP1_STATUS_CLR_S = 22
const RTC_CNTL_EXT_WAKEUP1_SEL = 0x003FFFFF
const RTC_CNTL_EXT_WAKEUP1_SEL_V = 0x3FFFFF
const RTC_CNTL_EXT_WAKEUP1_SEL_S = 0
const RTC_CNTL_EXT_WAKEUP1_STATUS = 0x003FFFFF
const RTC_CNTL_EXT_WAKEUP1_STATUS_V = 0x3FFFFF
const RTC_CNTL_EXT_WAKEUP1_STATUS_S = 0
const RTC_CNTL_BROWN_OUT_DET_V = 0x1
const RTC_CNTL_BROWN_OUT_DET_S = 31
const RTC_CNTL_BROWN_OUT_ENA_V = 0x1
const RTC_CNTL_BROWN_OUT_ENA_S = 30
const RTC_CNTL_BROWN_OUT_CNT_CLR_V = 0x1
const RTC_CNTL_BROWN_OUT_CNT_CLR_S = 29
const RTC_CNTL_BROWN_OUT_ANA_RST_EN_V = 0x1
const RTC_CNTL_BROWN_OUT_ANA_RST_EN_S = 28
const RTC_CNTL_BROWN_OUT_RST_SEL_V = 0x1
const RTC_CNTL_BROWN_OUT_RST_SEL_S = 27
const RTC_CNTL_BROWN_OUT_RST_ENA_V = 0x1
const RTC_CNTL_BROWN_OUT_RST_ENA_S = 26
const RTC_CNTL_BROWN_OUT_RST_WAIT = 0x000003FF
const RTC_CNTL_BROWN_OUT_RST_WAIT_V = 0x3FF
const RTC_CNTL_BROWN_OUT_RST_WAIT_S = 16
const RTC_CNTL_BROWN_OUT_PD_RF_ENA_V = 0x1
const RTC_CNTL_BROWN_OUT_PD_RF_ENA_S = 15
const RTC_CNTL_BROWN_OUT_CLOSE_FLASH_ENA_V = 0x1
const RTC_CNTL_BROWN_OUT_CLOSE_FLASH_ENA_S = 14
const RTC_CNTL_BROWN_OUT_INT_WAIT = 0x000003FF
const RTC_CNTL_BROWN_OUT_INT_WAIT_V = 0x3FF
const RTC_CNTL_BROWN_OUT_INT_WAIT_S = 4
const RTC_CNTL_TIMER_VALUE1_LOW = 0xFFFFFFFF
const RTC_CNTL_TIMER_VALUE1_LOW_V = 0xFFFFFFFF
const RTC_CNTL_TIMER_VALUE1_LOW_S = 0
const RTC_CNTL_TIMER_VALUE1_HIGH = 0x0000FFFF
const RTC_CNTL_TIMER_VALUE1_HIGH_V = 0xFFFF
const RTC_CNTL_TIMER_VALUE1_HIGH_S = 0
const RTC_CNTL_XTAL32K_CLK_FACTOR = 0xFFFFFFFF
const RTC_CNTL_XTAL32K_CLK_FACTOR_V = 0xFFFFFFFF
const RTC_CNTL_XTAL32K_CLK_FACTOR_S = 0
const RTC_CNTL_XTAL32K_STABLE_THRES = 0x0000000F
const RTC_CNTL_XTAL32K_STABLE_THRES_V = 0xF
const RTC_CNTL_XTAL32K_STABLE_THRES_S = 28
const RTC_CNTL_XTAL32K_WDT_TIMEOUT = 0x000000FF
const RTC_CNTL_XTAL32K_WDT_TIMEOUT_V = 0xFF
const RTC_CNTL_XTAL32K_WDT_TIMEOUT_S = 20
const RTC_CNTL_XTAL32K_RESTART_WAIT = 0x0000FFFF
const RTC_CNTL_XTAL32K_RESTART_WAIT_V = 0xFFFF
const RTC_CNTL_XTAL32K_RESTART_WAIT_S = 4
const RTC_CNTL_XTAL32K_RETURN_WAIT = 0x0000000F
const RTC_CNTL_XTAL32K_RETURN_WAIT_V = 0xF
const RTC_CNTL_XTAL32K_RETURN_WAIT_S = 0
const RTC_CNTL_ULP_CP_SLP_TIMER_EN_V = 0x1
const RTC_CNTL_ULP_CP_SLP_TIMER_EN_S = 31
const RTC_CNTL_ULP_CP_GPIO_WAKEUP_CLR_V = 0x1
const RTC_CNTL_ULP_CP_GPIO_WAKEUP_CLR_S = 30
const RTC_CNTL_ULP_CP_GPIO_WAKEUP_ENA_V = 0x1
const RTC_CNTL_ULP_CP_GPIO_WAKEUP_ENA_S = 29
const RTC_CNTL_ULP_CP_PC_INIT = 0x000007FF
const RTC_CNTL_ULP_CP_PC_INIT_V = 0x7FF
const RTC_CNTL_ULP_CP_PC_INIT_S = 0
const RTC_CNTL_ULP_CP_START_TOP_V = 0x1
const RTC_CNTL_ULP_CP_START_TOP_S = 31
const RTC_CNTL_ULP_CP_FORCE_START_TOP_V = 0x1
const RTC_CNTL_ULP_CP_FORCE_START_TOP_S = 30
const RTC_CNTL_ULP_CP_RESET_V = 0x1
const RTC_CNTL_ULP_CP_RESET_S = 29
const RTC_CNTL_ULP_CP_CLK_FO_V = 0x1
const RTC_CNTL_ULP_CP_CLK_FO_S = 28
const RTC_CNTL_ULP_CP_MEM_OFFST_CLR_V = 0x1
const RTC_CNTL_ULP_CP_MEM_OFFST_CLR_S = 22
const RTC_CNTL_ULP_CP_MEM_ADDR_SIZE = 0x000007FF
const RTC_CNTL_ULP_CP_MEM_ADDR_SIZE_V = 0x7FF
const RTC_CNTL_ULP_CP_MEM_ADDR_SIZE_S = 11
const RTC_CNTL_ULP_CP_MEM_ADDR_INIT = 0x000007FF
const RTC_CNTL_ULP_CP_MEM_ADDR_INIT_V = 0x7FF
const RTC_CNTL_ULP_CP_MEM_ADDR_INIT_S = 0
const RTC_CNTL_COCPU_CLKGATE_EN_V = 0x1
const RTC_CNTL_COCPU_CLKGATE_EN_S = 27
const RTC_CNTL_COCPU_SW_INT_TRIGGER_V = 0x1
const RTC_CNTL_COCPU_SW_INT_TRIGGER_S = 26
const RTC_CNTL_COCPU_DONE_V = 0x1
const RTC_CNTL_COCPU_DONE_S = 25
const RTC_CNTL_COCPU_DONE_FORCE_V = 0x1
const RTC_CNTL_COCPU_DONE_FORCE_S = 24
const RTC_CNTL_COCPU_SEL_V = 0x1
const RTC_CNTL_COCPU_SEL_S = 23
const RTC_CNTL_COCPU_SHUT_RESET_EN_V = 0x1
const RTC_CNTL_COCPU_SHUT_RESET_EN_S = 22
const RTC_CNTL_COCPU_SHUT_2_CLK_DIS = 0x000000FF
const RTC_CNTL_COCPU_SHUT_2_CLK_DIS_V = 0xFF
const RTC_CNTL_COCPU_SHUT_2_CLK_DIS_S = 14
const RTC_CNTL_COCPU_SHUT_V = 0x1
const RTC_CNTL_COCPU_SHUT_S = 13
const RTC_CNTL_COCPU_START_2_INTR_EN = 0x0000003F
const RTC_CNTL_COCPU_START_2_INTR_EN_V = 0x3F
const RTC_CNTL_COCPU_START_2_INTR_EN_S = 7
const RTC_CNTL_COCPU_START_2_RESET_DIS = 0x0000003F
const RTC_CNTL_COCPU_START_2_RESET_DIS_V = 0x3F
const RTC_CNTL_COCPU_START_2_RESET_DIS_S = 1
const RTC_CNTL_COCPU_CLK_FO_V = 0x1
const RTC_CNTL_COCPU_CLK_FO_S = 0
const RTC_CNTL_TOUCH_MEAS_NUM = 0x0000FFFF
const RTC_CNTL_TOUCH_MEAS_NUM_V = 0xFFFF
const RTC_CNTL_TOUCH_MEAS_NUM_S = 16
const RTC_CNTL_TOUCH_SLEEP_CYCLES = 0x0000FFFF
const RTC_CNTL_TOUCH_SLEEP_CYCLES_V = 0xFFFF
const RTC_CNTL_TOUCH_SLEEP_CYCLES_S = 0
const RTC_CNTL_TOUCH_CLKGATE_EN_V = 0x1
const RTC_CNTL_TOUCH_CLKGATE_EN_S = 31
const RTC_CNTL_TOUCH_CLK_FO_V = 0x1
const RTC_CNTL_TOUCH_CLK_FO_S = 30
const RTC_CNTL_TOUCH_RESET_V = 0x1
const RTC_CNTL_TOUCH_RESET_S = 29
const RTC_CNTL_TOUCH_TIMER_FORCE_DONE = 0x00000003
const RTC_CNTL_TOUCH_TIMER_FORCE_DONE_V = 0x3
const RTC_CNTL_TOUCH_TIMER_FORCE_DONE_S = 27
const RTC_CNTL_TOUCH_SLP_CYC_DIV = 0x00000003
const RTC_CNTL_TOUCH_SLP_CYC_DIV_V = 0x3
const RTC_CNTL_TOUCH_SLP_CYC_DIV_S = 25
const RTC_CNTL_TOUCH_XPD_WAIT = 0x000000FF
const RTC_CNTL_TOUCH_XPD_WAIT_V = 0xFF
const RTC_CNTL_TOUCH_XPD_WAIT_S = 17
const RTC_CNTL_TOUCH_START_FORCE_V = 0x1
const RTC_CNTL_TOUCH_START_FORCE_S = 16
const RTC_CNTL_TOUCH_START_EN_V = 0x1
const RTC_CNTL_TOUCH_START_EN_S = 15
const RTC_CNTL_TOUCH_START_FSM_EN_V = 0x1
const RTC_CNTL_TOUCH_START_FSM_EN_S = 14
const RTC_CNTL_TOUCH_SLP_TIMER_EN_V = 0x1
const RTC_CNTL_TOUCH_SLP_TIMER_EN_S = 13
const RTC_CNTL_TOUCH_DBIAS_V = 0x1
const RTC_CNTL_TOUCH_DBIAS_S = 12
const RTC_CNTL_TOUCH_REFC = 0x00000007
const RTC_CNTL_TOUCH_REFC_V = 0x7
const RTC_CNTL_TOUCH_REFC_S = 9
const RTC_CNTL_TOUCH_XPD_BIAS_V = 0x1
const RTC_CNTL_TOUCH_XPD_BIAS_S = 8
const RTC_CNTL_TOUCH_DREFH = 0x00000003
const RTC_CNTL_TOUCH_DREFH_V = 0x3
const RTC_CNTL_TOUCH_DREFH_S = 6
const RTC_CNTL_TOUCH_DREFL = 0x00000003
const RTC_CNTL_TOUCH_DREFL_V = 0x3
const RTC_CNTL_TOUCH_DREFL_S = 4
const RTC_CNTL_TOUCH_DRANGE = 0x00000003
const RTC_CNTL_TOUCH_DRANGE_V = 0x3
const RTC_CNTL_TOUCH_DRANGE_S = 2
const RTC_CNTL_TOUCH_OUT_RING = 0x0000000F
const RTC_CNTL_TOUCH_OUT_RING_V = 0xF
const RTC_CNTL_TOUCH_OUT_RING_S = 28
const RTC_CNTL_TOUCH_BUFDRV = 0x00000007
const RTC_CNTL_TOUCH_BUFDRV_V = 0x7
const RTC_CNTL_TOUCH_BUFDRV_S = 25
const RTC_CNTL_TOUCH_SCAN_PAD_MAP = 0x00007FFF
const RTC_CNTL_TOUCH_SCAN_PAD_MAP_V = 0x7FFF
const RTC_CNTL_TOUCH_SCAN_PAD_MAP_S = 10
const RTC_CNTL_TOUCH_SHIELD_PAD_EN_V = 0x1
const RTC_CNTL_TOUCH_SHIELD_PAD_EN_S = 9
const RTC_CNTL_TOUCH_INACTIVE_CONNECTION_V = 0x1
const RTC_CNTL_TOUCH_INACTIVE_CONNECTION_S = 8
const RTC_CNTL_TOUCH_DENOISE_EN_V = 0x1
const RTC_CNTL_TOUCH_DENOISE_EN_S = 2
const RTC_CNTL_TOUCH_DENOISE_RES = 0x00000003
const RTC_CNTL_TOUCH_DENOISE_RES_V = 0x3
const RTC_CNTL_TOUCH_DENOISE_RES_S = 0
const RTC_CNTL_TOUCH_SLP_PAD = 0x0000001F
const RTC_CNTL_TOUCH_SLP_PAD_V = 0x1F
const RTC_CNTL_TOUCH_SLP_PAD_S = 27
const RTC_CNTL_TOUCH_SLP_APPROACH_EN_V = 0x1
const RTC_CNTL_TOUCH_SLP_APPROACH_EN_S = 26
const RTC_CNTL_TOUCH_SLP_TH = 0x003FFFFF
const RTC_CNTL_TOUCH_SLP_TH_V = 0x3FFFFF
const RTC_CNTL_TOUCH_SLP_TH_S = 0
const RTC_CNTL_TOUCH_APPROACH_MEAS_TIME = 0x000000FF
const RTC_CNTL_TOUCH_APPROACH_MEAS_TIME_V = 0xFF
const RTC_CNTL_TOUCH_APPROACH_MEAS_TIME_S = 24
const RTC_CNTL_TOUCH_SLP_CHANNEL_CLR_V = 0x1
const RTC_CNTL_TOUCH_SLP_CHANNEL_CLR_S = 23
const RTC_CNTL_TOUCH_FILTER_EN_V = 0x1
const RTC_CNTL_TOUCH_FILTER_EN_S = 31
const RTC_CNTL_TOUCH_FILTER_MODE = 0x00000007
const RTC_CNTL_TOUCH_FILTER_MODE_V = 0x7
const RTC_CNTL_TOUCH_FILTER_MODE_S = 28
const RTC_CNTL_TOUCH_DEBOUNCE = 0x00000007
const RTC_CNTL_TOUCH_DEBOUNCE_V = 0x7
const RTC_CNTL_TOUCH_DEBOUNCE_S = 25
const RTC_CNTL_TOUCH_CONFIG3 = 0x00000003
const RTC_CNTL_TOUCH_CONFIG3_V = 0x3
const RTC_CNTL_TOUCH_CONFIG3_S = 23
const RTC_CNTL_TOUCH_NOISE_THRES = 0x00000003
const RTC_CNTL_TOUCH_NOISE_THRES_V = 0x3
const RTC_CNTL_TOUCH_NOISE_THRES_S = 21
const RTC_CNTL_TOUCH_CONFIG2 = 0x00000003
const RTC_CNTL_TOUCH_CONFIG2_V = 0x3
const RTC_CNTL_TOUCH_CONFIG2_S = 19
const RTC_CNTL_TOUCH_CONFIG1 = 0x0000000F
const RTC_CNTL_TOUCH_CONFIG1_V = 0xF
const RTC_CNTL_TOUCH_CONFIG1_S = 15
const RTC_CNTL_TOUCH_JITTER_STEP = 0x0000000F
const RTC_CNTL_TOUCH_JITTER_STEP_V = 0xF
const RTC_CNTL_TOUCH_JITTER_STEP_S = 11
const RTC_CNTL_TOUCH_SMOOTH_LVL = 0x00000003
const RTC_CNTL_TOUCH_SMOOTH_LVL_V = 0x3
const RTC_CNTL_TOUCH_SMOOTH_LVL_S = 9
const RTC_CNTL_TOUCH_BYPASS_NOISE_THRES_V = 0x1
const RTC_CNTL_TOUCH_BYPASS_NOISE_THRES_S = 8
const RTC_CNTL_TOUCH_BYPASS_NEG_THRES_V = 0x1
const RTC_CNTL_TOUCH_BYPASS_NEG_THRES_S = 7
const RTC_CNTL_SW_HW_USB_PHY_SEL_V = 0x1
const RTC_CNTL_SW_HW_USB_PHY_SEL_S = 20
const RTC_CNTL_SW_USB_PHY_SEL_V = 0x1
const RTC_CNTL_SW_USB_PHY_SEL_S = 19
const RTC_CNTL_IO_MUX_RESET_DISABLE_V = 0x1
const RTC_CNTL_IO_MUX_RESET_DISABLE_S = 18
const RTC_CNTL_USB_RESET_DISABLE_V = 0x1
const RTC_CNTL_USB_RESET_DISABLE_S = 17
const RTC_CNTL_USB_TX_EN_OVERRIDE_V = 0x1
const RTC_CNTL_USB_TX_EN_OVERRIDE_S = 16
const RTC_CNTL_USB_TX_EN_V = 0x1
const RTC_CNTL_USB_TX_EN_S = 15
const RTC_CNTL_USB_TXP_V = 0x1
const RTC_CNTL_USB_TXP_S = 14
const RTC_CNTL_USB_TXM_V = 0x1
const RTC_CNTL_USB_TXM_S = 13
const RTC_CNTL_USB_PAD_ENABLE_V = 0x1
const RTC_CNTL_USB_PAD_ENABLE_S = 12
const RTC_CNTL_USB_PAD_ENABLE_OVERRIDE_V = 0x1
const RTC_CNTL_USB_PAD_ENABLE_OVERRIDE_S = 11
const RTC_CNTL_USB_PULLUP_VALUE_V = 0x1
const RTC_CNTL_USB_PULLUP_VALUE_S = 10
const RTC_CNTL_USB_DM_PULLDOWN_V = 0x1
const RTC_CNTL_USB_DM_PULLDOWN_S = 9
const RTC_CNTL_USB_DM_PULLUP_V = 0x1
const RTC_CNTL_USB_DM_PULLUP_S = 8
const RTC_CNTL_USB_DP_PULLDOWN_V = 0x1
const RTC_CNTL_USB_DP_PULLDOWN_S = 7
const RTC_CNTL_USB_DP_PULLUP_V = 0x1
const RTC_CNTL_USB_DP_PULLUP_S = 6
const RTC_CNTL_USB_PAD_PULL_OVERRIDE_V = 0x1
const RTC_CNTL_USB_PAD_PULL_OVERRIDE_S = 5
const RTC_CNTL_USB_VREF_OVERRIDE_V = 0x1
const RTC_CNTL_USB_VREF_OVERRIDE_S = 4
const RTC_CNTL_USB_VREFL = 0x00000003
const RTC_CNTL_USB_VREFL_V = 0x3
const RTC_CNTL_USB_VREFL_S = 2
const RTC_CNTL_USB_VREFH = 0x00000003
const RTC_CNTL_USB_VREFH_V = 0x3
const RTC_CNTL_USB_VREFH_S = 0
const RTC_CNTL_TOUCH_TIMEOUT_EN_V = 0x1
const RTC_CNTL_TOUCH_TIMEOUT_EN_S = 22
const RTC_CNTL_TOUCH_TIMEOUT_NUM = 0x003FFFFF
const RTC_CNTL_TOUCH_TIMEOUT_NUM_V = 0x3FFFFF
const RTC_CNTL_TOUCH_TIMEOUT_NUM_S = 0
const RTC_CNTL_REJECT_CAUSE = 0x0003FFFF
const RTC_CNTL_REJECT_CAUSE_V = 0x3FFFF
const RTC_CNTL_REJECT_CAUSE_S = 0
const RTC_CNTL_FORCE_DOWNLOAD_BOOT_V = 0x1
const RTC_CNTL_FORCE_DOWNLOAD_BOOT_S = 0
const RTC_CNTL_WAKEUP_CAUSE = 0x0001FFFF
const RTC_CNTL_WAKEUP_CAUSE_V = 0x1FFFF
const RTC_CNTL_WAKEUP_CAUSE_S = 0
const RTC_CNTL_ULP_CP_TIMER_SLP_CYCLE = 0x00FFFFFF
const RTC_CNTL_ULP_CP_TIMER_SLP_CYCLE_V = 0xFFFFFF
const RTC_CNTL_ULP_CP_TIMER_SLP_CYCLE_S = 8
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_ENA_W1TS_S = 20
const RTC_CNTL_GLITCH_DET_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_GLITCH_DET_INT_ENA_W1TS_S = 19
const RTC_CNTL_TOUCH_TIMEOUT_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_TOUCH_TIMEOUT_INT_ENA_W1TS_S = 18
const RTC_CNTL_COCPU_TRAP_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_COCPU_TRAP_INT_ENA_W1TS_S = 17
const RTC_CNTL_XTAL32K_DEAD_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_XTAL32K_DEAD_INT_ENA_W1TS_S = 16
const RTC_CNTL_SWD_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_SWD_INT_ENA_W1TS_S = 15
const RTC_CNTL_SARADC2_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_SARADC2_INT_ENA_W1TS_S = 14
const RTC_CNTL_COCPU_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_COCPU_INT_ENA_W1TS_S = 13
const RTC_CNTL_TSENS_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_TSENS_INT_ENA_W1TS_S = 12
const RTC_CNTL_SARADC1_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_SARADC1_INT_ENA_W1TS_S = 11
const RTC_CNTL_MAIN_TIMER_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_MAIN_TIMER_INT_ENA_W1TS_S = 10
const RTC_CNTL_BROWN_OUT_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_BROWN_OUT_INT_ENA_W1TS_S = 9
const RTC_CNTL_TOUCH_INACTIVE_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_TOUCH_INACTIVE_INT_ENA_W1TS_S = 8
const RTC_CNTL_TOUCH_ACTIVE_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_TOUCH_ACTIVE_INT_ENA_W1TS_S = 7
const RTC_CNTL_TOUCH_DONE_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_TOUCH_DONE_INT_ENA_W1TS_S = 6
const RTC_CNTL_ULP_CP_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_ULP_CP_INT_ENA_W1TS_S = 5
const RTC_CNTL_TOUCH_SCAN_DONE_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_TOUCH_SCAN_DONE_INT_ENA_W1TS_S = 4
const RTC_CNTL_WDT_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_WDT_INT_ENA_W1TS_S = 3
const RTC_CNTL_SDIO_IDLE_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_SDIO_IDLE_INT_ENA_W1TS_S = 2
const RTC_CNTL_SLP_REJECT_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_SLP_REJECT_INT_ENA_W1TS_S = 1
const RTC_CNTL_SLP_WAKEUP_INT_ENA_W1TS_V = 0x1
const RTC_CNTL_SLP_WAKEUP_INT_ENA_W1TS_S = 0
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_TOUCH_APPROACH_LOOP_DONE_INT_ENA_W1TC_S = 20
const RTC_CNTL_GLITCH_DET_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_GLITCH_DET_INT_ENA_W1TC_S = 19
const RTC_CNTL_TOUCH_TIMEOUT_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_TOUCH_TIMEOUT_INT_ENA_W1TC_S = 18
const RTC_CNTL_COCPU_TRAP_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_COCPU_TRAP_INT_ENA_W1TC_S = 17
const RTC_CNTL_XTAL32K_DEAD_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_XTAL32K_DEAD_INT_ENA_W1TC_S = 16
const RTC_CNTL_SWD_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_SWD_INT_ENA_W1TC_S = 15
const RTC_CNTL_SARADC2_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_SARADC2_INT_ENA_W1TC_S = 14
const RTC_CNTL_COCPU_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_COCPU_INT_ENA_W1TC_S = 13
const RTC_CNTL_TSENS_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_TSENS_INT_ENA_W1TC_S = 12
const RTC_CNTL_SARADC1_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_SARADC1_INT_ENA_W1TC_S = 11
const RTC_CNTL_MAIN_TIMER_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_MAIN_TIMER_INT_ENA_W1TC_S = 10
const RTC_CNTL_BROWN_OUT_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_BROWN_OUT_INT_ENA_W1TC_S = 9
const RTC_CNTL_TOUCH_INACTIVE_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_TOUCH_INACTIVE_INT_ENA_W1TC_S = 8
const RTC_CNTL_TOUCH_ACTIVE_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_TOUCH_ACTIVE_INT_ENA_W1TC_S = 7
const RTC_CNTL_TOUCH_DONE_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_TOUCH_DONE_INT_ENA_W1TC_S = 6
const RTC_CNTL_ULP_CP_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_ULP_CP_INT_ENA_W1TC_S = 5
const RTC_CNTL_TOUCH_SCAN_DONE_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_TOUCH_SCAN_DONE_INT_ENA_W1TC_S = 4
const RTC_CNTL_WDT_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_WDT_INT_ENA_W1TC_S = 3
const RTC_CNTL_SDIO_IDLE_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_SDIO_IDLE_INT_ENA_W1TC_S = 2
const RTC_CNTL_SLP_REJECT_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_SLP_REJECT_INT_ENA_W1TC_S = 1
const RTC_CNTL_SLP_WAKEUP_INT_ENA_W1TC_V = 0x1
const RTC_CNTL_SLP_WAKEUP_INT_ENA_W1TC_S = 0
const RTC_CNTL_RETENTION_WAIT = 0x0000007F
const RTC_CNTL_RETENTION_WAIT_V = 0x7F
const RTC_CNTL_RETENTION_WAIT_S = 25
const RTC_CNTL_RETENTION_EN_V = 0x1
const RTC_CNTL_RETENTION_EN_S = 24
const RTC_CNTL_RETENTION_CLKOFF_WAIT = 0x0000000F
const RTC_CNTL_RETENTION_CLKOFF_WAIT_V = 0xF
const RTC_CNTL_RETENTION_CLKOFF_WAIT_S = 20
const RTC_CNTL_RETENTION_DONE_WAIT = 0x00000007
const RTC_CNTL_RETENTION_DONE_WAIT_V = 0x7
const RTC_CNTL_RETENTION_DONE_WAIT_S = 17
const RTC_CNTL_RETENTION_CLK_SEL_V = 0x1
const RTC_CNTL_RETENTION_CLK_SEL_S = 16
const RTC_CNTL_RETENTION_TARGET = 0x00000003
const RTC_CNTL_RETENTION_TARGET_V = 0x3
const RTC_CNTL_RETENTION_TARGET_S = 14
const RTC_CNTL_RETENTION_TAG_MODE = 0x0000000F
const RTC_CNTL_RETENTION_TAG_MODE_V = 0xF
const RTC_CNTL_RETENTION_TAG_MODE_S = 10
const RTC_CNTL_POWER_GLITCH_EN_V = 0x1
const RTC_CNTL_POWER_GLITCH_EN_S = 31
const RTC_CNTL_POWER_GLITCH_EFUSE_SEL_V = 0x1
const RTC_CNTL_POWER_GLITCH_EFUSE_SEL_S = 30
const RTC_CNTL_POWER_GLITCH_FORCE_PU_V = 0x1
const RTC_CNTL_POWER_GLITCH_FORCE_PU_S = 29
const RTC_CNTL_POWER_GLITCH_FORCE_PD_V = 0x1
const RTC_CNTL_POWER_GLITCH_FORCE_PD_S = 28
const RTC_CNTL_POWER_GLITCH_DSENSE = 0x00000003
const RTC_CNTL_POWER_GLITCH_DSENSE_V = 0x3
const RTC_CNTL_POWER_GLITCH_DSENSE_S = 26
const RTC_CNTL_FIB_SEL = 0x00000007
const RTC_CNTL_FIB_SEL_V = 0x7
const RTC_CNTL_FIB_SEL_S = 0
const RTC_CNTL_TOUCH_PAD0_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD0_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD0_DAC_S = 29
const RTC_CNTL_TOUCH_PAD1_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD1_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD1_DAC_S = 26
const RTC_CNTL_TOUCH_PAD2_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD2_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD2_DAC_S = 23
const RTC_CNTL_TOUCH_PAD3_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD3_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD3_DAC_S = 20
const RTC_CNTL_TOUCH_PAD4_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD4_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD4_DAC_S = 17
const RTC_CNTL_TOUCH_PAD5_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD5_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD5_DAC_S = 14
const RTC_CNTL_TOUCH_PAD6_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD6_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD6_DAC_S = 11
const RTC_CNTL_TOUCH_PAD7_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD7_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD7_DAC_S = 8
const RTC_CNTL_TOUCH_PAD8_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD8_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD8_DAC_S = 5
const RTC_CNTL_TOUCH_PAD9_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD9_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD9_DAC_S = 2
const RTC_CNTL_TOUCH_PAD10_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD10_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD10_DAC_S = 29
const RTC_CNTL_TOUCH_PAD11_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD11_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD11_DAC_S = 26
const RTC_CNTL_TOUCH_PAD12_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD12_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD12_DAC_S = 23
const RTC_CNTL_TOUCH_PAD13_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD13_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD13_DAC_S = 20
const RTC_CNTL_TOUCH_PAD14_DAC = 0x00000007
const RTC_CNTL_TOUCH_PAD14_DAC_V = 0x7
const RTC_CNTL_TOUCH_PAD14_DAC_S = 17
const RTC_CNTL_DISABLE_RTC_CPU_V = 0x1
const RTC_CNTL_DISABLE_RTC_CPU_S = 31
const RTC_CNTL_DATE = 0x0FFFFFFF
const RTC_CNTL_DATE_V = 0xFFFFFFF
const RTC_CNTL_DATE_S = 0
const RTC_CNTL_SLAVE_PD = 0x0000003F
const RTC_CNTL_SLAVE_PD_V = 0x3F
const RTC_CNTL_SLAVE_PD_S = 13
const I2C_MST_ANA_CONF0_REG = 0x6000E040
const ANA_CONFIG_REG = 0x6000E044
const ANA_CONFIG2_REG = 0x6000E048
const REGI2C_ANA_CALI_PD_WORKAROUND = 1
const REGI2C_ANA_CALI_BYTE_NUM = 8
const I2C_SAR_ADC = 0x69
const I2C_SAR_ADC_HOSTID = 1
const ADC_SAR1_ENCAL_GND_ADDR = 0x7
const ADC_SAR1_ENCAL_GND_ADDR_MSB = 5
const ADC_SAR1_ENCAL_GND_ADDR_LSB = 5
const ADC_SAR2_ENCAL_GND_ADDR = 0x7
const ADC_SAR2_ENCAL_GND_ADDR_MSB = 7
const ADC_SAR2_ENCAL_GND_ADDR_LSB = 7
const ADC_SAR1_INITIAL_CODE_HIGH_ADDR = 0x1
const ADC_SAR1_INITIAL_CODE_HIGH_ADDR_MSB = 0x3
const ADC_SAR1_INITIAL_CODE_HIGH_ADDR_LSB = 0x0
const ADC_SAR1_INITIAL_CODE_LOW_ADDR = 0x0
const ADC_SAR1_INITIAL_CODE_LOW_ADDR_MSB = 0x7
const ADC_SAR1_INITIAL_CODE_LOW_ADDR_LSB = 0x0
const ADC_SAR2_INITIAL_CODE_HIGH_ADDR = 0x4
const ADC_SAR2_INITIAL_CODE_HIGH_ADDR_MSB = 0x3
const ADC_SAR2_INITIAL_CODE_HIGH_ADDR_LSB = 0x0
const ADC_SAR2_INITIAL_CODE_LOW_ADDR = 0x3
const ADC_SAR2_INITIAL_CODE_LOW_ADDR_MSB = 0x7
const ADC_SAR2_INITIAL_CODE_LOW_ADDR_LSB = 0x0
const ADC_SAR1_DREF_ADDR = 0x2
const ADC_SAR1_DREF_ADDR_MSB = 0x6
const ADC_SAR1_DREF_ADDR_LSB = 0x4
const ADC_SAR2_DREF_ADDR = 0x5
const ADC_SAR2_DREF_ADDR_MSB = 0x6
const ADC_SAR2_DREF_ADDR_LSB = 0x4
const ADC_SAR1_SAMPLE_CYCLE_ADDR = 0x2
const ADC_SAR1_SAMPLE_CYCLE_ADDR_MSB = 0x2
const ADC_SAR1_SAMPLE_CYCLE_ADDR_LSB = 0x0
const ADC_SARADC_DTEST_RTC_ADDR = 0x7
const ADC_SARADC_DTEST_RTC_ADDR_MSB = 1
const ADC_SARADC_DTEST_RTC_ADDR_LSB = 0
const ADC_SARADC_ENT_TSENS_ADDR = 0x7
const ADC_SARADC_ENT_TSENS_ADDR_MSB = 2
const ADC_SARADC_ENT_TSENS_ADDR_LSB = 2
const ADC_SARADC_ENT_RTC_ADDR = 0x7
const ADC_SARADC_ENT_RTC_ADDR_MSB = 3
const ADC_SARADC_ENT_RTC_ADDR_LSB = 3
const ADC_SARADC_ENCAL_REF_ADDR = 0x7
const ADC_SARADC_ENCAL_REF_ADDR_MSB = 4
const ADC_SARADC_ENCAL_REF_ADDR_LSB = 4
const I2C_SARADC_TSENS_DAC = 0x6
const I2C_SARADC_TSENS_DAC_MSB = 3
const I2C_SARADC_TSENS_DAC_LSB = 0
const ADC_LL_CLKM_DIV_NUM_DEFAULT = 15
const ADC_LL_CLKM_DIV_B_DEFAULT = 1
const ADC_LL_CLKM_DIV_A_DEFAULT = 0
const ADC_LL_DEFAULT_CONV_LIMIT_EN = 0
const ADC_LL_DEFAULT_CONV_LIMIT_NUM = 10
const GDMA_MEM_TRANS_EN_CH0_V = 0x1
const GDMA_MEM_TRANS_EN_CH0_S = 4
const GDMA_IN_DATA_BURST_EN_CH0_V = 0x1
const GDMA_IN_DATA_BURST_EN_CH0_S = 3
const GDMA_INDSCR_BURST_EN_CH0_V = 0x1
const GDMA_INDSCR_BURST_EN_CH0_S = 2
const GDMA_IN_LOOP_TEST_CH0_V = 0x1
const GDMA_IN_LOOP_TEST_CH0_S = 1
const GDMA_IN_RST_CH0_V = 0x1
const GDMA_IN_RST_CH0_S = 0
const GDMA_IN_EXT_MEM_BK_SIZE_CH0 = 0x00000003
const GDMA_IN_EXT_MEM_BK_SIZE_CH0_V = 0x3
const GDMA_IN_EXT_MEM_BK_SIZE_CH0_S = 13
const GDMA_IN_CHECK_OWNER_CH0_V = 0x1
const GDMA_IN_CHECK_OWNER_CH0_S = 12
const GDMA_DMA_INFIFO_FULL_THRS_CH0 = 0x00000FFF
const GDMA_DMA_INFIFO_FULL_THRS_CH0_V = 0xFFF
const GDMA_DMA_INFIFO_FULL_THRS_CH0_S = 0
const GDMA_INFIFO_UDF_L3_CH0_INT_RAW_V = 0x1
const GDMA_INFIFO_UDF_L3_CH0_INT_RAW_S = 9
const GDMA_INFIFO_OVF_L3_CH0_INT_RAW_V = 0x1
const GDMA_INFIFO_OVF_L3_CH0_INT_RAW_S = 8
const GDMA_INFIFO_UDF_L1_CH0_INT_RAW_V = 0x1
const GDMA_INFIFO_UDF_L1_CH0_INT_RAW_S = 7
const GDMA_INFIFO_OVF_L1_CH0_INT_RAW_V = 0x1
const GDMA_INFIFO_OVF_L1_CH0_INT_RAW_S = 6
const GDMA_INFIFO_FULL_WM_CH0_INT_RAW_V = 0x1
const GDMA_INFIFO_FULL_WM_CH0_INT_RAW_S = 5
const GDMA_IN_DSCR_EMPTY_CH0_INT_RAW_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH0_INT_RAW_S = 4
const GDMA_IN_DSCR_ERR_CH0_INT_RAW_V = 0x1
const GDMA_IN_DSCR_ERR_CH0_INT_RAW_S = 3
const GDMA_IN_ERR_EOF_CH0_INT_RAW_V = 0x1
const GDMA_IN_ERR_EOF_CH0_INT_RAW_S = 2
const GDMA_IN_SUC_EOF_CH0_INT_RAW_V = 0x1
const GDMA_IN_SUC_EOF_CH0_INT_RAW_S = 1
const GDMA_IN_DONE_CH0_INT_RAW_V = 0x1
const GDMA_IN_DONE_CH0_INT_RAW_S = 0
const GDMA_INFIFO_UDF_L3_CH0_INT_ST_V = 0x1
const GDMA_INFIFO_UDF_L3_CH0_INT_ST_S = 9
const GDMA_INFIFO_OVF_L3_CH0_INT_ST_V = 0x1
const GDMA_INFIFO_OVF_L3_CH0_INT_ST_S = 8
const GDMA_INFIFO_UDF_L1_CH0_INT_ST_V = 0x1
const GDMA_INFIFO_UDF_L1_CH0_INT_ST_S = 7
const GDMA_INFIFO_OVF_L1_CH0_INT_ST_V = 0x1
const GDMA_INFIFO_OVF_L1_CH0_INT_ST_S = 6
const GDMA_INFIFO_FULL_WM_CH0_INT_ST_V = 0x1
const GDMA_INFIFO_FULL_WM_CH0_INT_ST_S = 5
const GDMA_IN_DSCR_EMPTY_CH0_INT_ST_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH0_INT_ST_S = 4
const GDMA_IN_DSCR_ERR_CH0_INT_ST_V = 0x1
const GDMA_IN_DSCR_ERR_CH0_INT_ST_S = 3
const GDMA_IN_ERR_EOF_CH0_INT_ST_V = 0x1
const GDMA_IN_ERR_EOF_CH0_INT_ST_S = 2
const GDMA_IN_SUC_EOF_CH0_INT_ST_V = 0x1
const GDMA_IN_SUC_EOF_CH0_INT_ST_S = 1
const GDMA_IN_DONE_CH0_INT_ST_V = 0x1
const GDMA_IN_DONE_CH0_INT_ST_S = 0
const GDMA_INFIFO_UDF_L3_CH0_INT_ENA_V = 0x1
const GDMA_INFIFO_UDF_L3_CH0_INT_ENA_S = 9
const GDMA_INFIFO_OVF_L3_CH0_INT_ENA_V = 0x1
const GDMA_INFIFO_OVF_L3_CH0_INT_ENA_S = 8
const GDMA_INFIFO_UDF_L1_CH0_INT_ENA_V = 0x1
const GDMA_INFIFO_UDF_L1_CH0_INT_ENA_S = 7
const GDMA_INFIFO_OVF_L1_CH0_INT_ENA_V = 0x1
const GDMA_INFIFO_OVF_L1_CH0_INT_ENA_S = 6
const GDMA_INFIFO_FULL_WM_CH0_INT_ENA_V = 0x1
const GDMA_INFIFO_FULL_WM_CH0_INT_ENA_S = 5
const GDMA_IN_DSCR_EMPTY_CH0_INT_ENA_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH0_INT_ENA_S = 4
const GDMA_IN_DSCR_ERR_CH0_INT_ENA_V = 0x1
const GDMA_IN_DSCR_ERR_CH0_INT_ENA_S = 3
const GDMA_IN_ERR_EOF_CH0_INT_ENA_V = 0x1
const GDMA_IN_ERR_EOF_CH0_INT_ENA_S = 2
const GDMA_IN_SUC_EOF_CH0_INT_ENA_V = 0x1
const GDMA_IN_SUC_EOF_CH0_INT_ENA_S = 1
const GDMA_IN_DONE_CH0_INT_ENA_V = 0x1
const GDMA_IN_DONE_CH0_INT_ENA_S = 0
const GDMA_INFIFO_UDF_L3_CH0_INT_CLR_V = 0x1
const GDMA_INFIFO_UDF_L3_CH0_INT_CLR_S = 9
const GDMA_INFIFO_OVF_L3_CH0_INT_CLR_V = 0x1
const GDMA_INFIFO_OVF_L3_CH0_INT_CLR_S = 8
const GDMA_INFIFO_UDF_L1_CH0_INT_CLR_V = 0x1
const GDMA_INFIFO_UDF_L1_CH0_INT_CLR_S = 7
const GDMA_INFIFO_OVF_L1_CH0_INT_CLR_V = 0x1
const GDMA_INFIFO_OVF_L1_CH0_INT_CLR_S = 6
const GDMA_DMA_INFIFO_FULL_WM_CH0_INT_CLR_V = 0x1
const GDMA_DMA_INFIFO_FULL_WM_CH0_INT_CLR_S = 5
const GDMA_IN_DSCR_EMPTY_CH0_INT_CLR_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH0_INT_CLR_S = 4
const GDMA_IN_DSCR_ERR_CH0_INT_CLR_V = 0x1
const GDMA_IN_DSCR_ERR_CH0_INT_CLR_S = 3
const GDMA_IN_ERR_EOF_CH0_INT_CLR_V = 0x1
const GDMA_IN_ERR_EOF_CH0_INT_CLR_S = 2
const GDMA_IN_SUC_EOF_CH0_INT_CLR_V = 0x1
const GDMA_IN_SUC_EOF_CH0_INT_CLR_S = 1
const GDMA_IN_DONE_CH0_INT_CLR_V = 0x1
const GDMA_IN_DONE_CH0_INT_CLR_S = 0
const GDMA_IN_BUF_HUNGRY_CH0_V = 0x1
const GDMA_IN_BUF_HUNGRY_CH0_S = 28
const GDMA_IN_REMAIN_UNDER_4B_L3_CH0_V = 0x1
const GDMA_IN_REMAIN_UNDER_4B_L3_CH0_S = 27
const GDMA_IN_REMAIN_UNDER_3B_L3_CH0_V = 0x1
const GDMA_IN_REMAIN_UNDER_3B_L3_CH0_S = 26
const GDMA_IN_REMAIN_UNDER_2B_L3_CH0_V = 0x1
const GDMA_IN_REMAIN_UNDER_2B_L3_CH0_S = 25
const GDMA_IN_REMAIN_UNDER_1B_L3_CH0_V = 0x1
const GDMA_IN_REMAIN_UNDER_1B_L3_CH0_S = 24
const GDMA_INFIFO_CNT_L3_CH0 = 0x0000001F
const GDMA_INFIFO_CNT_L3_CH0_V = 0x1F
const GDMA_INFIFO_CNT_L3_CH0_S = 19
const GDMA_INFIFO_CNT_L2_CH0 = 0x0000007F
const GDMA_INFIFO_CNT_L2_CH0_V = 0x7F
const GDMA_INFIFO_CNT_L2_CH0_S = 12
const GDMA_INFIFO_CNT_L1_CH0 = 0x0000003F
const GDMA_INFIFO_CNT_L1_CH0_V = 0x3F
const GDMA_INFIFO_CNT_L1_CH0_S = 6
const GDMA_INFIFO_EMPTY_L3_CH0_V = 0x1
const GDMA_INFIFO_EMPTY_L3_CH0_S = 5
const GDMA_INFIFO_FULL_L3_CH0_V = 0x1
const GDMA_INFIFO_FULL_L3_CH0_S = 4
const GDMA_INFIFO_EMPTY_L2_CH0_V = 0x1
const GDMA_INFIFO_EMPTY_L2_CH0_S = 3
const GDMA_INFIFO_FULL_L2_CH0_V = 0x1
const GDMA_INFIFO_FULL_L2_CH0_S = 2
const GDMA_INFIFO_EMPTY_L1_CH0_V = 0x1
const GDMA_INFIFO_EMPTY_L1_CH0_S = 1
const GDMA_INFIFO_FULL_L1_CH0_V = 0x1
const GDMA_INFIFO_FULL_L1_CH0_S = 0
const GDMA_INFIFO_POP_CH0_V = 0x1
const GDMA_INFIFO_POP_CH0_S = 12
const GDMA_INFIFO_RDATA_CH0 = 0x00000FFF
const GDMA_INFIFO_RDATA_CH0_V = 0xFFF
const GDMA_INFIFO_RDATA_CH0_S = 0
const GDMA_INLINK_PARK_CH0_V = 0x1
const GDMA_INLINK_PARK_CH0_S = 24
const GDMA_INLINK_RESTART_CH0_V = 0x1
const GDMA_INLINK_RESTART_CH0_S = 23
const GDMA_INLINK_START_CH0_V = 0x1
const GDMA_INLINK_START_CH0_S = 22
const GDMA_INLINK_STOP_CH0_V = 0x1
const GDMA_INLINK_STOP_CH0_S = 21
const GDMA_INLINK_AUTO_RET_CH0_V = 0x1
const GDMA_INLINK_AUTO_RET_CH0_S = 20
const GDMA_INLINK_ADDR_CH0 = 0x000FFFFF
const GDMA_INLINK_ADDR_CH0_V = 0xFFFFF
const GDMA_INLINK_ADDR_CH0_S = 0
const GDMA_IN_STATE_CH0 = 0x00000007
const GDMA_IN_STATE_CH0_V = 0x7
const GDMA_IN_STATE_CH0_S = 20
const GDMA_IN_DSCR_STATE_CH0 = 0x00000003
const GDMA_IN_DSCR_STATE_CH0_V = 0x3
const GDMA_IN_DSCR_STATE_CH0_S = 18
const GDMA_INLINK_DSCR_ADDR_CH0 = 0x0003FFFF
const GDMA_INLINK_DSCR_ADDR_CH0_V = 0x3FFFF
const GDMA_INLINK_DSCR_ADDR_CH0_S = 0
const GDMA_IN_SUC_EOF_DES_ADDR_CH0 = 0xFFFFFFFF
const GDMA_IN_SUC_EOF_DES_ADDR_CH0_V = 0xFFFFFFFF
const GDMA_IN_SUC_EOF_DES_ADDR_CH0_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH0 = 0xFFFFFFFF
const GDMA_IN_ERR_EOF_DES_ADDR_CH0_V = 0xFFFFFFFF
const GDMA_IN_ERR_EOF_DES_ADDR_CH0_S = 0
const GDMA_INLINK_DSCR_CH0 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_CH0_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_CH0_S = 0
const GDMA_INLINK_DSCR_BF0_CH0 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF0_CH0_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF0_CH0_S = 0
const GDMA_INLINK_DSCR_BF1_CH0 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF1_CH0_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF1_CH0_S = 0
const GDMA_RX_WEIGHT_CH0 = 0x0000000F
const GDMA_RX_WEIGHT_CH0_V = 0xF
const GDMA_RX_WEIGHT_CH0_S = 8
const GDMA_RX_PRI_CH0 = 0x0000000F
const GDMA_RX_PRI_CH0_V = 0xF
const GDMA_RX_PRI_CH0_S = 0
const GDMA_PERI_IN_SEL_CH0 = 0x0000003F
const GDMA_PERI_IN_SEL_CH0_V = 0x3F
const GDMA_PERI_IN_SEL_CH0_S = 0
const GDMA_OUT_DATA_BURST_EN_CH0_V = 0x1
const GDMA_OUT_DATA_BURST_EN_CH0_S = 5
const GDMA_OUTDSCR_BURST_EN_CH0_V = 0x1
const GDMA_OUTDSCR_BURST_EN_CH0_S = 4
const GDMA_OUT_EOF_MODE_CH0_V = 0x1
const GDMA_OUT_EOF_MODE_CH0_S = 3
const GDMA_OUT_AUTO_WRBACK_CH0_V = 0x1
const GDMA_OUT_AUTO_WRBACK_CH0_S = 2
const GDMA_OUT_LOOP_TEST_CH0_V = 0x1
const GDMA_OUT_LOOP_TEST_CH0_S = 1
const GDMA_OUT_RST_CH0_V = 0x1
const GDMA_OUT_RST_CH0_S = 0
const GDMA_OUT_EXT_MEM_BK_SIZE_CH0 = 0x00000003
const GDMA_OUT_EXT_MEM_BK_SIZE_CH0_V = 0x3
const GDMA_OUT_EXT_MEM_BK_SIZE_CH0_S = 13
const GDMA_OUT_CHECK_OWNER_CH0_V = 0x1
const GDMA_OUT_CHECK_OWNER_CH0_S = 12
const GDMA_OUTFIFO_UDF_L3_CH0_INT_RAW_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH0_INT_RAW_S = 7
const GDMA_OUTFIFO_OVF_L3_CH0_INT_RAW_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH0_INT_RAW_S = 6
const GDMA_OUTFIFO_UDF_L1_CH0_INT_RAW_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH0_INT_RAW_S = 5
const GDMA_OUTFIFO_OVF_L1_CH0_INT_RAW_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH0_INT_RAW_S = 4
const GDMA_OUT_TOTAL_EOF_CH0_INT_RAW_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH0_INT_RAW_S = 3
const GDMA_OUT_DSCR_ERR_CH0_INT_RAW_V = 0x1
const GDMA_OUT_DSCR_ERR_CH0_INT_RAW_S = 2
const GDMA_OUT_EOF_CH0_INT_RAW_V = 0x1
const GDMA_OUT_EOF_CH0_INT_RAW_S = 1
const GDMA_OUT_DONE_CH0_INT_RAW_V = 0x1
const GDMA_OUT_DONE_CH0_INT_RAW_S = 0
const GDMA_OUTFIFO_UDF_L3_CH0_INT_ST_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH0_INT_ST_S = 7
const GDMA_OUTFIFO_OVF_L3_CH0_INT_ST_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH0_INT_ST_S = 6
const GDMA_OUTFIFO_UDF_L1_CH0_INT_ST_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH0_INT_ST_S = 5
const GDMA_OUTFIFO_OVF_L1_CH0_INT_ST_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH0_INT_ST_S = 4
const GDMA_OUT_TOTAL_EOF_CH0_INT_ST_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH0_INT_ST_S = 3
const GDMA_OUT_DSCR_ERR_CH0_INT_ST_V = 0x1
const GDMA_OUT_DSCR_ERR_CH0_INT_ST_S = 2
const GDMA_OUT_EOF_CH0_INT_ST_V = 0x1
const GDMA_OUT_EOF_CH0_INT_ST_S = 1
const GDMA_OUT_DONE_CH0_INT_ST_V = 0x1
const GDMA_OUT_DONE_CH0_INT_ST_S = 0
const GDMA_OUTFIFO_UDF_L3_CH0_INT_ENA_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH0_INT_ENA_S = 7
const GDMA_OUTFIFO_OVF_L3_CH0_INT_ENA_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH0_INT_ENA_S = 6
const GDMA_OUTFIFO_UDF_L1_CH0_INT_ENA_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH0_INT_ENA_S = 5
const GDMA_OUTFIFO_OVF_L1_CH0_INT_ENA_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH0_INT_ENA_S = 4
const GDMA_OUT_TOTAL_EOF_CH0_INT_ENA_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH0_INT_ENA_S = 3
const GDMA_OUT_DSCR_ERR_CH0_INT_ENA_V = 0x1
const GDMA_OUT_DSCR_ERR_CH0_INT_ENA_S = 2
const GDMA_OUT_EOF_CH0_INT_ENA_V = 0x1
const GDMA_OUT_EOF_CH0_INT_ENA_S = 1
const GDMA_OUT_DONE_CH0_INT_ENA_V = 0x1
const GDMA_OUT_DONE_CH0_INT_ENA_S = 0
const GDMA_OUTFIFO_UDF_L3_CH0_INT_CLR_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH0_INT_CLR_S = 7
const GDMA_OUTFIFO_OVF_L3_CH0_INT_CLR_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH0_INT_CLR_S = 6
const GDMA_OUTFIFO_UDF_L1_CH0_INT_CLR_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH0_INT_CLR_S = 5
const GDMA_OUTFIFO_OVF_L1_CH0_INT_CLR_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH0_INT_CLR_S = 4
const GDMA_OUT_TOTAL_EOF_CH0_INT_CLR_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH0_INT_CLR_S = 3
const GDMA_OUT_DSCR_ERR_CH0_INT_CLR_V = 0x1
const GDMA_OUT_DSCR_ERR_CH0_INT_CLR_S = 2
const GDMA_OUT_EOF_CH0_INT_CLR_V = 0x1
const GDMA_OUT_EOF_CH0_INT_CLR_S = 1
const GDMA_OUT_DONE_CH0_INT_CLR_V = 0x1
const GDMA_OUT_DONE_CH0_INT_CLR_S = 0
const GDMA_OUT_REMAIN_UNDER_4B_L3_CH0_V = 0x1
const GDMA_OUT_REMAIN_UNDER_4B_L3_CH0_S = 26
const GDMA_OUT_REMAIN_UNDER_3B_L3_CH0_V = 0x1
const GDMA_OUT_REMAIN_UNDER_3B_L3_CH0_S = 25
const GDMA_OUT_REMAIN_UNDER_2B_L3_CH0_V = 0x1
const GDMA_OUT_REMAIN_UNDER_2B_L3_CH0_S = 24
const GDMA_OUT_REMAIN_UNDER_1B_L3_CH0_V = 0x1
const GDMA_OUT_REMAIN_UNDER_1B_L3_CH0_S = 23
const GDMA_OUTFIFO_CNT_L3_CH0 = 0x0000001F
const GDMA_OUTFIFO_CNT_L3_CH0_V = 0x1F
const GDMA_OUTFIFO_CNT_L3_CH0_S = 18
const GDMA_OUTFIFO_CNT_L2_CH0 = 0x0000007F
const GDMA_OUTFIFO_CNT_L2_CH0_V = 0x7F
const GDMA_OUTFIFO_CNT_L2_CH0_S = 11
const GDMA_OUTFIFO_CNT_L1_CH0 = 0x0000001F
const GDMA_OUTFIFO_CNT_L1_CH0_V = 0x1F
const GDMA_OUTFIFO_CNT_L1_CH0_S = 6
const GDMA_OUTFIFO_EMPTY_L3_CH0_V = 0x1
const GDMA_OUTFIFO_EMPTY_L3_CH0_S = 5
const GDMA_OUTFIFO_FULL_L3_CH0_V = 0x1
const GDMA_OUTFIFO_FULL_L3_CH0_S = 4
const GDMA_OUTFIFO_EMPTY_L2_CH0_V = 0x1
const GDMA_OUTFIFO_EMPTY_L2_CH0_S = 3
const GDMA_OUTFIFO_FULL_L2_CH0_V = 0x1
const GDMA_OUTFIFO_FULL_L2_CH0_S = 2
const GDMA_OUTFIFO_EMPTY_L1_CH0_V = 0x1
const GDMA_OUTFIFO_EMPTY_L1_CH0_S = 1
const GDMA_OUTFIFO_FULL_L1_CH0_V = 0x1
const GDMA_OUTFIFO_FULL_L1_CH0_S = 0
const GDMA_OUTFIFO_PUSH_CH0_V = 0x1
const GDMA_OUTFIFO_PUSH_CH0_S = 9
const GDMA_OUTFIFO_WDATA_CH0 = 0x000001FF
const GDMA_OUTFIFO_WDATA_CH0_V = 0x1FF
const GDMA_OUTFIFO_WDATA_CH0_S = 0
const GDMA_OUTLINK_PARK_CH0_V = 0x1
const GDMA_OUTLINK_PARK_CH0_S = 23
const GDMA_OUTLINK_RESTART_CH0_V = 0x1
const GDMA_OUTLINK_RESTART_CH0_S = 22
const GDMA_OUTLINK_START_CH0_V = 0x1
const GDMA_OUTLINK_START_CH0_S = 21
const GDMA_OUTLINK_STOP_CH0_V = 0x1
const GDMA_OUTLINK_STOP_CH0_S = 20
const GDMA_OUTLINK_ADDR_CH0 = 0x000FFFFF
const GDMA_OUTLINK_ADDR_CH0_V = 0xFFFFF
const GDMA_OUTLINK_ADDR_CH0_S = 0
const GDMA_OUT_STATE_CH0 = 0x00000007
const GDMA_OUT_STATE_CH0_V = 0x7
const GDMA_OUT_STATE_CH0_S = 20
const GDMA_OUT_DSCR_STATE_CH0 = 0x00000003
const GDMA_OUT_DSCR_STATE_CH0_V = 0x3
const GDMA_OUT_DSCR_STATE_CH0_S = 18
const GDMA_OUTLINK_DSCR_ADDR_CH0 = 0x0003FFFF
const GDMA_OUTLINK_DSCR_ADDR_CH0_V = 0x3FFFF
const GDMA_OUTLINK_DSCR_ADDR_CH0_S = 0
const GDMA_OUT_EOF_DES_ADDR_CH0 = 0xFFFFFFFF
const GDMA_OUT_EOF_DES_ADDR_CH0_V = 0xFFFFFFFF
const GDMA_OUT_EOF_DES_ADDR_CH0_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH0 = 0xFFFFFFFF
const GDMA_OUT_EOF_BFR_DES_ADDR_CH0_V = 0xFFFFFFFF
const GDMA_OUT_EOF_BFR_DES_ADDR_CH0_S = 0
const GDMA_OUTLINK_DSCR_CH0 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_CH0_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_CH0_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH0 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF0_CH0_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF0_CH0_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH0 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF1_CH0_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF1_CH0_S = 0
const GDMA_TX_WEIGHT_CH0 = 0x0000000F
const GDMA_TX_WEIGHT_CH0_V = 0xF
const GDMA_TX_WEIGHT_CH0_S = 8
const GDMA_TX_PRI_CH0 = 0x0000000F
const GDMA_TX_PRI_CH0_V = 0xF
const GDMA_TX_PRI_CH0_S = 0
const GDMA_PERI_OUT_SEL_CH0 = 0x0000003F
const GDMA_PERI_OUT_SEL_CH0_V = 0x3F
const GDMA_PERI_OUT_SEL_CH0_S = 0
const GDMA_MEM_TRANS_EN_CH1_V = 0x1
const GDMA_MEM_TRANS_EN_CH1_S = 4
const GDMA_IN_DATA_BURST_EN_CH1_V = 0x1
const GDMA_IN_DATA_BURST_EN_CH1_S = 3
const GDMA_INDSCR_BURST_EN_CH1_V = 0x1
const GDMA_INDSCR_BURST_EN_CH1_S = 2
const GDMA_IN_LOOP_TEST_CH1_V = 0x1
const GDMA_IN_LOOP_TEST_CH1_S = 1
const GDMA_IN_RST_CH1_V = 0x1
const GDMA_IN_RST_CH1_S = 0
const GDMA_IN_EXT_MEM_BK_SIZE_CH1 = 0x00000003
const GDMA_IN_EXT_MEM_BK_SIZE_CH1_V = 0x3
const GDMA_IN_EXT_MEM_BK_SIZE_CH1_S = 13
const GDMA_IN_CHECK_OWNER_CH1_V = 0x1
const GDMA_IN_CHECK_OWNER_CH1_S = 12
const GDMA_DMA_INFIFO_FULL_THRS_CH1 = 0x00000FFF
const GDMA_DMA_INFIFO_FULL_THRS_CH1_V = 0xFFF
const GDMA_DMA_INFIFO_FULL_THRS_CH1_S = 0
const GDMA_INFIFO_UDF_L3_CH1_INT_RAW_V = 0x1
const GDMA_INFIFO_UDF_L3_CH1_INT_RAW_S = 9
const GDMA_INFIFO_OVF_L3_CH1_INT_RAW_V = 0x1
const GDMA_INFIFO_OVF_L3_CH1_INT_RAW_S = 8
const GDMA_INFIFO_UDF_L1_CH1_INT_RAW_V = 0x1
const GDMA_INFIFO_UDF_L1_CH1_INT_RAW_S = 7
const GDMA_INFIFO_OVF_L1_CH1_INT_RAW_V = 0x1
const GDMA_INFIFO_OVF_L1_CH1_INT_RAW_S = 6
const GDMA_INFIFO_FULL_WM_CH1_INT_RAW_V = 0x1
const GDMA_INFIFO_FULL_WM_CH1_INT_RAW_S = 5
const GDMA_IN_DSCR_EMPTY_CH1_INT_RAW_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH1_INT_RAW_S = 4
const GDMA_IN_DSCR_ERR_CH1_INT_RAW_V = 0x1
const GDMA_IN_DSCR_ERR_CH1_INT_RAW_S = 3
const GDMA_IN_ERR_EOF_CH1_INT_RAW_V = 0x1
const GDMA_IN_ERR_EOF_CH1_INT_RAW_S = 2
const GDMA_IN_SUC_EOF_CH1_INT_RAW_V = 0x1
const GDMA_IN_SUC_EOF_CH1_INT_RAW_S = 1
const GDMA_IN_DONE_CH1_INT_RAW_V = 0x1
const GDMA_IN_DONE_CH1_INT_RAW_S = 0
const GDMA_INFIFO_UDF_L3_CH1_INT_ST_V = 0x1
const GDMA_INFIFO_UDF_L3_CH1_INT_ST_S = 9
const GDMA_INFIFO_OVF_L3_CH1_INT_ST_V = 0x1
const GDMA_INFIFO_OVF_L3_CH1_INT_ST_S = 8
const GDMA_INFIFO_UDF_L1_CH1_INT_ST_V = 0x1
const GDMA_INFIFO_UDF_L1_CH1_INT_ST_S = 7
const GDMA_INFIFO_OVF_L1_CH1_INT_ST_V = 0x1
const GDMA_INFIFO_OVF_L1_CH1_INT_ST_S = 6
const GDMA_INFIFO_FULL_WM_CH1_INT_ST_V = 0x1
const GDMA_INFIFO_FULL_WM_CH1_INT_ST_S = 5
const GDMA_IN_DSCR_EMPTY_CH1_INT_ST_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH1_INT_ST_S = 4
const GDMA_IN_DSCR_ERR_CH1_INT_ST_V = 0x1
const GDMA_IN_DSCR_ERR_CH1_INT_ST_S = 3
const GDMA_IN_ERR_EOF_CH1_INT_ST_V = 0x1
const GDMA_IN_ERR_EOF_CH1_INT_ST_S = 2
const GDMA_IN_SUC_EOF_CH1_INT_ST_V = 0x1
const GDMA_IN_SUC_EOF_CH1_INT_ST_S = 1
const GDMA_IN_DONE_CH1_INT_ST_V = 0x1
const GDMA_IN_DONE_CH1_INT_ST_S = 0
const GDMA_INFIFO_UDF_L3_CH1_INT_ENA_V = 0x1
const GDMA_INFIFO_UDF_L3_CH1_INT_ENA_S = 9
const GDMA_INFIFO_OVF_L3_CH1_INT_ENA_V = 0x1
const GDMA_INFIFO_OVF_L3_CH1_INT_ENA_S = 8
const GDMA_INFIFO_UDF_L1_CH1_INT_ENA_V = 0x1
const GDMA_INFIFO_UDF_L1_CH1_INT_ENA_S = 7
const GDMA_INFIFO_OVF_L1_CH1_INT_ENA_V = 0x1
const GDMA_INFIFO_OVF_L1_CH1_INT_ENA_S = 6
const GDMA_INFIFO_FULL_WM_CH1_INT_ENA_V = 0x1
const GDMA_INFIFO_FULL_WM_CH1_INT_ENA_S = 5
const GDMA_IN_DSCR_EMPTY_CH1_INT_ENA_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH1_INT_ENA_S = 4
const GDMA_IN_DSCR_ERR_CH1_INT_ENA_V = 0x1
const GDMA_IN_DSCR_ERR_CH1_INT_ENA_S = 3
const GDMA_IN_ERR_EOF_CH1_INT_ENA_V = 0x1
const GDMA_IN_ERR_EOF_CH1_INT_ENA_S = 2
const GDMA_IN_SUC_EOF_CH1_INT_ENA_V = 0x1
const GDMA_IN_SUC_EOF_CH1_INT_ENA_S = 1
const GDMA_IN_DONE_CH1_INT_ENA_V = 0x1
const GDMA_IN_DONE_CH1_INT_ENA_S = 0
const GDMA_INFIFO_UDF_L3_CH1_INT_CLR_V = 0x1
const GDMA_INFIFO_UDF_L3_CH1_INT_CLR_S = 9
const GDMA_INFIFO_OVF_L3_CH1_INT_CLR_V = 0x1
const GDMA_INFIFO_OVF_L3_CH1_INT_CLR_S = 8
const GDMA_INFIFO_UDF_L1_CH1_INT_CLR_V = 0x1
const GDMA_INFIFO_UDF_L1_CH1_INT_CLR_S = 7
const GDMA_INFIFO_OVF_L1_CH1_INT_CLR_V = 0x1
const GDMA_INFIFO_OVF_L1_CH1_INT_CLR_S = 6
const GDMA_DMA_INFIFO_FULL_WM_CH1_INT_CLR_V = 0x1
const GDMA_DMA_INFIFO_FULL_WM_CH1_INT_CLR_S = 5
const GDMA_IN_DSCR_EMPTY_CH1_INT_CLR_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH1_INT_CLR_S = 4
const GDMA_IN_DSCR_ERR_CH1_INT_CLR_V = 0x1
const GDMA_IN_DSCR_ERR_CH1_INT_CLR_S = 3
const GDMA_IN_ERR_EOF_CH1_INT_CLR_V = 0x1
const GDMA_IN_ERR_EOF_CH1_INT_CLR_S = 2
const GDMA_IN_SUC_EOF_CH1_INT_CLR_V = 0x1
const GDMA_IN_SUC_EOF_CH1_INT_CLR_S = 1
const GDMA_IN_DONE_CH1_INT_CLR_V = 0x1
const GDMA_IN_DONE_CH1_INT_CLR_S = 0
const GDMA_IN_BUF_HUNGRY_CH1_V = 0x1
const GDMA_IN_BUF_HUNGRY_CH1_S = 28
const GDMA_IN_REMAIN_UNDER_4B_L3_CH1_V = 0x1
const GDMA_IN_REMAIN_UNDER_4B_L3_CH1_S = 27
const GDMA_IN_REMAIN_UNDER_3B_L3_CH1_V = 0x1
const GDMA_IN_REMAIN_UNDER_3B_L3_CH1_S = 26
const GDMA_IN_REMAIN_UNDER_2B_L3_CH1_V = 0x1
const GDMA_IN_REMAIN_UNDER_2B_L3_CH1_S = 25
const GDMA_IN_REMAIN_UNDER_1B_L3_CH1_V = 0x1
const GDMA_IN_REMAIN_UNDER_1B_L3_CH1_S = 24
const GDMA_INFIFO_CNT_L3_CH1 = 0x0000001F
const GDMA_INFIFO_CNT_L3_CH1_V = 0x1F
const GDMA_INFIFO_CNT_L3_CH1_S = 19
const GDMA_INFIFO_CNT_L2_CH1 = 0x0000007F
const GDMA_INFIFO_CNT_L2_CH1_V = 0x7F
const GDMA_INFIFO_CNT_L2_CH1_S = 12
const GDMA_INFIFO_CNT_L1_CH1 = 0x0000003F
const GDMA_INFIFO_CNT_L1_CH1_V = 0x3F
const GDMA_INFIFO_CNT_L1_CH1_S = 6
const GDMA_INFIFO_EMPTY_L3_CH1_V = 0x1
const GDMA_INFIFO_EMPTY_L3_CH1_S = 5
const GDMA_INFIFO_FULL_L3_CH1_V = 0x1
const GDMA_INFIFO_FULL_L3_CH1_S = 4
const GDMA_INFIFO_EMPTY_L2_CH1_V = 0x1
const GDMA_INFIFO_EMPTY_L2_CH1_S = 3
const GDMA_INFIFO_FULL_L2_CH1_V = 0x1
const GDMA_INFIFO_FULL_L2_CH1_S = 2
const GDMA_INFIFO_EMPTY_L1_CH1_V = 0x1
const GDMA_INFIFO_EMPTY_L1_CH1_S = 1
const GDMA_INFIFO_FULL_L1_CH1_V = 0x1
const GDMA_INFIFO_FULL_L1_CH1_S = 0
const GDMA_INFIFO_POP_CH1_V = 0x1
const GDMA_INFIFO_POP_CH1_S = 12
const GDMA_INFIFO_RDATA_CH1 = 0x00000FFF
const GDMA_INFIFO_RDATA_CH1_V = 0xFFF
const GDMA_INFIFO_RDATA_CH1_S = 0
const GDMA_INLINK_PARK_CH1_V = 0x1
const GDMA_INLINK_PARK_CH1_S = 24
const GDMA_INLINK_RESTART_CH1_V = 0x1
const GDMA_INLINK_RESTART_CH1_S = 23
const GDMA_INLINK_START_CH1_V = 0x1
const GDMA_INLINK_START_CH1_S = 22
const GDMA_INLINK_STOP_CH1_V = 0x1
const GDMA_INLINK_STOP_CH1_S = 21
const GDMA_INLINK_AUTO_RET_CH1_V = 0x1
const GDMA_INLINK_AUTO_RET_CH1_S = 20
const GDMA_INLINK_ADDR_CH1 = 0x000FFFFF
const GDMA_INLINK_ADDR_CH1_V = 0xFFFFF
const GDMA_INLINK_ADDR_CH1_S = 0
const GDMA_IN_STATE_CH1 = 0x00000007
const GDMA_IN_STATE_CH1_V = 0x7
const GDMA_IN_STATE_CH1_S = 20
const GDMA_IN_DSCR_STATE_CH1 = 0x00000003
const GDMA_IN_DSCR_STATE_CH1_V = 0x3
const GDMA_IN_DSCR_STATE_CH1_S = 18
const GDMA_INLINK_DSCR_ADDR_CH1 = 0x0003FFFF
const GDMA_INLINK_DSCR_ADDR_CH1_V = 0x3FFFF
const GDMA_INLINK_DSCR_ADDR_CH1_S = 0
const GDMA_IN_SUC_EOF_DES_ADDR_CH1 = 0xFFFFFFFF
const GDMA_IN_SUC_EOF_DES_ADDR_CH1_V = 0xFFFFFFFF
const GDMA_IN_SUC_EOF_DES_ADDR_CH1_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH1 = 0xFFFFFFFF
const GDMA_IN_ERR_EOF_DES_ADDR_CH1_V = 0xFFFFFFFF
const GDMA_IN_ERR_EOF_DES_ADDR_CH1_S = 0
const GDMA_INLINK_DSCR_CH1 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_CH1_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_CH1_S = 0
const GDMA_INLINK_DSCR_BF0_CH1 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF0_CH1_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF0_CH1_S = 0
const GDMA_INLINK_DSCR_BF1_CH1 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF1_CH1_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF1_CH1_S = 0
const GDMA_RX_WEIGHT_CH1 = 0x0000000F
const GDMA_RX_WEIGHT_CH1_V = 0xF
const GDMA_RX_WEIGHT_CH1_S = 8
const GDMA_RX_PRI_CH1 = 0x0000000F
const GDMA_RX_PRI_CH1_V = 0xF
const GDMA_RX_PRI_CH1_S = 0
const GDMA_PERI_IN_SEL_CH1 = 0x0000003F
const GDMA_PERI_IN_SEL_CH1_V = 0x3F
const GDMA_PERI_IN_SEL_CH1_S = 0
const GDMA_OUT_DATA_BURST_EN_CH1_V = 0x1
const GDMA_OUT_DATA_BURST_EN_CH1_S = 5
const GDMA_OUTDSCR_BURST_EN_CH1_V = 0x1
const GDMA_OUTDSCR_BURST_EN_CH1_S = 4
const GDMA_OUT_EOF_MODE_CH1_V = 0x1
const GDMA_OUT_EOF_MODE_CH1_S = 3
const GDMA_OUT_AUTO_WRBACK_CH1_V = 0x1
const GDMA_OUT_AUTO_WRBACK_CH1_S = 2
const GDMA_OUT_LOOP_TEST_CH1_V = 0x1
const GDMA_OUT_LOOP_TEST_CH1_S = 1
const GDMA_OUT_RST_CH1_V = 0x1
const GDMA_OUT_RST_CH1_S = 0
const GDMA_OUT_EXT_MEM_BK_SIZE_CH1 = 0x00000003
const GDMA_OUT_EXT_MEM_BK_SIZE_CH1_V = 0x3
const GDMA_OUT_EXT_MEM_BK_SIZE_CH1_S = 13
const GDMA_OUT_CHECK_OWNER_CH1_V = 0x1
const GDMA_OUT_CHECK_OWNER_CH1_S = 12
const GDMA_OUTFIFO_UDF_L3_CH1_INT_RAW_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH1_INT_RAW_S = 7
const GDMA_OUTFIFO_OVF_L3_CH1_INT_RAW_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH1_INT_RAW_S = 6
const GDMA_OUTFIFO_UDF_L1_CH1_INT_RAW_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH1_INT_RAW_S = 5
const GDMA_OUTFIFO_OVF_L1_CH1_INT_RAW_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH1_INT_RAW_S = 4
const GDMA_OUT_TOTAL_EOF_CH1_INT_RAW_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH1_INT_RAW_S = 3
const GDMA_OUT_DSCR_ERR_CH1_INT_RAW_V = 0x1
const GDMA_OUT_DSCR_ERR_CH1_INT_RAW_S = 2
const GDMA_OUT_EOF_CH1_INT_RAW_V = 0x1
const GDMA_OUT_EOF_CH1_INT_RAW_S = 1
const GDMA_OUT_DONE_CH1_INT_RAW_V = 0x1
const GDMA_OUT_DONE_CH1_INT_RAW_S = 0
const GDMA_OUTFIFO_UDF_L3_CH1_INT_ST_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH1_INT_ST_S = 7
const GDMA_OUTFIFO_OVF_L3_CH1_INT_ST_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH1_INT_ST_S = 6
const GDMA_OUTFIFO_UDF_L1_CH1_INT_ST_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH1_INT_ST_S = 5
const GDMA_OUTFIFO_OVF_L1_CH1_INT_ST_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH1_INT_ST_S = 4
const GDMA_OUT_TOTAL_EOF_CH1_INT_ST_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH1_INT_ST_S = 3
const GDMA_OUT_DSCR_ERR_CH1_INT_ST_V = 0x1
const GDMA_OUT_DSCR_ERR_CH1_INT_ST_S = 2
const GDMA_OUT_EOF_CH1_INT_ST_V = 0x1
const GDMA_OUT_EOF_CH1_INT_ST_S = 1
const GDMA_OUT_DONE_CH1_INT_ST_V = 0x1
const GDMA_OUT_DONE_CH1_INT_ST_S = 0
const GDMA_OUTFIFO_UDF_L3_CH1_INT_ENA_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH1_INT_ENA_S = 7
const GDMA_OUTFIFO_OVF_L3_CH1_INT_ENA_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH1_INT_ENA_S = 6
const GDMA_OUTFIFO_UDF_L1_CH1_INT_ENA_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH1_INT_ENA_S = 5
const GDMA_OUTFIFO_OVF_L1_CH1_INT_ENA_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH1_INT_ENA_S = 4
const GDMA_OUT_TOTAL_EOF_CH1_INT_ENA_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH1_INT_ENA_S = 3
const GDMA_OUT_DSCR_ERR_CH1_INT_ENA_V = 0x1
const GDMA_OUT_DSCR_ERR_CH1_INT_ENA_S = 2
const GDMA_OUT_EOF_CH1_INT_ENA_V = 0x1
const GDMA_OUT_EOF_CH1_INT_ENA_S = 1
const GDMA_OUT_DONE_CH1_INT_ENA_V = 0x1
const GDMA_OUT_DONE_CH1_INT_ENA_S = 0
const GDMA_OUTFIFO_UDF_L3_CH1_INT_CLR_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH1_INT_CLR_S = 7
const GDMA_OUTFIFO_OVF_L3_CH1_INT_CLR_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH1_INT_CLR_S = 6
const GDMA_OUTFIFO_UDF_L1_CH1_INT_CLR_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH1_INT_CLR_S = 5
const GDMA_OUTFIFO_OVF_L1_CH1_INT_CLR_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH1_INT_CLR_S = 4
const GDMA_OUT_TOTAL_EOF_CH1_INT_CLR_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH1_INT_CLR_S = 3
const GDMA_OUT_DSCR_ERR_CH1_INT_CLR_V = 0x1
const GDMA_OUT_DSCR_ERR_CH1_INT_CLR_S = 2
const GDMA_OUT_EOF_CH1_INT_CLR_V = 0x1
const GDMA_OUT_EOF_CH1_INT_CLR_S = 1
const GDMA_OUT_DONE_CH1_INT_CLR_V = 0x1
const GDMA_OUT_DONE_CH1_INT_CLR_S = 0
const GDMA_OUT_REMAIN_UNDER_4B_L3_CH1_V = 0x1
const GDMA_OUT_REMAIN_UNDER_4B_L3_CH1_S = 26
const GDMA_OUT_REMAIN_UNDER_3B_L3_CH1_V = 0x1
const GDMA_OUT_REMAIN_UNDER_3B_L3_CH1_S = 25
const GDMA_OUT_REMAIN_UNDER_2B_L3_CH1_V = 0x1
const GDMA_OUT_REMAIN_UNDER_2B_L3_CH1_S = 24
const GDMA_OUT_REMAIN_UNDER_1B_L3_CH1_V = 0x1
const GDMA_OUT_REMAIN_UNDER_1B_L3_CH1_S = 23
const GDMA_OUTFIFO_CNT_L3_CH1 = 0x0000001F
const GDMA_OUTFIFO_CNT_L3_CH1_V = 0x1F
const GDMA_OUTFIFO_CNT_L3_CH1_S = 18
const GDMA_OUTFIFO_CNT_L2_CH1 = 0x0000007F
const GDMA_OUTFIFO_CNT_L2_CH1_V = 0x7F
const GDMA_OUTFIFO_CNT_L2_CH1_S = 11
const GDMA_OUTFIFO_CNT_L1_CH1 = 0x0000001F
const GDMA_OUTFIFO_CNT_L1_CH1_V = 0x1F
const GDMA_OUTFIFO_CNT_L1_CH1_S = 6
const GDMA_OUTFIFO_EMPTY_L3_CH1_V = 0x1
const GDMA_OUTFIFO_EMPTY_L3_CH1_S = 5
const GDMA_OUTFIFO_FULL_L3_CH1_V = 0x1
const GDMA_OUTFIFO_FULL_L3_CH1_S = 4
const GDMA_OUTFIFO_EMPTY_L2_CH1_V = 0x1
const GDMA_OUTFIFO_EMPTY_L2_CH1_S = 3
const GDMA_OUTFIFO_FULL_L2_CH1_V = 0x1
const GDMA_OUTFIFO_FULL_L2_CH1_S = 2
const GDMA_OUTFIFO_EMPTY_L1_CH1_V = 0x1
const GDMA_OUTFIFO_EMPTY_L1_CH1_S = 1
const GDMA_OUTFIFO_FULL_L1_CH1_V = 0x1
const GDMA_OUTFIFO_FULL_L1_CH1_S = 0
const GDMA_OUTFIFO_PUSH_CH1_V = 0x1
const GDMA_OUTFIFO_PUSH_CH1_S = 9
const GDMA_OUTFIFO_WDATA_CH1 = 0x000001FF
const GDMA_OUTFIFO_WDATA_CH1_V = 0x1FF
const GDMA_OUTFIFO_WDATA_CH1_S = 0
const GDMA_OUTLINK_PARK_CH1_V = 0x1
const GDMA_OUTLINK_PARK_CH1_S = 23
const GDMA_OUTLINK_RESTART_CH1_V = 0x1
const GDMA_OUTLINK_RESTART_CH1_S = 22
const GDMA_OUTLINK_START_CH1_V = 0x1
const GDMA_OUTLINK_START_CH1_S = 21
const GDMA_OUTLINK_STOP_CH1_V = 0x1
const GDMA_OUTLINK_STOP_CH1_S = 20
const GDMA_OUTLINK_ADDR_CH1 = 0x000FFFFF
const GDMA_OUTLINK_ADDR_CH1_V = 0xFFFFF
const GDMA_OUTLINK_ADDR_CH1_S = 0
const GDMA_OUT_STATE_CH1 = 0x00000007
const GDMA_OUT_STATE_CH1_V = 0x7
const GDMA_OUT_STATE_CH1_S = 20
const GDMA_OUT_DSCR_STATE_CH1 = 0x00000003
const GDMA_OUT_DSCR_STATE_CH1_V = 0x3
const GDMA_OUT_DSCR_STATE_CH1_S = 18
const GDMA_OUTLINK_DSCR_ADDR_CH1 = 0x0003FFFF
const GDMA_OUTLINK_DSCR_ADDR_CH1_V = 0x3FFFF
const GDMA_OUTLINK_DSCR_ADDR_CH1_S = 0
const GDMA_OUT_EOF_DES_ADDR_CH1 = 0xFFFFFFFF
const GDMA_OUT_EOF_DES_ADDR_CH1_V = 0xFFFFFFFF
const GDMA_OUT_EOF_DES_ADDR_CH1_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH1 = 0xFFFFFFFF
const GDMA_OUT_EOF_BFR_DES_ADDR_CH1_V = 0xFFFFFFFF
const GDMA_OUT_EOF_BFR_DES_ADDR_CH1_S = 0
const GDMA_OUTLINK_DSCR_CH1 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_CH1_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_CH1_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH1 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF0_CH1_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF0_CH1_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH1 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF1_CH1_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF1_CH1_S = 0
const GDMA_TX_WEIGHT_CH1 = 0x0000000F
const GDMA_TX_WEIGHT_CH1_V = 0xF
const GDMA_TX_WEIGHT_CH1_S = 8
const GDMA_TX_PRI_CH1 = 0x0000000F
const GDMA_TX_PRI_CH1_V = 0xF
const GDMA_TX_PRI_CH1_S = 0
const GDMA_PERI_OUT_SEL_CH1 = 0x0000003F
const GDMA_PERI_OUT_SEL_CH1_V = 0x3F
const GDMA_PERI_OUT_SEL_CH1_S = 0
const GDMA_MEM_TRANS_EN_CH2_V = 0x1
const GDMA_MEM_TRANS_EN_CH2_S = 4
const GDMA_IN_DATA_BURST_EN_CH2_V = 0x1
const GDMA_IN_DATA_BURST_EN_CH2_S = 3
const GDMA_INDSCR_BURST_EN_CH2_V = 0x1
const GDMA_INDSCR_BURST_EN_CH2_S = 2
const GDMA_IN_LOOP_TEST_CH2_V = 0x1
const GDMA_IN_LOOP_TEST_CH2_S = 1
const GDMA_IN_RST_CH2_V = 0x1
const GDMA_IN_RST_CH2_S = 0
const GDMA_IN_EXT_MEM_BK_SIZE_CH2 = 0x00000003
const GDMA_IN_EXT_MEM_BK_SIZE_CH2_V = 0x3
const GDMA_IN_EXT_MEM_BK_SIZE_CH2_S = 13
const GDMA_IN_CHECK_OWNER_CH2_V = 0x1
const GDMA_IN_CHECK_OWNER_CH2_S = 12
const GDMA_DMA_INFIFO_FULL_THRS_CH2 = 0x00000FFF
const GDMA_DMA_INFIFO_FULL_THRS_CH2_V = 0xFFF
const GDMA_DMA_INFIFO_FULL_THRS_CH2_S = 0
const GDMA_INFIFO_UDF_L3_CH2_INT_RAW_V = 0x1
const GDMA_INFIFO_UDF_L3_CH2_INT_RAW_S = 9
const GDMA_INFIFO_OVF_L3_CH2_INT_RAW_V = 0x1
const GDMA_INFIFO_OVF_L3_CH2_INT_RAW_S = 8
const GDMA_INFIFO_UDF_L1_CH2_INT_RAW_V = 0x1
const GDMA_INFIFO_UDF_L1_CH2_INT_RAW_S = 7
const GDMA_INFIFO_OVF_L1_CH2_INT_RAW_V = 0x1
const GDMA_INFIFO_OVF_L1_CH2_INT_RAW_S = 6
const GDMA_INFIFO_FULL_WM_CH2_INT_RAW_V = 0x1
const GDMA_INFIFO_FULL_WM_CH2_INT_RAW_S = 5
const GDMA_IN_DSCR_EMPTY_CH2_INT_RAW_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH2_INT_RAW_S = 4
const GDMA_IN_DSCR_ERR_CH2_INT_RAW_V = 0x1
const GDMA_IN_DSCR_ERR_CH2_INT_RAW_S = 3
const GDMA_IN_ERR_EOF_CH2_INT_RAW_V = 0x1
const GDMA_IN_ERR_EOF_CH2_INT_RAW_S = 2
const GDMA_IN_SUC_EOF_CH2_INT_RAW_V = 0x1
const GDMA_IN_SUC_EOF_CH2_INT_RAW_S = 1
const GDMA_IN_DONE_CH2_INT_RAW_V = 0x1
const GDMA_IN_DONE_CH2_INT_RAW_S = 0
const GDMA_INFIFO_UDF_L3_CH2_INT_ST_V = 0x1
const GDMA_INFIFO_UDF_L3_CH2_INT_ST_S = 9
const GDMA_INFIFO_OVF_L3_CH2_INT_ST_V = 0x1
const GDMA_INFIFO_OVF_L3_CH2_INT_ST_S = 8
const GDMA_INFIFO_UDF_L1_CH2_INT_ST_V = 0x1
const GDMA_INFIFO_UDF_L1_CH2_INT_ST_S = 7
const GDMA_INFIFO_OVF_L1_CH2_INT_ST_V = 0x1
const GDMA_INFIFO_OVF_L1_CH2_INT_ST_S = 6
const GDMA_INFIFO_FULL_WM_CH2_INT_ST_V = 0x1
const GDMA_INFIFO_FULL_WM_CH2_INT_ST_S = 5
const GDMA_IN_DSCR_EMPTY_CH2_INT_ST_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH2_INT_ST_S = 4
const GDMA_IN_DSCR_ERR_CH2_INT_ST_V = 0x1
const GDMA_IN_DSCR_ERR_CH2_INT_ST_S = 3
const GDMA_IN_ERR_EOF_CH2_INT_ST_V = 0x1
const GDMA_IN_ERR_EOF_CH2_INT_ST_S = 2
const GDMA_IN_SUC_EOF_CH2_INT_ST_V = 0x1
const GDMA_IN_SUC_EOF_CH2_INT_ST_S = 1
const GDMA_IN_DONE_CH2_INT_ST_V = 0x1
const GDMA_IN_DONE_CH2_INT_ST_S = 0
const GDMA_INFIFO_UDF_L3_CH2_INT_ENA_V = 0x1
const GDMA_INFIFO_UDF_L3_CH2_INT_ENA_S = 9
const GDMA_INFIFO_OVF_L3_CH2_INT_ENA_V = 0x1
const GDMA_INFIFO_OVF_L3_CH2_INT_ENA_S = 8
const GDMA_INFIFO_UDF_L1_CH2_INT_ENA_V = 0x1
const GDMA_INFIFO_UDF_L1_CH2_INT_ENA_S = 7
const GDMA_INFIFO_OVF_L1_CH2_INT_ENA_V = 0x1
const GDMA_INFIFO_OVF_L1_CH2_INT_ENA_S = 6
const GDMA_INFIFO_FULL_WM_CH2_INT_ENA_V = 0x1
const GDMA_INFIFO_FULL_WM_CH2_INT_ENA_S = 5
const GDMA_IN_DSCR_EMPTY_CH2_INT_ENA_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH2_INT_ENA_S = 4
const GDMA_IN_DSCR_ERR_CH2_INT_ENA_V = 0x1
const GDMA_IN_DSCR_ERR_CH2_INT_ENA_S = 3
const GDMA_IN_ERR_EOF_CH2_INT_ENA_V = 0x1
const GDMA_IN_ERR_EOF_CH2_INT_ENA_S = 2
const GDMA_IN_SUC_EOF_CH2_INT_ENA_V = 0x1
const GDMA_IN_SUC_EOF_CH2_INT_ENA_S = 1
const GDMA_IN_DONE_CH2_INT_ENA_V = 0x1
const GDMA_IN_DONE_CH2_INT_ENA_S = 0
const GDMA_INFIFO_UDF_L3_CH2_INT_CLR_V = 0x1
const GDMA_INFIFO_UDF_L3_CH2_INT_CLR_S = 9
const GDMA_INFIFO_OVF_L3_CH2_INT_CLR_V = 0x1
const GDMA_INFIFO_OVF_L3_CH2_INT_CLR_S = 8
const GDMA_INFIFO_UDF_L1_CH2_INT_CLR_V = 0x1
const GDMA_INFIFO_UDF_L1_CH2_INT_CLR_S = 7
const GDMA_INFIFO_OVF_L1_CH2_INT_CLR_V = 0x1
const GDMA_INFIFO_OVF_L1_CH2_INT_CLR_S = 6
const GDMA_DMA_INFIFO_FULL_WM_CH2_INT_CLR_V = 0x1
const GDMA_DMA_INFIFO_FULL_WM_CH2_INT_CLR_S = 5
const GDMA_IN_DSCR_EMPTY_CH2_INT_CLR_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH2_INT_CLR_S = 4
const GDMA_IN_DSCR_ERR_CH2_INT_CLR_V = 0x1
const GDMA_IN_DSCR_ERR_CH2_INT_CLR_S = 3
const GDMA_IN_ERR_EOF_CH2_INT_CLR_V = 0x1
const GDMA_IN_ERR_EOF_CH2_INT_CLR_S = 2
const GDMA_IN_SUC_EOF_CH2_INT_CLR_V = 0x1
const GDMA_IN_SUC_EOF_CH2_INT_CLR_S = 1
const GDMA_IN_DONE_CH2_INT_CLR_V = 0x1
const GDMA_IN_DONE_CH2_INT_CLR_S = 0
const GDMA_IN_BUF_HUNGRY_CH2_V = 0x1
const GDMA_IN_BUF_HUNGRY_CH2_S = 28
const GDMA_IN_REMAIN_UNDER_4B_L3_CH2_V = 0x1
const GDMA_IN_REMAIN_UNDER_4B_L3_CH2_S = 27
const GDMA_IN_REMAIN_UNDER_3B_L3_CH2_V = 0x1
const GDMA_IN_REMAIN_UNDER_3B_L3_CH2_S = 26
const GDMA_IN_REMAIN_UNDER_2B_L3_CH2_V = 0x1
const GDMA_IN_REMAIN_UNDER_2B_L3_CH2_S = 25
const GDMA_IN_REMAIN_UNDER_1B_L3_CH2_V = 0x1
const GDMA_IN_REMAIN_UNDER_1B_L3_CH2_S = 24
const GDMA_INFIFO_CNT_L3_CH2 = 0x0000001F
const GDMA_INFIFO_CNT_L3_CH2_V = 0x1F
const GDMA_INFIFO_CNT_L3_CH2_S = 19
const GDMA_INFIFO_CNT_L2_CH2 = 0x0000007F
const GDMA_INFIFO_CNT_L2_CH2_V = 0x7F
const GDMA_INFIFO_CNT_L2_CH2_S = 12
const GDMA_INFIFO_CNT_L1_CH2 = 0x0000003F
const GDMA_INFIFO_CNT_L1_CH2_V = 0x3F
const GDMA_INFIFO_CNT_L1_CH2_S = 6
const GDMA_INFIFO_EMPTY_L3_CH2_V = 0x1
const GDMA_INFIFO_EMPTY_L3_CH2_S = 5
const GDMA_INFIFO_FULL_L3_CH2_V = 0x1
const GDMA_INFIFO_FULL_L3_CH2_S = 4
const GDMA_INFIFO_EMPTY_L2_CH2_V = 0x1
const GDMA_INFIFO_EMPTY_L2_CH2_S = 3
const GDMA_INFIFO_FULL_L2_CH2_V = 0x1
const GDMA_INFIFO_FULL_L2_CH2_S = 2
const GDMA_INFIFO_EMPTY_L1_CH2_V = 0x1
const GDMA_INFIFO_EMPTY_L1_CH2_S = 1
const GDMA_INFIFO_FULL_L1_CH2_V = 0x1
const GDMA_INFIFO_FULL_L1_CH2_S = 0
const GDMA_INFIFO_POP_CH2_V = 0x1
const GDMA_INFIFO_POP_CH2_S = 12
const GDMA_INFIFO_RDATA_CH2 = 0x00000FFF
const GDMA_INFIFO_RDATA_CH2_V = 0xFFF
const GDMA_INFIFO_RDATA_CH2_S = 0
const GDMA_INLINK_PARK_CH2_V = 0x1
const GDMA_INLINK_PARK_CH2_S = 24
const GDMA_INLINK_RESTART_CH2_V = 0x1
const GDMA_INLINK_RESTART_CH2_S = 23
const GDMA_INLINK_START_CH2_V = 0x1
const GDMA_INLINK_START_CH2_S = 22
const GDMA_INLINK_STOP_CH2_V = 0x1
const GDMA_INLINK_STOP_CH2_S = 21
const GDMA_INLINK_AUTO_RET_CH2_V = 0x1
const GDMA_INLINK_AUTO_RET_CH2_S = 20
const GDMA_INLINK_ADDR_CH2 = 0x000FFFFF
const GDMA_INLINK_ADDR_CH2_V = 0xFFFFF
const GDMA_INLINK_ADDR_CH2_S = 0
const GDMA_IN_STATE_CH2 = 0x00000007
const GDMA_IN_STATE_CH2_V = 0x7
const GDMA_IN_STATE_CH2_S = 20
const GDMA_IN_DSCR_STATE_CH2 = 0x00000003
const GDMA_IN_DSCR_STATE_CH2_V = 0x3
const GDMA_IN_DSCR_STATE_CH2_S = 18
const GDMA_INLINK_DSCR_ADDR_CH2 = 0x0003FFFF
const GDMA_INLINK_DSCR_ADDR_CH2_V = 0x3FFFF
const GDMA_INLINK_DSCR_ADDR_CH2_S = 0
const GDMA_IN_SUC_EOF_DES_ADDR_CH2 = 0xFFFFFFFF
const GDMA_IN_SUC_EOF_DES_ADDR_CH2_V = 0xFFFFFFFF
const GDMA_IN_SUC_EOF_DES_ADDR_CH2_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH2 = 0xFFFFFFFF
const GDMA_IN_ERR_EOF_DES_ADDR_CH2_V = 0xFFFFFFFF
const GDMA_IN_ERR_EOF_DES_ADDR_CH2_S = 0
const GDMA_INLINK_DSCR_CH2 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_CH2_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_CH2_S = 0
const GDMA_INLINK_DSCR_BF0_CH2 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF0_CH2_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF0_CH2_S = 0
const GDMA_INLINK_DSCR_BF1_CH2 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF1_CH2_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF1_CH2_S = 0
const GDMA_RX_WEIGHT_CH2 = 0x0000000F
const GDMA_RX_WEIGHT_CH2_V = 0xF
const GDMA_RX_WEIGHT_CH2_S = 8
const GDMA_RX_PRI_CH2 = 0x0000000F
const GDMA_RX_PRI_CH2_V = 0xF
const GDMA_RX_PRI_CH2_S = 0
const GDMA_PERI_IN_SEL_CH2 = 0x0000003F
const GDMA_PERI_IN_SEL_CH2_V = 0x3F
const GDMA_PERI_IN_SEL_CH2_S = 0
const GDMA_OUT_DATA_BURST_EN_CH2_V = 0x1
const GDMA_OUT_DATA_BURST_EN_CH2_S = 5
const GDMA_OUTDSCR_BURST_EN_CH2_V = 0x1
const GDMA_OUTDSCR_BURST_EN_CH2_S = 4
const GDMA_OUT_EOF_MODE_CH2_V = 0x1
const GDMA_OUT_EOF_MODE_CH2_S = 3
const GDMA_OUT_AUTO_WRBACK_CH2_V = 0x1
const GDMA_OUT_AUTO_WRBACK_CH2_S = 2
const GDMA_OUT_LOOP_TEST_CH2_V = 0x1
const GDMA_OUT_LOOP_TEST_CH2_S = 1
const GDMA_OUT_RST_CH2_V = 0x1
const GDMA_OUT_RST_CH2_S = 0
const GDMA_OUT_EXT_MEM_BK_SIZE_CH2 = 0x00000003
const GDMA_OUT_EXT_MEM_BK_SIZE_CH2_V = 0x3
const GDMA_OUT_EXT_MEM_BK_SIZE_CH2_S = 13
const GDMA_OUT_CHECK_OWNER_CH2_V = 0x1
const GDMA_OUT_CHECK_OWNER_CH2_S = 12
const GDMA_OUTFIFO_UDF_L3_CH2_INT_RAW_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH2_INT_RAW_S = 7
const GDMA_OUTFIFO_OVF_L3_CH2_INT_RAW_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH2_INT_RAW_S = 6
const GDMA_OUTFIFO_UDF_L1_CH2_INT_RAW_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH2_INT_RAW_S = 5
const GDMA_OUTFIFO_OVF_L1_CH2_INT_RAW_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH2_INT_RAW_S = 4
const GDMA_OUT_TOTAL_EOF_CH2_INT_RAW_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH2_INT_RAW_S = 3
const GDMA_OUT_DSCR_ERR_CH2_INT_RAW_V = 0x1
const GDMA_OUT_DSCR_ERR_CH2_INT_RAW_S = 2
const GDMA_OUT_EOF_CH2_INT_RAW_V = 0x1
const GDMA_OUT_EOF_CH2_INT_RAW_S = 1
const GDMA_OUT_DONE_CH2_INT_RAW_V = 0x1
const GDMA_OUT_DONE_CH2_INT_RAW_S = 0
const GDMA_OUTFIFO_UDF_L3_CH2_INT_ST_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH2_INT_ST_S = 7
const GDMA_OUTFIFO_OVF_L3_CH2_INT_ST_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH2_INT_ST_S = 6
const GDMA_OUTFIFO_UDF_L1_CH2_INT_ST_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH2_INT_ST_S = 5
const GDMA_OUTFIFO_OVF_L1_CH2_INT_ST_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH2_INT_ST_S = 4
const GDMA_OUT_TOTAL_EOF_CH2_INT_ST_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH2_INT_ST_S = 3
const GDMA_OUT_DSCR_ERR_CH2_INT_ST_V = 0x1
const GDMA_OUT_DSCR_ERR_CH2_INT_ST_S = 2
const GDMA_OUT_EOF_CH2_INT_ST_V = 0x1
const GDMA_OUT_EOF_CH2_INT_ST_S = 1
const GDMA_OUT_DONE_CH2_INT_ST_V = 0x1
const GDMA_OUT_DONE_CH2_INT_ST_S = 0
const GDMA_OUTFIFO_UDF_L3_CH2_INT_ENA_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH2_INT_ENA_S = 7
const GDMA_OUTFIFO_OVF_L3_CH2_INT_ENA_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH2_INT_ENA_S = 6
const GDMA_OUTFIFO_UDF_L1_CH2_INT_ENA_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH2_INT_ENA_S = 5
const GDMA_OUTFIFO_OVF_L1_CH2_INT_ENA_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH2_INT_ENA_S = 4
const GDMA_OUT_TOTAL_EOF_CH2_INT_ENA_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH2_INT_ENA_S = 3
const GDMA_OUT_DSCR_ERR_CH2_INT_ENA_V = 0x1
const GDMA_OUT_DSCR_ERR_CH2_INT_ENA_S = 2
const GDMA_OUT_EOF_CH2_INT_ENA_V = 0x1
const GDMA_OUT_EOF_CH2_INT_ENA_S = 1
const GDMA_OUT_DONE_CH2_INT_ENA_V = 0x1
const GDMA_OUT_DONE_CH2_INT_ENA_S = 0
const GDMA_OUTFIFO_UDF_L3_CH2_INT_CLR_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH2_INT_CLR_S = 7
const GDMA_OUTFIFO_OVF_L3_CH2_INT_CLR_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH2_INT_CLR_S = 6
const GDMA_OUTFIFO_UDF_L1_CH2_INT_CLR_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH2_INT_CLR_S = 5
const GDMA_OUTFIFO_OVF_L1_CH2_INT_CLR_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH2_INT_CLR_S = 4
const GDMA_OUT_TOTAL_EOF_CH2_INT_CLR_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH2_INT_CLR_S = 3
const GDMA_OUT_DSCR_ERR_CH2_INT_CLR_V = 0x1
const GDMA_OUT_DSCR_ERR_CH2_INT_CLR_S = 2
const GDMA_OUT_EOF_CH2_INT_CLR_V = 0x1
const GDMA_OUT_EOF_CH2_INT_CLR_S = 1
const GDMA_OUT_DONE_CH2_INT_CLR_V = 0x1
const GDMA_OUT_DONE_CH2_INT_CLR_S = 0
const GDMA_OUT_REMAIN_UNDER_4B_L3_CH2_V = 0x1
const GDMA_OUT_REMAIN_UNDER_4B_L3_CH2_S = 26
const GDMA_OUT_REMAIN_UNDER_3B_L3_CH2_V = 0x1
const GDMA_OUT_REMAIN_UNDER_3B_L3_CH2_S = 25
const GDMA_OUT_REMAIN_UNDER_2B_L3_CH2_V = 0x1
const GDMA_OUT_REMAIN_UNDER_2B_L3_CH2_S = 24
const GDMA_OUT_REMAIN_UNDER_1B_L3_CH2_V = 0x1
const GDMA_OUT_REMAIN_UNDER_1B_L3_CH2_S = 23
const GDMA_OUTFIFO_CNT_L3_CH2 = 0x0000001F
const GDMA_OUTFIFO_CNT_L3_CH2_V = 0x1F
const GDMA_OUTFIFO_CNT_L3_CH2_S = 18
const GDMA_OUTFIFO_CNT_L2_CH2 = 0x0000007F
const GDMA_OUTFIFO_CNT_L2_CH2_V = 0x7F
const GDMA_OUTFIFO_CNT_L2_CH2_S = 11
const GDMA_OUTFIFO_CNT_L1_CH2 = 0x0000001F
const GDMA_OUTFIFO_CNT_L1_CH2_V = 0x1F
const GDMA_OUTFIFO_CNT_L1_CH2_S = 6
const GDMA_OUTFIFO_EMPTY_L3_CH2_V = 0x1
const GDMA_OUTFIFO_EMPTY_L3_CH2_S = 5
const GDMA_OUTFIFO_FULL_L3_CH2_V = 0x1
const GDMA_OUTFIFO_FULL_L3_CH2_S = 4
const GDMA_OUTFIFO_EMPTY_L2_CH2_V = 0x1
const GDMA_OUTFIFO_EMPTY_L2_CH2_S = 3
const GDMA_OUTFIFO_FULL_L2_CH2_V = 0x1
const GDMA_OUTFIFO_FULL_L2_CH2_S = 2
const GDMA_OUTFIFO_EMPTY_L1_CH2_V = 0x1
const GDMA_OUTFIFO_EMPTY_L1_CH2_S = 1
const GDMA_OUTFIFO_FULL_L1_CH2_V = 0x1
const GDMA_OUTFIFO_FULL_L1_CH2_S = 0
const GDMA_OUTFIFO_PUSH_CH2_V = 0x1
const GDMA_OUTFIFO_PUSH_CH2_S = 9
const GDMA_OUTFIFO_WDATA_CH2 = 0x000001FF
const GDMA_OUTFIFO_WDATA_CH2_V = 0x1FF
const GDMA_OUTFIFO_WDATA_CH2_S = 0
const GDMA_OUTLINK_PARK_CH2_V = 0x1
const GDMA_OUTLINK_PARK_CH2_S = 23
const GDMA_OUTLINK_RESTART_CH2_V = 0x1
const GDMA_OUTLINK_RESTART_CH2_S = 22
const GDMA_OUTLINK_START_CH2_V = 0x1
const GDMA_OUTLINK_START_CH2_S = 21
const GDMA_OUTLINK_STOP_CH2_V = 0x1
const GDMA_OUTLINK_STOP_CH2_S = 20
const GDMA_OUTLINK_ADDR_CH2 = 0x000FFFFF
const GDMA_OUTLINK_ADDR_CH2_V = 0xFFFFF
const GDMA_OUTLINK_ADDR_CH2_S = 0
const GDMA_OUT_STATE_CH2 = 0x00000007
const GDMA_OUT_STATE_CH2_V = 0x7
const GDMA_OUT_STATE_CH2_S = 20
const GDMA_OUT_DSCR_STATE_CH2 = 0x00000003
const GDMA_OUT_DSCR_STATE_CH2_V = 0x3
const GDMA_OUT_DSCR_STATE_CH2_S = 18
const GDMA_OUTLINK_DSCR_ADDR_CH2 = 0x0003FFFF
const GDMA_OUTLINK_DSCR_ADDR_CH2_V = 0x3FFFF
const GDMA_OUTLINK_DSCR_ADDR_CH2_S = 0
const GDMA_OUT_EOF_DES_ADDR_CH2 = 0xFFFFFFFF
const GDMA_OUT_EOF_DES_ADDR_CH2_V = 0xFFFFFFFF
const GDMA_OUT_EOF_DES_ADDR_CH2_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH2 = 0xFFFFFFFF
const GDMA_OUT_EOF_BFR_DES_ADDR_CH2_V = 0xFFFFFFFF
const GDMA_OUT_EOF_BFR_DES_ADDR_CH2_S = 0
const GDMA_OUTLINK_DSCR_CH2 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_CH2_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_CH2_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH2 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF0_CH2_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF0_CH2_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH2 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF1_CH2_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF1_CH2_S = 0
const GDMA_TX_WEIGHT_CH2 = 0x0000000F
const GDMA_TX_WEIGHT_CH2_V = 0xF
const GDMA_TX_WEIGHT_CH2_S = 8
const GDMA_TX_PRI_CH2 = 0x0000000F
const GDMA_TX_PRI_CH2_V = 0xF
const GDMA_TX_PRI_CH2_S = 0
const GDMA_PERI_OUT_SEL_CH2 = 0x0000003F
const GDMA_PERI_OUT_SEL_CH2_V = 0x3F
const GDMA_PERI_OUT_SEL_CH2_S = 0
const GDMA_MEM_TRANS_EN_CH3_V = 0x1
const GDMA_MEM_TRANS_EN_CH3_S = 4
const GDMA_IN_DATA_BURST_EN_CH3_V = 0x1
const GDMA_IN_DATA_BURST_EN_CH3_S = 3
const GDMA_INDSCR_BURST_EN_CH3_V = 0x1
const GDMA_INDSCR_BURST_EN_CH3_S = 2
const GDMA_IN_LOOP_TEST_CH3_V = 0x1
const GDMA_IN_LOOP_TEST_CH3_S = 1
const GDMA_IN_RST_CH3_V = 0x1
const GDMA_IN_RST_CH3_S = 0
const GDMA_IN_EXT_MEM_BK_SIZE_CH3 = 0x00000003
const GDMA_IN_EXT_MEM_BK_SIZE_CH3_V = 0x3
const GDMA_IN_EXT_MEM_BK_SIZE_CH3_S = 13
const GDMA_IN_CHECK_OWNER_CH3_V = 0x1
const GDMA_IN_CHECK_OWNER_CH3_S = 12
const GDMA_DMA_INFIFO_FULL_THRS_CH3 = 0x00000FFF
const GDMA_DMA_INFIFO_FULL_THRS_CH3_V = 0xFFF
const GDMA_DMA_INFIFO_FULL_THRS_CH3_S = 0
const GDMA_INFIFO_UDF_L3_CH3_INT_RAW_V = 0x1
const GDMA_INFIFO_UDF_L3_CH3_INT_RAW_S = 9
const GDMA_INFIFO_OVF_L3_CH3_INT_RAW_V = 0x1
const GDMA_INFIFO_OVF_L3_CH3_INT_RAW_S = 8
const GDMA_INFIFO_UDF_L1_CH3_INT_RAW_V = 0x1
const GDMA_INFIFO_UDF_L1_CH3_INT_RAW_S = 7
const GDMA_INFIFO_OVF_L1_CH3_INT_RAW_V = 0x1
const GDMA_INFIFO_OVF_L1_CH3_INT_RAW_S = 6
const GDMA_INFIFO_FULL_WM_CH3_INT_RAW_V = 0x1
const GDMA_INFIFO_FULL_WM_CH3_INT_RAW_S = 5
const GDMA_IN_DSCR_EMPTY_CH3_INT_RAW_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH3_INT_RAW_S = 4
const GDMA_IN_DSCR_ERR_CH3_INT_RAW_V = 0x1
const GDMA_IN_DSCR_ERR_CH3_INT_RAW_S = 3
const GDMA_IN_ERR_EOF_CH3_INT_RAW_V = 0x1
const GDMA_IN_ERR_EOF_CH3_INT_RAW_S = 2
const GDMA_IN_SUC_EOF_CH3_INT_RAW_V = 0x1
const GDMA_IN_SUC_EOF_CH3_INT_RAW_S = 1
const GDMA_IN_DONE_CH3_INT_RAW_V = 0x1
const GDMA_IN_DONE_CH3_INT_RAW_S = 0
const GDMA_INFIFO_UDF_L3_CH3_INT_ST_V = 0x1
const GDMA_INFIFO_UDF_L3_CH3_INT_ST_S = 9
const GDMA_INFIFO_OVF_L3_CH3_INT_ST_V = 0x1
const GDMA_INFIFO_OVF_L3_CH3_INT_ST_S = 8
const GDMA_INFIFO_UDF_L1_CH3_INT_ST_V = 0x1
const GDMA_INFIFO_UDF_L1_CH3_INT_ST_S = 7
const GDMA_INFIFO_OVF_L1_CH3_INT_ST_V = 0x1
const GDMA_INFIFO_OVF_L1_CH3_INT_ST_S = 6
const GDMA_INFIFO_FULL_WM_CH3_INT_ST_V = 0x1
const GDMA_INFIFO_FULL_WM_CH3_INT_ST_S = 5
const GDMA_IN_DSCR_EMPTY_CH3_INT_ST_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH3_INT_ST_S = 4
const GDMA_IN_DSCR_ERR_CH3_INT_ST_V = 0x1
const GDMA_IN_DSCR_ERR_CH3_INT_ST_S = 3
const GDMA_IN_ERR_EOF_CH3_INT_ST_V = 0x1
const GDMA_IN_ERR_EOF_CH3_INT_ST_S = 2
const GDMA_IN_SUC_EOF_CH3_INT_ST_V = 0x1
const GDMA_IN_SUC_EOF_CH3_INT_ST_S = 1
const GDMA_IN_DONE_CH3_INT_ST_V = 0x1
const GDMA_IN_DONE_CH3_INT_ST_S = 0
const GDMA_INFIFO_UDF_L3_CH3_INT_ENA_V = 0x1
const GDMA_INFIFO_UDF_L3_CH3_INT_ENA_S = 9
const GDMA_INFIFO_OVF_L3_CH3_INT_ENA_V = 0x1
const GDMA_INFIFO_OVF_L3_CH3_INT_ENA_S = 8
const GDMA_INFIFO_UDF_L1_CH3_INT_ENA_V = 0x1
const GDMA_INFIFO_UDF_L1_CH3_INT_ENA_S = 7
const GDMA_INFIFO_OVF_L1_CH3_INT_ENA_V = 0x1
const GDMA_INFIFO_OVF_L1_CH3_INT_ENA_S = 6
const GDMA_INFIFO_FULL_WM_CH3_INT_ENA_V = 0x1
const GDMA_INFIFO_FULL_WM_CH3_INT_ENA_S = 5
const GDMA_IN_DSCR_EMPTY_CH3_INT_ENA_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH3_INT_ENA_S = 4
const GDMA_IN_DSCR_ERR_CH3_INT_ENA_V = 0x1
const GDMA_IN_DSCR_ERR_CH3_INT_ENA_S = 3
const GDMA_IN_ERR_EOF_CH3_INT_ENA_V = 0x1
const GDMA_IN_ERR_EOF_CH3_INT_ENA_S = 2
const GDMA_IN_SUC_EOF_CH3_INT_ENA_V = 0x1
const GDMA_IN_SUC_EOF_CH3_INT_ENA_S = 1
const GDMA_IN_DONE_CH3_INT_ENA_V = 0x1
const GDMA_IN_DONE_CH3_INT_ENA_S = 0
const GDMA_INFIFO_UDF_L3_CH3_INT_CLR_V = 0x1
const GDMA_INFIFO_UDF_L3_CH3_INT_CLR_S = 9
const GDMA_INFIFO_OVF_L3_CH3_INT_CLR_V = 0x1
const GDMA_INFIFO_OVF_L3_CH3_INT_CLR_S = 8
const GDMA_INFIFO_UDF_L1_CH3_INT_CLR_V = 0x1
const GDMA_INFIFO_UDF_L1_CH3_INT_CLR_S = 7
const GDMA_INFIFO_OVF_L1_CH3_INT_CLR_V = 0x1
const GDMA_INFIFO_OVF_L1_CH3_INT_CLR_S = 6
const GDMA_DMA_INFIFO_FULL_WM_CH3_INT_CLR_V = 0x1
const GDMA_DMA_INFIFO_FULL_WM_CH3_INT_CLR_S = 5
const GDMA_IN_DSCR_EMPTY_CH3_INT_CLR_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH3_INT_CLR_S = 4
const GDMA_IN_DSCR_ERR_CH3_INT_CLR_V = 0x1
const GDMA_IN_DSCR_ERR_CH3_INT_CLR_S = 3
const GDMA_IN_ERR_EOF_CH3_INT_CLR_V = 0x1
const GDMA_IN_ERR_EOF_CH3_INT_CLR_S = 2
const GDMA_IN_SUC_EOF_CH3_INT_CLR_V = 0x1
const GDMA_IN_SUC_EOF_CH3_INT_CLR_S = 1
const GDMA_IN_DONE_CH3_INT_CLR_V = 0x1
const GDMA_IN_DONE_CH3_INT_CLR_S = 0
const GDMA_IN_BUF_HUNGRY_CH3_V = 0x1
const GDMA_IN_BUF_HUNGRY_CH3_S = 28
const GDMA_IN_REMAIN_UNDER_4B_L3_CH3_V = 0x1
const GDMA_IN_REMAIN_UNDER_4B_L3_CH3_S = 27
const GDMA_IN_REMAIN_UNDER_3B_L3_CH3_V = 0x1
const GDMA_IN_REMAIN_UNDER_3B_L3_CH3_S = 26
const GDMA_IN_REMAIN_UNDER_2B_L3_CH3_V = 0x1
const GDMA_IN_REMAIN_UNDER_2B_L3_CH3_S = 25
const GDMA_IN_REMAIN_UNDER_1B_L3_CH3_V = 0x1
const GDMA_IN_REMAIN_UNDER_1B_L3_CH3_S = 24
const GDMA_INFIFO_CNT_L3_CH3 = 0x0000001F
const GDMA_INFIFO_CNT_L3_CH3_V = 0x1F
const GDMA_INFIFO_CNT_L3_CH3_S = 19
const GDMA_INFIFO_CNT_L2_CH3 = 0x0000007F
const GDMA_INFIFO_CNT_L2_CH3_V = 0x7F
const GDMA_INFIFO_CNT_L2_CH3_S = 12
const GDMA_INFIFO_CNT_L1_CH3 = 0x0000003F
const GDMA_INFIFO_CNT_L1_CH3_V = 0x3F
const GDMA_INFIFO_CNT_L1_CH3_S = 6
const GDMA_INFIFO_EMPTY_L3_CH3_V = 0x1
const GDMA_INFIFO_EMPTY_L3_CH3_S = 5
const GDMA_INFIFO_FULL_L3_CH3_V = 0x1
const GDMA_INFIFO_FULL_L3_CH3_S = 4
const GDMA_INFIFO_EMPTY_L2_CH3_V = 0x1
const GDMA_INFIFO_EMPTY_L2_CH3_S = 3
const GDMA_INFIFO_FULL_L2_CH3_V = 0x1
const GDMA_INFIFO_FULL_L2_CH3_S = 2
const GDMA_INFIFO_EMPTY_L1_CH3_V = 0x1
const GDMA_INFIFO_EMPTY_L1_CH3_S = 1
const GDMA_INFIFO_FULL_L1_CH3_V = 0x1
const GDMA_INFIFO_FULL_L1_CH3_S = 0
const GDMA_INFIFO_POP_CH3_V = 0x1
const GDMA_INFIFO_POP_CH3_S = 12
const GDMA_INFIFO_RDATA_CH3 = 0x00000FFF
const GDMA_INFIFO_RDATA_CH3_V = 0xFFF
const GDMA_INFIFO_RDATA_CH3_S = 0
const GDMA_INLINK_PARK_CH3_V = 0x1
const GDMA_INLINK_PARK_CH3_S = 24
const GDMA_INLINK_RESTART_CH3_V = 0x1
const GDMA_INLINK_RESTART_CH3_S = 23
const GDMA_INLINK_START_CH3_V = 0x1
const GDMA_INLINK_START_CH3_S = 22
const GDMA_INLINK_STOP_CH3_V = 0x1
const GDMA_INLINK_STOP_CH3_S = 21
const GDMA_INLINK_AUTO_RET_CH3_V = 0x1
const GDMA_INLINK_AUTO_RET_CH3_S = 20
const GDMA_INLINK_ADDR_CH3 = 0x000FFFFF
const GDMA_INLINK_ADDR_CH3_V = 0xFFFFF
const GDMA_INLINK_ADDR_CH3_S = 0
const GDMA_IN_STATE_CH3 = 0x00000007
const GDMA_IN_STATE_CH3_V = 0x7
const GDMA_IN_STATE_CH3_S = 20
const GDMA_IN_DSCR_STATE_CH3 = 0x00000003
const GDMA_IN_DSCR_STATE_CH3_V = 0x3
const GDMA_IN_DSCR_STATE_CH3_S = 18
const GDMA_INLINK_DSCR_ADDR_CH3 = 0x0003FFFF
const GDMA_INLINK_DSCR_ADDR_CH3_V = 0x3FFFF
const GDMA_INLINK_DSCR_ADDR_CH3_S = 0
const GDMA_IN_SUC_EOF_DES_ADDR_CH3 = 0xFFFFFFFF
const GDMA_IN_SUC_EOF_DES_ADDR_CH3_V = 0xFFFFFFFF
const GDMA_IN_SUC_EOF_DES_ADDR_CH3_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH3 = 0xFFFFFFFF
const GDMA_IN_ERR_EOF_DES_ADDR_CH3_V = 0xFFFFFFFF
const GDMA_IN_ERR_EOF_DES_ADDR_CH3_S = 0
const GDMA_INLINK_DSCR_CH3 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_CH3_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_CH3_S = 0
const GDMA_INLINK_DSCR_BF0_CH3 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF0_CH3_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF0_CH3_S = 0
const GDMA_INLINK_DSCR_BF1_CH3 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF1_CH3_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF1_CH3_S = 0
const GDMA_RX_WEIGHT_CH3 = 0x0000000F
const GDMA_RX_WEIGHT_CH3_V = 0xF
const GDMA_RX_WEIGHT_CH3_S = 8
const GDMA_RX_PRI_CH3 = 0x0000000F
const GDMA_RX_PRI_CH3_V = 0xF
const GDMA_RX_PRI_CH3_S = 0
const GDMA_PERI_IN_SEL_CH3 = 0x0000003F
const GDMA_PERI_IN_SEL_CH3_V = 0x3F
const GDMA_PERI_IN_SEL_CH3_S = 0
const GDMA_OUT_DATA_BURST_EN_CH3_V = 0x1
const GDMA_OUT_DATA_BURST_EN_CH3_S = 5
const GDMA_OUTDSCR_BURST_EN_CH3_V = 0x1
const GDMA_OUTDSCR_BURST_EN_CH3_S = 4
const GDMA_OUT_EOF_MODE_CH3_V = 0x1
const GDMA_OUT_EOF_MODE_CH3_S = 3
const GDMA_OUT_AUTO_WRBACK_CH3_V = 0x1
const GDMA_OUT_AUTO_WRBACK_CH3_S = 2
const GDMA_OUT_LOOP_TEST_CH3_V = 0x1
const GDMA_OUT_LOOP_TEST_CH3_S = 1
const GDMA_OUT_RST_CH3_V = 0x1
const GDMA_OUT_RST_CH3_S = 0
const GDMA_OUT_EXT_MEM_BK_SIZE_CH3 = 0x00000003
const GDMA_OUT_EXT_MEM_BK_SIZE_CH3_V = 0x3
const GDMA_OUT_EXT_MEM_BK_SIZE_CH3_S = 13
const GDMA_OUT_CHECK_OWNER_CH3_V = 0x1
const GDMA_OUT_CHECK_OWNER_CH3_S = 12
const GDMA_OUTFIFO_UDF_L3_CH3_INT_RAW_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH3_INT_RAW_S = 7
const GDMA_OUTFIFO_OVF_L3_CH3_INT_RAW_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH3_INT_RAW_S = 6
const GDMA_OUTFIFO_UDF_L1_CH3_INT_RAW_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH3_INT_RAW_S = 5
const GDMA_OUTFIFO_OVF_L1_CH3_INT_RAW_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH3_INT_RAW_S = 4
const GDMA_OUT_TOTAL_EOF_CH3_INT_RAW_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH3_INT_RAW_S = 3
const GDMA_OUT_DSCR_ERR_CH3_INT_RAW_V = 0x1
const GDMA_OUT_DSCR_ERR_CH3_INT_RAW_S = 2
const GDMA_OUT_EOF_CH3_INT_RAW_V = 0x1
const GDMA_OUT_EOF_CH3_INT_RAW_S = 1
const GDMA_OUT_DONE_CH3_INT_RAW_V = 0x1
const GDMA_OUT_DONE_CH3_INT_RAW_S = 0
const GDMA_OUTFIFO_UDF_L3_CH3_INT_ST_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH3_INT_ST_S = 7
const GDMA_OUTFIFO_OVF_L3_CH3_INT_ST_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH3_INT_ST_S = 6
const GDMA_OUTFIFO_UDF_L1_CH3_INT_ST_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH3_INT_ST_S = 5
const GDMA_OUTFIFO_OVF_L1_CH3_INT_ST_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH3_INT_ST_S = 4
const GDMA_OUT_TOTAL_EOF_CH3_INT_ST_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH3_INT_ST_S = 3
const GDMA_OUT_DSCR_ERR_CH3_INT_ST_V = 0x1
const GDMA_OUT_DSCR_ERR_CH3_INT_ST_S = 2
const GDMA_OUT_EOF_CH3_INT_ST_V = 0x1
const GDMA_OUT_EOF_CH3_INT_ST_S = 1
const GDMA_OUT_DONE_CH3_INT_ST_V = 0x1
const GDMA_OUT_DONE_CH3_INT_ST_S = 0
const GDMA_OUTFIFO_UDF_L3_CH3_INT_ENA_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH3_INT_ENA_S = 7
const GDMA_OUTFIFO_OVF_L3_CH3_INT_ENA_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH3_INT_ENA_S = 6
const GDMA_OUTFIFO_UDF_L1_CH3_INT_ENA_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH3_INT_ENA_S = 5
const GDMA_OUTFIFO_OVF_L1_CH3_INT_ENA_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH3_INT_ENA_S = 4
const GDMA_OUT_TOTAL_EOF_CH3_INT_ENA_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH3_INT_ENA_S = 3
const GDMA_OUT_DSCR_ERR_CH3_INT_ENA_V = 0x1
const GDMA_OUT_DSCR_ERR_CH3_INT_ENA_S = 2
const GDMA_OUT_EOF_CH3_INT_ENA_V = 0x1
const GDMA_OUT_EOF_CH3_INT_ENA_S = 1
const GDMA_OUT_DONE_CH3_INT_ENA_V = 0x1
const GDMA_OUT_DONE_CH3_INT_ENA_S = 0
const GDMA_OUTFIFO_UDF_L3_CH3_INT_CLR_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH3_INT_CLR_S = 7
const GDMA_OUTFIFO_OVF_L3_CH3_INT_CLR_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH3_INT_CLR_S = 6
const GDMA_OUTFIFO_UDF_L1_CH3_INT_CLR_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH3_INT_CLR_S = 5
const GDMA_OUTFIFO_OVF_L1_CH3_INT_CLR_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH3_INT_CLR_S = 4
const GDMA_OUT_TOTAL_EOF_CH3_INT_CLR_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH3_INT_CLR_S = 3
const GDMA_OUT_DSCR_ERR_CH3_INT_CLR_V = 0x1
const GDMA_OUT_DSCR_ERR_CH3_INT_CLR_S = 2
const GDMA_OUT_EOF_CH3_INT_CLR_V = 0x1
const GDMA_OUT_EOF_CH3_INT_CLR_S = 1
const GDMA_OUT_DONE_CH3_INT_CLR_V = 0x1
const GDMA_OUT_DONE_CH3_INT_CLR_S = 0
const GDMA_OUT_REMAIN_UNDER_4B_L3_CH3_V = 0x1
const GDMA_OUT_REMAIN_UNDER_4B_L3_CH3_S = 26
const GDMA_OUT_REMAIN_UNDER_3B_L3_CH3_V = 0x1
const GDMA_OUT_REMAIN_UNDER_3B_L3_CH3_S = 25
const GDMA_OUT_REMAIN_UNDER_2B_L3_CH3_V = 0x1
const GDMA_OUT_REMAIN_UNDER_2B_L3_CH3_S = 24
const GDMA_OUT_REMAIN_UNDER_1B_L3_CH3_V = 0x1
const GDMA_OUT_REMAIN_UNDER_1B_L3_CH3_S = 23
const GDMA_OUTFIFO_CNT_L3_CH3 = 0x0000001F
const GDMA_OUTFIFO_CNT_L3_CH3_V = 0x1F
const GDMA_OUTFIFO_CNT_L3_CH3_S = 18
const GDMA_OUTFIFO_CNT_L2_CH3 = 0x0000007F
const GDMA_OUTFIFO_CNT_L2_CH3_V = 0x7F
const GDMA_OUTFIFO_CNT_L2_CH3_S = 11
const GDMA_OUTFIFO_CNT_L1_CH3 = 0x0000001F
const GDMA_OUTFIFO_CNT_L1_CH3_V = 0x1F
const GDMA_OUTFIFO_CNT_L1_CH3_S = 6
const GDMA_OUTFIFO_EMPTY_L3_CH3_V = 0x1
const GDMA_OUTFIFO_EMPTY_L3_CH3_S = 5
const GDMA_OUTFIFO_FULL_L3_CH3_V = 0x1
const GDMA_OUTFIFO_FULL_L3_CH3_S = 4
const GDMA_OUTFIFO_EMPTY_L2_CH3_V = 0x1
const GDMA_OUTFIFO_EMPTY_L2_CH3_S = 3
const GDMA_OUTFIFO_FULL_L2_CH3_V = 0x1
const GDMA_OUTFIFO_FULL_L2_CH3_S = 2
const GDMA_OUTFIFO_EMPTY_L1_CH3_V = 0x1
const GDMA_OUTFIFO_EMPTY_L1_CH3_S = 1
const GDMA_OUTFIFO_FULL_L1_CH3_V = 0x1
const GDMA_OUTFIFO_FULL_L1_CH3_S = 0
const GDMA_OUTFIFO_PUSH_CH3_V = 0x1
const GDMA_OUTFIFO_PUSH_CH3_S = 9
const GDMA_OUTFIFO_WDATA_CH3 = 0x000001FF
const GDMA_OUTFIFO_WDATA_CH3_V = 0x1FF
const GDMA_OUTFIFO_WDATA_CH3_S = 0
const GDMA_OUTLINK_PARK_CH3_V = 0x1
const GDMA_OUTLINK_PARK_CH3_S = 23
const GDMA_OUTLINK_RESTART_CH3_V = 0x1
const GDMA_OUTLINK_RESTART_CH3_S = 22
const GDMA_OUTLINK_START_CH3_V = 0x1
const GDMA_OUTLINK_START_CH3_S = 21
const GDMA_OUTLINK_STOP_CH3_V = 0x1
const GDMA_OUTLINK_STOP_CH3_S = 20
const GDMA_OUTLINK_ADDR_CH3 = 0x000FFFFF
const GDMA_OUTLINK_ADDR_CH3_V = 0xFFFFF
const GDMA_OUTLINK_ADDR_CH3_S = 0
const GDMA_OUT_STATE_CH3 = 0x00000007
const GDMA_OUT_STATE_CH3_V = 0x7
const GDMA_OUT_STATE_CH3_S = 20
const GDMA_OUT_DSCR_STATE_CH3 = 0x00000003
const GDMA_OUT_DSCR_STATE_CH3_V = 0x3
const GDMA_OUT_DSCR_STATE_CH3_S = 18
const GDMA_OUTLINK_DSCR_ADDR_CH3 = 0x0003FFFF
const GDMA_OUTLINK_DSCR_ADDR_CH3_V = 0x3FFFF
const GDMA_OUTLINK_DSCR_ADDR_CH3_S = 0
const GDMA_OUT_EOF_DES_ADDR_CH3 = 0xFFFFFFFF
const GDMA_OUT_EOF_DES_ADDR_CH3_V = 0xFFFFFFFF
const GDMA_OUT_EOF_DES_ADDR_CH3_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH3 = 0xFFFFFFFF
const GDMA_OUT_EOF_BFR_DES_ADDR_CH3_V = 0xFFFFFFFF
const GDMA_OUT_EOF_BFR_DES_ADDR_CH3_S = 0
const GDMA_OUTLINK_DSCR_CH3 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_CH3_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_CH3_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH3 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF0_CH3_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF0_CH3_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH3 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF1_CH3_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF1_CH3_S = 0
const GDMA_TX_WEIGHT_CH3 = 0x0000000F
const GDMA_TX_WEIGHT_CH3_V = 0xF
const GDMA_TX_WEIGHT_CH3_S = 8
const GDMA_TX_PRI_CH3 = 0x0000000F
const GDMA_TX_PRI_CH3_V = 0xF
const GDMA_TX_PRI_CH3_S = 0
const GDMA_PERI_OUT_SEL_CH3 = 0x0000003F
const GDMA_PERI_OUT_SEL_CH3_V = 0x3F
const GDMA_PERI_OUT_SEL_CH3_S = 0
const GDMA_MEM_TRANS_EN_CH4_V = 0x1
const GDMA_MEM_TRANS_EN_CH4_S = 4
const GDMA_IN_DATA_BURST_EN_CH4_V = 0x1
const GDMA_IN_DATA_BURST_EN_CH4_S = 3
const GDMA_INDSCR_BURST_EN_CH4_V = 0x1
const GDMA_INDSCR_BURST_EN_CH4_S = 2
const GDMA_IN_LOOP_TEST_CH4_V = 0x1
const GDMA_IN_LOOP_TEST_CH4_S = 1
const GDMA_IN_RST_CH4_V = 0x1
const GDMA_IN_RST_CH4_S = 0
const GDMA_IN_EXT_MEM_BK_SIZE_CH4 = 0x00000003
const GDMA_IN_EXT_MEM_BK_SIZE_CH4_V = 0x3
const GDMA_IN_EXT_MEM_BK_SIZE_CH4_S = 13
const GDMA_IN_CHECK_OWNER_CH4_V = 0x1
const GDMA_IN_CHECK_OWNER_CH4_S = 12
const GDMA_DMA_INFIFO_FULL_THRS_CH4 = 0x00000FFF
const GDMA_DMA_INFIFO_FULL_THRS_CH4_V = 0xFFF
const GDMA_DMA_INFIFO_FULL_THRS_CH4_S = 0
const GDMA_INFIFO_UDF_L3_CH4_INT_RAW_V = 0x1
const GDMA_INFIFO_UDF_L3_CH4_INT_RAW_S = 9
const GDMA_INFIFO_OVF_L3_CH4_INT_RAW_V = 0x1
const GDMA_INFIFO_OVF_L3_CH4_INT_RAW_S = 8
const GDMA_INFIFO_UDF_L1_CH4_INT_RAW_V = 0x1
const GDMA_INFIFO_UDF_L1_CH4_INT_RAW_S = 7
const GDMA_INFIFO_OVF_L1_CH4_INT_RAW_V = 0x1
const GDMA_INFIFO_OVF_L1_CH4_INT_RAW_S = 6
const GDMA_INFIFO_FULL_WM_CH4_INT_RAW_V = 0x1
const GDMA_INFIFO_FULL_WM_CH4_INT_RAW_S = 5
const GDMA_IN_DSCR_EMPTY_CH4_INT_RAW_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH4_INT_RAW_S = 4
const GDMA_IN_DSCR_ERR_CH4_INT_RAW_V = 0x1
const GDMA_IN_DSCR_ERR_CH4_INT_RAW_S = 3
const GDMA_IN_ERR_EOF_CH4_INT_RAW_V = 0x1
const GDMA_IN_ERR_EOF_CH4_INT_RAW_S = 2
const GDMA_IN_SUC_EOF_CH4_INT_RAW_V = 0x1
const GDMA_IN_SUC_EOF_CH4_INT_RAW_S = 1
const GDMA_IN_DONE_CH4_INT_RAW_V = 0x1
const GDMA_IN_DONE_CH4_INT_RAW_S = 0
const GDMA_INFIFO_UDF_L3_CH4_INT_ST_V = 0x1
const GDMA_INFIFO_UDF_L3_CH4_INT_ST_S = 9
const GDMA_INFIFO_OVF_L3_CH4_INT_ST_V = 0x1
const GDMA_INFIFO_OVF_L3_CH4_INT_ST_S = 8
const GDMA_INFIFO_UDF_L1_CH4_INT_ST_V = 0x1
const GDMA_INFIFO_UDF_L1_CH4_INT_ST_S = 7
const GDMA_INFIFO_OVF_L1_CH4_INT_ST_V = 0x1
const GDMA_INFIFO_OVF_L1_CH4_INT_ST_S = 6
const GDMA_INFIFO_FULL_WM_CH4_INT_ST_V = 0x1
const GDMA_INFIFO_FULL_WM_CH4_INT_ST_S = 5
const GDMA_IN_DSCR_EMPTY_CH4_INT_ST_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH4_INT_ST_S = 4
const GDMA_IN_DSCR_ERR_CH4_INT_ST_V = 0x1
const GDMA_IN_DSCR_ERR_CH4_INT_ST_S = 3
const GDMA_IN_ERR_EOF_CH4_INT_ST_V = 0x1
const GDMA_IN_ERR_EOF_CH4_INT_ST_S = 2
const GDMA_IN_SUC_EOF_CH4_INT_ST_V = 0x1
const GDMA_IN_SUC_EOF_CH4_INT_ST_S = 1
const GDMA_IN_DONE_CH4_INT_ST_V = 0x1
const GDMA_IN_DONE_CH4_INT_ST_S = 0
const GDMA_INFIFO_UDF_L3_CH4_INT_ENA_V = 0x1
const GDMA_INFIFO_UDF_L3_CH4_INT_ENA_S = 9
const GDMA_INFIFO_OVF_L3_CH4_INT_ENA_V = 0x1
const GDMA_INFIFO_OVF_L3_CH4_INT_ENA_S = 8
const GDMA_INFIFO_UDF_L1_CH4_INT_ENA_V = 0x1
const GDMA_INFIFO_UDF_L1_CH4_INT_ENA_S = 7
const GDMA_INFIFO_OVF_L1_CH4_INT_ENA_V = 0x1
const GDMA_INFIFO_OVF_L1_CH4_INT_ENA_S = 6
const GDMA_INFIFO_FULL_WM_CH4_INT_ENA_V = 0x1
const GDMA_INFIFO_FULL_WM_CH4_INT_ENA_S = 5
const GDMA_IN_DSCR_EMPTY_CH4_INT_ENA_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH4_INT_ENA_S = 4
const GDMA_IN_DSCR_ERR_CH4_INT_ENA_V = 0x1
const GDMA_IN_DSCR_ERR_CH4_INT_ENA_S = 3
const GDMA_IN_ERR_EOF_CH4_INT_ENA_V = 0x1
const GDMA_IN_ERR_EOF_CH4_INT_ENA_S = 2
const GDMA_IN_SUC_EOF_CH4_INT_ENA_V = 0x1
const GDMA_IN_SUC_EOF_CH4_INT_ENA_S = 1
const GDMA_IN_DONE_CH4_INT_ENA_V = 0x1
const GDMA_IN_DONE_CH4_INT_ENA_S = 0
const GDMA_INFIFO_UDF_L3_CH4_INT_CLR_V = 0x1
const GDMA_INFIFO_UDF_L3_CH4_INT_CLR_S = 9
const GDMA_INFIFO_OVF_L3_CH4_INT_CLR_V = 0x1
const GDMA_INFIFO_OVF_L3_CH4_INT_CLR_S = 8
const GDMA_INFIFO_UDF_L1_CH4_INT_CLR_V = 0x1
const GDMA_INFIFO_UDF_L1_CH4_INT_CLR_S = 7
const GDMA_INFIFO_OVF_L1_CH4_INT_CLR_V = 0x1
const GDMA_INFIFO_OVF_L1_CH4_INT_CLR_S = 6
const GDMA_DMA_INFIFO_FULL_WM_CH4_INT_CLR_V = 0x1
const GDMA_DMA_INFIFO_FULL_WM_CH4_INT_CLR_S = 5
const GDMA_IN_DSCR_EMPTY_CH4_INT_CLR_V = 0x1
const GDMA_IN_DSCR_EMPTY_CH4_INT_CLR_S = 4
const GDMA_IN_DSCR_ERR_CH4_INT_CLR_V = 0x1
const GDMA_IN_DSCR_ERR_CH4_INT_CLR_S = 3
const GDMA_IN_ERR_EOF_CH4_INT_CLR_V = 0x1
const GDMA_IN_ERR_EOF_CH4_INT_CLR_S = 2
const GDMA_IN_SUC_EOF_CH4_INT_CLR_V = 0x1
const GDMA_IN_SUC_EOF_CH4_INT_CLR_S = 1
const GDMA_IN_DONE_CH4_INT_CLR_V = 0x1
const GDMA_IN_DONE_CH4_INT_CLR_S = 0
const GDMA_IN_BUF_HUNGRY_CH4_V = 0x1
const GDMA_IN_BUF_HUNGRY_CH4_S = 28
const GDMA_IN_REMAIN_UNDER_4B_L3_CH4_V = 0x1
const GDMA_IN_REMAIN_UNDER_4B_L3_CH4_S = 27
const GDMA_IN_REMAIN_UNDER_3B_L3_CH4_V = 0x1
const GDMA_IN_REMAIN_UNDER_3B_L3_CH4_S = 26
const GDMA_IN_REMAIN_UNDER_2B_L3_CH4_V = 0x1
const GDMA_IN_REMAIN_UNDER_2B_L3_CH4_S = 25
const GDMA_IN_REMAIN_UNDER_1B_L3_CH4_V = 0x1
const GDMA_IN_REMAIN_UNDER_1B_L3_CH4_S = 24
const GDMA_INFIFO_CNT_L3_CH4 = 0x0000001F
const GDMA_INFIFO_CNT_L3_CH4_V = 0x1F
const GDMA_INFIFO_CNT_L3_CH4_S = 19
const GDMA_INFIFO_CNT_L2_CH4 = 0x0000007F
const GDMA_INFIFO_CNT_L2_CH4_V = 0x7F
const GDMA_INFIFO_CNT_L2_CH4_S = 12
const GDMA_INFIFO_CNT_L1_CH4 = 0x0000003F
const GDMA_INFIFO_CNT_L1_CH4_V = 0x3F
const GDMA_INFIFO_CNT_L1_CH4_S = 6
const GDMA_INFIFO_EMPTY_L3_CH4_V = 0x1
const GDMA_INFIFO_EMPTY_L3_CH4_S = 5
const GDMA_INFIFO_FULL_L3_CH4_V = 0x1
const GDMA_INFIFO_FULL_L3_CH4_S = 4
const GDMA_INFIFO_EMPTY_L2_CH4_V = 0x1
const GDMA_INFIFO_EMPTY_L2_CH4_S = 3
const GDMA_INFIFO_FULL_L2_CH4_V = 0x1
const GDMA_INFIFO_FULL_L2_CH4_S = 2
const GDMA_INFIFO_EMPTY_L1_CH4_V = 0x1
const GDMA_INFIFO_EMPTY_L1_CH4_S = 1
const GDMA_INFIFO_FULL_L1_CH4_V = 0x1
const GDMA_INFIFO_FULL_L1_CH4_S = 0
const GDMA_INFIFO_POP_CH4_V = 0x1
const GDMA_INFIFO_POP_CH4_S = 12
const GDMA_INFIFO_RDATA_CH4 = 0x00000FFF
const GDMA_INFIFO_RDATA_CH4_V = 0xFFF
const GDMA_INFIFO_RDATA_CH4_S = 0
const GDMA_INLINK_PARK_CH4_V = 0x1
const GDMA_INLINK_PARK_CH4_S = 24
const GDMA_INLINK_RESTART_CH4_V = 0x1
const GDMA_INLINK_RESTART_CH4_S = 23
const GDMA_INLINK_START_CH4_V = 0x1
const GDMA_INLINK_START_CH4_S = 22
const GDMA_INLINK_STOP_CH4_V = 0x1
const GDMA_INLINK_STOP_CH4_S = 21
const GDMA_INLINK_AUTO_RET_CH4_V = 0x1
const GDMA_INLINK_AUTO_RET_CH4_S = 20
const GDMA_INLINK_ADDR_CH4 = 0x000FFFFF
const GDMA_INLINK_ADDR_CH4_V = 0xFFFFF
const GDMA_INLINK_ADDR_CH4_S = 0
const GDMA_IN_STATE_CH4 = 0x00000007
const GDMA_IN_STATE_CH4_V = 0x7
const GDMA_IN_STATE_CH4_S = 20
const GDMA_IN_DSCR_STATE_CH4 = 0x00000003
const GDMA_IN_DSCR_STATE_CH4_V = 0x3
const GDMA_IN_DSCR_STATE_CH4_S = 18
const GDMA_INLINK_DSCR_ADDR_CH4 = 0x0003FFFF
const GDMA_INLINK_DSCR_ADDR_CH4_V = 0x3FFFF
const GDMA_INLINK_DSCR_ADDR_CH4_S = 0
const GDMA_IN_SUC_EOF_DES_ADDR_CH4 = 0xFFFFFFFF
const GDMA_IN_SUC_EOF_DES_ADDR_CH4_V = 0xFFFFFFFF
const GDMA_IN_SUC_EOF_DES_ADDR_CH4_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH4 = 0xFFFFFFFF
const GDMA_IN_ERR_EOF_DES_ADDR_CH4_V = 0xFFFFFFFF
const GDMA_IN_ERR_EOF_DES_ADDR_CH4_S = 0
const GDMA_INLINK_DSCR_CH4 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_CH4_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_CH4_S = 0
const GDMA_INLINK_DSCR_BF0_CH4 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF0_CH4_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF0_CH4_S = 0
const GDMA_INLINK_DSCR_BF1_CH4 = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF1_CH4_V = 0xFFFFFFFF
const GDMA_INLINK_DSCR_BF1_CH4_S = 0
const GDMA_RX_WEIGHT_CH4 = 0x0000000F
const GDMA_RX_WEIGHT_CH4_V = 0xF
const GDMA_RX_WEIGHT_CH4_S = 8
const GDMA_RX_PRI_CH4 = 0x0000000F
const GDMA_RX_PRI_CH4_V = 0xF
const GDMA_RX_PRI_CH4_S = 0
const GDMA_PERI_IN_SEL_CH4 = 0x0000003F
const GDMA_PERI_IN_SEL_CH4_V = 0x3F
const GDMA_PERI_IN_SEL_CH4_S = 0
const GDMA_OUT_DATA_BURST_EN_CH4_V = 0x1
const GDMA_OUT_DATA_BURST_EN_CH4_S = 5
const GDMA_OUTDSCR_BURST_EN_CH4_V = 0x1
const GDMA_OUTDSCR_BURST_EN_CH4_S = 4
const GDMA_OUT_EOF_MODE_CH4_V = 0x1
const GDMA_OUT_EOF_MODE_CH4_S = 3
const GDMA_OUT_AUTO_WRBACK_CH4_V = 0x1
const GDMA_OUT_AUTO_WRBACK_CH4_S = 2
const GDMA_OUT_LOOP_TEST_CH4_V = 0x1
const GDMA_OUT_LOOP_TEST_CH4_S = 1
const GDMA_OUT_RST_CH4_V = 0x1
const GDMA_OUT_RST_CH4_S = 0
const GDMA_OUT_EXT_MEM_BK_SIZE_CH4 = 0x00000003
const GDMA_OUT_EXT_MEM_BK_SIZE_CH4_V = 0x3
const GDMA_OUT_EXT_MEM_BK_SIZE_CH4_S = 13
const GDMA_OUT_CHECK_OWNER_CH4_V = 0x1
const GDMA_OUT_CHECK_OWNER_CH4_S = 12
const GDMA_OUTFIFO_UDF_L3_CH4_INT_RAW_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH4_INT_RAW_S = 7
const GDMA_OUTFIFO_OVF_L3_CH4_INT_RAW_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH4_INT_RAW_S = 6
const GDMA_OUTFIFO_UDF_L1_CH4_INT_RAW_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH4_INT_RAW_S = 5
const GDMA_OUTFIFO_OVF_L1_CH4_INT_RAW_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH4_INT_RAW_S = 4
const GDMA_OUT_TOTAL_EOF_CH4_INT_RAW_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH4_INT_RAW_S = 3
const GDMA_OUT_DSCR_ERR_CH4_INT_RAW_V = 0x1
const GDMA_OUT_DSCR_ERR_CH4_INT_RAW_S = 2
const GDMA_OUT_EOF_CH4_INT_RAW_V = 0x1
const GDMA_OUT_EOF_CH4_INT_RAW_S = 1
const GDMA_OUT_DONE_CH4_INT_RAW_V = 0x1
const GDMA_OUT_DONE_CH4_INT_RAW_S = 0
const GDMA_OUTFIFO_UDF_L3_CH4_INT_ST_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH4_INT_ST_S = 7
const GDMA_OUTFIFO_OVF_L3_CH4_INT_ST_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH4_INT_ST_S = 6
const GDMA_OUTFIFO_UDF_L1_CH4_INT_ST_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH4_INT_ST_S = 5
const GDMA_OUTFIFO_OVF_L1_CH4_INT_ST_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH4_INT_ST_S = 4
const GDMA_OUT_TOTAL_EOF_CH4_INT_ST_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH4_INT_ST_S = 3
const GDMA_OUT_DSCR_ERR_CH4_INT_ST_V = 0x1
const GDMA_OUT_DSCR_ERR_CH4_INT_ST_S = 2
const GDMA_OUT_EOF_CH4_INT_ST_V = 0x1
const GDMA_OUT_EOF_CH4_INT_ST_S = 1
const GDMA_OUT_DONE_CH4_INT_ST_V = 0x1
const GDMA_OUT_DONE_CH4_INT_ST_S = 0
const GDMA_OUTFIFO_UDF_L3_CH4_INT_ENA_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH4_INT_ENA_S = 7
const GDMA_OUTFIFO_OVF_L3_CH4_INT_ENA_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH4_INT_ENA_S = 6
const GDMA_OUTFIFO_UDF_L1_CH4_INT_ENA_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH4_INT_ENA_S = 5
const GDMA_OUTFIFO_OVF_L1_CH4_INT_ENA_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH4_INT_ENA_S = 4
const GDMA_OUT_TOTAL_EOF_CH4_INT_ENA_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH4_INT_ENA_S = 3
const GDMA_OUT_DSCR_ERR_CH4_INT_ENA_V = 0x1
const GDMA_OUT_DSCR_ERR_CH4_INT_ENA_S = 2
const GDMA_OUT_EOF_CH4_INT_ENA_V = 0x1
const GDMA_OUT_EOF_CH4_INT_ENA_S = 1
const GDMA_OUT_DONE_CH4_INT_ENA_V = 0x1
const GDMA_OUT_DONE_CH4_INT_ENA_S = 0
const GDMA_OUTFIFO_UDF_L3_CH4_INT_CLR_V = 0x1
const GDMA_OUTFIFO_UDF_L3_CH4_INT_CLR_S = 7
const GDMA_OUTFIFO_OVF_L3_CH4_INT_CLR_V = 0x1
const GDMA_OUTFIFO_OVF_L3_CH4_INT_CLR_S = 6
const GDMA_OUTFIFO_UDF_L1_CH4_INT_CLR_V = 0x1
const GDMA_OUTFIFO_UDF_L1_CH4_INT_CLR_S = 5
const GDMA_OUTFIFO_OVF_L1_CH4_INT_CLR_V = 0x1
const GDMA_OUTFIFO_OVF_L1_CH4_INT_CLR_S = 4
const GDMA_OUT_TOTAL_EOF_CH4_INT_CLR_V = 0x1
const GDMA_OUT_TOTAL_EOF_CH4_INT_CLR_S = 3
const GDMA_OUT_DSCR_ERR_CH4_INT_CLR_V = 0x1
const GDMA_OUT_DSCR_ERR_CH4_INT_CLR_S = 2
const GDMA_OUT_EOF_CH4_INT_CLR_V = 0x1
const GDMA_OUT_EOF_CH4_INT_CLR_S = 1
const GDMA_OUT_DONE_CH4_INT_CLR_V = 0x1
const GDMA_OUT_DONE_CH4_INT_CLR_S = 0
const GDMA_OUT_REMAIN_UNDER_4B_L3_CH4_V = 0x1
const GDMA_OUT_REMAIN_UNDER_4B_L3_CH4_S = 26
const GDMA_OUT_REMAIN_UNDER_3B_L3_CH4_V = 0x1
const GDMA_OUT_REMAIN_UNDER_3B_L3_CH4_S = 25
const GDMA_OUT_REMAIN_UNDER_2B_L3_CH4_V = 0x1
const GDMA_OUT_REMAIN_UNDER_2B_L3_CH4_S = 24
const GDMA_OUT_REMAIN_UNDER_1B_L3_CH4_V = 0x1
const GDMA_OUT_REMAIN_UNDER_1B_L3_CH4_S = 23
const GDMA_OUTFIFO_CNT_L3_CH4 = 0x0000001F
const GDMA_OUTFIFO_CNT_L3_CH4_V = 0x1F
const GDMA_OUTFIFO_CNT_L3_CH4_S = 18
const GDMA_OUTFIFO_CNT_L2_CH4 = 0x0000007F
const GDMA_OUTFIFO_CNT_L2_CH4_V = 0x7F
const GDMA_OUTFIFO_CNT_L2_CH4_S = 11
const GDMA_OUTFIFO_CNT_L1_CH4 = 0x0000001F
const GDMA_OUTFIFO_CNT_L1_CH4_V = 0x1F
const GDMA_OUTFIFO_CNT_L1_CH4_S = 6
const GDMA_OUTFIFO_EMPTY_L3_CH4_V = 0x1
const GDMA_OUTFIFO_EMPTY_L3_CH4_S = 5
const GDMA_OUTFIFO_FULL_L3_CH4_V = 0x1
const GDMA_OUTFIFO_FULL_L3_CH4_S = 4
const GDMA_OUTFIFO_EMPTY_L2_CH4_V = 0x1
const GDMA_OUTFIFO_EMPTY_L2_CH4_S = 3
const GDMA_OUTFIFO_FULL_L2_CH4_V = 0x1
const GDMA_OUTFIFO_FULL_L2_CH4_S = 2
const GDMA_OUTFIFO_EMPTY_L1_CH4_V = 0x1
const GDMA_OUTFIFO_EMPTY_L1_CH4_S = 1
const GDMA_OUTFIFO_FULL_L1_CH4_V = 0x1
const GDMA_OUTFIFO_FULL_L1_CH4_S = 0
const GDMA_OUTFIFO_PUSH_CH4_V = 0x1
const GDMA_OUTFIFO_PUSH_CH4_S = 9
const GDMA_OUTFIFO_WDATA_CH4 = 0x000001FF
const GDMA_OUTFIFO_WDATA_CH4_V = 0x1FF
const GDMA_OUTFIFO_WDATA_CH4_S = 0
const GDMA_OUTLINK_PARK_CH4_V = 0x1
const GDMA_OUTLINK_PARK_CH4_S = 23
const GDMA_OUTLINK_RESTART_CH4_V = 0x1
const GDMA_OUTLINK_RESTART_CH4_S = 22
const GDMA_OUTLINK_START_CH4_V = 0x1
const GDMA_OUTLINK_START_CH4_S = 21
const GDMA_OUTLINK_STOP_CH4_V = 0x1
const GDMA_OUTLINK_STOP_CH4_S = 20
const GDMA_OUTLINK_ADDR_CH4 = 0x000FFFFF
const GDMA_OUTLINK_ADDR_CH4_V = 0xFFFFF
const GDMA_OUTLINK_ADDR_CH4_S = 0
const GDMA_OUT_STATE_CH4 = 0x00000007
const GDMA_OUT_STATE_CH4_V = 0x7
const GDMA_OUT_STATE_CH4_S = 20
const GDMA_OUT_DSCR_STATE_CH4 = 0x00000003
const GDMA_OUT_DSCR_STATE_CH4_V = 0x3
const GDMA_OUT_DSCR_STATE_CH4_S = 18
const GDMA_OUTLINK_DSCR_ADDR_CH4 = 0x0003FFFF
const GDMA_OUTLINK_DSCR_ADDR_CH4_V = 0x3FFFF
const GDMA_OUTLINK_DSCR_ADDR_CH4_S = 0
const GDMA_OUT_EOF_DES_ADDR_CH4 = 0xFFFFFFFF
const GDMA_OUT_EOF_DES_ADDR_CH4_V = 0xFFFFFFFF
const GDMA_OUT_EOF_DES_ADDR_CH4_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH4 = 0xFFFFFFFF
const GDMA_OUT_EOF_BFR_DES_ADDR_CH4_V = 0xFFFFFFFF
const GDMA_OUT_EOF_BFR_DES_ADDR_CH4_S = 0
const GDMA_OUTLINK_DSCR_CH4 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_CH4_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_CH4_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH4 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF0_CH4_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF0_CH4_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH4 = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF1_CH4_V = 0xFFFFFFFF
const GDMA_OUTLINK_DSCR_BF1_CH4_S = 0
const GDMA_TX_WEIGHT_CH4 = 0x0000000F
const GDMA_TX_WEIGHT_CH4_V = 0xF
const GDMA_TX_WEIGHT_CH4_S = 8
const GDMA_TX_PRI_CH4 = 0x0000000F
const GDMA_TX_PRI_CH4_V = 0xF
const GDMA_TX_PRI_CH4_S = 0
const GDMA_PERI_OUT_SEL_CH4 = 0x0000003F
const GDMA_PERI_OUT_SEL_CH4_V = 0x3F
const GDMA_PERI_OUT_SEL_CH4_S = 0
const GDMA_AHB_TESTADDR = 0x00000003
const GDMA_AHB_TESTADDR_V = 0x3
const GDMA_AHB_TESTADDR_S = 4
const GDMA_AHB_TESTMODE = 0x00000007
const GDMA_AHB_TESTMODE_V = 0x7
const GDMA_AHB_TESTMODE_S = 0
const GDMA_DMA_RAM_CLK_FO_V = 0x1
const GDMA_DMA_RAM_CLK_FO_S = 6
const GDMA_DMA_RAM_FORCE_PU_V = 0x1
const GDMA_DMA_RAM_FORCE_PU_S = 5
const GDMA_DMA_RAM_FORCE_PD_V = 0x1
const GDMA_DMA_RAM_FORCE_PD_S = 4
const GDMA_CLK_EN_V = 0x1
const GDMA_CLK_EN_S = 4
const GDMA_ARB_PRI_DIS_V = 0x1
const GDMA_ARB_PRI_DIS_S = 2
const GDMA_AHBM_RST_EXTER_V = 0x1
const GDMA_AHBM_RST_EXTER_S = 1
const GDMA_AHBM_RST_INTER_V = 0x1
const GDMA_AHBM_RST_INTER_S = 0
const GDMA_IN_SIZE_CH0 = 0x0000007F
const GDMA_IN_SIZE_CH0_V = 0x7F
const GDMA_IN_SIZE_CH0_S = 0
const GDMA_OUT_SIZE_CH0 = 0x0000007F
const GDMA_OUT_SIZE_CH0_V = 0x7F
const GDMA_OUT_SIZE_CH0_S = 0
const GDMA_IN_SIZE_CH1 = 0x0000007F
const GDMA_IN_SIZE_CH1_V = 0x7F
const GDMA_IN_SIZE_CH1_S = 0
const GDMA_OUT_SIZE_CH1 = 0x0000007F
const GDMA_OUT_SIZE_CH1_V = 0x7F
const GDMA_OUT_SIZE_CH1_S = 0
const GDMA_IN_SIZE_CH2 = 0x0000007F
const GDMA_IN_SIZE_CH2_V = 0x7F
const GDMA_IN_SIZE_CH2_S = 0
const GDMA_OUT_SIZE_CH2 = 0x0000007F
const GDMA_OUT_SIZE_CH2_V = 0x7F
const GDMA_OUT_SIZE_CH2_S = 0
const GDMA_IN_SIZE_CH3 = 0x0000007F
const GDMA_IN_SIZE_CH3_V = 0x7F
const GDMA_IN_SIZE_CH3_S = 0
const GDMA_OUT_SIZE_CH3 = 0x0000007F
const GDMA_OUT_SIZE_CH3_V = 0x7F
const GDMA_OUT_SIZE_CH3_S = 0
const GDMA_IN_SIZE_CH4 = 0x0000007F
const GDMA_IN_SIZE_CH4_V = 0x7F
const GDMA_IN_SIZE_CH4_S = 0
const GDMA_OUT_SIZE_CH4 = 0x0000007F
const GDMA_OUT_SIZE_CH4_V = 0x7F
const GDMA_OUT_SIZE_CH4_S = 0
const GDMA_EXTMEM_REJECT_ADDR = 0xFFFFFFFF
const GDMA_EXTMEM_REJECT_ADDR_V = 0xFFFFFFFF
const GDMA_EXTMEM_REJECT_ADDR_S = 0
const GDMA_EXTMEM_REJECT_PERI_NUM = 0x0000003F
const GDMA_EXTMEM_REJECT_PERI_NUM_V = 0x3F
const GDMA_EXTMEM_REJECT_PERI_NUM_S = 6
const GDMA_EXTMEM_REJECT_CHANNEL_NUM = 0x0000000F
const GDMA_EXTMEM_REJECT_CHANNEL_NUM_V = 0xF
const GDMA_EXTMEM_REJECT_CHANNEL_NUM_S = 2
const GDMA_EXTMEM_REJECT_ATTR = 0x00000003
const GDMA_EXTMEM_REJECT_ATTR_V = 0x3
const GDMA_EXTMEM_REJECT_ATTR_S = 0
const GDMA_EXTMEM_REJECT_INT_RAW_V = 0x1
const GDMA_EXTMEM_REJECT_INT_RAW_S = 0
const GDMA_EXTMEM_REJECT_INT_ST_V = 0x1
const GDMA_EXTMEM_REJECT_INT_ST_S = 0
const GDMA_EXTMEM_REJECT_INT_ENA_V = 0x1
const GDMA_EXTMEM_REJECT_INT_ENA_S = 0
const GDMA_EXTMEM_REJECT_INT_CLR_V = 0x1
const GDMA_EXTMEM_REJECT_INT_CLR_S = 0
const GDMA_DATE = 0xFFFFFFFF
const GDMA_DATE_V = 0xFFFFFFFF
const GDMA_DATE_S = 0
const GDMA_LL_CHANNEL_MAX_PRIORITY = 5
const GDMA_LL_L2FIFO_BASE_SIZE = 16
const GDMA_LL_EXT_MEM_BK_SIZE_16B = 0
const GDMA_LL_EXT_MEM_BK_SIZE_32B = 1
const GDMA_LL_EXT_MEM_BK_SIZE_64B = 2
const GDMA_LL_AHB_GROUP_START_ID = 0
const GDMA_LL_AHB_NUM_GROUPS = 1
const GDMA_LL_AHB_PAIRS_PER_GROUP = 5
const GDMA_LL_AHB_DESC_ALIGNMENT = 4
const GDMA_LL_AHB_BURST_SIZE_ADJUSTABLE = 1
const GDMA_LL_AHB_RX_BURST_NEEDS_ALIGNMENT = 1
const STACK_OVERHEAD_CHECKER = 0
const STACK_OVERHEAD_OPTIMIZATION = 0
const STACK_OVERHEAD_APPTRACE = 0
const STACK_OVERHEAD_WATCHPOINT = 0
const XTHAL_RELEASE_MAJOR = 12000
const XTHAL_RELEASE_MINOR = 9
const XTHAL_RELEASE_NAME = "12.0.9"
const XTHAL_REL_12 = 1
const XTHAL_REL_12_0 = 1
const XTHAL_REL_12_0_9 = 1
const XTHAL_MAX_CPS = 8
const XTHAL_LITTLEENDIAN = 0
const XTHAL_BIGENDIAN = 1
const XTHAL_PREFETCH_DISABLE = 0xFFFF0000
const XTHAL_DCACHE_PREFETCH_L1_OFF = 0x90000000
const XTHAL_DCACHE_PREFETCH_L1 = 0x90001000
const XTHAL_ICACHE_PREFETCH_L1_OFF = 0xA0000000
const XTHAL_ICACHE_PREFETCH_L1 = 0xA0002000
const XTHAL_DISASM_BUFSIZE = 80
const XTHAL_DISASM_OPT_ADDR = 0x0001
const XTHAL_DISASM_OPT_OPHEX = 0x0002
const XTHAL_DISASM_OPT_OPCODE = 0x0004
const XTHAL_DISASM_OPT_PARMS = 0x0008
const XTHAL_DISASM_OPT_ALL = 0x0FFF
const XTHAL_MAX_INTERRUPTS = 32
const XTHAL_MAX_INTLEVELS = 16
const XTHAL_MAX_TIMERS = 4
const XTHAL_INTTYPE_UNCONFIGURED = 0
const XTHAL_INTTYPE_SOFTWARE = 1
const XTHAL_INTTYPE_EXTERN_EDGE = 2
const XTHAL_INTTYPE_EXTERN_LEVEL = 3
const XTHAL_INTTYPE_TIMER = 4
const XTHAL_INTTYPE_NMI = 5
const XTHAL_INTTYPE_WRITE_ERROR = 6
const XTHAL_INTTYPE_PROFILING = 7
const XTHAL_INTTYPE_IDMA_DONE = 8
const XTHAL_INTTYPE_IDMA_ERR = 9
const XTHAL_INTTYPE_GS_ERR = 10
const XTHAL_INTTYPE_SG_ERR = 10
const XTHAL_MAX_INTTYPES = 11
const XTHAL_MEMEP_PARITY = 1
const XTHAL_MEMEP_ECC = 2
const XTHAL_MEMEP_F_LOCAL = 0
const XTHAL_MEMEP_F_DCACHE_DATA = 4
const XTHAL_MEMEP_F_DCACHE_TAG = 5
const XTHAL_MEMEP_F_ICACHE_DATA = 6
const XTHAL_MEMEP_F_ICACHE_TAG = 7
const XTHAL_MEMEP_F_CORRECTABLE = 16
const XTHAL_AMB_EXCEPTION = 0
const XTHAL_AMB_HITCACHE = 1
const XTHAL_AMB_ALLOCATE = 2
const XTHAL_AMB_WRITETHRU = 3
const XTHAL_AMB_ISOLATE = 4
const XTHAL_AMB_GUARD = 5
const XTHAL_AMB_COHERENT = 6
const XTHAL_FAM_EXCEPTION = 0x001
const XTHAL_FAM_BYPASS = 0x000
const XTHAL_FAM_CACHED = 0x006
const XTHAL_LAM_EXCEPTION = 0x001
const XTHAL_LAM_ISOLATE = 0x012
const XTHAL_LAM_BYPASS = 0x000
const XTHAL_LAM_BYPASSG = 0x020
const XTHAL_LAM_CACHED_NOALLOC = 0x002
const XTHAL_LAM_NACACHEDG = 0x022
const XTHAL_LAM_CACHED = 0x006
const XTHAL_LAM_COHCACHED = 0x046
const XTHAL_SAM_EXCEPTION = 0x001
const XTHAL_SAM_ISOLATE = 0x032
const XTHAL_SAM_BYPASS = 0x028
const XTHAL_SAM_WRITETHRU = 0x02A
const XTHAL_SAM_WRITEBACK = 0x026
const XTHAL_SAM_WRITEBACK_NOALLOC = 0x022
const XTHAL_SAM_COHWRITEBACK = 0x066
const XTHAL_PAM_BYPASS = 0x000
const XTHAL_PAM_BYPASS_BUF = 0x010
const XTHAL_PAM_CACHED_NOALLOC = 0x030
const XTHAL_PAM_WRITETHRU = 0x0B0
const XTHAL_PAM_WRITEBACK_NOALLOC = 0x0F0
const XTHAL_PAM_WRITEBACK = 0x1F0
const XTHAL_CAFLAG_EXPAND = 0x000100
const XTHAL_CAFLAG_EXACT = 0x000200
const XTHAL_CAFLAG_NO_PARTIAL = 0x000400
const XTHAL_CAFLAG_NO_AUTO_WB = 0x000800
const XTHAL_CAFLAG_NO_AUTO_INV = 0x001000
const XTHAL_SUCCESS = 0
const XTHAL_AR_NONE = 0
const XTHAL_AR_R = 4
const XTHAL_AR_RX = 5
const XTHAL_AR_RW = 6
const XTHAL_AR_RWX = 7
const XTHAL_AR_Ww = 8
const XTHAL_AR_RWrwx = 9
const XTHAL_AR_RWr = 10
const XTHAL_AR_RWXrx = 11
const XTHAL_AR_Rr = 12
const XTHAL_AR_RXrx = 13
const XTHAL_AR_RWrw = 14
const XTHAL_AR_RWXrwx = 15
const XTHAL_AR_WIDTH = 4
const XTHAL_MPU_USE_EXISTING_ACCESS_RIGHTS = 0x00002000
const XTHAL_MPU_USE_EXISTING_MEMORY_TYPE = 0x00004000
const XTHAL_MEM_DEVICE = 0x00008000
const XTHAL_MEM_NON_CACHEABLE = 0x00090000
const XTHAL_MEM_WRITETHRU_NOALLOC = 0x00080000
const XTHAL_MEM_WRITETHRU = 0x00040000
const XTHAL_MEM_WRITETHRU_WRITEALLOC = 0x00060000
const XTHAL_MEM_WRITEBACK_NOALLOC = 0x00050000
const XTHAL_MEM_WRITEBACK = 0x00070000
const XTHAL_MEM_INTERRUPTIBLE = 0x08000000
const XTHAL_MEM_BUFFERABLE = 0x01000000
const XTHAL_MEM_NON_SHAREABLE = 0x00000000
const XTHAL_MEM_INNER_SHAREABLE = 0x02000000
const XTHAL_MEM_OUTER_SHAREABLE = 0x04000000
const XTHAL_MEM_SYSTEM_SHAREABLE = 0x06000000
const X_XTHAL_SYSTEM_CACHE_BITS = 0x000f0000
const X_XTHAL_LOCAL_CACHE_BITS = 0x00f00000
const X_XTHAL_MEM_SYSTEM_RWC_MASK = 0x00070000
const X_XTHAL_MEM_LOCAL_RWC_MASK = 0x00700000
const X_XTHAL_SHIFT_RWC = 16
const XTHAL_MEM_SW_SHAREABLE = 0
const XTENSA_HWVERSION_T1020_0 = 102000
const XTENSA_HWCIDSCHEME_T1020_0 = 10
const XTENSA_HWCIDVERS_T1020_0 = 2
const XTENSA_HWVERSION_T1020_1 = 102001
const XTENSA_HWCIDSCHEME_T1020_1 = 10
const XTENSA_HWCIDVERS_T1020_1 = 3
const XTENSA_HWVERSION_T1020_2 = 102002
const XTENSA_HWCIDSCHEME_T1020_2 = 10
const XTENSA_HWCIDVERS_T1020_2 = 4
const XTENSA_HWVERSION_T1020_2B = 102002
const XTENSA_HWCIDSCHEME_T1020_2B = 10
const XTENSA_HWCIDVERS_T1020_2B = 5
const XTENSA_HWVERSION_T1020_3 = 102003
const XTENSA_HWCIDSCHEME_T1020_3 = 10
const XTENSA_HWCIDVERS_T1020_3 = 6
const XTENSA_HWVERSION_T1020_4 = 102004
const XTENSA_HWCIDSCHEME_T1020_4 = 10
const XTENSA_HWCIDVERS_T1020_4 = 7
const XTENSA_HWVERSION_T1030_0 = 103000
const XTENSA_HWCIDSCHEME_T1030_0 = 10
const XTENSA_HWCIDVERS_T1030_0 = 9
const XTENSA_HWVERSION_T1030_1 = 103001
const XTENSA_HWCIDSCHEME_T1030_1 = 10
const XTENSA_HWCIDVERS_T1030_1 = 10
const XTENSA_HWVERSION_T1030_2 = 103002
const XTENSA_HWCIDSCHEME_T1030_2 = 10
const XTENSA_HWCIDVERS_T1030_2 = 11
const XTENSA_HWVERSION_T1030_3 = 103003
const XTENSA_HWCIDSCHEME_T1030_3 = 10
const XTENSA_HWCIDVERS_T1030_3 = 12
const XTENSA_HWVERSION_T1040_0 = 104000
const XTENSA_HWCIDSCHEME_T1040_0 = 10
const XTENSA_HWCIDVERS_T1040_0 = 15
const XTENSA_HWVERSION_T1040_1 = 104001
const XTENSA_HWCIDSCHEME_T1040_1 = 1
const XTENSA_HWCIDVERS_T1040_1 = 32
const XTENSA_HWVERSION_T1040_1P = 104001
const XTENSA_HWCIDSCHEME_T1040_1P = 10
const XTENSA_HWCIDVERS_T1040_1P = 16
const XTENSA_HWVERSION_T1040_2 = 104002
const XTENSA_HWCIDSCHEME_T1040_2 = 1
const XTENSA_HWCIDVERS_T1040_2 = 33
const XTENSA_HWVERSION_T1040_3 = 104003
const XTENSA_HWCIDSCHEME_T1040_3 = 1
const XTENSA_HWCIDVERS_T1040_3 = 34
const XTENSA_HWVERSION_T1050_0 = 105000
const XTENSA_HWCIDSCHEME_T1050_0 = 1100
const XTENSA_HWCIDVERS_T1050_0 = 1
const XTENSA_HWVERSION_T1050_1 = 105001
const XTENSA_HWCIDSCHEME_T1050_1 = 1100
const XTENSA_HWCIDVERS_T1050_1 = 2
const XTENSA_HWVERSION_T1050_2 = 105002
const XTENSA_HWCIDSCHEME_T1050_2 = 1100
const XTENSA_HWCIDVERS_T1050_2 = 4
const XTENSA_HWVERSION_T1050_3 = 105003
const XTENSA_HWCIDSCHEME_T1050_3 = 1100
const XTENSA_HWCIDVERS_T1050_3 = 6
const XTENSA_HWVERSION_T1050_4 = 105004
const XTENSA_HWCIDSCHEME_T1050_4 = 1100
const XTENSA_HWCIDVERS_T1050_4 = 7
const XTENSA_HWVERSION_T1050_5 = 105005
const XTENSA_HWCIDSCHEME_T1050_5 = 1100
const XTENSA_HWCIDVERS_T1050_5 = 8
const XTENSA_HWVERSION_RA_2004_1 = 210000
const XTENSA_HWCIDSCHEME_RA_2004_1 = 1100
const XTENSA_HWCIDVERS_RA_2004_1 = 3
const XTENSA_HWVERSION_RA_2005_1 = 210001
const XTENSA_HWCIDSCHEME_RA_2005_1 = 1100
const XTENSA_HWCIDVERS_RA_2005_1 = 20
const XTENSA_HWVERSION_RA_2005_2 = 210002
const XTENSA_HWCIDSCHEME_RA_2005_2 = 1100
const XTENSA_HWCIDVERS_RA_2005_2 = 21
const XTENSA_HWVERSION_RA_2005_3 = 210003
const XTENSA_HWCIDSCHEME_RA_2005_3 = 1100
const XTENSA_HWCIDVERS_RA_2005_3 = 22
const XTENSA_HWVERSION_RA_2006_4 = 210004
const XTENSA_HWCIDSCHEME_RA_2006_4 = 1100
const XTENSA_HWCIDVERS_RA_2006_4 = 23
const XTENSA_HWVERSION_RA_2006_5 = 210005
const XTENSA_HWCIDSCHEME_RA_2006_5 = 1100
const XTENSA_HWCIDVERS_RA_2006_5 = 24
const XTENSA_HWVERSION_RA_2006_6 = 210006
const XTENSA_HWCIDSCHEME_RA_2006_6 = 1100
const XTENSA_HWCIDVERS_RA_2006_6 = 25
const XTENSA_HWVERSION_RA_2007_7 = 210007
const XTENSA_HWCIDSCHEME_RA_2007_7 = 1100
const XTENSA_HWCIDVERS_RA_2007_7 = 26
const XTENSA_HWVERSION_RA_2008_8 = 210008
const XTENSA_HWCIDSCHEME_RA_2008_8 = 1100
const XTENSA_HWCIDVERS_RA_2008_8 = 27
const XTENSA_HWVERSION_RB_2006_0 = 220000
const XTENSA_HWCIDSCHEME_RB_2006_0 = 1100
const XTENSA_HWCIDVERS_RB_2006_0 = 48
const XTENSA_HWVERSION_RB_2007_1 = 220001
const XTENSA_HWCIDSCHEME_RB_2007_1 = 1100
const XTENSA_HWCIDVERS_RB_2007_1 = 49
const XTENSA_HWVERSION_RB_2007_2 = 221000
const XTENSA_HWCIDSCHEME_RB_2007_2 = 1100
const XTENSA_HWCIDVERS_RB_2007_2 = 52
const XTENSA_HWVERSION_RB_2008_3 = 221001
const XTENSA_HWCIDSCHEME_RB_2008_3 = 1100
const XTENSA_HWCIDVERS_RB_2008_3 = 53
const XTENSA_HWVERSION_RB_2008_4 = 221002
const XTENSA_HWCIDSCHEME_RB_2008_4 = 1100
const XTENSA_HWCIDVERS_RB_2008_4 = 54
const XTENSA_HWVERSION_RB_2009_5 = 221003
const XTENSA_HWCIDSCHEME_RB_2009_5 = 1100
const XTENSA_HWCIDVERS_RB_2009_5 = 55
const XTENSA_HWVERSION_RB_2007_2_MP = 221100
const XTENSA_HWCIDSCHEME_RB_2007_2_MP = 1100
const XTENSA_HWCIDVERS_RB_2007_2_MP = 64
const XTENSA_HWVERSION_RC_2009_0 = 230000
const XTENSA_HWCIDSCHEME_RC_2009_0 = 1100
const XTENSA_HWCIDVERS_RC_2009_0 = 65
const XTENSA_HWVERSION_RC_2010_1 = 230001
const XTENSA_HWCIDSCHEME_RC_2010_1 = 1100
const XTENSA_HWCIDVERS_RC_2010_1 = 66
const XTENSA_HWVERSION_RC_2010_2 = 230002
const XTENSA_HWCIDSCHEME_RC_2010_2 = 1100
const XTENSA_HWCIDVERS_RC_2010_2 = 67
const XTENSA_HWVERSION_RC_2011_3 = 230003
const XTENSA_HWCIDSCHEME_RC_2011_3 = 1100
const XTENSA_HWCIDVERS_RC_2011_3 = 68
const XTENSA_HWVERSION_RD_2010_0 = 240000
const XTENSA_HWCIDSCHEME_RD_2010_0 = 1100
const XTENSA_HWCIDVERS_RD_2010_0 = 80
const XTENSA_HWVERSION_RD_2011_1 = 240001
const XTENSA_HWCIDSCHEME_RD_2011_1 = 1100
const XTENSA_HWCIDVERS_RD_2011_1 = 81
const XTENSA_HWVERSION_RD_2011_2 = 240002
const XTENSA_HWCIDSCHEME_RD_2011_2 = 1100
const XTENSA_HWCIDVERS_RD_2011_2 = 82
const XTENSA_HWVERSION_RD_2011_3 = 240003
const XTENSA_HWCIDSCHEME_RD_2011_3 = 1100
const XTENSA_HWCIDVERS_RD_2011_3 = 83
const XTENSA_HWVERSION_RD_2012_4 = 240004
const XTENSA_HWCIDSCHEME_RD_2012_4 = 1100
const XTENSA_HWCIDVERS_RD_2012_4 = 84
const XTENSA_HWVERSION_RD_2012_5 = 240005
const XTENSA_HWCIDSCHEME_RD_2012_5 = 1100
const XTENSA_HWCIDVERS_RD_2012_5 = 85
const XTENSA_HWVERSION_RE_2012_0 = 250000
const XTENSA_HWCIDSCHEME_RE_2012_0 = 1100
const XTENSA_HWCIDVERS_RE_2012_0 = 96
const XTENSA_HWVERSION_RE_2012_1 = 250001
const XTENSA_HWCIDSCHEME_RE_2012_1 = 1100
const XTENSA_HWCIDVERS_RE_2012_1 = 97
const XTENSA_HWVERSION_RE_2013_2 = 250002
const XTENSA_HWCIDSCHEME_RE_2013_2 = 1100
const XTENSA_HWCIDVERS_RE_2013_2 = 98
const XTENSA_HWVERSION_RE_2013_3 = 250003
const XTENSA_HWCIDSCHEME_RE_2013_3 = 1100
const XTENSA_HWCIDVERS_RE_2013_3 = 99
const XTENSA_HWVERSION_RE_2013_4 = 250004
const XTENSA_HWCIDSCHEME_RE_2013_4 = 1100
const XTENSA_HWCIDVERS_RE_2013_4 = 100
const XTENSA_HWVERSION_RE_2014_5 = 250005
const XTENSA_HWCIDSCHEME_RE_2014_5 = 1100
const XTENSA_HWCIDVERS_RE_2014_5 = 101
const XTENSA_HWVERSION_RE_2015_6 = 250006
const XTENSA_HWCIDSCHEME_RE_2015_6 = 1100
const XTENSA_HWCIDVERS_RE_2015_6 = 102
const XTENSA_HWVERSION_RF_2014_0 = 260000
const XTENSA_HWCIDSCHEME_RF_2014_0 = 1100
const XTENSA_HWCIDVERS_RF_2014_0 = 112
const XTENSA_HWVERSION_RF_2014_1 = 260001
const XTENSA_HWCIDSCHEME_RF_2014_1 = 1100
const XTENSA_HWCIDVERS_RF_2014_1 = 113
const XTENSA_HWVERSION_RF_2015_2 = 260002
const XTENSA_HWCIDSCHEME_RF_2015_2 = 1100
const XTENSA_HWCIDVERS_RF_2015_2 = 114
const XTENSA_HWVERSION_RF_2015_3 = 260003
const XTENSA_HWCIDSCHEME_RF_2015_3 = 1100
const XTENSA_HWCIDVERS_RF_2015_3 = 115
const XTENSA_HWVERSION_RF_2016_4 = 260004
const XTENSA_HWCIDSCHEME_RF_2016_4 = 1100
const XTENSA_HWCIDVERS_RF_2016_4 = 116
const XTENSA_HWVERSION_RG_2015_0 = 270000
const XTENSA_HWCIDSCHEME_RG_2015_0 = 1100
const XTENSA_HWCIDVERS_RG_2015_0 = 128
const XTENSA_HWVERSION_RG_2015_1 = 270001
const XTENSA_HWCIDSCHEME_RG_2015_1 = 1100
const XTENSA_HWCIDVERS_RG_2015_1 = 129
const XTENSA_HWVERSION_RG_2015_2 = 270002
const XTENSA_HWCIDSCHEME_RG_2015_2 = 1100
const XTENSA_HWCIDVERS_RG_2015_2 = 130
const XTENSA_HWVERSION_RG_2016_3 = 270003
const XTENSA_HWCIDSCHEME_RG_2016_3 = 1100
const XTENSA_HWCIDVERS_RG_2016_3 = 131
const XTENSA_HWVERSION_RG_2016_4 = 270004
const XTENSA_HWCIDSCHEME_RG_2016_4 = 1100
const XTENSA_HWCIDVERS_RG_2016_4 = 132
const XTENSA_HWVERSION_RG_2017_5 = 270005
const XTENSA_HWCIDSCHEME_RG_2017_5 = 1100
const XTENSA_HWCIDVERS_RG_2017_5 = 133
const XTENSA_HWVERSION_RG_2017_6 = 270006
const XTENSA_HWCIDSCHEME_RG_2017_6 = 1100
const XTENSA_HWCIDVERS_RG_2017_6 = 134
const XTENSA_HWVERSION_RG_2017_7 = 270007
const XTENSA_HWCIDSCHEME_RG_2017_7 = 1100
const XTENSA_HWCIDVERS_RG_2017_7 = 135
const XTENSA_HWVERSION_RG_2017_8 = 270008
const XTENSA_HWCIDSCHEME_RG_2017_8 = 1100
const XTENSA_HWCIDVERS_RG_2017_8 = 136
const XTENSA_HWVERSION_RG_2018_9 = 270009
const XTENSA_HWCIDSCHEME_RG_2018_9 = 1100
const XTENSA_HWCIDVERS_RG_2018_9 = 137
const XTENSA_HWVERSION_RH_2016_0 = 280000
const XTENSA_HWCIDSCHEME_RH_2016_0 = 1100
const XTENSA_HWCIDVERS_RH_2016_0 = 144
const XTENSA_SWVERSION_T1020_0 = 102000
const XTENSA_SWVERSION_T1020_1 = 102001
const XTENSA_SWVERSION_T1020_2 = 102002
const XTENSA_SWVERSION_T1020_2B = 102002
const XTENSA_SWVERSION_T1020_3 = 102003
const XTENSA_SWVERSION_T1020_4 = 102004
const XTENSA_SWVERSION_T1030_0 = 103000
const XTENSA_SWVERSION_T1030_1 = 103001
const XTENSA_SWVERSION_T1030_2 = 103002
const XTENSA_SWVERSION_T1030_3 = 103003
const XTENSA_SWVERSION_T1040_0 = 104000
const XTENSA_SWVERSION_T1040_1 = 104001
const XTENSA_SWVERSION_T1040_1P = 104001
const XTENSA_SWVERSION_T1040_2 = 104002
const XTENSA_SWVERSION_T1040_3 = 104003
const XTENSA_SWVERSION_T1050_0 = 105000
const XTENSA_SWVERSION_T1050_1 = 105001
const XTENSA_SWVERSION_T1050_2 = 105002
const XTENSA_SWVERSION_T1050_3 = 105003
const XTENSA_SWVERSION_T1050_4 = 105004
const XTENSA_SWVERSION_T1050_5 = 105005
const XTENSA_SWVERSION_RA_2004_1 = 600000
const XTENSA_SWVERSION_RA_2005_1 = 600001
const XTENSA_SWVERSION_RA_2005_2 = 600002
const XTENSA_SWVERSION_RA_2005_3 = 600003
const XTENSA_SWVERSION_RA_2006_4 = 600004
const XTENSA_SWVERSION_RA_2006_5 = 600005
const XTENSA_SWVERSION_RA_2006_6 = 600006
const XTENSA_SWVERSION_RA_2007_7 = 600007
const XTENSA_SWVERSION_RA_2008_8 = 600008
const XTENSA_SWVERSION_RB_2006_0 = 700000
const XTENSA_SWVERSION_RB_2007_1 = 700001
const XTENSA_SWVERSION_RB_2007_2 = 701000
const XTENSA_SWVERSION_RB_2008_3 = 701001
const XTENSA_SWVERSION_RB_2008_4 = 701002
const XTENSA_SWVERSION_RB_2009_5 = 701003
const XTENSA_SWVERSION_RB_2007_2_MP = 701100
const XTENSA_SWVERSION_RC_2009_0 = 800000
const XTENSA_SWVERSION_RC_2010_1 = 800001
const XTENSA_SWVERSION_RC_2010_2 = 800002
const XTENSA_SWVERSION_RC_2011_3 = 800003
const XTENSA_SWVERSION_RD_2010_0 = 900000
const XTENSA_SWVERSION_RD_2011_1 = 900001
const XTENSA_SWVERSION_RD_2011_2 = 900002
const XTENSA_SWVERSION_RD_2011_3 = 900003
const XTENSA_SWVERSION_RD_2012_4 = 900004
const XTENSA_SWVERSION_RD_2012_5 = 900005
const XTENSA_SWVERSION_RE_2012_0 = 1000000
const XTENSA_SWVERSION_RE_2012_1 = 1000001
const XTENSA_SWVERSION_RE_2013_2 = 1000002
const XTENSA_SWVERSION_RE_2013_3 = 1000003
const XTENSA_SWVERSION_RE_2013_4 = 1000004
const XTENSA_SWVERSION_RE_2014_5 = 1000005
const XTENSA_SWVERSION_RE_2015_6 = 1000006
const XTENSA_SWVERSION_RF_2014_0 = 1100000
const XTENSA_SWVERSION_RF_2014_1 = 1100001
const XTENSA_SWVERSION_RF_2015_2 = 1100002
const XTENSA_SWVERSION_RF_2015_3 = 1100003
const XTENSA_SWVERSION_RF_2016_4 = 1100004
const XTENSA_SWVERSION_RG_2015_0 = 1200000
const XTENSA_SWVERSION_RG_2015_1 = 1200001
const XTENSA_SWVERSION_RG_2015_2 = 1200002
const XTENSA_SWVERSION_RG_2016_3 = 1200003
const XTENSA_SWVERSION_RG_2016_4 = 1200004
const XTENSA_SWVERSION_RG_2017_5 = 1200005
const XTENSA_SWVERSION_RG_2017_6 = 1200006
const XTENSA_SWVERSION_RG_2017_7 = 1200007
const XTENSA_SWVERSION_RG_2017_8 = 1200008
const XTENSA_SWVERSION_RG_2018_9 = 1200009
const XTENSA_SWVERSION_RH_2016_0 = 1300000
const XTENSA_RELEASE_NAME = "RG-2018.9"
const XTENSA_RELEASE_CANONICAL_NAME = "RG-2018.9"
const XTENSA_SWVERSION_NAME = "12.0.9"
const XTENSA_SWVERSION_NAME_IDENT = 12_0_9
const XTENSA_SWVERSION_CANONICAL_NAME = "12.0.9"
const XTENSA_SWVERSION_MAJORMID_NAME = "12.0"
const XTENSA_SWVERSION_MAJOR_NAME = "12"
const XTENSA_SWVERSION_LICENSE_NAME = "12.0"
const XCHAL_HAVE_BE = 0
const XCHAL_HAVE_WINDOWED = 1
const XCHAL_NUM_AREGS = 64
const XCHAL_NUM_AREGS_LOG2 = 6
const XCHAL_MAX_INSTRUCTION_SIZE = 4
const XCHAL_HAVE_DEBUG = 1
const XCHAL_HAVE_DENSITY = 1
const XCHAL_HAVE_LOOPS = 1
const XCHAL_LOOP_BUFFER_SIZE = 256
const XCHAL_HAVE_NSA = 1
const XCHAL_HAVE_MINMAX = 1
const XCHAL_HAVE_SEXT = 1
const XCHAL_HAVE_DEPBITS = 0
const XCHAL_HAVE_CLAMPS = 1
const XCHAL_HAVE_MUL16 = 1
const XCHAL_HAVE_MUL32 = 1
const XCHAL_HAVE_MUL32_HIGH = 1
const XCHAL_HAVE_DIV32 = 1
const XCHAL_HAVE_L32R = 1
const XCHAL_HAVE_ABSOLUTE_LITERALS = 0
const XCHAL_HAVE_CONST16 = 0
const XCHAL_HAVE_ADDX = 1
const XCHAL_HAVE_EXCLUSIVE = 0
const XCHAL_HAVE_WIDE_BRANCHES = 0
const XCHAL_HAVE_PREDICTED_BRANCHES = 0
const XCHAL_HAVE_CALL4AND12 = 1
const XCHAL_HAVE_ABS = 1
const XCHAL_HAVE_RELEASE_SYNC = 1
const XCHAL_HAVE_S32C1I = 1
const XCHAL_HAVE_SPECULATION = 0
const XCHAL_HAVE_FULL_RESET = 1
const XCHAL_NUM_CONTEXTS = 1
const XCHAL_NUM_MISC_REGS = 4
const XCHAL_HAVE_TAP_MASTER = 0
const XCHAL_HAVE_PRID = 1
const XCHAL_HAVE_EXTERN_REGS = 1
const XCHAL_HAVE_MX = 0
const XCHAL_HAVE_MP_INTERRUPTS = 0
const XCHAL_HAVE_MP_RUNSTALL = 0
const XCHAL_HAVE_PSO = 0
const XCHAL_HAVE_PSO_CDM = 0
const XCHAL_HAVE_PSO_FULL_RETENTION = 0
const XCHAL_HAVE_THREADPTR = 1
const XCHAL_HAVE_BOOLEANS = 1
const XCHAL_HAVE_CP = 1
const XCHAL_CP_MAXCFG = 8
const XCHAL_HAVE_MAC16 = 1
const XCHAL_HAVE_FUSION = 0
const XCHAL_HAVE_FUSION_FP = 0
const XCHAL_HAVE_FUSION_LOW_POWER = 0
const XCHAL_HAVE_FUSION_AES = 0
const XCHAL_HAVE_FUSION_CONVENC = 0
const XCHAL_HAVE_FUSION_LFSR_CRC = 0
const XCHAL_HAVE_FUSION_BITOPS = 0
const XCHAL_HAVE_FUSION_AVS = 0
const XCHAL_HAVE_FUSION_16BIT_BASEBAND = 0
const XCHAL_HAVE_FUSION_VITERBI = 0
const XCHAL_HAVE_FUSION_SOFTDEMAP = 0
const XCHAL_HAVE_HIFIPRO = 0
const XCHAL_HAVE_HIFI5 = 0
const XCHAL_HAVE_HIFI5_NN_MAC = 0
const XCHAL_HAVE_HIFI5_VFPU = 0
const XCHAL_HAVE_HIFI5_HP_VFPU = 0
const XCHAL_HAVE_HIFI4 = 0
const XCHAL_HAVE_HIFI4_VFPU = 0
const XCHAL_HAVE_HIFI3 = 0
const XCHAL_HAVE_HIFI3_VFPU = 0
const XCHAL_HAVE_HIFI3Z = 0
const XCHAL_HAVE_HIFI3Z_VFPU = 0
const XCHAL_HAVE_HIFI2 = 0
const XCHAL_HAVE_HIFI2EP = 0
const XCHAL_HAVE_HIFI_MINI = 0
const XCHAL_HAVE_VECTORFPU2005 = 0
const XCHAL_HAVE_USER_DPFPU = 0
const XCHAL_HAVE_USER_SPFPU = 0
const XCHAL_HAVE_FP = 1
const XCHAL_HAVE_FP_DIV = 1
const XCHAL_HAVE_FP_RECIP = 1
const XCHAL_HAVE_FP_SQRT = 1
const XCHAL_HAVE_FP_RSQRT = 1
const XCHAL_HAVE_DFP = 0
const XCHAL_HAVE_DFP_DIV = 0
const XCHAL_HAVE_DFP_RECIP = 0
const XCHAL_HAVE_DFP_SQRT = 0
const XCHAL_HAVE_DFP_RSQRT = 0
const XCHAL_HAVE_DFP_ACCEL = 0
const XCHAL_HAVE_DFPU_SINGLE_ONLY = 1
const XCHAL_HAVE_DFPU_SINGLE_DOUBLE = 0
const XCHAL_HAVE_VECTRA1 = 0
const XCHAL_HAVE_VECTRALX = 0
const XCHAL_HAVE_FUSIONG = 0
const XCHAL_HAVE_FUSIONG3 = 0
const XCHAL_HAVE_FUSIONG6 = 0
const XCHAL_HAVE_FUSIONG_SP_VFPU = 0
const XCHAL_HAVE_FUSIONG_DP_VFPU = 0
const XCHAL_FUSIONG_SIMD32 = 0
const XCHAL_HAVE_PDX = 0
const XCHAL_PDX_SIMD32 = 0
const XCHAL_HAVE_PDX4 = 0
const XCHAL_HAVE_PDX8 = 0
const XCHAL_HAVE_PDX16 = 0
const XCHAL_HAVE_CONNXD2 = 0
const XCHAL_HAVE_CONNXD2_DUALLSFLIX = 0
const XCHAL_HAVE_BBE16 = 0
const XCHAL_HAVE_BBE16_RSQRT = 0
const XCHAL_HAVE_BBE16_VECDIV = 0
const XCHAL_HAVE_BBE16_DESPREAD = 0
const XCHAL_HAVE_BBENEP = 0
const XCHAL_HAVE_BBENEP_SP_VFPU = 0
const XCHAL_HAVE_BSP3 = 0
const XCHAL_HAVE_BSP3_TRANSPOSE = 0
const XCHAL_HAVE_SSP16 = 0
const XCHAL_HAVE_SSP16_VITERBI = 0
const XCHAL_HAVE_TURBO16 = 0
const XCHAL_HAVE_BBP16 = 0
const XCHAL_HAVE_FLIX3 = 0
const XCHAL_HAVE_GRIVPEP = 0
const XCHAL_HAVE_GRIVPEP_HISTOGRAM = 0
const XCHAL_HAVE_VISION = 0
const XCHAL_VISION_SIMD16 = 0
const XCHAL_VISION_TYPE = 0
const XCHAL_VISION_QUAD_MAC_TYPE = 0
const XCHAL_HAVE_VISION_HISTOGRAM = 0
const XCHAL_HAVE_VISION_SP_VFPU = 0
const XCHAL_HAVE_VISION_HP_VFPU = 0
const XCHAL_HAVE_VISIONC = 0
const XCHAL_NUM_LOADSTORE_UNITS = 1
const XCHAL_NUM_WRITEBUFFER_ENTRIES = 4
const XCHAL_INST_FETCH_WIDTH = 4
const XCHAL_DATA_WIDTH = 16
const XCHAL_DATA_PIPE_DELAY = 1
const XCHAL_CLOCK_GATING_GLOBAL = 1
const XCHAL_CLOCK_GATING_FUNCUNIT = 1
const XCHAL_UNALIGNED_LOAD_EXCEPTION = 0
const XCHAL_UNALIGNED_STORE_EXCEPTION = 0
const XCHAL_UNALIGNED_LOAD_HW = 1
const XCHAL_UNALIGNED_STORE_HW = 1
const XCHAL_SW_VERSION = 1200012
const XCHAL_CORE_ID = "LX7_ESP32_S3_MP"
const XCHAL_BUILD_UNIQUE_ID = 0x00090F1F
const XCHAL_HW_CONFIGID0 = 0xC2F0FFFE
const XCHAL_HW_CONFIGID1 = 0x23090F1F
const XCHAL_HW_VERSION_NAME = "LX7.0.12"
const XCHAL_HW_VERSION_MAJOR = 2700
const XCHAL_HW_VERSION_MINOR = 12
const XCHAL_HW_VERSION = 270012
const XCHAL_HW_REL_LX7 = 1
const XCHAL_HW_REL_LX7_0 = 1
const XCHAL_HW_REL_LX7_0_12 = 1
const XCHAL_HW_CONFIGID_RELIABLE = 1
const XCHAL_HW_MIN_VERSION_MAJOR = 2700
const XCHAL_HW_MIN_VERSION_MINOR = 12
const XCHAL_HW_MIN_VERSION = 270012
const XCHAL_HW_MAX_VERSION_MAJOR = 2700
const XCHAL_HW_MAX_VERSION_MINOR = 12
const XCHAL_HW_MAX_VERSION = 270012
const XCHAL_ICACHE_LINESIZE = 4
const XCHAL_DCACHE_LINESIZE = 16
const XCHAL_ICACHE_LINEWIDTH = 2
const XCHAL_DCACHE_LINEWIDTH = 4
const XCHAL_ICACHE_SIZE = 0
const XCHAL_DCACHE_SIZE = 0
const XCHAL_DCACHE_IS_WRITEBACK = 0
const XCHAL_DCACHE_IS_COHERENT = 0
const XCHAL_HAVE_PREFETCH = 0
const XCHAL_HAVE_PREFETCH_L1 = 0
const XCHAL_PREFETCH_CASTOUT_LINES = 0
const XCHAL_PREFETCH_ENTRIES = 0
const XCHAL_PREFETCH_BLOCK_ENTRIES = 0
const XCHAL_HAVE_CACHE_BLOCKOPS = 0
const XCHAL_HAVE_ICACHE_TEST = 0
const XCHAL_HAVE_DCACHE_TEST = 0
const XCHAL_HAVE_ICACHE_DYN_WAYS = 0
const XCHAL_HAVE_DCACHE_DYN_WAYS = 0
const XCHAL_HAVE_PIF = 1
const XCHAL_HAVE_AXI = 0
const XCHAL_HAVE_AXI_ECC = 0
const XCHAL_HAVE_ACELITE = 0
const XCHAL_HAVE_PIF_WR_RESP = 0
const XCHAL_HAVE_PIF_REQ_ATTR = 1
const XCHAL_ICACHE_SETWIDTH = 0
const XCHAL_DCACHE_SETWIDTH = 0
const XCHAL_ICACHE_WAYS = 1
const XCHAL_DCACHE_WAYS = 1
const XCHAL_ICACHE_LINE_LOCKABLE = 0
const XCHAL_DCACHE_LINE_LOCKABLE = 0
const XCHAL_ICACHE_ECC_PARITY = 0
const XCHAL_DCACHE_ECC_PARITY = 0
const XCHAL_ICACHE_ECC_WIDTH = 1
const XCHAL_DCACHE_ECC_WIDTH = 1
const XCHAL_ICACHE_ACCESS_SIZE = 1
const XCHAL_DCACHE_ACCESS_SIZE = 1
const XCHAL_DCACHE_BANKS = 0
const XCHAL_CA_BITS = 4
const XCHAL_NUM_INSTROM = 0
const XCHAL_NUM_INSTRAM = 1
const XCHAL_NUM_DATAROM = 0
const XCHAL_NUM_DATARAM = 1
const XCHAL_NUM_URAM = 0
const XCHAL_NUM_XLMI = 0
const XCHAL_INSTRAM0_VADDR = 0x40000000
const XCHAL_INSTRAM0_PADDR = 0x40000000
const XCHAL_INSTRAM0_SIZE = 67108864
const XCHAL_INSTRAM0_ECC_PARITY = 0
const XCHAL_HAVE_INSTRAM0 = 1
const XCHAL_INSTRAM0_HAVE_IDMA = 0
const XCHAL_DATARAM0_VADDR = 0x3C000000
const XCHAL_DATARAM0_PADDR = 0x3C000000
const XCHAL_DATARAM0_SIZE = 67108864
const XCHAL_DATARAM0_ECC_PARITY = 0
const XCHAL_DATARAM0_BANKS = 1
const XCHAL_HAVE_DATARAM0 = 1
const XCHAL_DATARAM0_HAVE_IDMA = 0
const XCHAL_HAVE_IDMA = 0
const XCHAL_HAVE_IDMA_TRANSPOSE = 0
const XCHAL_HAVE_IMEM_LOADSTORE = 1
const XCHAL_HAVE_INTERRUPTS = 1
const XCHAL_HAVE_HIGHPRI_INTERRUPTS = 1
const XCHAL_HAVE_NMI = 1
const XCHAL_HAVE_CCOUNT = 1
const XCHAL_NUM_TIMERS = 3
const XCHAL_NUM_INTERRUPTS = 32
const XCHAL_NUM_INTERRUPTS_LOG2 = 5
const XCHAL_NUM_EXTINTERRUPTS = 26
const XCHAL_NUM_INTLEVELS = 6
const XCHAL_EXCM_LEVEL = 3
const XCHAL_INTLEVEL1_MASK = 0x000637FF
const XCHAL_INTLEVEL2_MASK = 0x00380000
const XCHAL_INTLEVEL3_MASK = 0x28C08800
const XCHAL_INTLEVEL4_MASK = 0x53000000
const XCHAL_INTLEVEL5_MASK = 0x84010000
const XCHAL_INTLEVEL6_MASK = 0x00000000
const XCHAL_INTLEVEL7_MASK = 0x00004000
const XCHAL_INTLEVEL1_ANDBELOW_MASK = 0x000637FF
const XCHAL_INTLEVEL2_ANDBELOW_MASK = 0x003E37FF
const XCHAL_INTLEVEL3_ANDBELOW_MASK = 0x28FEBFFF
const XCHAL_INTLEVEL4_ANDBELOW_MASK = 0x7BFEBFFF
const XCHAL_INTLEVEL5_ANDBELOW_MASK = 0xFFFFBFFF
const XCHAL_INTLEVEL6_ANDBELOW_MASK = 0xFFFFBFFF
const XCHAL_INTLEVEL7_ANDBELOW_MASK = 0xFFFFFFFF
const XCHAL_INT0_LEVEL = 1
const XCHAL_INT1_LEVEL = 1
const XCHAL_INT2_LEVEL = 1
const XCHAL_INT3_LEVEL = 1
const XCHAL_INT4_LEVEL = 1
const XCHAL_INT5_LEVEL = 1
const XCHAL_INT6_LEVEL = 1
const XCHAL_INT7_LEVEL = 1
const XCHAL_INT8_LEVEL = 1
const XCHAL_INT9_LEVEL = 1
const XCHAL_INT10_LEVEL = 1
const XCHAL_INT11_LEVEL = 3
const XCHAL_INT12_LEVEL = 1
const XCHAL_INT13_LEVEL = 1
const XCHAL_INT14_LEVEL = 7
const XCHAL_INT15_LEVEL = 3
const XCHAL_INT16_LEVEL = 5
const XCHAL_INT17_LEVEL = 1
const XCHAL_INT18_LEVEL = 1
const XCHAL_INT19_LEVEL = 2
const XCHAL_INT20_LEVEL = 2
const XCHAL_INT21_LEVEL = 2
const XCHAL_INT22_LEVEL = 3
const XCHAL_INT23_LEVEL = 3
const XCHAL_INT24_LEVEL = 4
const XCHAL_INT25_LEVEL = 4
const XCHAL_INT26_LEVEL = 5
const XCHAL_INT27_LEVEL = 3
const XCHAL_INT28_LEVEL = 4
const XCHAL_INT29_LEVEL = 3
const XCHAL_INT30_LEVEL = 4
const XCHAL_INT31_LEVEL = 5
const XCHAL_DEBUGLEVEL = 6
const XCHAL_HAVE_DEBUG_EXTERN_INT = 1
const XCHAL_NMILEVEL = 7
const XCHAL_INTTYPE_MASK_UNCONFIGURED = 0x00000000
const XCHAL_INTTYPE_MASK_SOFTWARE = 0x20000080
const XCHAL_INTTYPE_MASK_EXTERN_EDGE = 0x50400400
const XCHAL_INTTYPE_MASK_EXTERN_LEVEL = 0x8FBE333F
const XCHAL_INTTYPE_MASK_TIMER = 0x00018040
const XCHAL_INTTYPE_MASK_NMI = 0x00004000
const XCHAL_INTTYPE_MASK_WRITE_ERROR = 0x00000000
const XCHAL_INTTYPE_MASK_PROFILING = 0x00000800
const XCHAL_INTTYPE_MASK_IDMA_DONE = 0x00000000
const XCHAL_INTTYPE_MASK_IDMA_ERR = 0x00000000
const XCHAL_INTTYPE_MASK_GS_ERR = 0x00000000
const XCHAL_TIMER0_INTERRUPT = 6
const XCHAL_TIMER1_INTERRUPT = 15
const XCHAL_TIMER2_INTERRUPT = 16
const XCHAL_NMI_INTERRUPT = 14
const XCHAL_PROFILING_INTERRUPT = 11
const XCHAL_INTLEVEL7_NUM = 14
const XCHAL_EXTINT0_NUM = 0
const XCHAL_EXTINT1_NUM = 1
const XCHAL_EXTINT2_NUM = 2
const XCHAL_EXTINT3_NUM = 3
const XCHAL_EXTINT4_NUM = 4
const XCHAL_EXTINT5_NUM = 5
const XCHAL_EXTINT6_NUM = 8
const XCHAL_EXTINT7_NUM = 9
const XCHAL_EXTINT8_NUM = 10
const XCHAL_EXTINT9_NUM = 12
const XCHAL_EXTINT10_NUM = 13
const XCHAL_EXTINT11_NUM = 14
const XCHAL_EXTINT12_NUM = 17
const XCHAL_EXTINT13_NUM = 18
const XCHAL_EXTINT14_NUM = 19
const XCHAL_EXTINT15_NUM = 20
const XCHAL_EXTINT16_NUM = 21
const XCHAL_EXTINT17_NUM = 22
const XCHAL_EXTINT18_NUM = 23
const XCHAL_EXTINT19_NUM = 24
const XCHAL_EXTINT20_NUM = 25
const XCHAL_EXTINT21_NUM = 26
const XCHAL_EXTINT22_NUM = 27
const XCHAL_EXTINT23_NUM = 28
const XCHAL_EXTINT24_NUM = 30
const XCHAL_EXTINT25_NUM = 31
const XCHAL_INT0_EXTNUM = 0
const XCHAL_INT1_EXTNUM = 1
const XCHAL_INT2_EXTNUM = 2
const XCHAL_INT3_EXTNUM = 3
const XCHAL_INT4_EXTNUM = 4
const XCHAL_INT5_EXTNUM = 5
const XCHAL_INT8_EXTNUM = 6
const XCHAL_INT9_EXTNUM = 7
const XCHAL_INT10_EXTNUM = 8
const XCHAL_INT12_EXTNUM = 9
const XCHAL_INT13_EXTNUM = 10
const XCHAL_INT14_EXTNUM = 11
const XCHAL_INT17_EXTNUM = 12
const XCHAL_INT18_EXTNUM = 13
const XCHAL_INT19_EXTNUM = 14
const XCHAL_INT20_EXTNUM = 15
const XCHAL_INT21_EXTNUM = 16
const XCHAL_INT22_EXTNUM = 17
const XCHAL_INT23_EXTNUM = 18
const XCHAL_INT24_EXTNUM = 19
const XCHAL_INT25_EXTNUM = 20
const XCHAL_INT26_EXTNUM = 21
const XCHAL_INT27_EXTNUM = 22
const XCHAL_INT28_EXTNUM = 23
const XCHAL_INT30_EXTNUM = 24
const XCHAL_INT31_EXTNUM = 25
const XCHAL_XEA_VERSION = 2
const XCHAL_HAVE_XEA1 = 0
const XCHAL_HAVE_XEA2 = 1
const XCHAL_HAVE_XEAX = 0
const XCHAL_HAVE_EXCEPTIONS = 1
const XCHAL_HAVE_HALT = 0
const XCHAL_HAVE_BOOTLOADER = 0
const XCHAL_HAVE_MEM_ECC_PARITY = 0
const XCHAL_HAVE_VECTOR_SELECT = 1
const XCHAL_HAVE_VECBASE = 1
const XCHAL_VECBASE_RESET_VADDR = 0x40000000
const XCHAL_VECBASE_RESET_PADDR = 0x40000000
const XCHAL_RESET_VECBASE_OVERLAP = 0
const XCHAL_RESET_VECTOR0_VADDR = 0x50000000
const XCHAL_RESET_VECTOR0_PADDR = 0x50000000
const XCHAL_RESET_VECTOR1_VADDR = 0x40000400
const XCHAL_RESET_VECTOR1_PADDR = 0x40000400
const XCHAL_RESET_VECTOR_VADDR = 0x40000400
const XCHAL_RESET_VECTOR_PADDR = 0x40000400
const XCHAL_USER_VECOFS = 0x00000340
const XCHAL_USER_VECTOR_VADDR = 0x40000340
const XCHAL_USER_VECTOR_PADDR = 0x40000340
const XCHAL_KERNEL_VECOFS = 0x00000300
const XCHAL_KERNEL_VECTOR_VADDR = 0x40000300
const XCHAL_KERNEL_VECTOR_PADDR = 0x40000300
const XCHAL_DOUBLEEXC_VECOFS = 0x000003C0
const XCHAL_DOUBLEEXC_VECTOR_VADDR = 0x400003C0
const XCHAL_DOUBLEEXC_VECTOR_PADDR = 0x400003C0
const XCHAL_WINDOW_OF4_VECOFS = 0x00000000
const XCHAL_WINDOW_UF4_VECOFS = 0x00000040
const XCHAL_WINDOW_OF8_VECOFS = 0x00000080
const XCHAL_WINDOW_UF8_VECOFS = 0x000000C0
const XCHAL_WINDOW_OF12_VECOFS = 0x00000100
const XCHAL_WINDOW_UF12_VECOFS = 0x00000140
const XCHAL_WINDOW_VECTORS_VADDR = 0x40000000
const XCHAL_WINDOW_VECTORS_PADDR = 0x40000000
const XCHAL_INTLEVEL2_VECOFS = 0x00000180
const XCHAL_INTLEVEL2_VECTOR_VADDR = 0x40000180
const XCHAL_INTLEVEL2_VECTOR_PADDR = 0x40000180
const XCHAL_INTLEVEL3_VECOFS = 0x000001C0
const XCHAL_INTLEVEL3_VECTOR_VADDR = 0x400001C0
const XCHAL_INTLEVEL3_VECTOR_PADDR = 0x400001C0
const XCHAL_INTLEVEL4_VECOFS = 0x00000200
const XCHAL_INTLEVEL4_VECTOR_VADDR = 0x40000200
const XCHAL_INTLEVEL4_VECTOR_PADDR = 0x40000200
const XCHAL_INTLEVEL5_VECOFS = 0x00000240
const XCHAL_INTLEVEL5_VECTOR_VADDR = 0x40000240
const XCHAL_INTLEVEL5_VECTOR_PADDR = 0x40000240
const XCHAL_INTLEVEL6_VECOFS = 0x00000280
const XCHAL_INTLEVEL6_VECTOR_VADDR = 0x40000280
const XCHAL_INTLEVEL6_VECTOR_PADDR = 0x40000280
const XCHAL_NMI_VECOFS = 0x000002C0
const XCHAL_NMI_VECTOR_VADDR = 0x400002C0
const XCHAL_NMI_VECTOR_PADDR = 0x400002C0
const XCHAL_HAVE_DEBUG_ERI = 1
const XCHAL_HAVE_DEBUG_APB = 0
const XCHAL_HAVE_DEBUG_JTAG = 1
const XCHAL_HAVE_OCD = 1
const XCHAL_NUM_IBREAK = 2
const XCHAL_NUM_DBREAK = 2
const XCHAL_HAVE_OCD_DIR_ARRAY = 0
const XCHAL_HAVE_OCD_LS32DDR = 1
const XCHAL_HAVE_TRAX = 1
const XCHAL_TRAX_MEM_SIZE = 16384
const XCHAL_TRAX_MEM_SHAREABLE = 1
const XCHAL_TRAX_ATB_WIDTH = 0
const XCHAL_TRAX_TIME_WIDTH = 0
const XCHAL_NUM_PERF_COUNTERS = 2
const XCHAL_HAVE_TLBS = 1
const XCHAL_HAVE_SPANNING_WAY = 1
const XCHAL_SPANNING_WAY = 0
const XCHAL_HAVE_IDENTITY_MAP = 1
const XCHAL_HAVE_CACHEATTR = 0
const XCHAL_HAVE_MIMIC_CACHEATTR = 1
const XCHAL_HAVE_XLT_CACHEATTR = 0
const XCHAL_HAVE_PTP_MMU = 0
const XCHAL_MMU_ASID_BITS = 0
const XCHAL_MMU_RINGS = 1
const XCHAL_MMU_RING_BITS = 0
const XCHAL_HAVE_MPU = 0
const XCHAL_MPU_ENTRIES = 0
const XCHAL_MPU_ALIGN_REQ = 1
const XCHAL_MPU_BACKGROUND_ENTRIES = 0
const XCHAL_MPU_BG_CACHEADRDIS = 0
const XCHAL_MPU_ALIGN_BITS = 0
const XCHAL_MPU_ALIGN = 0
const XCHAL_CA_BYPASS = 2
const XCHAL_CA_BYPASSBUF = 6
const XCHAL_CA_WRITETHRU = 1
const XCHAL_CA_WRITEBACK = 2
const XCHAL_HAVE_CA_WRITEBACK_NOALLOC = 0
const XCHAL_CA_WRITEBACK_NOALLOC = 2
const XCHAL_CA_BYPASS_RW = 0
const XCHAL_CA_WRITETHRU_RW = 0
const XCHAL_CA_WRITEBACK_RW = 0
const XCHAL_CA_WRITEBACK_NOALLOC_RW = 0
const XCHAL_CA_ILLEGAL = 15
const XCHAL_CA_ISOLATE = 0
const XCHAL_MMU_ASID_INVALID = 0
const XCHAL_MMU_ASID_KERNEL = 0
const XCHAL_MMU_SR_BITS = 0
const XCHAL_MMU_CA_BITS = 4
const XCHAL_MMU_MAX_PTE_PAGE_SIZE = 29
const XCHAL_MMU_MIN_PTE_PAGE_SIZE = 29
const XCHAL_ITLB_WAY_BITS = 0
const XCHAL_ITLB_WAYS = 1
const XCHAL_ITLB_ARF_WAYS = 0
const XCHAL_ITLB_SETS = 1
const XCHAL_ITLB_WAY0_SET = 0
const XCHAL_ITLB_ARF_SETS = 0
const XCHAL_ITLB_MINWIRED_SETS = 0
const XCHAL_ITLB_SET0_WAY = 0
const XCHAL_ITLB_SET0_WAYS = 1
const XCHAL_ITLB_SET0_ENTRIES_LOG2 = 3
const XCHAL_ITLB_SET0_ENTRIES = 8
const XCHAL_ITLB_SET0_ARF = 0
const XCHAL_ITLB_SET0_PAGESIZES = 1
const XCHAL_ITLB_SET0_PAGESZ_BITS = 0
const XCHAL_ITLB_SET0_PAGESZ_LOG2_MIN = 29
const XCHAL_ITLB_SET0_PAGESZ_LOG2_MAX = 29
const XCHAL_ITLB_SET0_PAGESZ_LOG2_LIST = 29
const XCHAL_ITLB_SET0_ASID_CONSTMASK = 0
const XCHAL_ITLB_SET0_VPN_CONSTMASK = 0x00000000
const XCHAL_ITLB_SET0_PPN_CONSTMASK = 0xE0000000
const XCHAL_ITLB_SET0_CA_CONSTMASK = 0
const XCHAL_ITLB_SET0_ASID_RESET = 0
const XCHAL_ITLB_SET0_VPN_RESET = 0
const XCHAL_ITLB_SET0_PPN_RESET = 0
const XCHAL_ITLB_SET0_CA_RESET = 1
const XCHAL_ITLB_SET0_E0_VPN_CONST = 0x00000000
const XCHAL_ITLB_SET0_E1_VPN_CONST = 0x20000000
const XCHAL_ITLB_SET0_E2_VPN_CONST = 0x40000000
const XCHAL_ITLB_SET0_E3_VPN_CONST = 0x60000000
const XCHAL_ITLB_SET0_E4_VPN_CONST = 0x80000000
const XCHAL_ITLB_SET0_E5_VPN_CONST = 0xA0000000
const XCHAL_ITLB_SET0_E6_VPN_CONST = 0xC0000000
const XCHAL_ITLB_SET0_E7_VPN_CONST = 0xE0000000
const XCHAL_ITLB_SET0_E0_PPN_CONST = 0x00000000
const XCHAL_ITLB_SET0_E1_PPN_CONST = 0x20000000
const XCHAL_ITLB_SET0_E2_PPN_CONST = 0x40000000
const XCHAL_ITLB_SET0_E3_PPN_CONST = 0x60000000
const XCHAL_ITLB_SET0_E4_PPN_CONST = 0x80000000
const XCHAL_ITLB_SET0_E5_PPN_CONST = 0xA0000000
const XCHAL_ITLB_SET0_E6_PPN_CONST = 0xC0000000
const XCHAL_ITLB_SET0_E7_PPN_CONST = 0xE0000000
const XCHAL_ITLB_SET0_E0_CA_RESET = 0x02
const XCHAL_ITLB_SET0_E1_CA_RESET = 0x02
const XCHAL_ITLB_SET0_E2_CA_RESET = 0x02
const XCHAL_ITLB_SET0_E3_CA_RESET = 0x02
const XCHAL_ITLB_SET0_E4_CA_RESET = 0x02
const XCHAL_ITLB_SET0_E5_CA_RESET = 0x02
const XCHAL_ITLB_SET0_E6_CA_RESET = 0x02
const XCHAL_ITLB_SET0_E7_CA_RESET = 0x02
const XCHAL_DTLB_WAY_BITS = 0
const XCHAL_DTLB_WAYS = 1
const XCHAL_DTLB_ARF_WAYS = 0
const XCHAL_DTLB_SETS = 1
const XCHAL_DTLB_WAY0_SET = 0
const XCHAL_DTLB_ARF_SETS = 0
const XCHAL_DTLB_MINWIRED_SETS = 0
const XCHAL_DTLB_SET0_WAY = 0
const XCHAL_DTLB_SET0_WAYS = 1
const XCHAL_DTLB_SET0_ENTRIES_LOG2 = 3
const XCHAL_DTLB_SET0_ENTRIES = 8
const XCHAL_DTLB_SET0_ARF = 0
const XCHAL_DTLB_SET0_PAGESIZES = 1
const XCHAL_DTLB_SET0_PAGESZ_BITS = 0
const XCHAL_DTLB_SET0_PAGESZ_LOG2_MIN = 29
const XCHAL_DTLB_SET0_PAGESZ_LOG2_MAX = 29
const XCHAL_DTLB_SET0_PAGESZ_LOG2_LIST = 29
const XCHAL_DTLB_SET0_ASID_CONSTMASK = 0
const XCHAL_DTLB_SET0_VPN_CONSTMASK = 0x00000000
const XCHAL_DTLB_SET0_PPN_CONSTMASK = 0xE0000000
const XCHAL_DTLB_SET0_CA_CONSTMASK = 0
const XCHAL_DTLB_SET0_ASID_RESET = 0
const XCHAL_DTLB_SET0_VPN_RESET = 0
const XCHAL_DTLB_SET0_PPN_RESET = 0
const XCHAL_DTLB_SET0_CA_RESET = 1
const XCHAL_DTLB_SET0_E0_VPN_CONST = 0x00000000
const XCHAL_DTLB_SET0_E1_VPN_CONST = 0x20000000
const XCHAL_DTLB_SET0_E2_VPN_CONST = 0x40000000
const XCHAL_DTLB_SET0_E3_VPN_CONST = 0x60000000
const XCHAL_DTLB_SET0_E4_VPN_CONST = 0x80000000
const XCHAL_DTLB_SET0_E5_VPN_CONST = 0xA0000000
const XCHAL_DTLB_SET0_E6_VPN_CONST = 0xC0000000
const XCHAL_DTLB_SET0_E7_VPN_CONST = 0xE0000000
const XCHAL_DTLB_SET0_E0_PPN_CONST = 0x00000000
const XCHAL_DTLB_SET0_E1_PPN_CONST = 0x20000000
const XCHAL_DTLB_SET0_E2_PPN_CONST = 0x40000000
const XCHAL_DTLB_SET0_E3_PPN_CONST = 0x60000000
const XCHAL_DTLB_SET0_E4_PPN_CONST = 0x80000000
const XCHAL_DTLB_SET0_E5_PPN_CONST = 0xA0000000
const XCHAL_DTLB_SET0_E6_PPN_CONST = 0xC0000000
const XCHAL_DTLB_SET0_E7_PPN_CONST = 0xE0000000
const XCHAL_DTLB_SET0_E0_CA_RESET = 0x02
const XCHAL_DTLB_SET0_E1_CA_RESET = 0x02
const XCHAL_DTLB_SET0_E2_CA_RESET = 0x02
const XCHAL_DTLB_SET0_E3_CA_RESET = 0x02
const XCHAL_DTLB_SET0_E4_CA_RESET = 0x02
const XCHAL_DTLB_SET0_E5_CA_RESET = 0x02
const XCHAL_DTLB_SET0_E6_CA_RESET = 0x02
const XCHAL_DTLB_SET0_E7_CA_RESET = 0x02
const XCHAL_CP_NUM = 2
const XCHAL_CP_MAX = 4
const XCHAL_CP_MASK = 0x09
const XCHAL_CP_PORT_MASK = 0x00
const XCHAL_CP0_NAME = "FPU"
const XCHAL_CP0_SA_SIZE = 72
const XCHAL_CP0_SA_ALIGN = 4
const XCHAL_CP_ID_FPU = 0
const XCHAL_CP3_NAME = "cop_ai"
const XCHAL_CP3_SA_SIZE = 208
const XCHAL_CP3_SA_ALIGN = 16
const XCHAL_CP_ID_COP_AI = 3
const XCHAL_CP1_SA_SIZE = 0
const XCHAL_CP1_SA_ALIGN = 1
const XCHAL_CP2_SA_SIZE = 0
const XCHAL_CP2_SA_ALIGN = 1
const XCHAL_CP4_SA_SIZE = 0
const XCHAL_CP4_SA_ALIGN = 1
const XCHAL_CP5_SA_SIZE = 0
const XCHAL_CP5_SA_ALIGN = 1
const XCHAL_CP6_SA_SIZE = 0
const XCHAL_CP6_SA_ALIGN = 1
const XCHAL_CP7_SA_SIZE = 0
const XCHAL_CP7_SA_ALIGN = 1
const XCHAL_NCP_SA_SIZE = 36
const XCHAL_NCP_SA_ALIGN = 4
const XCHAL_TOTAL_SA_SIZE = 336
const XCHAL_TOTAL_SA_ALIGN = 16
const XCHAL_NCP_SA_NUM = 9
const XCHAL_CP0_SA_NUM = 18
const XCHAL_CP1_SA_NUM = 0
const XCHAL_CP2_SA_NUM = 0
const XCHAL_CP3_SA_NUM = 26
const XCHAL_CP4_SA_NUM = 0
const XCHAL_CP5_SA_NUM = 0
const XCHAL_CP6_SA_NUM = 0
const XCHAL_CP7_SA_NUM = 0
const XCHAL_ERRATUM_453 = 0
const XCHAL_ERRATUM_497 = 0
const XCHAL_ERRATUM_572 = 1
const XCHAL_HAVE_LE = 1
const XCHAL_NUM_LOWPRI_LEVELS = 1
const XCHAL_INTLEVEL0_MASK = 0x00000000
const XCHAL_INTLEVEL8_MASK = 0x00000000
const XCHAL_INTLEVEL9_MASK = 0x00000000
const XCHAL_INTLEVEL10_MASK = 0x00000000
const XCHAL_INTLEVEL11_MASK = 0x00000000
const XCHAL_INTLEVEL12_MASK = 0x00000000
const XCHAL_INTLEVEL13_MASK = 0x00000000
const XCHAL_INTLEVEL14_MASK = 0x00000000
const XCHAL_INTLEVEL15_MASK = 0x00000000
const XCHAL_INTLEVEL0_ANDBELOW_MASK = 0x00000000
const XCHAL_EXCCAUSE_ILLEGAL_INSTRUCTION = 0
const XCHAL_EXCCAUSE_SYSTEM_CALL = 1
const XCHAL_EXCCAUSE_INSTRUCTION_FETCH_ERROR = 2
const XCHAL_EXCCAUSE_LOAD_STORE_ERROR = 3
const XCHAL_EXCCAUSE_LEVEL1_INTERRUPT = 4
const XCHAL_EXCCAUSE_ALLOCA = 5
const XCHAL_EXCCAUSE_INTEGER_DIVIDE_BY_ZERO = 6
const XCHAL_EXCCAUSE_SPECULATION = 7
const XCHAL_EXCCAUSE_PRIVILEGED = 8
const XCHAL_EXCCAUSE_UNALIGNED = 9
const XCHAL_EXCCAUSE_ITLB_MISS = 16
const XCHAL_EXCCAUSE_ITLB_MULTIHIT = 17
const XCHAL_EXCCAUSE_ITLB_PRIVILEGE = 18
const XCHAL_EXCCAUSE_ITLB_SIZE_RESTRICTION = 19
const XCHAL_EXCCAUSE_FETCH_CACHE_ATTRIBUTE = 20
const XCHAL_EXCCAUSE_DTLB_MISS = 24
const XCHAL_EXCCAUSE_DTLB_MULTIHIT = 25
const XCHAL_EXCCAUSE_DTLB_PRIVILEGE = 26
const XCHAL_EXCCAUSE_DTLB_SIZE_RESTRICTION = 27
const XCHAL_EXCCAUSE_LOAD_CACHE_ATTRIBUTE = 28
const XCHAL_EXCCAUSE_STORE_CACHE_ATTRIBUTE = 29
const XCHAL_EXCCAUSE_COPROCESSOR0_DISABLED = 32
const XCHAL_EXCCAUSE_COPROCESSOR1_DISABLED = 33
const XCHAL_EXCCAUSE_COPROCESSOR2_DISABLED = 34
const XCHAL_EXCCAUSE_COPROCESSOR3_DISABLED = 35
const XCHAL_EXCCAUSE_COPROCESSOR4_DISABLED = 36
const XCHAL_EXCCAUSE_COPROCESSOR5_DISABLED = 37
const XCHAL_EXCCAUSE_COPROCESSOR6_DISABLED = 38
const XCHAL_EXCCAUSE_COPROCESSOR7_DISABLED = 39
const XCHAL_DBREAKC_VALIDMASK = 0xC000003F
const XCHAL_DBREAKC_MASK_BITS = 6
const XCHAL_DBREAKC_MASK_NUM = 64
const XCHAL_DBREAKC_MASK_SHIFT = 0
const XCHAL_DBREAKC_MASK_MASK = 0x0000003F
const XCHAL_DBREAKC_LOADBREAK_BITS = 1
const XCHAL_DBREAKC_LOADBREAK_NUM = 2
const XCHAL_DBREAKC_LOADBREAK_SHIFT = 30
const XCHAL_DBREAKC_LOADBREAK_MASK = 0x40000000
const XCHAL_DBREAKC_STOREBREAK_BITS = 1
const XCHAL_DBREAKC_STOREBREAK_NUM = 2
const XCHAL_DBREAKC_STOREBREAK_SHIFT = 31
const XCHAL_DBREAKC_STOREBREAK_MASK = 0x80000000
const XCHAL_PS_VALIDMASK = 0x00070F3F
const XCHAL_PS_INTLEVEL_BITS = 4
const XCHAL_PS_INTLEVEL_NUM = 16
const XCHAL_PS_INTLEVEL_SHIFT = 0
const XCHAL_PS_INTLEVEL_MASK = 0x0000000F
const XCHAL_PS_EXCM_BITS = 1
const XCHAL_PS_EXCM_NUM = 2
const XCHAL_PS_EXCM_SHIFT = 4
const XCHAL_PS_EXCM_MASK = 0x00000010
const XCHAL_PS_UM_BITS = 1
const XCHAL_PS_UM_NUM = 2
const XCHAL_PS_UM_SHIFT = 5
const XCHAL_PS_UM_MASK = 0x00000020
const XCHAL_PS_RING_BITS = 2
const XCHAL_PS_RING_NUM = 4
const XCHAL_PS_RING_SHIFT = 6
const XCHAL_PS_RING_MASK = 0x000000C0
const XCHAL_PS_OWB_BITS = 4
const XCHAL_PS_OWB_NUM = 16
const XCHAL_PS_OWB_SHIFT = 8
const XCHAL_PS_OWB_MASK = 0x00000F00
const XCHAL_PS_CALLINC_BITS = 2
const XCHAL_PS_CALLINC_NUM = 4
const XCHAL_PS_CALLINC_SHIFT = 16
const XCHAL_PS_CALLINC_MASK = 0x00030000
const XCHAL_PS_WOE_BITS = 1
const XCHAL_PS_WOE_NUM = 2
const XCHAL_PS_WOE_SHIFT = 18
const XCHAL_PS_WOE_MASK = 0x00040000
const XCHAL_EXCCAUSE_VALIDMASK = 0x0000003F
const XCHAL_EXCCAUSE_BITS = 6
const XCHAL_EXCCAUSE_NUM = 64
const XCHAL_EXCCAUSE_SHIFT = 0
const XCHAL_EXCCAUSE_MASK = 0x0000003F
const XCHAL_DEBUGCAUSE_VALIDMASK = 0x0000003F
const XCHAL_DEBUGCAUSE_ICOUNT_BITS = 1
const XCHAL_DEBUGCAUSE_ICOUNT_NUM = 2
const XCHAL_DEBUGCAUSE_ICOUNT_SHIFT = 0
const XCHAL_DEBUGCAUSE_ICOUNT_MASK = 0x00000001
const XCHAL_DEBUGCAUSE_IBREAK_BITS = 1
const XCHAL_DEBUGCAUSE_IBREAK_NUM = 2
const XCHAL_DEBUGCAUSE_IBREAK_SHIFT = 1
const XCHAL_DEBUGCAUSE_IBREAK_MASK = 0x00000002
const XCHAL_DEBUGCAUSE_DBREAK_BITS = 1
const XCHAL_DEBUGCAUSE_DBREAK_NUM = 2
const XCHAL_DEBUGCAUSE_DBREAK_SHIFT = 2
const XCHAL_DEBUGCAUSE_DBREAK_MASK = 0x00000004
const XCHAL_DEBUGCAUSE_BREAK_BITS = 1
const XCHAL_DEBUGCAUSE_BREAK_NUM = 2
const XCHAL_DEBUGCAUSE_BREAK_SHIFT = 3
const XCHAL_DEBUGCAUSE_BREAK_MASK = 0x00000008
const XCHAL_DEBUGCAUSE_BREAKN_BITS = 1
const XCHAL_DEBUGCAUSE_BREAKN_NUM = 2
const XCHAL_DEBUGCAUSE_BREAKN_SHIFT = 4
const XCHAL_DEBUGCAUSE_BREAKN_MASK = 0x00000010
const XCHAL_DEBUGCAUSE_DEBUGINT_BITS = 1
const XCHAL_DEBUGCAUSE_DEBUGINT_NUM = 2
const XCHAL_DEBUGCAUSE_DEBUGINT_SHIFT = 5
const XCHAL_DEBUGCAUSE_DEBUGINT_MASK = 0x00000020
const XCHAL_CACHE_PREFCTL_DEFAULT = 0x01044
const XCHAL_ICACHE_TAG_V_SHIFT = 0
const XCHAL_ICACHE_TAG_V = 0x1
const XCHAL_ICACHE_TAG_F_SHIFT = 0
const XCHAL_ICACHE_TAG_F = 0
const XCHAL_ICACHE_TAG_L = 0
const XCHAL_DCACHE_TAG_V_SHIFT = 0
const XCHAL_DCACHE_TAG_V = 0x1
const XCHAL_DCACHE_TAG_F_SHIFT = 0
const XCHAL_DCACHE_TAG_F = 0
const XCHAL_DCACHE_TAG_D = 0
const XCHAL_DCACHE_TAG_L = 0
const X_MEMCTL_SNOOP_EN = 0x00
const X_MEMCTL_L0IBUF_EN = 0x01
const XCHAL_CP1_NAME = 0
const XCHAL_CP1_SA_CONTENTS_LIBDB_NUM = 0
const XCHAL_CP2_NAME = 0
const XCHAL_CP2_SA_CONTENTS_LIBDB_NUM = 0
const XCHAL_CP4_NAME = 0
const XCHAL_CP4_SA_CONTENTS_LIBDB_NUM = 0
const XCHAL_CP5_NAME = 0
const XCHAL_CP5_SA_CONTENTS_LIBDB_NUM = 0
const XCHAL_CP6_NAME = 0
const XCHAL_CP6_SA_CONTENTS_LIBDB_NUM = 0
const XCHAL_CP7_NAME = 0
const XCHAL_CP7_SA_CONTENTS_LIBDB_NUM = 0
const XCHAL_INST_ILLN = 0xF06D
const XCHAL_INST_ILLN_BYTE0 = 0x6D
const XCHAL_INST_ILLN_BYTE1 = 0xF0
const XTHAL_INST_ILL = 0x000000
const XSHAL_USE_ABSOLUTE_LITERALS = 0
const XSHAL_HAVE_TEXT_SECTION_LITERALS = 1
const XTHAL_ABI_WINDOWED = 0
const XTHAL_ABI_CALL0 = 1
const XTHAL_CLIB_NEWLIB = 0
const XTHAL_CLIB_UCLIBC = 1
const XTHAL_CLIB_XCLIB = 2
const XSHAL_USE_FLOATING_POINT = 1
const XSHAL_FLOATING_POINT_ABI = 0
const XSHAL_FUNC_SAFETY_ENABLED = 0
const XSHAL_IOBLOCK_CACHED_VADDR = 0x70000000
const XSHAL_IOBLOCK_CACHED_PADDR = 0x70000000
const XSHAL_IOBLOCK_CACHED_SIZE = 0x0E000000
const XSHAL_IOBLOCK_BYPASS_VADDR = 0x90000000
const XSHAL_IOBLOCK_BYPASS_PADDR = 0x90000000
const XSHAL_IOBLOCK_BYPASS_SIZE = 0x0E000000
const XSHAL_ROM_VADDR = 0x50000000
const XSHAL_ROM_PADDR = 0x50000000
const XSHAL_ROM_SIZE = 0x01000000
const XSHAL_ROM_AVAIL_VADDR = 0x50000000
const XSHAL_ROM_AVAIL_VSIZE = 0x01000000
const XSHAL_RAM_VADDR = 0x60000000
const XSHAL_RAM_PADDR = 0x60000000
const XSHAL_RAM_VSIZE = 0x20000000
const XSHAL_RAM_PSIZE = 0x20000000
const XSHAL_RAM_AVAIL_VADDR = 0x60000000
const XSHAL_RAM_AVAIL_VSIZE = 0x20000000
const XSHAL_RAM_BYPASS_VADDR = 0xA0000000
const XSHAL_RAM_BYPASS_PADDR = 0xA0000000
const XSHAL_RAM_BYPASS_PSIZE = 0x20000000
const XSHAL_SIMIO_CACHED_VADDR = 0xC0000000
const XSHAL_SIMIO_BYPASS_VADDR = 0xC0000000
const XSHAL_SIMIO_PADDR = 0xC0000000
const XSHAL_SIMIO_SIZE = 0x20000000
const XSHAL_MAGIC_EXIT = 0x0
const XSHAL_ALLVALID_CACHEATTR_WRITEBACK = 0x22221112
const XSHAL_ALLVALID_CACHEATTR_WRITEALLOC = 0x22221112
const XSHAL_ALLVALID_CACHEATTR_WRITETHRU = 0x22221112
const XSHAL_ALLVALID_CACHEATTR_BYPASS = 0x22222222
const XSHAL_STRICT_CACHEATTR_WRITEBACK = 0xFFFF111F
const XSHAL_STRICT_CACHEATTR_WRITEALLOC = 0xFFFF111F
const XSHAL_STRICT_CACHEATTR_WRITETHRU = 0xFFFF111F
const XSHAL_STRICT_CACHEATTR_BYPASS = 0xFFFF222F
const XSHAL_TRAPNULL_CACHEATTR_WRITEBACK = 0x2222111F
const XSHAL_TRAPNULL_CACHEATTR_WRITEALLOC = 0x2222111F
const XSHAL_TRAPNULL_CACHEATTR_WRITETHRU = 0x2222111F
const XSHAL_TRAPNULL_CACHEATTR_BYPASS = 0x2222222F
const XSHAL_ISS_PIPE_REGIONS = 0
const XSHAL_ISS_SDRAM_REGIONS = 0
const XSHAL_XT2000_CACHEATTR_WRITEBACK = 0xFF22111F
const XSHAL_XT2000_CACHEATTR_WRITEALLOC = 0xFF22111F
const XSHAL_XT2000_CACHEATTR_WRITETHRU = 0xFF22111F
const XSHAL_XT2000_CACHEATTR_BYPASS = 0xFF22222F
const XSHAL_XT2000_PIPE_REGIONS = 0x00000000
const XSHAL_XT2000_SDRAM_REGIONS = 0x00000440
const XSHAL_VECTORS_PACKED = 0
const XSHAL_STATIC_VECTOR_SELECT = 1
const XSHAL_RESET_VECTOR_VADDR = 0x40000400
const XSHAL_RESET_VECTOR_PADDR = 0x40000400
const XSHAL_RESET_VECTOR_SIZE = 0x00000300
const XSHAL_RESET_VECTOR_ISROM = 0
const XSHAL_USER_VECTOR_SIZE = 0x00000038
const XSHAL_USER_VECTOR_ISROM = 0
const XSHAL_KERNEL_VECTOR_SIZE = 0x00000038
const XSHAL_KERNEL_VECTOR_ISROM = 0
const XSHAL_DOUBLEEXC_VECTOR_SIZE = 0x00000040
const XSHAL_DOUBLEEXC_VECTOR_ISROM = 0
const XSHAL_WINDOW_VECTORS_SIZE = 0x00000178
const XSHAL_WINDOW_VECTORS_ISROM = 0
const XSHAL_INTLEVEL2_VECTOR_SIZE = 0x00000038
const XSHAL_INTLEVEL2_VECTOR_ISROM = 0
const XSHAL_INTLEVEL3_VECTOR_SIZE = 0x00000038
const XSHAL_INTLEVEL3_VECTOR_ISROM = 0
const XSHAL_INTLEVEL4_VECTOR_SIZE = 0x00000038
const XSHAL_INTLEVEL4_VECTOR_ISROM = 0
const XSHAL_INTLEVEL5_VECTOR_SIZE = 0x00000038
const XSHAL_INTLEVEL5_VECTOR_ISROM = 0
const XSHAL_INTLEVEL6_VECTOR_SIZE = 0x00000038
const XSHAL_INTLEVEL6_VECTOR_ISROM = 0
const XSHAL_NMI_VECTOR_SIZE = 0x00000038
const XSHAL_NMI_VECTOR_ISROM = 0
const EXCCAUSE_EXCCAUSE_SHIFT = 0
const EXCCAUSE_EXCCAUSE_MASK = 0x3F
const EXCCAUSE_ILLEGAL = 0
const EXCCAUSE_SYSCALL = 1
const EXCCAUSE_INSTR_ERROR = 2
const EXCCAUSE_IFETCHERROR = 2
const EXCCAUSE_LOAD_STORE_ERROR = 3
const EXCCAUSE_LOADSTOREERROR = 3
const EXCCAUSE_LEVEL1_INTERRUPT = 4
const EXCCAUSE_LEVEL1INTERRUPT = 4
const EXCCAUSE_ALLOCA = 5
const EXCCAUSE_DIVIDE_BY_ZERO = 6
const EXCCAUSE_SPECULATION = 7
const EXCCAUSE_PC_ERROR = 7
const EXCCAUSE_PRIVILEGED = 8
const EXCCAUSE_UNALIGNED = 9
const EXCCAUSE_EXTREG_PRIVILEGE = 10
const EXCCAUSE_EXCLUSIVE_ERROR = 11
const EXCCAUSE_INSTR_DATA_ERROR = 12
const EXCCAUSE_LOAD_STORE_DATA_ERROR = 13
const EXCCAUSE_INSTR_ADDR_ERROR = 14
const EXCCAUSE_LOAD_STORE_ADDR_ERROR = 15
const EXCCAUSE_ITLB_MISS = 16
const EXCCAUSE_ITLB_MULTIHIT = 17
const EXCCAUSE_INSTR_RING = 18
const EXCCAUSE_INSTR_PROHIBITED = 20
const EXCCAUSE_DTLB_MISS = 24
const EXCCAUSE_DTLB_MULTIHIT = 25
const EXCCAUSE_LOAD_STORE_RING = 26
const EXCCAUSE_LOAD_PROHIBITED = 28
const EXCCAUSE_STORE_PROHIBITED = 29
const EXCCAUSE_CP0_DISABLED = 32
const EXCCAUSE_CP1_DISABLED = 33
const EXCCAUSE_CP2_DISABLED = 34
const EXCCAUSE_CP3_DISABLED = 35
const EXCCAUSE_CP4_DISABLED = 36
const EXCCAUSE_CP5_DISABLED = 37
const EXCCAUSE_CP6_DISABLED = 38
const EXCCAUSE_CP7_DISABLED = 39
const PS_WOE_SHIFT = 18
const PS_WOE_MASK = 0x00040000
const PS_CALLINC_SHIFT = 16
const PS_CALLINC_MASK = 0x00030000
const PS_OWB_SHIFT = 8
const PS_OWB_MASK = 0x00000F00
const PS_RING_SHIFT = 6
const PS_RING_MASK = 0x000000C0
const PS_UM_SHIFT = 5
const PS_UM_MASK = 0x00000020
const PS_EXCM_SHIFT = 4
const PS_EXCM_MASK = 0x00000010
const PS_INTLEVEL_SHIFT = 0
const PS_INTLEVEL_MASK = 0x0000000F
const DBREAKC_MASK_SHIFT = 0
const DBREAKC_MASK_MASK = 0x0000003F
const DBREAKC_LOADBREAK_SHIFT = 30
const DBREAKC_LOADBREAK_MASK = 0x40000000
const DBREAKC_STOREBREAK_SHIFT = 31
const DBREAKC_STOREBREAK_MASK = 0x80000000
const DEBUGCAUSE_DEBUGINT_SHIFT = 5
const DEBUGCAUSE_DEBUGINT_MASK = 0x20
const DEBUGCAUSE_BREAKN_SHIFT = 4
const DEBUGCAUSE_BREAKN_MASK = 0x10
const DEBUGCAUSE_BREAK_SHIFT = 3
const DEBUGCAUSE_BREAK_MASK = 0x08
const DEBUGCAUSE_DBREAK_SHIFT = 2
const DEBUGCAUSE_DBREAK_MASK = 0x04
const DEBUGCAUSE_IBREAK_SHIFT = 1
const DEBUGCAUSE_IBREAK_MASK = 0x02
const DEBUGCAUSE_ICOUNT_SHIFT = 0
const DEBUGCAUSE_ICOUNT_MASK = 0x01
const MESR_MEME = 0x00000001
const MESR_MEME_SHIFT = 0
const MESR_DME = 0x00000002
const MESR_DME_SHIFT = 1
const MESR_RCE = 0x00000010
const MESR_RCE_SHIFT = 4
const MESR_ERRENAB = 0x00000100
const MESR_ERRENAB_SHIFT = 8
const MESR_ERRTEST = 0x00000200
const MESR_ERRTEST_SHIFT = 9
const MESR_DATEXC = 0x00000400
const MESR_DATEXC_SHIFT = 10
const MESR_INSEXC = 0x00000800
const MESR_INSEXC_SHIFT = 11
const MESR_WAYNUM_SHIFT = 16
const MESR_ACCTYPE_SHIFT = 20
const MESR_MEMTYPE_SHIFT = 24
const MESR_ERRTYPE_SHIFT = 30
const MEMCTL_SNOOP_EN_SHIFT = 1
const MEMCTL_SNOOP_EN = 0x02
const MEMCTL_L0IBUF_EN_SHIFT = 0
const MEMCTL_L0IBUF_EN = 0x01
const MEMCTL_INV_EN_SHIFT = 23
const MEMCTL_INV_EN = 0x00800000
const MEMCTL_DCWU_SHIFT = 8
const MEMCTL_DCWU_BITS = 5
const MEMCTL_DCWA_SHIFT = 13
const MEMCTL_DCWA_BITS = 5
const MEMCTL_ICWU_SHIFT = 18
const MEMCTL_ICWU_BITS = 5
const MEMCTL_DCWU_MASK = 0x00001F00
const MEMCTL_DCWA_MASK = 0x0003E000
const MEMCTL_ICWU_MASK = 0x007C0000
const CALL0_ABI = 0
const KERNELSTACKSIZE = 1024
const XT_CP0_SA = 0
const XT_CPENABLE = 0
const XT_CPSTORED = 2
const XT_CP_CS_ST = 4
const XT_CP_ASA = 8
const CORE_ID_REGVAL_PRO = 0xCDCD
const CORE_ID_REGVAL_APP = 0xABAB
const STK_INTEXC_EXTRA = 0
const XT_USE_THREAD_SAFE_CLIB = 1
const XT_HAVE_THREAD_SAFE_CLIB = 1
const XT_USER_SIZE = 0x400
const ConfigXT_SIMULATOR = 0
const ConfigXT_BOARD = 1
const ConfigXT_INTEXC_HOOKS = 0
const ConfigBENCHMARK = 0
const ConfigUSE_PORT_OPTIMISED_TASK_SELECTION = 0
const ConfigUSE_NEWLIB_REENTRANT = 1
const ConfigINCLUDE_FREERTOS_TASK_C_ADDITIONS_H = 1
const INCLUDE_xTaskDelayUntil = 1
const INCLUDE_uxTaskGetStackHighWaterMark2 = 1
const ConfigSTACK_ALIGNMENT = 16
const ConfigUSE_PREEMPTION = 1
const ConfigUSE_TIME_SLICING = 1
const ConfigUSE_16_BIT_TICKS = 0
const ConfigIDLE_SHOULD_YIELD = 0
const ConfigKERNEL_INTERRUPT_PRIORITY = 1
const ConfigUSE_MUTEXES = 1
const ConfigUSE_RECURSIVE_MUTEXES = 1
const ConfigUSE_COUNTING_SEMAPHORES = 1
const ConfigUSE_QUEUE_SETS = 1
const ConfigUSE_TASK_NOTIFICATIONS = 1
const ConfigENABLE_BACKWARD_COMPATIBILITY = 0
const ConfigSUPPORT_STATIC_ALLOCATION = 1
const ConfigSUPPORT_DYNAMIC_ALLOCATION = 1
const ConfigAPPLICATION_ALLOCATED_HEAP = 1
const ConfigSTACK_ALLOCATION_FROM_SEPARATE_HEAP = 0
const ConfigUSE_IDLE_HOOK = 0
const ConfigUSE_TICK_HOOK = 0
const ConfigCHECK_FOR_STACK_OVERFLOW = 2
const ConfigRECORD_STACK_HIGH_ADDRESS = 1
const ConfigUSE_CO_ROUTINES = 0
const ConfigMAX_CO_ROUTINE_PRIORITIES = 2
const ConfigUSE_TIMERS = 1
const INCLUDE_vTaskPrioritySet = 1
const INCLUDE_uxTaskPriorityGet = 1
const INCLUDE_vTaskDelete = 1
const INCLUDE_vTaskSuspend = 1
const INCLUDE_vTaskDelay = 1
const INCLUDE_xTaskGetIdleTaskHandle = 1
const INCLUDE_xTaskAbortDelay = 1
const INCLUDE_xSemaphoreGetMutexHolder = 1
const INCLUDE_xTaskGetHandle = 1
const INCLUDE_uxTaskGetStackHighWaterMark = 1
const INCLUDE_eTaskGetState = 1
const INCLUDE_xTaskResumeFromISR = 1
const INCLUDE_xTimerPendFunctionCall = 1
const INCLUDE_xTaskGetSchedulerState = 1
const INCLUDE_xTaskGetCurrentTaskHandle = 1
const ConfigTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS = 1
const ConfigCHECK_MUTEX_GIVEN_BY_OWNER = 1
const PdFREERTOS_ERRNO_NONE = 0
const PdFREERTOS_ERRNO_ENOENT = 2
const PdFREERTOS_ERRNO_EINTR = 4
const PdFREERTOS_ERRNO_EIO = 5
const PdFREERTOS_ERRNO_ENXIO = 6
const PdFREERTOS_ERRNO_EBADF = 9
const PdFREERTOS_ERRNO_EAGAIN = 11
const PdFREERTOS_ERRNO_EWOULDBLOCK = 11
const PdFREERTOS_ERRNO_ENOMEM = 12
const PdFREERTOS_ERRNO_EACCES = 13
const PdFREERTOS_ERRNO_EFAULT = 14
const PdFREERTOS_ERRNO_EBUSY = 16
const PdFREERTOS_ERRNO_EEXIST = 17
const PdFREERTOS_ERRNO_EXDEV = 18
const PdFREERTOS_ERRNO_ENODEV = 19
const PdFREERTOS_ERRNO_ENOTDIR = 20
const PdFREERTOS_ERRNO_EISDIR = 21
const PdFREERTOS_ERRNO_EINVAL = 22
const PdFREERTOS_ERRNO_ENOSPC = 28
const PdFREERTOS_ERRNO_ESPIPE = 29
const PdFREERTOS_ERRNO_EROFS = 30
const PdFREERTOS_ERRNO_EUNATCH = 42
const PdFREERTOS_ERRNO_EBADE = 50
const PdFREERTOS_ERRNO_EFTYPE = 79
const PdFREERTOS_ERRNO_ENMFILE = 89
const PdFREERTOS_ERRNO_ENOTEMPTY = 90
const PdFREERTOS_ERRNO_ENAMETOOLONG = 91
const PdFREERTOS_ERRNO_EOPNOTSUPP = 95
const PdFREERTOS_ERRNO_ENOBUFS = 105
const PdFREERTOS_ERRNO_ENOPROTOOPT = 109
const PdFREERTOS_ERRNO_EADDRINUSE = 112
const PdFREERTOS_ERRNO_ETIMEDOUT = 116
const PdFREERTOS_ERRNO_EINPROGRESS = 119
const PdFREERTOS_ERRNO_EALREADY = 120
const PdFREERTOS_ERRNO_EADDRNOTAVAIL = 125
const PdFREERTOS_ERRNO_EISCONN = 127
const PdFREERTOS_ERRNO_ENOTCONN = 128
const PdFREERTOS_ERRNO_ENOMEDIUM = 135
const PdFREERTOS_ERRNO_EILSEQ = 138
const PdFREERTOS_ERRNO_ECANCELED = 140
const PdFREERTOS_LITTLE_ENDIAN = 0
const PdFREERTOS_BIG_ENDIAN = 1
const LBEG = 0
const LEND = 1
const LCOUNT = 2
const SAR = 3
const BR = 4
const SCOMPARE1 = 12
const ACCLO = 16
const ACCHI = 17
const MR_0 = 32
const MR_1 = 33
const MR_2 = 34
const MR_3 = 35
const WINDOWBASE = 72
const WINDOWSTART = 73
const IBREAKENABLE = 96
const MEMCTL = 97
const ATOMCTL = 99
const DDR = 104
const IBREAKA_0 = 128
const IBREAKA_1 = 129
const DBREAKA_0 = 144
const DBREAKA_1 = 145
const DBREAKC_0 = 160
const DBREAKC_1 = 161
const CONFIGID0 = 176
const EPC_1 = 177
const EPC_2 = 178
const EPC_3 = 179
const EPC_4 = 180
const EPC_5 = 181
const EPC_6 = 182
const EPC_7 = 183
const DEPC = 192
const EPS_2 = 194
const EPS_3 = 195
const EPS_4 = 196
const EPS_5 = 197
const EPS_6 = 198
const EPS_7 = 199
const CONFIGID1 = 208
const EXCSAVE_1 = 209
const EXCSAVE_2 = 210
const EXCSAVE_3 = 211
const EXCSAVE_4 = 212
const EXCSAVE_5 = 213
const EXCSAVE_6 = 214
const EXCSAVE_7 = 215
const CPENABLE = 224
const INTERRUPT = 226
const INTENABLE = 228
const PS = 230
const VECBASE = 231
const EXCCAUSE = 232
const DEBUGCAUSE = 233
const CCOUNT = 234
const PRID = 235
const ICOUNT = 236
const ICOUNTLEVEL = 237
const EXCVADDR = 238
const CCOMPARE_0 = 240
const CCOMPARE_1 = 241
const CCOMPARE_2 = 242
const MISC_REG_0 = 244
const MISC_REG_1 = 245
const MISC_REG_2 = 246
const MISC_REG_3 = 247
const MR = 32
const IBREAKA = 128
const DBREAKA = 144
const DBREAKC = 160
const EPC = 176
const EPS = 192
const EXCSAVE = 208
const CCOMPARE = 240
const INTREAD = 226
const INTSET = 226
const INTCLEAR = 227
const CORE_STATE_SIGNATURE = 0xB1C5AFED
const XTOS_KEEPON_MEM = 0x00000100
const XTOS_KEEPON_MEM_SHIFT = 8
const XTOS_KEEPON_DEBUG = 0x00001000
const XTOS_KEEPON_DEBUG_SHIFT = 12
const XTOS_IDMA_NO_WAIT = 0x00010000
const XTOS_IDMA_WAIT_STANDBY = 0x00020000
const XTOS_COREF_PSO = 0x00000001
const XTOS_COREF_PSO_SHIFT = 0
const EXTRA_SAVE_AREA_SIZE = 32
const BASE_SAVE_AREA_SIZE = 16
const BASE_AREA_SP_OFFSET = 12
const ESP_CPU_INTR_DESC_FLAG_SPECIAL = 0x01
const ESP_CPU_INTR_DESC_FLAG_RESVD = 0x02
const SPINLOCK_FREE = 0xB33FFFFF
const SPINLOCK_NO_WAIT = 0
const SPINLOCK_OWNER_ID_0 = 0xCDCD
const SPINLOCK_OWNER_ID_1 = 0xABAB
const X__PRI_8_LENGTH_MODIFIER__ = "hh"
const X__PRI_64_LENGTH_MODIFIER__ = "ll"
const X__SCN_64_LENGTH_MODIFIER__ = "ll"
const X__PRI_MAX_LENGTH_MODIFIER__ = "j"
const X__SCN_MAX_LENGTH_MODIFIER__ = "j"
const PRId16 = "hd"
const PRIi16 = "hi"
const PRIo16 = "ho"
const PRIu16 = "hu"
const PRIx16 = "hx"
const PRIX16 = "hX"
const PRId32 = "d"
const PRIi32 = "i"
const PRIo32 = "o"
const PRIu32 = "u"
const PRIx32 = "x"
const PRIX32 = "X"
const PRIdPTR = "ld"
const PRIiPTR = "li"
const PRIoPTR = "lo"
const PRIuPTR = "lu"
const PRIxPTR = "lx"
const PRIXPTR = "lX"
const SCNd16 = "hd"
const SCNi16 = "hi"
const SCNo16 = "ho"
const SCNu16 = "hu"
const SCNx16 = "hx"
const SCNd32 = "d"
const SCNi32 = "i"
const SCNo32 = "o"
const SCNu32 = "u"
const SCNx32 = "x"
const SCNdPTR = "ld"
const SCNiPTR = "li"
const SCNoPTR = "lo"
const SCNuPTR = "lu"
const SCNxPTR = "lx"
const ESP_IDF_VERSION_MAJOR = 5
const ESP_IDF_VERSION_MINOR = 4
const ESP_IDF_VERSION_PATCH = 2
const X__DARWIN_CLK_TCK = 100
const MB_LEN_MAX = 6
const CHAR_BIT = 8
const SCHAR_MAX = 127
const UCHAR_MAX = 255
const CHAR_MAX = 127
const USHRT_MAX = 65535
const SHRT_MAX = 32767
const UINT_MAX = 0xffffffff
const INT_MAX = 2147483647
const LONG_BIT = 64
const WORD_BIT = 32
const CHILD_MAX = 266
const LINK_MAX = 32767
const MAX_CANON = 1024
const MAX_INPUT = 1024
const NAME_MAX = 255
const NGROUPS_MAX = 16
const OPEN_MAX = 10240
const PATH_MAX = 1024
const PIPE_BUF = 512
const BC_BASE_MAX = 99
const BC_DIM_MAX = 2048
const BC_SCALE_MAX = 99
const BC_STRING_MAX = 1000
const CHARCLASS_NAME_MAX = 14
const COLL_WEIGHTS_MAX = 2
const EQUIV_CLASS_MAX = 2
const EXPR_NEST_MAX = 32
const LINE_MAX = 2048
const RE_DUP_MAX = 255
const NZERO = 20
const X_POSIX_ARG_MAX = 4096
const X_POSIX_CHILD_MAX = 25
const X_POSIX_LINK_MAX = 8
const X_POSIX_MAX_CANON = 255
const X_POSIX_MAX_INPUT = 255
const X_POSIX_NAME_MAX = 14
const X_POSIX_NGROUPS_MAX = 8
const X_POSIX_OPEN_MAX = 20
const X_POSIX_PATH_MAX = 256
const X_POSIX_PIPE_BUF = 512
const X_POSIX_SSIZE_MAX = 32767
const X_POSIX_STREAM_MAX = 8
const X_POSIX_TZNAME_MAX = 6
const X_POSIX2_BC_BASE_MAX = 99
const X_POSIX2_BC_DIM_MAX = 2048
const X_POSIX2_BC_SCALE_MAX = 99
const X_POSIX2_BC_STRING_MAX = 1000
const X_POSIX2_EQUIV_CLASS_MAX = 2
const X_POSIX2_EXPR_NEST_MAX = 32
const X_POSIX2_LINE_MAX = 2048
const X_POSIX2_RE_DUP_MAX = 255
const X_POSIX_AIO_LISTIO_MAX = 2
const X_POSIX_AIO_MAX = 1
const X_POSIX_DELAYTIMER_MAX = 32
const X_POSIX_MQ_OPEN_MAX = 8
const X_POSIX_MQ_PRIO_MAX = 32
const X_POSIX_RTSIG_MAX = 8
const X_POSIX_SEM_NSEMS_MAX = 256
const X_POSIX_SEM_VALUE_MAX = 32767
const X_POSIX_SIGQUEUE_MAX = 32
const X_POSIX_TIMER_MAX = 32
const X_POSIX_CLOCKRES_MIN = 20000000
const X_POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4
const X_POSIX_THREAD_KEYS_MAX = 128
const X_POSIX_THREAD_THREADS_MAX = 64
const PTHREAD_DESTRUCTOR_ITERATIONS = 4
const PTHREAD_KEYS_MAX = 512
const PTHREAD_STACK_MIN = 16384
const X_POSIX_HOST_NAME_MAX = 255
const X_POSIX_LOGIN_NAME_MAX = 9
const X_POSIX_SS_REPL_MAX = 4
const X_POSIX_SYMLINK_MAX = 255
const X_POSIX_SYMLOOP_MAX = 8
const X_POSIX_TRACE_EVENT_NAME_MAX = 30
const X_POSIX_TRACE_NAME_MAX = 8
const X_POSIX_TRACE_SYS_MAX = 8
const X_POSIX_TRACE_USER_EVENT_MAX = 32
const X_POSIX_TTY_NAME_MAX = 9
const X_POSIX2_CHARCLASS_NAME_MAX = 14
const X_POSIX2_COLL_WEIGHTS_MAX = 2
const PASS_MAX = 128
const NL_ARGMAX = 9
const NL_LANGMAX = 14
const NL_MSGMAX = 32767
const NL_NMAX = 1
const NL_SETMAX = 255
const NL_TEXTMAX = 2048
const X_XOPEN_IOV_MAX = 16
const IOV_MAX = 1024
const X_XOPEN_NAME_MAX = 255
const X_XOPEN_PATH_MAX = 1024
const PortCRITICAL_NESTING_IN_TCB = 0
const PortBYTE_ALIGNMENT = 16
const PortTICK_TYPE_IS_ATOMIC = 1
const PortUSING_MPU_WRAPPERS = 0
const PortNUM_CONFIGURABLE_REGIONS = 1
const PortHAS_STACK_OVERFLOW_CHECKING = 0
const ConfigUSE_C_RUNTIME_TLS_SUPPORT = 1
const INCLUDE_xQueueGetMutexHolder = 0
const ConfigUSE_DAEMON_TASK_STARTUP_HOOK = 0
const ConfigUSE_APPLICATION_TASK_TAG = 0
const ConfigUSE_ALTERNATIVE_API = 0
const ConfigASSERT_DEFINED = 1
const ConfigPRECONDITION_DEFINED = 0
const ConfigUSE_MINI_LIST_ITEM = 1
const ConfigGENERATE_RUN_TIME_STATS = 0
const ConfigUSE_MALLOC_FAILED_HOOK = 0
const ConfigEXPECTED_IDLE_TIME_BEFORE_SLEEP = 2
const ConfigINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS = 0
const ConfigUSE_STATS_FORMATTING_FUNCTIONS = 0
const ConfigUSE_TRACE_FACILITY = 0
const ConfigUSE_POSIX_ERRNO = 0
const ConfigUSE_SB_COMPLETED_CALLBACK = 0
const ConfigINITIAL_TICK_COUNT = 0
const ConfigUSE_TASK_FPU_SUPPORT = 1
const ConfigENABLE_MPU = 0
const ConfigENABLE_FPU = 1
const ConfigENABLE_MVE = 0
const ConfigENABLE_TRUSTZONE = 1
const ConfigRUN_FREERTOS_SECURE_ONLY = 0
const ConfigRUN_ADDITIONAL_TESTS = 0
const TskKERNEL_VERSION_NUMBER = "V10.5.1"
const TskKERNEL_VERSION_MAJOR = 10
const TskKERNEL_VERSION_MINOR = 5
const TskKERNEL_VERSION_BUILD = 1
const ADC_DMA_DESC_ALIGN = 4

type IntLeast8T c.Int8T
type IntLeast16T c.Int16T
type IntLeast32T c.Int32T
type IntLeast64T c.Int64T
type UintLeast8T c.Uint8T
type UintLeast16T c.Uint16T
type UintLeast32T c.Uint32T
type UintLeast64T c.Uint64T
type IntFast8T c.Int8T
type IntFast16T c.Int16T
type IntFast32T c.Int32T
type IntFast64T c.Int64T
type UintFast8T c.Uint8T
type UintFast16T c.Uint16T
type UintFast32T c.Uint32T
type UintFast64T c.Uint64T
type X__int8T c.Char
type X__uint8T c.Char
type X__int16T int16
type X__uint16T uint16
type X__int32T c.Int
type X__uint32T c.Uint
type X__int64T c.LongLong
type X__uint64T c.UlongLong
type X__darwinIntptrT c.Long
type X__darwinNaturalT c.Uint
type X__darwinCtRuneT c.Int

type X__mbstateT struct {
	X__mbstate8 [128]c.Char
}
type X__darwinMbstateT X__mbstateT
type X__darwinPtrdiffT c.Long
type X__darwinSizeT c.Ulong
type X__darwinVaList c.Pointer
type X__darwinWcharT c.Int
type X__darwinRuneT X__darwinWcharT
type X__darwinWintT c.Int
type X__darwinClockT c.Ulong
type X__darwinSocklenT X__uint32T
type X__darwinSsizeT c.Long
type X__darwinTimeT c.Long
type X__darwinBlkcntT X__int64T
type X__darwinBlksizeT X__int32T
type X__darwinDevT X__int32T
type X__darwinFsblkcntT c.Uint
type X__darwinFsfilcntT c.Uint
type X__darwinGidT X__uint32T
type X__darwinIdT X__uint32T
type X__darwinIno64T X__uint64T
type X__darwinInoT X__darwinIno64T
type X__darwinMachPortNameT X__darwinNaturalT
type X__darwinMachPortT X__darwinMachPortNameT
type X__darwinModeT X__uint16T
type X__darwinOffT X__int64T
type X__darwinPidT X__int32T
type X__darwinSigsetT X__uint32T
type X__darwinSusecondsT X__int32T
type X__darwinUidT X__uint32T
type X__darwinUsecondsT X__uint32T
type X__darwinUuidT [16]c.Char
type X__darwinUuidStringT [37]c.Char

type X__darwinPthreadHandlerRec struct {
	X__routine c.Pointer
	X__arg     c.Pointer
	X__next    *X__darwinPthreadHandlerRec
}

type X_opaquePthreadAttrT struct {
	X__sig    c.Long
	X__opaque [56]c.Char
}

type X_opaquePthreadCondT struct {
	X__sig    c.Long
	X__opaque [40]c.Char
}

type X_opaquePthreadCondattrT struct {
	X__sig    c.Long
	X__opaque [8]c.Char
}

type X_opaquePthreadMutexT struct {
	X__sig    c.Long
	X__opaque [56]c.Char
}

type X_opaquePthreadMutexattrT struct {
	X__sig    c.Long
	X__opaque [8]c.Char
}

type X_opaquePthreadOnceT struct {
	X__sig    c.Long
	X__opaque [8]c.Char
}

type X_opaquePthreadRwlockT struct {
	X__sig    c.Long
	X__opaque [192]c.Char
}

type X_opaquePthreadRwlockattrT struct {
	X__sig    c.Long
	X__opaque [16]c.Char
}

type X_opaquePthreadT struct {
	X__sig          c.Long
	X__cleanupStack *X__darwinPthreadHandlerRec
	X__opaque       [8176]c.Char
}
type X__darwinPthreadAttrT X_opaquePthreadAttrT
type X__darwinPthreadCondT X_opaquePthreadCondT
type X__darwinPthreadCondattrT X_opaquePthreadCondattrT
type X__darwinPthreadKeyT c.Ulong
type X__darwinPthreadMutexT X_opaquePthreadMutexT
type X__darwinPthreadMutexattrT X_opaquePthreadMutexattrT
type X__darwinPthreadOnceT X_opaquePthreadOnceT
type X__darwinPthreadRwlockT X_opaquePthreadRwlockT
type X__darwinPthreadRwlockattrT X_opaquePthreadRwlockattrT
type X__darwinPthreadT *X_opaquePthreadT
type UInt8T c.Char
type UInt16T uint16
type UInt32T c.Uint
type UInt64T c.UlongLong
type RegisterT c.Int64T
type UserAddrT UInt64T
type UserSizeT UInt64T
type UserSsizeT c.Int64T
type UserLongT c.Int64T
type UserUlongT UInt64T
type UserTimeT c.Int64T
type UserOffT c.Int64T
type SyscallArgT UInt64T
type PtrdiffT c.Long
type RsizeT c.Ulong
type WcharT c.Int
type MaxAlignT c.Double
type X__darwinNlItem c.Int
type X__darwinWctransT c.Int
type X__darwinWctypeT X__uint32T
type FposT X__darwinOffT

type X__sbuf struct {
	X_base *c.Char
	X_size c.Int
}

type X__sFILEX struct {
	Unused [8]uint8
}

type X__sFILE struct {
	X_p       *c.Char
	X_r       c.Int
	X_w       c.Int
	X_flags   int16
	X_file    int16
	X_bf      X__sbuf
	X_lbfsize c.Int
	X_cookie  c.Pointer
	X_close   c.Pointer
	X_read    c.Pointer
	X_seek    c.Pointer
	X_write   c.Pointer
	X_ub      X__sbuf
	X_extra   *X__sFILEX
	X_ur      c.Int
	X_ubuf    [3]c.Char
	X_nbuf    [1]c.Char
	X_lb      X__sbuf
	X_blksize c.Int
	X_offset  FposT
}
type OffT X__darwinOffT
type IdtypeT c.Int

const (
	P_ALL  IdtypeT = 0
	P_PID  IdtypeT = 1
	P_PGID IdtypeT = 2
)

type PidT X__darwinPidT
type IdT X__darwinIdT
type SigAtomicT c.Int

type X__darwinArmExceptionState struct {
	X__exception X__uint32T
	X__fsr       X__uint32T
	X__far       X__uint32T
}

type X__darwinArmExceptionState64 struct {
	X__far       X__uint64T
	X__esr       X__uint32T
	X__exception X__uint32T
}

type X__darwinArmThreadState struct {
	X__r    [13]X__uint32T
	X__sp   X__uint32T
	X__lr   X__uint32T
	X__pc   X__uint32T
	X__cpsr X__uint32T
}

type X__darwinArmThreadState64 struct {
	X__x    [29]X__uint64T
	X__fp   X__uint64T
	X__lr   X__uint64T
	X__sp   X__uint64T
	X__pc   X__uint64T
	X__cpsr X__uint32T
	X__pad  X__uint32T
}

type X__darwinArmVfpState struct {
	X__r     [64]X__uint32T
	X__fpscr X__uint32T
}

type X__darwinArmNeonState64 struct {
	X__v    [32]X__uint128T
	X__fpsr X__uint32T
	X__fpcr X__uint32T
}

type X__uint128T struct {
	Unused [8]uint8
}

type X__darwinArmNeonState struct {
	X__v    [16]X__uint128T
	X__fpsr X__uint32T
	X__fpcr X__uint32T
}

type X__armPageinState struct {
	X__pageinError c.Int
}

type X__armLegacyDebugState struct {
	X__bvr [16]X__uint32T
	X__bcr [16]X__uint32T
	X__wvr [16]X__uint32T
	X__wcr [16]X__uint32T
}

type X__darwinArmDebugState32 struct {
	X__bvr      [16]X__uint32T
	X__bcr      [16]X__uint32T
	X__wvr      [16]X__uint32T
	X__wcr      [16]X__uint32T
	X__mdscrEl1 X__uint64T
}

type X__darwinArmDebugState64 struct {
	X__bvr      [16]X__uint64T
	X__bcr      [16]X__uint64T
	X__wvr      [16]X__uint64T
	X__wcr      [16]X__uint64T
	X__mdscrEl1 X__uint64T
}

type X__darwinArmCpmuState64 struct {
	X__ctrs [16]X__uint64T
}

type X__darwinMcontext32 struct {
	X__es X__darwinArmExceptionState
	X__ss X__darwinArmThreadState
	X__fs X__darwinArmVfpState
}

type X__darwinMcontext64 struct {
	X__es X__darwinArmExceptionState64
	X__ss X__darwinArmThreadState64
	X__ns X__darwinArmNeonState64
}
type McontextT *X__darwinMcontext64
type PthreadAttrT X__darwinPthreadAttrT

type X__darwinSigaltstack struct {
	SsSp    c.Pointer
	SsSize  X__darwinSizeT
	SsFlags c.Int
}
type StackT X__darwinSigaltstack

type X__darwinUcontext struct {
	UcOnstack  c.Int
	UcSigmask  X__darwinSigsetT
	UcStack    X__darwinSigaltstack
	UcLink     *X__darwinUcontext
	UcMcsize   X__darwinSizeT
	UcMcontext *X__darwinMcontext64
}
type UcontextT X__darwinUcontext
type SigsetT X__darwinSigsetT
type UidT X__darwinUidT

type Sigval struct {
	SivalPtr c.Pointer
}

type Sigevent struct {
	SigevNotify           c.Int
	SigevSigno            c.Int
	SigevValue            Sigval
	SigevNotifyFunction   c.Pointer
	SigevNotifyAttributes *PthreadAttrT
}

type X__siginfo struct {
	SiSigno  c.Int
	SiErrno  c.Int
	SiCode   c.Int
	SiPid    PidT
	SiUid    UidT
	SiStatus c.Int
	SiAddr   c.Pointer
	SiValue  Sigval
	SiBand   c.Long
	X__pad   [7]c.Ulong
}
type SiginfoT X__siginfo

type X__sigactionU struct {
	X__saHandler c.Pointer
}

type X__sigaction struct {
	X__sigactionU X__sigactionU
	SaTramp       c.Pointer
	SaMask        SigsetT
	SaFlags       c.Int
}

type Sigaction struct {
	X__sigactionU X__sigactionU
	SaMask        SigsetT
	SaFlags       c.Int
}

// llgo:type C
type SigT func(c.Int)

type Sigvec struct {
	SvHandler c.Pointer
	SvMask    c.Int
	SvFlags   c.Int
}

type Sigstack struct {
	SsSp      *c.Char
	SsOnstack c.Int
}

type Timeval struct {
	TvSec  X__darwinTimeT
	TvUsec X__darwinSusecondsT
}
type RlimT X__uint64T

type Rusage struct {
	RuUtime    Timeval
	RuStime    Timeval
	RuMaxrss   c.Long
	RuIxrss    c.Long
	RuIdrss    c.Long
	RuIsrss    c.Long
	RuMinflt   c.Long
	RuMajflt   c.Long
	RuNswap    c.Long
	RuInblock  c.Long
	RuOublock  c.Long
	RuMsgsnd   c.Long
	RuMsgrcv   c.Long
	RuNsignals c.Long
	RuNvcsw    c.Long
	RuNivcsw   c.Long
}
type RusageInfoT c.Pointer

type RusageInfoV0 struct {
	RiUuid             [16]c.Uint8T
	RiUserTime         c.Uint64T
	RiSystemTime       c.Uint64T
	RiPkgIdleWkups     c.Uint64T
	RiInterruptWkups   c.Uint64T
	RiPageins          c.Uint64T
	RiWiredSize        c.Uint64T
	RiResidentSize     c.Uint64T
	RiPhysFootprint    c.Uint64T
	RiProcStartAbstime c.Uint64T
	RiProcExitAbstime  c.Uint64T
}

type RusageInfoV1 struct {
	RiUuid                [16]c.Uint8T
	RiUserTime            c.Uint64T
	RiSystemTime          c.Uint64T
	RiPkgIdleWkups        c.Uint64T
	RiInterruptWkups      c.Uint64T
	RiPageins             c.Uint64T
	RiWiredSize           c.Uint64T
	RiResidentSize        c.Uint64T
	RiPhysFootprint       c.Uint64T
	RiProcStartAbstime    c.Uint64T
	RiProcExitAbstime     c.Uint64T
	RiChildUserTime       c.Uint64T
	RiChildSystemTime     c.Uint64T
	RiChildPkgIdleWkups   c.Uint64T
	RiChildInterruptWkups c.Uint64T
	RiChildPageins        c.Uint64T
	RiChildElapsedAbstime c.Uint64T
}

type RusageInfoV2 struct {
	RiUuid                [16]c.Uint8T
	RiUserTime            c.Uint64T
	RiSystemTime          c.Uint64T
	RiPkgIdleWkups        c.Uint64T
	RiInterruptWkups      c.Uint64T
	RiPageins             c.Uint64T
	RiWiredSize           c.Uint64T
	RiResidentSize        c.Uint64T
	RiPhysFootprint       c.Uint64T
	RiProcStartAbstime    c.Uint64T
	RiProcExitAbstime     c.Uint64T
	RiChildUserTime       c.Uint64T
	RiChildSystemTime     c.Uint64T
	RiChildPkgIdleWkups   c.Uint64T
	RiChildInterruptWkups c.Uint64T
	RiChildPageins        c.Uint64T
	RiChildElapsedAbstime c.Uint64T
	RiDiskioBytesread     c.Uint64T
	RiDiskioByteswritten  c.Uint64T
}

type RusageInfoV3 struct {
	RiUuid                      [16]c.Uint8T
	RiUserTime                  c.Uint64T
	RiSystemTime                c.Uint64T
	RiPkgIdleWkups              c.Uint64T
	RiInterruptWkups            c.Uint64T
	RiPageins                   c.Uint64T
	RiWiredSize                 c.Uint64T
	RiResidentSize              c.Uint64T
	RiPhysFootprint             c.Uint64T
	RiProcStartAbstime          c.Uint64T
	RiProcExitAbstime           c.Uint64T
	RiChildUserTime             c.Uint64T
	RiChildSystemTime           c.Uint64T
	RiChildPkgIdleWkups         c.Uint64T
	RiChildInterruptWkups       c.Uint64T
	RiChildPageins              c.Uint64T
	RiChildElapsedAbstime       c.Uint64T
	RiDiskioBytesread           c.Uint64T
	RiDiskioByteswritten        c.Uint64T
	RiCpuTimeQosDefault         c.Uint64T
	RiCpuTimeQosMaintenance     c.Uint64T
	RiCpuTimeQosBackground      c.Uint64T
	RiCpuTimeQosUtility         c.Uint64T
	RiCpuTimeQosLegacy          c.Uint64T
	RiCpuTimeQosUserInitiated   c.Uint64T
	RiCpuTimeQosUserInteractive c.Uint64T
	RiBilledSystemTime          c.Uint64T
	RiServicedSystemTime        c.Uint64T
}

type RusageInfoV4 struct {
	RiUuid                      [16]c.Uint8T
	RiUserTime                  c.Uint64T
	RiSystemTime                c.Uint64T
	RiPkgIdleWkups              c.Uint64T
	RiInterruptWkups            c.Uint64T
	RiPageins                   c.Uint64T
	RiWiredSize                 c.Uint64T
	RiResidentSize              c.Uint64T
	RiPhysFootprint             c.Uint64T
	RiProcStartAbstime          c.Uint64T
	RiProcExitAbstime           c.Uint64T
	RiChildUserTime             c.Uint64T
	RiChildSystemTime           c.Uint64T
	RiChildPkgIdleWkups         c.Uint64T
	RiChildInterruptWkups       c.Uint64T
	RiChildPageins              c.Uint64T
	RiChildElapsedAbstime       c.Uint64T
	RiDiskioBytesread           c.Uint64T
	RiDiskioByteswritten        c.Uint64T
	RiCpuTimeQosDefault         c.Uint64T
	RiCpuTimeQosMaintenance     c.Uint64T
	RiCpuTimeQosBackground      c.Uint64T
	RiCpuTimeQosUtility         c.Uint64T
	RiCpuTimeQosLegacy          c.Uint64T
	RiCpuTimeQosUserInitiated   c.Uint64T
	RiCpuTimeQosUserInteractive c.Uint64T
	RiBilledSystemTime          c.Uint64T
	RiServicedSystemTime        c.Uint64T
	RiLogicalWrites             c.Uint64T
	RiLifetimeMaxPhysFootprint  c.Uint64T
	RiInstructions              c.Uint64T
	RiCycles                    c.Uint64T
	RiBilledEnergy              c.Uint64T
	RiServicedEnergy            c.Uint64T
	RiIntervalMaxPhysFootprint  c.Uint64T
	RiRunnableTime              c.Uint64T
}

type RusageInfoV5 struct {
	RiUuid                      [16]c.Uint8T
	RiUserTime                  c.Uint64T
	RiSystemTime                c.Uint64T
	RiPkgIdleWkups              c.Uint64T
	RiInterruptWkups            c.Uint64T
	RiPageins                   c.Uint64T
	RiWiredSize                 c.Uint64T
	RiResidentSize              c.Uint64T
	RiPhysFootprint             c.Uint64T
	RiProcStartAbstime          c.Uint64T
	RiProcExitAbstime           c.Uint64T
	RiChildUserTime             c.Uint64T
	RiChildSystemTime           c.Uint64T
	RiChildPkgIdleWkups         c.Uint64T
	RiChildInterruptWkups       c.Uint64T
	RiChildPageins              c.Uint64T
	RiChildElapsedAbstime       c.Uint64T
	RiDiskioBytesread           c.Uint64T
	RiDiskioByteswritten        c.Uint64T
	RiCpuTimeQosDefault         c.Uint64T
	RiCpuTimeQosMaintenance     c.Uint64T
	RiCpuTimeQosBackground      c.Uint64T
	RiCpuTimeQosUtility         c.Uint64T
	RiCpuTimeQosLegacy          c.Uint64T
	RiCpuTimeQosUserInitiated   c.Uint64T
	RiCpuTimeQosUserInteractive c.Uint64T
	RiBilledSystemTime          c.Uint64T
	RiServicedSystemTime        c.Uint64T
	RiLogicalWrites             c.Uint64T
	RiLifetimeMaxPhysFootprint  c.Uint64T
	RiInstructions              c.Uint64T
	RiCycles                    c.Uint64T
	RiBilledEnergy              c.Uint64T
	RiServicedEnergy            c.Uint64T
	RiIntervalMaxPhysFootprint  c.Uint64T
	RiRunnableTime              c.Uint64T
	RiFlags                     c.Uint64T
}

type RusageInfoV6 struct {
	RiUuid                      [16]c.Uint8T
	RiUserTime                  c.Uint64T
	RiSystemTime                c.Uint64T
	RiPkgIdleWkups              c.Uint64T
	RiInterruptWkups            c.Uint64T
	RiPageins                   c.Uint64T
	RiWiredSize                 c.Uint64T
	RiResidentSize              c.Uint64T
	RiPhysFootprint             c.Uint64T
	RiProcStartAbstime          c.Uint64T
	RiProcExitAbstime           c.Uint64T
	RiChildUserTime             c.Uint64T
	RiChildSystemTime           c.Uint64T
	RiChildPkgIdleWkups         c.Uint64T
	RiChildInterruptWkups       c.Uint64T
	RiChildPageins              c.Uint64T
	RiChildElapsedAbstime       c.Uint64T
	RiDiskioBytesread           c.Uint64T
	RiDiskioByteswritten        c.Uint64T
	RiCpuTimeQosDefault         c.Uint64T
	RiCpuTimeQosMaintenance     c.Uint64T
	RiCpuTimeQosBackground      c.Uint64T
	RiCpuTimeQosUtility         c.Uint64T
	RiCpuTimeQosLegacy          c.Uint64T
	RiCpuTimeQosUserInitiated   c.Uint64T
	RiCpuTimeQosUserInteractive c.Uint64T
	RiBilledSystemTime          c.Uint64T
	RiServicedSystemTime        c.Uint64T
	RiLogicalWrites             c.Uint64T
	RiLifetimeMaxPhysFootprint  c.Uint64T
	RiInstructions              c.Uint64T
	RiCycles                    c.Uint64T
	RiBilledEnergy              c.Uint64T
	RiServicedEnergy            c.Uint64T
	RiIntervalMaxPhysFootprint  c.Uint64T
	RiRunnableTime              c.Uint64T
	RiFlags                     c.Uint64T
	RiUserPtime                 c.Uint64T
	RiSystemPtime               c.Uint64T
	RiPinstructions             c.Uint64T
	RiPcycles                   c.Uint64T
	RiEnergyNj                  c.Uint64T
	RiPenergyNj                 c.Uint64T
	RiSecureTimeInSystem        c.Uint64T
	RiSecurePtimeInSystem       c.Uint64T
	RiReserved                  [12]c.Uint64T
}
type RusageInfoCurrent RusageInfoV6

type Rlimit struct {
	RlimCur RlimT
	RlimMax RlimT
}

type ProcRlimitControlWakeupmon struct {
	WmFlags c.Uint32T
	WmRate  c.Int32T
}

type X_OSUnalignedU16 struct {
	X__val c.Uint16T
}

type X_OSUnalignedU32 struct {
	X__val c.Uint32T
}

type X_OSUnalignedU64 struct {
	X__val c.Uint64T
}

type Wait struct {
	WT struct {
		WTermsig  c.Uint
		WCoredump c.Uint
		WRetcode  c.Uint
		WFiller   c.Uint
	}
}
type CtRuneT X__darwinCtRuneT
type RuneT X__darwinRuneT

type DivT struct {
	Quot c.Int
	Rem  c.Int
}

type LdivT struct {
	Quot c.Long
	Rem  c.Long
}

type LldivT struct {
	Quot c.LongLong
	Rem  c.LongLong
}
type MallocTypeIdT c.UlongLong

type X_mallocZoneT struct {
	Unused [8]uint8
}
type MallocZoneT X_mallocZoneT
type DevT X__darwinDevT
type ModeT X__darwinModeT
type EspErrT c.Int
type SocRootClkT c.Int

const (
	SOC_ROOT_CLK_INT_RC_FAST SocRootClkT = 0
	SOC_ROOT_CLK_INT_RC_SLOW SocRootClkT = 1
	SOC_ROOT_CLK_EXT_XTAL    SocRootClkT = 2
	SOC_ROOT_CLK_EXT_XTAL32K SocRootClkT = 3
)

type SocCpuClkSrcT c.Int

const (
	SOC_CPU_CLK_SRC_XTAL    SocCpuClkSrcT = 0
	SOC_CPU_CLK_SRC_PLL     SocCpuClkSrcT = 1
	SOC_CPU_CLK_SRC_RC_FAST SocCpuClkSrcT = 2
	SOC_CPU_CLK_SRC_INVALID SocCpuClkSrcT = 3
)

type SocRtcSlowClkSrcT c.Int

const (
	SOC_RTC_SLOW_CLK_SRC_RC_SLOW      SocRtcSlowClkSrcT = 0
	SOC_RTC_SLOW_CLK_SRC_XTAL32K      SocRtcSlowClkSrcT = 1
	SOC_RTC_SLOW_CLK_SRC_RC_FAST_D256 SocRtcSlowClkSrcT = 2
	SOC_RTC_SLOW_CLK_SRC_INVALID      SocRtcSlowClkSrcT = 3
)

type SocRtcFastClkSrcT c.Int

const (
	SOC_RTC_FAST_CLK_SRC_XTAL_D2  SocRtcFastClkSrcT = 0
	SOC_RTC_FAST_CLK_SRC_XTAL_DIV SocRtcFastClkSrcT = 0
	SOC_RTC_FAST_CLK_SRC_RC_FAST  SocRtcFastClkSrcT = 1
	SOC_RTC_FAST_CLK_SRC_INVALID  SocRtcFastClkSrcT = 2
)

type SocXtalFreqT c.Int

const (
	SOC_XTAL_FREQ_32M SocXtalFreqT = 32
	SOC_XTAL_FREQ_40M SocXtalFreqT = 40
)

type SocModuleClkT c.Int

const (
	SOC_MOD_CLK_CPU          SocModuleClkT = 1
	SOC_MOD_CLK_RTC_FAST     SocModuleClkT = 2
	SOC_MOD_CLK_RTC_SLOW     SocModuleClkT = 3
	SOC_MOD_CLK_APB          SocModuleClkT = 4
	SOC_MOD_CLK_PLL_F80M     SocModuleClkT = 5
	SOC_MOD_CLK_PLL_F160M    SocModuleClkT = 6
	SOC_MOD_CLK_PLL_D2       SocModuleClkT = 7
	SOC_MOD_CLK_XTAL32K      SocModuleClkT = 8
	SOC_MOD_CLK_RC_FAST      SocModuleClkT = 9
	SOC_MOD_CLK_RC_FAST_D256 SocModuleClkT = 10
	SOC_MOD_CLK_XTAL         SocModuleClkT = 11
	SOC_MOD_CLK_TEMP_SENSOR  SocModuleClkT = 12
	SOC_MOD_CLK_INVALID      SocModuleClkT = 13
)

type SocPeriphSystimerClkSrcT c.Int

const (
	SYSTIMER_CLK_SRC_XTAL    SocPeriphSystimerClkSrcT = 11
	SYSTIMER_CLK_SRC_DEFAULT SocPeriphSystimerClkSrcT = 11
)

type SocPeriphGptimerClkSrcT c.Int

const (
	GPTIMER_CLK_SRC_APB     SocPeriphGptimerClkSrcT = 4
	GPTIMER_CLK_SRC_XTAL    SocPeriphGptimerClkSrcT = 11
	GPTIMER_CLK_SRC_DEFAULT SocPeriphGptimerClkSrcT = 4
)

type SocPeriphTgClkSrcLegacyT c.Int

const (
	TIMER_SRC_CLK_APB     SocPeriphTgClkSrcLegacyT = 4
	TIMER_SRC_CLK_XTAL    SocPeriphTgClkSrcLegacyT = 11
	TIMER_SRC_CLK_DEFAULT SocPeriphTgClkSrcLegacyT = 4
)

type SocPeriphLcdClkSrcT c.Int

const (
	LCD_CLK_SRC_PLL160M SocPeriphLcdClkSrcT = 6
	LCD_CLK_SRC_PLL240M SocPeriphLcdClkSrcT = 7
	LCD_CLK_SRC_XTAL    SocPeriphLcdClkSrcT = 11
	LCD_CLK_SRC_DEFAULT SocPeriphLcdClkSrcT = 6
)

type SocPeriphRmtClkSrcT c.Int

const (
	RMT_CLK_SRC_APB     SocPeriphRmtClkSrcT = 4
	RMT_CLK_SRC_RC_FAST SocPeriphRmtClkSrcT = 9
	RMT_CLK_SRC_XTAL    SocPeriphRmtClkSrcT = 11
	RMT_CLK_SRC_DEFAULT SocPeriphRmtClkSrcT = 4
)

type SocPeriphRmtClkSrcLegacyT c.Int

const (
	RMT_BASECLK_APB     SocPeriphRmtClkSrcLegacyT = 4
	RMT_BASECLK_XTAL    SocPeriphRmtClkSrcLegacyT = 11
	RMT_BASECLK_DEFAULT SocPeriphRmtClkSrcLegacyT = 4
)

type SocPeriphTemperatureSensorClkSrcT c.Int

const (
	TEMPERATURE_SENSOR_CLK_SRC_RC_FAST SocPeriphTemperatureSensorClkSrcT = 12
	TEMPERATURE_SENSOR_CLK_SRC_DEFAULT SocPeriphTemperatureSensorClkSrcT = 12
)

type SocPeriphUartClkSrcLegacyT c.Int

const (
	UART_SCLK_APB     SocPeriphUartClkSrcLegacyT = 4
	UART_SCLK_RTC     SocPeriphUartClkSrcLegacyT = 9
	UART_SCLK_XTAL    SocPeriphUartClkSrcLegacyT = 11
	UART_SCLK_DEFAULT SocPeriphUartClkSrcLegacyT = 4
)

type SocPeriphMcpwmTimerClkSrcT c.Int

const (
	MCPWM_TIMER_CLK_SRC_PLL160M SocPeriphMcpwmTimerClkSrcT = 6
	MCPWM_TIMER_CLK_SRC_DEFAULT SocPeriphMcpwmTimerClkSrcT = 6
)

type SocPeriphMcpwmCaptureClkSrcT c.Int

const (
	MCPWM_CAPTURE_CLK_SRC_APB     SocPeriphMcpwmCaptureClkSrcT = 4
	MCPWM_CAPTURE_CLK_SRC_DEFAULT SocPeriphMcpwmCaptureClkSrcT = 4
)

type SocPeriphMcpwmCarrierClkSrcT c.Int

const (
	MCPWM_CARRIER_CLK_SRC_PLL160M SocPeriphMcpwmCarrierClkSrcT = 6
	MCPWM_CARRIER_CLK_SRC_DEFAULT SocPeriphMcpwmCarrierClkSrcT = 6
)

type SocPeriphI2sClkSrcT c.Int

const (
	I2S_CLK_SRC_DEFAULT  SocPeriphI2sClkSrcT = 6
	I2S_CLK_SRC_PLL_160M SocPeriphI2sClkSrcT = 6
	I2S_CLK_SRC_XTAL     SocPeriphI2sClkSrcT = 11
	I2S_CLK_SRC_EXTERNAL SocPeriphI2sClkSrcT = -1
)

type SocPeriphI2cClkSrcT c.Int

const (
	I2C_CLK_SRC_XTAL    SocPeriphI2cClkSrcT = 11
	I2C_CLK_SRC_RC_FAST SocPeriphI2cClkSrcT = 9
	I2C_CLK_SRC_DEFAULT SocPeriphI2cClkSrcT = 11
)

type SocPeriphSpiClkSrcT c.Int

const (
	SPI_CLK_SRC_DEFAULT SocPeriphSpiClkSrcT = 4
	SPI_CLK_SRC_APB     SocPeriphSpiClkSrcT = 4
	SPI_CLK_SRC_XTAL    SocPeriphSpiClkSrcT = 11
)

type SocPeriphSdmClkSrcT c.Int

const (
	SDM_CLK_SRC_APB     SocPeriphSdmClkSrcT = 4
	SDM_CLK_SRC_DEFAULT SocPeriphSdmClkSrcT = 4
)

type SocPeriphGlitchFilterClkSrcT c.Int

const (
	GLITCH_FILTER_CLK_SRC_APB     SocPeriphGlitchFilterClkSrcT = 4
	GLITCH_FILTER_CLK_SRC_DEFAULT SocPeriphGlitchFilterClkSrcT = 4
)

type SocPeriphTwaiClkSrcT c.Int

const (
	TWAI_CLK_SRC_APB     SocPeriphTwaiClkSrcT = 4
	TWAI_CLK_SRC_DEFAULT SocPeriphTwaiClkSrcT = 4
)

type SocPeriphAdcDigiClkSrcT c.Int

const (
	ADC_DIGI_CLK_SRC_APB       SocPeriphAdcDigiClkSrcT = 4
	ADC_DIGI_CLK_SRC_PLL_F240M SocPeriphAdcDigiClkSrcT = 7
	ADC_DIGI_CLK_SRC_DEFAULT   SocPeriphAdcDigiClkSrcT = 4
)

type SocPeriphAdcRtcClkSrcT c.Int

const (
	ADC_RTC_CLK_SRC_RC_FAST SocPeriphAdcRtcClkSrcT = 9
	ADC_RTC_CLK_SRC_DEFAULT SocPeriphAdcRtcClkSrcT = 9
)

type SocPeriphMwdtClkSrcT c.Int

const (
	MWDT_CLK_SRC_APB     SocPeriphMwdtClkSrcT = 4
	MWDT_CLK_SRC_DEFAULT SocPeriphMwdtClkSrcT = 4
)

type SocPeriphLedcClkSrcLegacyT c.Int

const (
	LEDC_AUTO_CLK        SocPeriphLedcClkSrcLegacyT = 0
	LEDC_USE_APB_CLK     SocPeriphLedcClkSrcLegacyT = 4
	LEDC_USE_RC_FAST_CLK SocPeriphLedcClkSrcLegacyT = 9
	LEDC_USE_XTAL_CLK    SocPeriphLedcClkSrcLegacyT = 11
	LEDC_USE_RTC8M_CLK   SocPeriphLedcClkSrcLegacyT = 9
)

type SocPeriphSdmmcClkSrcT c.Int

const (
	SDMMC_CLK_SRC_DEFAULT SocPeriphSdmmcClkSrcT = 6
	SDMMC_CLK_SRC_PLL160M SocPeriphSdmmcClkSrcT = 6
	SDMMC_CLK_SRC_XTAL    SocPeriphSdmmcClkSrcT = 11
)

type SocClkoutSigIdT c.Int

const (
	CLKOUT_SIG_PLL      SocClkoutSigIdT = 1
	CLKOUT_SIG_RC_SLOW  SocClkoutSigIdT = 4
	CLKOUT_SIG_XTAL     SocClkoutSigIdT = 5
	CLKOUT_SIG_PLL_F80M SocClkoutSigIdT = 13
	CLKOUT_SIG_RC_FAST  SocClkoutSigIdT = 14
	CLKOUT_SIG_INVALID  SocClkoutSigIdT = 255
)

type AdcUnitT c.Int

const (
	ADC_UNIT_1 AdcUnitT = 0
	ADC_UNIT_2 AdcUnitT = 1
)

type AdcChannelT c.Int

const (
	ADC_CHANNEL_0 AdcChannelT = 0
	ADC_CHANNEL_1 AdcChannelT = 1
	ADC_CHANNEL_2 AdcChannelT = 2
	ADC_CHANNEL_3 AdcChannelT = 3
	ADC_CHANNEL_4 AdcChannelT = 4
	ADC_CHANNEL_5 AdcChannelT = 5
	ADC_CHANNEL_6 AdcChannelT = 6
	ADC_CHANNEL_7 AdcChannelT = 7
	ADC_CHANNEL_8 AdcChannelT = 8
	ADC_CHANNEL_9 AdcChannelT = 9
)

type AdcAttenT c.Int

const (
	ADC_ATTEN_DB_0   AdcAttenT = 0
	ADC_ATTEN_DB_2_5 AdcAttenT = 1
	ADC_ATTEN_DB_6   AdcAttenT = 2
	ADC_ATTEN_DB_12  AdcAttenT = 3
	ADC_ATTEN_DB_11  AdcAttenT = 3
)

type AdcBitwidthT c.Int

const (
	ADC_BITWIDTH_DEFAULT AdcBitwidthT = 0
	ADC_BITWIDTH_9       AdcBitwidthT = 9
	ADC_BITWIDTH_10      AdcBitwidthT = 10
	ADC_BITWIDTH_11      AdcBitwidthT = 11
	ADC_BITWIDTH_12      AdcBitwidthT = 12
	ADC_BITWIDTH_13      AdcBitwidthT = 13
)

type AdcUlpModeT c.Int

const (
	ADC_ULP_MODE_DISABLE AdcUlpModeT = 0
	ADC_ULP_MODE_FSM     AdcUlpModeT = 1
	ADC_ULP_MODE_RISCV   AdcUlpModeT = 2
)

type AdcDigiConvertModeT c.Int

const (
	ADC_CONV_SINGLE_UNIT_1 AdcDigiConvertModeT = 1
	ADC_CONV_SINGLE_UNIT_2 AdcDigiConvertModeT = 2
	ADC_CONV_BOTH_UNIT     AdcDigiConvertModeT = 3
	ADC_CONV_ALTER_UNIT    AdcDigiConvertModeT = 7
)

type AdcDigiOutputFormatT c.Int

const (
	ADC_DIGI_OUTPUT_FORMAT_TYPE1 AdcDigiOutputFormatT = 0
	ADC_DIGI_OUTPUT_FORMAT_TYPE2 AdcDigiOutputFormatT = 1
)

type AdcOneshotClkSrcT SocPeriphAdcRtcClkSrcT
type AdcContinuousClkSrcT SocPeriphAdcDigiClkSrcT

/**
 * @brief ADC digital controller pattern configuration
 */

type AdcDigiPatternConfigT struct {
	Atten    c.Uint8T
	Channel  c.Uint8T
	Unit     c.Uint8T
	BitWidth c.Uint8T
}
type AdcDigiIirFilterT c.Int

const (
	ADC_DIGI_IIR_FILTER_0 AdcDigiIirFilterT = 0
	ADC_DIGI_IIR_FILTER_1 AdcDigiIirFilterT = 1
)

type AdcDigiIirFilterCoeffT c.Int

const (
	ADC_DIGI_IIR_FILTER_COEFF_2  AdcDigiIirFilterCoeffT = 0
	ADC_DIGI_IIR_FILTER_COEFF_4  AdcDigiIirFilterCoeffT = 1
	ADC_DIGI_IIR_FILTER_COEFF_8  AdcDigiIirFilterCoeffT = 2
	ADC_DIGI_IIR_FILTER_COEFF_16 AdcDigiIirFilterCoeffT = 3
	ADC_DIGI_IIR_FILTER_COEFF_32 AdcDigiIirFilterCoeffT = 4
	ADC_DIGI_IIR_FILTER_COEFF_64 AdcDigiIirFilterCoeffT = 5
)

type AdcMonitorIdT c.Int

const (
	ADC_MONITOR_0 AdcMonitorIdT = 0
	ADC_MONITOR_1 AdcMonitorIdT = 1
)

type AdcMonitorModeT c.Int

const (
	ADC_MONITOR_MODE_HIGH AdcMonitorModeT = 0
	ADC_MONITOR_MODE_LOW  AdcMonitorModeT = 1
)

/**
 * @brief ADC digital controller (DMA mode) output data format.
 *        Used to analyze the acquired ADC (DMA) data.
 */

type AdcDigiOutputDataT struct {
	Unused [8]uint8
}
type AdcBitsWidthT c.Int

const (
	ADC_WIDTH_BIT_12 AdcBitsWidthT = 12
	ADC_WIDTH_MAX    AdcBitsWidthT = 13
)

type Adc1ChannelT c.Int

const (
	ADC1_CHANNEL_0   Adc1ChannelT = 0
	ADC1_CHANNEL_1   Adc1ChannelT = 1
	ADC1_CHANNEL_2   Adc1ChannelT = 2
	ADC1_CHANNEL_3   Adc1ChannelT = 3
	ADC1_CHANNEL_4   Adc1ChannelT = 4
	ADC1_CHANNEL_5   Adc1ChannelT = 5
	ADC1_CHANNEL_6   Adc1ChannelT = 6
	ADC1_CHANNEL_7   Adc1ChannelT = 7
	ADC1_CHANNEL_8   Adc1ChannelT = 8
	ADC1_CHANNEL_9   Adc1ChannelT = 9
	ADC1_CHANNEL_MAX Adc1ChannelT = 10
)

type Adc2ChannelT c.Int

const (
	ADC2_CHANNEL_0   Adc2ChannelT = 0
	ADC2_CHANNEL_1   Adc2ChannelT = 1
	ADC2_CHANNEL_2   Adc2ChannelT = 2
	ADC2_CHANNEL_3   Adc2ChannelT = 3
	ADC2_CHANNEL_4   Adc2ChannelT = 4
	ADC2_CHANNEL_5   Adc2ChannelT = 5
	ADC2_CHANNEL_6   Adc2ChannelT = 6
	ADC2_CHANNEL_7   Adc2ChannelT = 7
	ADC2_CHANNEL_8   Adc2ChannelT = 8
	ADC2_CHANNEL_9   Adc2ChannelT = 9
	ADC2_CHANNEL_MAX Adc2ChannelT = 10
)

/**
 * @brief ADC DMA driver configuration
 */

type AdcDigiInitConfigS struct {
	MaxStoreBufSize c.Uint32T
	ConvNumEachIntr c.Uint32T
	Adc1ChanMask    c.Uint32T
	Adc2ChanMask    c.Uint32T
}
type AdcDigiInitConfigT AdcDigiInitConfigS

/**
 * @brief ADC digital controller settings
 */

type AdcDigiConfigurationT struct {
	ConvLimitEn  bool
	ConvLimitNum c.Uint32T
	PatternNum   c.Uint32T
	AdcPattern   *AdcDigiPatternConfigT
	SampleFreqHz c.Uint32T
	ConvMode     AdcDigiConvertModeT
	Format       AdcDigiOutputFormatT
}

// llgo:type C
type IntrHandlerT func(c.Pointer)

type IntrHandleDataT struct {
	Unused [8]uint8
}
type IntrHandleT *IntrHandleDataT
type EspIntrCpuAffinityT c.Int

const (
	ESP_INTR_CPU_AFFINITY_AUTO EspIntrCpuAffinityT = 0
	ESP_INTR_CPU_AFFINITY_0    EspIntrCpuAffinityT = 1
	ESP_INTR_CPU_AFFINITY_1    EspIntrCpuAffinityT = 2
)

type DmaDescriptorS struct {
	Unused [8]uint8
}
type DmaDescriptorT DmaDescriptorS
type DmaDescriptorAlign4T DmaDescriptorT

type DmaDescriptorAlign8S struct {
	Unused [8]uint8
}
type DmaDescriptorAlign8T DmaDescriptorAlign8S
type AdcArbiterModeT c.Int

const (
	ADC_ARB_MODE_SHIELD AdcArbiterModeT = 0
	ADC_ARB_MODE_FIX    AdcArbiterModeT = 1
	ADC_ARB_MODE_LOOP   AdcArbiterModeT = 2
)

/**
 * @brief ADC arbiter work mode and priority setting.
 *
 * @note Only ADC2 support arbiter.
 */

type AdcArbiterT struct {
	Mode     AdcArbiterModeT
	RtcPri   c.Uint8T
	DigPri   c.Uint8T
	PwdetPri c.Uint8T
}
type AdcHalWorkModeT c.Int

const (
	ADC_HAL_SINGLE_READ_MODE     AdcHalWorkModeT = 0
	ADC_HAL_CONTINUOUS_READ_MODE AdcHalWorkModeT = 1
	ADC_HAL_PWDET_MODE           AdcHalWorkModeT = 2
	ADC_HAL_LP_MODE              AdcHalWorkModeT = 3
)

type ErrnoT c.Int

type ApbSaradcDevS struct {
	Ctrl struct {
		Val c.Uint32T
	}
	Ctrl2 struct {
		Val c.Uint32T
	}
	FilterCtrl1 struct {
		Val c.Uint32T
	}
	FsmWait struct {
		Val c.Uint32T
	}
	Sar1Status  c.Uint32T
	Sar2Status  c.Uint32T
	Sar1PattTab [4]struct {
		Val c.Uint32T
	}
	Sar2PattTab [4]struct {
		Val c.Uint32T
	}
	ApbAdcArbCtrl struct {
		Val c.Uint32T
	}
	FilterCtrl0 struct {
		Val c.Uint32T
	}
	ApbSaradc1DataStatus struct {
		Val c.Uint32T
	}
	Thres0Ctrl struct {
		Val c.Uint32T
	}
	Thres1Ctrl struct {
		Val c.Uint32T
	}
	Reserved4c c.Uint32T
	Reserved50 c.Uint32T
	Reserved54 c.Uint32T
	ThresCtrl  struct {
		Val c.Uint32T
	}
	IntEna struct {
		Val c.Uint32T
	}
	IntRaw struct {
		Val c.Uint32T
	}
	IntSt struct {
		Val c.Uint32T
	}
	IntClr struct {
		Val c.Uint32T
	}
	DmaConf struct {
		Val c.Uint32T
	}
	ApbAdcClkmConf struct {
		Val c.Uint32T
	}
	Reserved74           c.Uint32T
	ApbSaradc2DataStatus struct {
		Val c.Uint32T
	}
	Reserved7c  c.Uint32T
	Reserved80  c.Uint32T
	Reserved84  c.Uint32T
	Reserved88  c.Uint32T
	Reserved8c  c.Uint32T
	Reserved90  c.Uint32T
	Reserved94  c.Uint32T
	Reserved98  c.Uint32T
	Reserved9c  c.Uint32T
	ReservedA0  c.Uint32T
	ReservedA4  c.Uint32T
	ReservedA8  c.Uint32T
	ReservedAc  c.Uint32T
	ReservedB0  c.Uint32T
	ReservedB4  c.Uint32T
	ReservedB8  c.Uint32T
	ReservedBc  c.Uint32T
	ReservedC0  c.Uint32T
	ReservedC4  c.Uint32T
	ReservedC8  c.Uint32T
	ReservedCc  c.Uint32T
	ReservedD0  c.Uint32T
	ReservedD4  c.Uint32T
	ReservedD8  c.Uint32T
	ReservedDc  c.Uint32T
	ReservedE0  c.Uint32T
	ReservedE4  c.Uint32T
	ReservedE8  c.Uint32T
	ReservedEc  c.Uint32T
	ReservedF0  c.Uint32T
	ReservedF4  c.Uint32T
	ReservedF8  c.Uint32T
	ReservedFc  c.Uint32T
	Reserved100 c.Uint32T
	Reserved104 c.Uint32T
	Reserved108 c.Uint32T
	Reserved10c c.Uint32T
	Reserved110 c.Uint32T
	Reserved114 c.Uint32T
	Reserved118 c.Uint32T
	Reserved11c c.Uint32T
	Reserved120 c.Uint32T
	Reserved124 c.Uint32T
	Reserved128 c.Uint32T
	Reserved12c c.Uint32T
	Reserved130 c.Uint32T
	Reserved134 c.Uint32T
	Reserved138 c.Uint32T
	Reserved13c c.Uint32T
	Reserved140 c.Uint32T
	Reserved144 c.Uint32T
	Reserved148 c.Uint32T
	Reserved14c c.Uint32T
	Reserved150 c.Uint32T
	Reserved154 c.Uint32T
	Reserved158 c.Uint32T
	Reserved15c c.Uint32T
	Reserved160 c.Uint32T
	Reserved164 c.Uint32T
	Reserved168 c.Uint32T
	Reserved16c c.Uint32T
	Reserved170 c.Uint32T
	Reserved174 c.Uint32T
	Reserved178 c.Uint32T
	Reserved17c c.Uint32T
	Reserved180 c.Uint32T
	Reserved184 c.Uint32T
	Reserved188 c.Uint32T
	Reserved18c c.Uint32T
	Reserved190 c.Uint32T
	Reserved194 c.Uint32T
	Reserved198 c.Uint32T
	Reserved19c c.Uint32T
	Reserved1a0 c.Uint32T
	Reserved1a4 c.Uint32T
	Reserved1a8 c.Uint32T
	Reserved1ac c.Uint32T
	Reserved1b0 c.Uint32T
	Reserved1b4 c.Uint32T
	Reserved1b8 c.Uint32T
	Reserved1bc c.Uint32T
	Reserved1c0 c.Uint32T
	Reserved1c4 c.Uint32T
	Reserved1c8 c.Uint32T
	Reserved1cc c.Uint32T
	Reserved1d0 c.Uint32T
	Reserved1d4 c.Uint32T
	Reserved1d8 c.Uint32T
	Reserved1dc c.Uint32T
	Reserved1e0 c.Uint32T
	Reserved1e4 c.Uint32T
	Reserved1e8 c.Uint32T
	Reserved1ec c.Uint32T
	Reserved1f0 c.Uint32T
	Reserved1f4 c.Uint32T
	Reserved1f8 c.Uint32T
	Reserved1fc c.Uint32T
	Reserved200 c.Uint32T
	Reserved204 c.Uint32T
	Reserved208 c.Uint32T
	Reserved20c c.Uint32T
	Reserved210 c.Uint32T
	Reserved214 c.Uint32T
	Reserved218 c.Uint32T
	Reserved21c c.Uint32T
	Reserved220 c.Uint32T
	Reserved224 c.Uint32T
	Reserved228 c.Uint32T
	Reserved22c c.Uint32T
	Reserved230 c.Uint32T
	Reserved234 c.Uint32T
	Reserved238 c.Uint32T
	Reserved23c c.Uint32T
	Reserved240 c.Uint32T
	Reserved244 c.Uint32T
	Reserved248 c.Uint32T
	Reserved24c c.Uint32T
	Reserved250 c.Uint32T
	Reserved254 c.Uint32T
	Reserved258 c.Uint32T
	Reserved25c c.Uint32T
	Reserved260 c.Uint32T
	Reserved264 c.Uint32T
	Reserved268 c.Uint32T
	Reserved26c c.Uint32T
	Reserved270 c.Uint32T
	Reserved274 c.Uint32T
	Reserved278 c.Uint32T
	Reserved27c c.Uint32T
	Reserved280 c.Uint32T
	Reserved284 c.Uint32T
	Reserved288 c.Uint32T
	Reserved28c c.Uint32T
	Reserved290 c.Uint32T
	Reserved294 c.Uint32T
	Reserved298 c.Uint32T
	Reserved29c c.Uint32T
	Reserved2a0 c.Uint32T
	Reserved2a4 c.Uint32T
	Reserved2a8 c.Uint32T
	Reserved2ac c.Uint32T
	Reserved2b0 c.Uint32T
	Reserved2b4 c.Uint32T
	Reserved2b8 c.Uint32T
	Reserved2bc c.Uint32T
	Reserved2c0 c.Uint32T
	Reserved2c4 c.Uint32T
	Reserved2c8 c.Uint32T
	Reserved2cc c.Uint32T
	Reserved2d0 c.Uint32T
	Reserved2d4 c.Uint32T
	Reserved2d8 c.Uint32T
	Reserved2dc c.Uint32T
	Reserved2e0 c.Uint32T
	Reserved2e4 c.Uint32T
	Reserved2e8 c.Uint32T
	Reserved2ec c.Uint32T
	Reserved2f0 c.Uint32T
	Reserved2f4 c.Uint32T
	Reserved2f8 c.Uint32T
	Reserved2fc c.Uint32T
	Reserved300 c.Uint32T
	Reserved304 c.Uint32T
	Reserved308 c.Uint32T
	Reserved30c c.Uint32T
	Reserved310 c.Uint32T
	Reserved314 c.Uint32T
	Reserved318 c.Uint32T
	Reserved31c c.Uint32T
	Reserved320 c.Uint32T
	Reserved324 c.Uint32T
	Reserved328 c.Uint32T
	Reserved32c c.Uint32T
	Reserved330 c.Uint32T
	Reserved334 c.Uint32T
	Reserved338 c.Uint32T
	Reserved33c c.Uint32T
	Reserved340 c.Uint32T
	Reserved344 c.Uint32T
	Reserved348 c.Uint32T
	Reserved34c c.Uint32T
	Reserved350 c.Uint32T
	Reserved354 c.Uint32T
	Reserved358 c.Uint32T
	Reserved35c c.Uint32T
	Reserved360 c.Uint32T
	Reserved364 c.Uint32T
	Reserved368 c.Uint32T
	Reserved36c c.Uint32T
	Reserved370 c.Uint32T
	Reserved374 c.Uint32T
	Reserved378 c.Uint32T
	Reserved37c c.Uint32T
	Reserved380 c.Uint32T
	Reserved384 c.Uint32T
	Reserved388 c.Uint32T
	Reserved38c c.Uint32T
	Reserved390 c.Uint32T
	Reserved394 c.Uint32T
	Reserved398 c.Uint32T
	Reserved39c c.Uint32T
	Reserved3a0 c.Uint32T
	Reserved3a4 c.Uint32T
	Reserved3a8 c.Uint32T
	Reserved3ac c.Uint32T
	Reserved3b0 c.Uint32T
	Reserved3b4 c.Uint32T
	Reserved3b8 c.Uint32T
	Reserved3bc c.Uint32T
	Reserved3c0 c.Uint32T
	Reserved3c4 c.Uint32T
	Reserved3c8 c.Uint32T
	Reserved3cc c.Uint32T
	Reserved3d0 c.Uint32T
	Reserved3d4 c.Uint32T
	Reserved3d8 c.Uint32T
	Reserved3dc c.Uint32T
	Reserved3e0 c.Uint32T
	Reserved3e4 c.Uint32T
	Reserved3e8 c.Uint32T
	Reserved3ec c.Uint32T
	Reserved3f0 c.Uint32T
	Reserved3f4 c.Uint32T
	Reserved3f8 c.Uint32T
	ApbCtrlDate c.Uint32T
}
type ApbSaradcDevT ApbSaradcDevS

type SensDevS struct {
	SarReader1Ctrl struct {
		Val c.Uint32T
	}
	SarReader1Status c.Uint32T
	SarMeas1Ctrl1    struct {
		Val c.Uint32T
	}
	SarMeas1Ctrl2 struct {
		Val c.Uint32T
	}
	SarMeas1Mux struct {
		Val c.Uint32T
	}
	SarAtten1   c.Uint32T
	SarAmpCtrl1 struct {
		Val c.Uint32T
	}
	SarAmpCtrl2 struct {
		Val c.Uint32T
	}
	SarAmpCtrl3 struct {
		Val c.Uint32T
	}
	SarReader2Ctrl struct {
		Val c.Uint32T
	}
	SarReader2Status c.Uint32T
	SarMeas2Ctrl1    struct {
		Val c.Uint32T
	}
	SarMeas2Ctrl2 struct {
		Val c.Uint32T
	}
	SarMeas2Mux struct {
		Val c.Uint32T
	}
	SarAtten2      c.Uint32T
	SarPowerXpdSar struct {
		Val c.Uint32T
	}
	SarSlaveAddr1 struct {
		Val c.Uint32T
	}
	SarSlaveAddr2 struct {
		Val c.Uint32T
	}
	SarSlaveAddr3 struct {
		Val c.Uint32T
	}
	SarSlaveAddr4 struct {
		Val c.Uint32T
	}
	SarTctrl struct {
		Val c.Uint32T
	}
	SarTctrl2 struct {
		Val c.Uint32T
	}
	SarI2cCtrl struct {
		Val c.Uint32T
	}
	SarTouchConf struct {
		Val c.Uint32T
	}
	SarTouchDenoise struct {
		Val c.Uint32T
	}
	TouchThresh [14]struct {
		Val c.Uint32T
	}
	SarTouchChnSt struct {
		Val c.Uint32T
	}
	SarTouchStatus0 struct {
		Val c.Uint32T
	}
	SarTouchStatus [14]struct {
		Val c.Uint32T
	}
	SarTouchSlpStatus struct {
		Val c.Uint32T
	}
	SarTouchApprStatus struct {
		Val c.Uint32T
	}
	SarCocpuState struct {
		Val c.Uint32T
	}
	SarCocpuIntRaw struct {
		Val c.Uint32T
	}
	SarCocpuIntEna struct {
		Val c.Uint32T
	}
	SarCocpuIntSt struct {
		Val c.Uint32T
	}
	SarCocpuIntClr struct {
		Val c.Uint32T
	}
	SarCocpuDebug struct {
		Val c.Uint32T
	}
	SarHallCtrl struct {
		Val c.Uint32T
	}
	SarNouse           c.Uint32T
	SarPeriClkGateConf struct {
		Val c.Uint32T
	}
	SarPeriResetConf struct {
		Val c.Uint32T
	}
	SarCocpuIntEnaW1ts struct {
		Val c.Uint32T
	}
	SarCocpuIntEnaW1tc struct {
		Val c.Uint32T
	}
	SarDebugConf struct {
		Val c.Uint32T
	}
	Reserved118 c.Uint32T
	Reserved11c c.Uint32T
	Reserved120 c.Uint32T
	Reserved124 c.Uint32T
	Reserved128 c.Uint32T
	Reserved12c c.Uint32T
	Reserved130 c.Uint32T
	Reserved134 c.Uint32T
	Reserved138 c.Uint32T
	Reserved13c c.Uint32T
	Reserved140 c.Uint32T
	Reserved144 c.Uint32T
	Reserved148 c.Uint32T
	Reserved14c c.Uint32T
	Reserved150 c.Uint32T
	Reserved154 c.Uint32T
	Reserved158 c.Uint32T
	Reserved15c c.Uint32T
	Reserved160 c.Uint32T
	Reserved164 c.Uint32T
	Reserved168 c.Uint32T
	Reserved16c c.Uint32T
	Reserved170 c.Uint32T
	Reserved174 c.Uint32T
	Reserved178 c.Uint32T
	Reserved17c c.Uint32T
	Reserved180 c.Uint32T
	Reserved184 c.Uint32T
	Reserved188 c.Uint32T
	Reserved18c c.Uint32T
	Reserved190 c.Uint32T
	Reserved194 c.Uint32T
	Reserved198 c.Uint32T
	Reserved19c c.Uint32T
	Reserved1a0 c.Uint32T
	Reserved1a4 c.Uint32T
	Reserved1a8 c.Uint32T
	Reserved1ac c.Uint32T
	Reserved1b0 c.Uint32T
	Reserved1b4 c.Uint32T
	Reserved1b8 c.Uint32T
	Reserved1bc c.Uint32T
	Reserved1c0 c.Uint32T
	Reserved1c4 c.Uint32T
	Reserved1c8 c.Uint32T
	Reserved1cc c.Uint32T
	Reserved1d0 c.Uint32T
	Reserved1d4 c.Uint32T
	Reserved1d8 c.Uint32T
	Reserved1dc c.Uint32T
	Reserved1e0 c.Uint32T
	Reserved1e4 c.Uint32T
	Reserved1e8 c.Uint32T
	Reserved1ec c.Uint32T
	Reserved1f0 c.Uint32T
	Reserved1f4 c.Uint32T
	Reserved1f8 c.Uint32T
	Sardate     struct {
		Val c.Uint32T
	}
}
type SensDevT SensDevS

type RtcCntlDevS struct {
	Options0 struct {
		Val c.Uint32T
	}
	SlpTimer0 c.Uint32T
	SlpTimer1 struct {
		Val c.Uint32T
	}
	TimeUpdate struct {
		Val c.Uint32T
	}
	TimeLow0  c.Uint32T
	TimeHigh0 struct {
		Val c.Uint32T
	}
	State0 struct {
		Val c.Uint32T
	}
	Timer1 struct {
		Val c.Uint32T
	}
	Timer2 struct {
		Val c.Uint32T
	}
	Timer3 struct {
		Val c.Uint32T
	}
	Timer4 struct {
		Val c.Uint32T
	}
	Timer5 struct {
		Val c.Uint32T
	}
	Timer6 struct {
		Val c.Uint32T
	}
	AnaConf struct {
		Val c.Uint32T
	}
	ResetState struct {
		Val c.Uint32T
	}
	WakeupState struct {
		Val c.Uint32T
	}
	IntEna struct {
		Val c.Uint32T
	}
	IntRaw struct {
		Val c.Uint32T
	}
	IntSt struct {
		Val c.Uint32T
	}
	IntClr struct {
		Val c.Uint32T
	}
	Store      [4]c.Uint32T
	ExtXtlConf struct {
		Val c.Uint32T
	}
	ExtWakeupConf struct {
		Val c.Uint32T
	}
	SlpRejectConf struct {
		Val c.Uint32T
	}
	CpuPeriodConf struct {
		Val c.Uint32T
	}
	SdioActConf struct {
		Val c.Uint32T
	}
	ClkConf struct {
		Val c.Uint32T
	}
	SlowClkConf struct {
		Val c.Uint32T
	}
	SdioConf struct {
		Val c.Uint32T
	}
	BiasConf struct {
		Val c.Uint32T
	}
	Rtc struct {
		Val c.Uint32T
	}
	Pwc struct {
		Val c.Uint32T
	}
	RegulatorDrvCtrl struct {
		Val c.Uint32T
	}
	DigPwc struct {
		Val c.Uint32T
	}
	DigIso struct {
		Val c.Uint32T
	}
	WdtConfig0 struct {
		Val c.Uint32T
	}
	WdtConfig1 c.Uint32T
	WdtConfig2 c.Uint32T
	WdtConfig3 c.Uint32T
	WdtConfig4 c.Uint32T
	WdtFeed    struct {
		Val c.Uint32T
	}
	WdtWprotect c.Uint32T
	SwdConf     struct {
		Val c.Uint32T
	}
	SwdWprotect c.Uint32T
	SwCpuStall  struct {
		Val c.Uint32T
	}
	Store4     c.Uint32T
	Store5     c.Uint32T
	Store6     c.Uint32T
	Store7     c.Uint32T
	LowPowerSt struct {
		Val c.Uint32T
	}
	Diag0   c.Uint32T
	PadHold struct {
		Val c.Uint32T
	}
	DigPadHold c.Uint32T
	ExtWakeup1 struct {
		Val c.Uint32T
	}
	ExtWakeup1Status struct {
		Val c.Uint32T
	}
	BrownOut struct {
		Val c.Uint32T
	}
	TimeLow1  c.Uint32T
	TimeHigh1 struct {
		Val c.Uint32T
	}
	Xtal32kClkFactor c.Uint32T
	Xtal32kConf      struct {
		Val c.Uint32T
	}
	UlpCpTimer struct {
		Val c.Uint32T
	}
	UlpCpCtrl struct {
		Val c.Uint32T
	}
	CocpuCtrl struct {
		Val c.Uint32T
	}
	TouchCtrl1 struct {
		Val c.Uint32T
	}
	TouchCtrl2 struct {
		Val c.Uint32T
	}
	TouchScanCtrl struct {
		Val c.Uint32T
	}
	TouchSlpThres struct {
		Val c.Uint32T
	}
	TouchApproach struct {
		Val c.Uint32T
	}
	TouchFilterCtrl struct {
		Val c.Uint32T
	}
	UsbConf struct {
		Val c.Uint32T
	}
	TouchTimeoutCtrl struct {
		Val c.Uint32T
	}
	SlpRejectCause struct {
		Val c.Uint32T
	}
	Option1 struct {
		Val c.Uint32T
	}
	SlpWakeupCause struct {
		Val c.Uint32T
	}
	UlpCpTimer1 struct {
		Val c.Uint32T
	}
	IntEnaW1ts struct {
		Val c.Uint32T
	}
	IntEnaW1tc struct {
		Val c.Uint32T
	}
	RetentionCtrl struct {
		Val c.Uint32T
	}
	PgCtrl struct {
		Val c.Uint32T
	}
	FibSel struct {
		Val c.Uint32T
	}
	TouchDac struct {
		Val c.Uint32T
	}
	TouchDac1 struct {
		Val c.Uint32T
	}
	CocpuDisable struct {
		Val c.Uint32T
	}
	Reserved158 c.Uint32T
	Reserved15c c.Uint32T
	Reserved160 c.Uint32T
	Reserved164 c.Uint32T
	Reserved168 c.Uint32T
	Reserved16c c.Uint32T
	Reserved170 c.Uint32T
	Reserved174 c.Uint32T
	Reserved178 c.Uint32T
	Reserved17c c.Uint32T
	Reserved180 c.Uint32T
	Reserved184 c.Uint32T
	Reserved188 c.Uint32T
	Reserved18c c.Uint32T
	Reserved190 c.Uint32T
	Reserved194 c.Uint32T
	Reserved198 c.Uint32T
	Reserved19c c.Uint32T
	Reserved1a0 c.Uint32T
	Reserved1a4 c.Uint32T
	Reserved1a8 c.Uint32T
	Reserved1ac c.Uint32T
	Reserved1b0 c.Uint32T
	Reserved1b4 c.Uint32T
	Reserved1b8 c.Uint32T
	Reserved1bc c.Uint32T
	Reserved1c0 c.Uint32T
	Reserved1c4 c.Uint32T
	Reserved1c8 c.Uint32T
	Reserved1cc c.Uint32T
	Reserved1d0 c.Uint32T
	Reserved1d4 c.Uint32T
	Reserved1d8 c.Uint32T
	Reserved1dc c.Uint32T
	Reserved1e0 c.Uint32T
	Reserved1e4 c.Uint32T
	Reserved1e8 c.Uint32T
	Reserved1ec c.Uint32T
	Reserved1f0 c.Uint32T
	Reserved1f4 c.Uint32T
	Reserved1f8 c.Uint32T
	Date        struct {
		Val c.Uint32T
	}
}
type RtcCntlDevT RtcCntlDevS

type SystemDevS struct {
	Core1Control0 struct {
		Val c.Uint32T
	}
	Core1Control1 c.Uint32T
	CpuPeriClkEn  struct {
		Val c.Uint32T
	}
	CpuPeriRstEn struct {
		Val c.Uint32T
	}
	CpuPerConf struct {
		Val c.Uint32T
	}
	MemPdMask struct {
		Val c.Uint32T
	}
	PeripClkEn0 struct {
		Val c.Uint32T
	}
	PeripClkEn1 struct {
		Val c.Uint32T
	}
	PeripRstEn0 struct {
		Val c.Uint32T
	}
	PeripRstEn1 struct {
		Val c.Uint32T
	}
	BtLpckDivInt struct {
		Val c.Uint32T
	}
	BtLpckDivFrac struct {
		Val c.Uint32T
	}
	CpuIntrFromCpu0 struct {
		Val c.Uint32T
	}
	CpuIntrFromCpu1 struct {
		Val c.Uint32T
	}
	CpuIntrFromCpu2 struct {
		Val c.Uint32T
	}
	CpuIntrFromCpu3 struct {
		Val c.Uint32T
	}
	RsaPdCtrl struct {
		Val c.Uint32T
	}
	EdmaCtrl struct {
		Val c.Uint32T
	}
	CacheControl struct {
		Val c.Uint32T
	}
	ExternalDeviceEncryptDecryptControl struct {
		Val c.Uint32T
	}
	RtcFastmemConfig struct {
		Val c.Uint32T
	}
	RtcFastmemCrc    c.Uint32T
	RedundantEcoCtrl struct {
		Val c.Uint32T
	}
	ClockGate struct {
		Val c.Uint32T
	}
	SysclkConf struct {
		Val c.Uint32T
	}
	MemPvt struct {
		Val c.Uint32T
	}
	CombPvtLvtConf struct {
		Val c.Uint32T
	}
	CombPvtNvtConf struct {
		Val c.Uint32T
	}
	CombPvtHvtConf struct {
		Val c.Uint32T
	}
	CombPvtErrLvtSite0 struct {
		Val c.Uint32T
	}
	CombPvtErrNvtSite0 struct {
		Val c.Uint32T
	}
	CombPvtErrHvtSite0 struct {
		Val c.Uint32T
	}
	CombPvtErrLvtSite1 struct {
		Val c.Uint32T
	}
	CombPvtErrNvtSite1 struct {
		Val c.Uint32T
	}
	CombPvtErrHvtSite1 struct {
		Val c.Uint32T
	}
	CombPvtErrLvtSite2 struct {
		Val c.Uint32T
	}
	CombPvtErrNvtSite2 struct {
		Val c.Uint32T
	}
	CombPvtErrHvtSite2 struct {
		Val c.Uint32T
	}
	CombPvtErrLvtSite3 struct {
		Val c.Uint32T
	}
	CombPvtErrNvtSite3 struct {
		Val c.Uint32T
	}
	CombPvtErrHvtSite3 struct {
		Val c.Uint32T
	}
	ReservedA4  c.Uint32T
	ReservedA8  c.Uint32T
	ReservedAc  c.Uint32T
	ReservedB0  c.Uint32T
	ReservedB4  c.Uint32T
	ReservedB8  c.Uint32T
	ReservedBc  c.Uint32T
	ReservedC0  c.Uint32T
	ReservedC4  c.Uint32T
	ReservedC8  c.Uint32T
	ReservedCc  c.Uint32T
	ReservedD0  c.Uint32T
	ReservedD4  c.Uint32T
	ReservedD8  c.Uint32T
	ReservedDc  c.Uint32T
	ReservedE0  c.Uint32T
	ReservedE4  c.Uint32T
	ReservedE8  c.Uint32T
	ReservedEc  c.Uint32T
	ReservedF0  c.Uint32T
	ReservedF4  c.Uint32T
	ReservedF8  c.Uint32T
	ReservedFc  c.Uint32T
	Reserved100 c.Uint32T
	Reserved104 c.Uint32T
	Reserved108 c.Uint32T
	Reserved10c c.Uint32T
	Reserved110 c.Uint32T
	Reserved114 c.Uint32T
	Reserved118 c.Uint32T
	Reserved11c c.Uint32T
	Reserved120 c.Uint32T
	Reserved124 c.Uint32T
	Reserved128 c.Uint32T
	Reserved12c c.Uint32T
	Reserved130 c.Uint32T
	Reserved134 c.Uint32T
	Reserved138 c.Uint32T
	Reserved13c c.Uint32T
	Reserved140 c.Uint32T
	Reserved144 c.Uint32T
	Reserved148 c.Uint32T
	Reserved14c c.Uint32T
	Reserved150 c.Uint32T
	Reserved154 c.Uint32T
	Reserved158 c.Uint32T
	Reserved15c c.Uint32T
	Reserved160 c.Uint32T
	Reserved164 c.Uint32T
	Reserved168 c.Uint32T
	Reserved16c c.Uint32T
	Reserved170 c.Uint32T
	Reserved174 c.Uint32T
	Reserved178 c.Uint32T
	Reserved17c c.Uint32T
	Reserved180 c.Uint32T
	Reserved184 c.Uint32T
	Reserved188 c.Uint32T
	Reserved18c c.Uint32T
	Reserved190 c.Uint32T
	Reserved194 c.Uint32T
	Reserved198 c.Uint32T
	Reserved19c c.Uint32T
	Reserved1a0 c.Uint32T
	Reserved1a4 c.Uint32T
	Reserved1a8 c.Uint32T
	Reserved1ac c.Uint32T
	Reserved1b0 c.Uint32T
	Reserved1b4 c.Uint32T
	Reserved1b8 c.Uint32T
	Reserved1bc c.Uint32T
	Reserved1c0 c.Uint32T
	Reserved1c4 c.Uint32T
	Reserved1c8 c.Uint32T
	Reserved1cc c.Uint32T
	Reserved1d0 c.Uint32T
	Reserved1d4 c.Uint32T
	Reserved1d8 c.Uint32T
	Reserved1dc c.Uint32T
	Reserved1e0 c.Uint32T
	Reserved1e4 c.Uint32T
	Reserved1e8 c.Uint32T
	Reserved1ec c.Uint32T
	Reserved1f0 c.Uint32T
	Reserved1f4 c.Uint32T
	Reserved1f8 c.Uint32T
	Reserved1fc c.Uint32T
	Reserved200 c.Uint32T
	Reserved204 c.Uint32T
	Reserved208 c.Uint32T
	Reserved20c c.Uint32T
	Reserved210 c.Uint32T
	Reserved214 c.Uint32T
	Reserved218 c.Uint32T
	Reserved21c c.Uint32T
	Reserved220 c.Uint32T
	Reserved224 c.Uint32T
	Reserved228 c.Uint32T
	Reserved22c c.Uint32T
	Reserved230 c.Uint32T
	Reserved234 c.Uint32T
	Reserved238 c.Uint32T
	Reserved23c c.Uint32T
	Reserved240 c.Uint32T
	Reserved244 c.Uint32T
	Reserved248 c.Uint32T
	Reserved24c c.Uint32T
	Reserved250 c.Uint32T
	Reserved254 c.Uint32T
	Reserved258 c.Uint32T
	Reserved25c c.Uint32T
	Reserved260 c.Uint32T
	Reserved264 c.Uint32T
	Reserved268 c.Uint32T
	Reserved26c c.Uint32T
	Reserved270 c.Uint32T
	Reserved274 c.Uint32T
	Reserved278 c.Uint32T
	Reserved27c c.Uint32T
	Reserved280 c.Uint32T
	Reserved284 c.Uint32T
	Reserved288 c.Uint32T
	Reserved28c c.Uint32T
	Reserved290 c.Uint32T
	Reserved294 c.Uint32T
	Reserved298 c.Uint32T
	Reserved29c c.Uint32T
	Reserved2a0 c.Uint32T
	Reserved2a4 c.Uint32T
	Reserved2a8 c.Uint32T
	Reserved2ac c.Uint32T
	Reserved2b0 c.Uint32T
	Reserved2b4 c.Uint32T
	Reserved2b8 c.Uint32T
	Reserved2bc c.Uint32T
	Reserved2c0 c.Uint32T
	Reserved2c4 c.Uint32T
	Reserved2c8 c.Uint32T
	Reserved2cc c.Uint32T
	Reserved2d0 c.Uint32T
	Reserved2d4 c.Uint32T
	Reserved2d8 c.Uint32T
	Reserved2dc c.Uint32T
	Reserved2e0 c.Uint32T
	Reserved2e4 c.Uint32T
	Reserved2e8 c.Uint32T
	Reserved2ec c.Uint32T
	Reserved2f0 c.Uint32T
	Reserved2f4 c.Uint32T
	Reserved2f8 c.Uint32T
	Reserved2fc c.Uint32T
	Reserved300 c.Uint32T
	Reserved304 c.Uint32T
	Reserved308 c.Uint32T
	Reserved30c c.Uint32T
	Reserved310 c.Uint32T
	Reserved314 c.Uint32T
	Reserved318 c.Uint32T
	Reserved31c c.Uint32T
	Reserved320 c.Uint32T
	Reserved324 c.Uint32T
	Reserved328 c.Uint32T
	Reserved32c c.Uint32T
	Reserved330 c.Uint32T
	Reserved334 c.Uint32T
	Reserved338 c.Uint32T
	Reserved33c c.Uint32T
	Reserved340 c.Uint32T
	Reserved344 c.Uint32T
	Reserved348 c.Uint32T
	Reserved34c c.Uint32T
	Reserved350 c.Uint32T
	Reserved354 c.Uint32T
	Reserved358 c.Uint32T
	Reserved35c c.Uint32T
	Reserved360 c.Uint32T
	Reserved364 c.Uint32T
	Reserved368 c.Uint32T
	Reserved36c c.Uint32T
	Reserved370 c.Uint32T
	Reserved374 c.Uint32T
	Reserved378 c.Uint32T
	Reserved37c c.Uint32T
	Reserved380 c.Uint32T
	Reserved384 c.Uint32T
	Reserved388 c.Uint32T
	Reserved38c c.Uint32T
	Reserved390 c.Uint32T
	Reserved394 c.Uint32T
	Reserved398 c.Uint32T
	Reserved39c c.Uint32T
	Reserved3a0 c.Uint32T
	Reserved3a4 c.Uint32T
	Reserved3a8 c.Uint32T
	Reserved3ac c.Uint32T
	Reserved3b0 c.Uint32T
	Reserved3b4 c.Uint32T
	Reserved3b8 c.Uint32T
	Reserved3bc c.Uint32T
	Reserved3c0 c.Uint32T
	Reserved3c4 c.Uint32T
	Reserved3c8 c.Uint32T
	Reserved3cc c.Uint32T
	Reserved3d0 c.Uint32T
	Reserved3d4 c.Uint32T
	Reserved3d8 c.Uint32T
	Reserved3dc c.Uint32T
	Reserved3e0 c.Uint32T
	Reserved3e4 c.Uint32T
	Reserved3e8 c.Uint32T
	Reserved3ec c.Uint32T
	Reserved3f0 c.Uint32T
	Reserved3f4 c.Uint32T
	Reserved3f8 c.Uint32T
	Reserved3fc c.Uint32T
	Reserved400 c.Uint32T
	Reserved404 c.Uint32T
	Reserved408 c.Uint32T
	Reserved40c c.Uint32T
	Reserved410 c.Uint32T
	Reserved414 c.Uint32T
	Reserved418 c.Uint32T
	Reserved41c c.Uint32T
	Reserved420 c.Uint32T
	Reserved424 c.Uint32T
	Reserved428 c.Uint32T
	Reserved42c c.Uint32T
	Reserved430 c.Uint32T
	Reserved434 c.Uint32T
	Reserved438 c.Uint32T
	Reserved43c c.Uint32T
	Reserved440 c.Uint32T
	Reserved444 c.Uint32T
	Reserved448 c.Uint32T
	Reserved44c c.Uint32T
	Reserved450 c.Uint32T
	Reserved454 c.Uint32T
	Reserved458 c.Uint32T
	Reserved45c c.Uint32T
	Reserved460 c.Uint32T
	Reserved464 c.Uint32T
	Reserved468 c.Uint32T
	Reserved46c c.Uint32T
	Reserved470 c.Uint32T
	Reserved474 c.Uint32T
	Reserved478 c.Uint32T
	Reserved47c c.Uint32T
	Reserved480 c.Uint32T
	Reserved484 c.Uint32T
	Reserved488 c.Uint32T
	Reserved48c c.Uint32T
	Reserved490 c.Uint32T
	Reserved494 c.Uint32T
	Reserved498 c.Uint32T
	Reserved49c c.Uint32T
	Reserved4a0 c.Uint32T
	Reserved4a4 c.Uint32T
	Reserved4a8 c.Uint32T
	Reserved4ac c.Uint32T
	Reserved4b0 c.Uint32T
	Reserved4b4 c.Uint32T
	Reserved4b8 c.Uint32T
	Reserved4bc c.Uint32T
	Reserved4c0 c.Uint32T
	Reserved4c4 c.Uint32T
	Reserved4c8 c.Uint32T
	Reserved4cc c.Uint32T
	Reserved4d0 c.Uint32T
	Reserved4d4 c.Uint32T
	Reserved4d8 c.Uint32T
	Reserved4dc c.Uint32T
	Reserved4e0 c.Uint32T
	Reserved4e4 c.Uint32T
	Reserved4e8 c.Uint32T
	Reserved4ec c.Uint32T
	Reserved4f0 c.Uint32T
	Reserved4f4 c.Uint32T
	Reserved4f8 c.Uint32T
	Reserved4fc c.Uint32T
	Reserved500 c.Uint32T
	Reserved504 c.Uint32T
	Reserved508 c.Uint32T
	Reserved50c c.Uint32T
	Reserved510 c.Uint32T
	Reserved514 c.Uint32T
	Reserved518 c.Uint32T
	Reserved51c c.Uint32T
	Reserved520 c.Uint32T
	Reserved524 c.Uint32T
	Reserved528 c.Uint32T
	Reserved52c c.Uint32T
	Reserved530 c.Uint32T
	Reserved534 c.Uint32T
	Reserved538 c.Uint32T
	Reserved53c c.Uint32T
	Reserved540 c.Uint32T
	Reserved544 c.Uint32T
	Reserved548 c.Uint32T
	Reserved54c c.Uint32T
	Reserved550 c.Uint32T
	Reserved554 c.Uint32T
	Reserved558 c.Uint32T
	Reserved55c c.Uint32T
	Reserved560 c.Uint32T
	Reserved564 c.Uint32T
	Reserved568 c.Uint32T
	Reserved56c c.Uint32T
	Reserved570 c.Uint32T
	Reserved574 c.Uint32T
	Reserved578 c.Uint32T
	Reserved57c c.Uint32T
	Reserved580 c.Uint32T
	Reserved584 c.Uint32T
	Reserved588 c.Uint32T
	Reserved58c c.Uint32T
	Reserved590 c.Uint32T
	Reserved594 c.Uint32T
	Reserved598 c.Uint32T
	Reserved59c c.Uint32T
	Reserved5a0 c.Uint32T
	Reserved5a4 c.Uint32T
	Reserved5a8 c.Uint32T
	Reserved5ac c.Uint32T
	Reserved5b0 c.Uint32T
	Reserved5b4 c.Uint32T
	Reserved5b8 c.Uint32T
	Reserved5bc c.Uint32T
	Reserved5c0 c.Uint32T
	Reserved5c4 c.Uint32T
	Reserved5c8 c.Uint32T
	Reserved5cc c.Uint32T
	Reserved5d0 c.Uint32T
	Reserved5d4 c.Uint32T
	Reserved5d8 c.Uint32T
	Reserved5dc c.Uint32T
	Reserved5e0 c.Uint32T
	Reserved5e4 c.Uint32T
	Reserved5e8 c.Uint32T
	Reserved5ec c.Uint32T
	Reserved5f0 c.Uint32T
	Reserved5f4 c.Uint32T
	Reserved5f8 c.Uint32T
	Reserved5fc c.Uint32T
	Reserved600 c.Uint32T
	Reserved604 c.Uint32T
	Reserved608 c.Uint32T
	Reserved60c c.Uint32T
	Reserved610 c.Uint32T
	Reserved614 c.Uint32T
	Reserved618 c.Uint32T
	Reserved61c c.Uint32T
	Reserved620 c.Uint32T
	Reserved624 c.Uint32T
	Reserved628 c.Uint32T
	Reserved62c c.Uint32T
	Reserved630 c.Uint32T
	Reserved634 c.Uint32T
	Reserved638 c.Uint32T
	Reserved63c c.Uint32T
	Reserved640 c.Uint32T
	Reserved644 c.Uint32T
	Reserved648 c.Uint32T
	Reserved64c c.Uint32T
	Reserved650 c.Uint32T
	Reserved654 c.Uint32T
	Reserved658 c.Uint32T
	Reserved65c c.Uint32T
	Reserved660 c.Uint32T
	Reserved664 c.Uint32T
	Reserved668 c.Uint32T
	Reserved66c c.Uint32T
	Reserved670 c.Uint32T
	Reserved674 c.Uint32T
	Reserved678 c.Uint32T
	Reserved67c c.Uint32T
	Reserved680 c.Uint32T
	Reserved684 c.Uint32T
	Reserved688 c.Uint32T
	Reserved68c c.Uint32T
	Reserved690 c.Uint32T
	Reserved694 c.Uint32T
	Reserved698 c.Uint32T
	Reserved69c c.Uint32T
	Reserved6a0 c.Uint32T
	Reserved6a4 c.Uint32T
	Reserved6a8 c.Uint32T
	Reserved6ac c.Uint32T
	Reserved6b0 c.Uint32T
	Reserved6b4 c.Uint32T
	Reserved6b8 c.Uint32T
	Reserved6bc c.Uint32T
	Reserved6c0 c.Uint32T
	Reserved6c4 c.Uint32T
	Reserved6c8 c.Uint32T
	Reserved6cc c.Uint32T
	Reserved6d0 c.Uint32T
	Reserved6d4 c.Uint32T
	Reserved6d8 c.Uint32T
	Reserved6dc c.Uint32T
	Reserved6e0 c.Uint32T
	Reserved6e4 c.Uint32T
	Reserved6e8 c.Uint32T
	Reserved6ec c.Uint32T
	Reserved6f0 c.Uint32T
	Reserved6f4 c.Uint32T
	Reserved6f8 c.Uint32T
	Reserved6fc c.Uint32T
	Reserved700 c.Uint32T
	Reserved704 c.Uint32T
	Reserved708 c.Uint32T
	Reserved70c c.Uint32T
	Reserved710 c.Uint32T
	Reserved714 c.Uint32T
	Reserved718 c.Uint32T
	Reserved71c c.Uint32T
	Reserved720 c.Uint32T
	Reserved724 c.Uint32T
	Reserved728 c.Uint32T
	Reserved72c c.Uint32T
	Reserved730 c.Uint32T
	Reserved734 c.Uint32T
	Reserved738 c.Uint32T
	Reserved73c c.Uint32T
	Reserved740 c.Uint32T
	Reserved744 c.Uint32T
	Reserved748 c.Uint32T
	Reserved74c c.Uint32T
	Reserved750 c.Uint32T
	Reserved754 c.Uint32T
	Reserved758 c.Uint32T
	Reserved75c c.Uint32T
	Reserved760 c.Uint32T
	Reserved764 c.Uint32T
	Reserved768 c.Uint32T
	Reserved76c c.Uint32T
	Reserved770 c.Uint32T
	Reserved774 c.Uint32T
	Reserved778 c.Uint32T
	Reserved77c c.Uint32T
	Reserved780 c.Uint32T
	Reserved784 c.Uint32T
	Reserved788 c.Uint32T
	Reserved78c c.Uint32T
	Reserved790 c.Uint32T
	Reserved794 c.Uint32T
	Reserved798 c.Uint32T
	Reserved79c c.Uint32T
	Reserved7a0 c.Uint32T
	Reserved7a4 c.Uint32T
	Reserved7a8 c.Uint32T
	Reserved7ac c.Uint32T
	Reserved7b0 c.Uint32T
	Reserved7b4 c.Uint32T
	Reserved7b8 c.Uint32T
	Reserved7bc c.Uint32T
	Reserved7c0 c.Uint32T
	Reserved7c4 c.Uint32T
	Reserved7c8 c.Uint32T
	Reserved7cc c.Uint32T
	Reserved7d0 c.Uint32T
	Reserved7d4 c.Uint32T
	Reserved7d8 c.Uint32T
	Reserved7dc c.Uint32T
	Reserved7e0 c.Uint32T
	Reserved7e4 c.Uint32T
	Reserved7e8 c.Uint32T
	Reserved7ec c.Uint32T
	Reserved7f0 c.Uint32T
	Reserved7f4 c.Uint32T
	Reserved7f8 c.Uint32T
	Reserved7fc c.Uint32T
	Reserved800 c.Uint32T
	Reserved804 c.Uint32T
	Reserved808 c.Uint32T
	Reserved80c c.Uint32T
	Reserved810 c.Uint32T
	Reserved814 c.Uint32T
	Reserved818 c.Uint32T
	Reserved81c c.Uint32T
	Reserved820 c.Uint32T
	Reserved824 c.Uint32T
	Reserved828 c.Uint32T
	Reserved82c c.Uint32T
	Reserved830 c.Uint32T
	Reserved834 c.Uint32T
	Reserved838 c.Uint32T
	Reserved83c c.Uint32T
	Reserved840 c.Uint32T
	Reserved844 c.Uint32T
	Reserved848 c.Uint32T
	Reserved84c c.Uint32T
	Reserved850 c.Uint32T
	Reserved854 c.Uint32T
	Reserved858 c.Uint32T
	Reserved85c c.Uint32T
	Reserved860 c.Uint32T
	Reserved864 c.Uint32T
	Reserved868 c.Uint32T
	Reserved86c c.Uint32T
	Reserved870 c.Uint32T
	Reserved874 c.Uint32T
	Reserved878 c.Uint32T
	Reserved87c c.Uint32T
	Reserved880 c.Uint32T
	Reserved884 c.Uint32T
	Reserved888 c.Uint32T
	Reserved88c c.Uint32T
	Reserved890 c.Uint32T
	Reserved894 c.Uint32T
	Reserved898 c.Uint32T
	Reserved89c c.Uint32T
	Reserved8a0 c.Uint32T
	Reserved8a4 c.Uint32T
	Reserved8a8 c.Uint32T
	Reserved8ac c.Uint32T
	Reserved8b0 c.Uint32T
	Reserved8b4 c.Uint32T
	Reserved8b8 c.Uint32T
	Reserved8bc c.Uint32T
	Reserved8c0 c.Uint32T
	Reserved8c4 c.Uint32T
	Reserved8c8 c.Uint32T
	Reserved8cc c.Uint32T
	Reserved8d0 c.Uint32T
	Reserved8d4 c.Uint32T
	Reserved8d8 c.Uint32T
	Reserved8dc c.Uint32T
	Reserved8e0 c.Uint32T
	Reserved8e4 c.Uint32T
	Reserved8e8 c.Uint32T
	Reserved8ec c.Uint32T
	Reserved8f0 c.Uint32T
	Reserved8f4 c.Uint32T
	Reserved8f8 c.Uint32T
	Reserved8fc c.Uint32T
	Reserved900 c.Uint32T
	Reserved904 c.Uint32T
	Reserved908 c.Uint32T
	Reserved90c c.Uint32T
	Reserved910 c.Uint32T
	Reserved914 c.Uint32T
	Reserved918 c.Uint32T
	Reserved91c c.Uint32T
	Reserved920 c.Uint32T
	Reserved924 c.Uint32T
	Reserved928 c.Uint32T
	Reserved92c c.Uint32T
	Reserved930 c.Uint32T
	Reserved934 c.Uint32T
	Reserved938 c.Uint32T
	Reserved93c c.Uint32T
	Reserved940 c.Uint32T
	Reserved944 c.Uint32T
	Reserved948 c.Uint32T
	Reserved94c c.Uint32T
	Reserved950 c.Uint32T
	Reserved954 c.Uint32T
	Reserved958 c.Uint32T
	Reserved95c c.Uint32T
	Reserved960 c.Uint32T
	Reserved964 c.Uint32T
	Reserved968 c.Uint32T
	Reserved96c c.Uint32T
	Reserved970 c.Uint32T
	Reserved974 c.Uint32T
	Reserved978 c.Uint32T
	Reserved97c c.Uint32T
	Reserved980 c.Uint32T
	Reserved984 c.Uint32T
	Reserved988 c.Uint32T
	Reserved98c c.Uint32T
	Reserved990 c.Uint32T
	Reserved994 c.Uint32T
	Reserved998 c.Uint32T
	Reserved99c c.Uint32T
	Reserved9a0 c.Uint32T
	Reserved9a4 c.Uint32T
	Reserved9a8 c.Uint32T
	Reserved9ac c.Uint32T
	Reserved9b0 c.Uint32T
	Reserved9b4 c.Uint32T
	Reserved9b8 c.Uint32T
	Reserved9bc c.Uint32T
	Reserved9c0 c.Uint32T
	Reserved9c4 c.Uint32T
	Reserved9c8 c.Uint32T
	Reserved9cc c.Uint32T
	Reserved9d0 c.Uint32T
	Reserved9d4 c.Uint32T
	Reserved9d8 c.Uint32T
	Reserved9dc c.Uint32T
	Reserved9e0 c.Uint32T
	Reserved9e4 c.Uint32T
	Reserved9e8 c.Uint32T
	Reserved9ec c.Uint32T
	Reserved9f0 c.Uint32T
	Reserved9f4 c.Uint32T
	Reserved9f8 c.Uint32T
	Reserved9fc c.Uint32T
	ReservedA00 c.Uint32T
	ReservedA04 c.Uint32T
	ReservedA08 c.Uint32T
	ReservedA0c c.Uint32T
	ReservedA10 c.Uint32T
	ReservedA14 c.Uint32T
	ReservedA18 c.Uint32T
	ReservedA1c c.Uint32T
	ReservedA20 c.Uint32T
	ReservedA24 c.Uint32T
	ReservedA28 c.Uint32T
	ReservedA2c c.Uint32T
	ReservedA30 c.Uint32T
	ReservedA34 c.Uint32T
	ReservedA38 c.Uint32T
	ReservedA3c c.Uint32T
	ReservedA40 c.Uint32T
	ReservedA44 c.Uint32T
	ReservedA48 c.Uint32T
	ReservedA4c c.Uint32T
	ReservedA50 c.Uint32T
	ReservedA54 c.Uint32T
	ReservedA58 c.Uint32T
	ReservedA5c c.Uint32T
	ReservedA60 c.Uint32T
	ReservedA64 c.Uint32T
	ReservedA68 c.Uint32T
	ReservedA6c c.Uint32T
	ReservedA70 c.Uint32T
	ReservedA74 c.Uint32T
	ReservedA78 c.Uint32T
	ReservedA7c c.Uint32T
	ReservedA80 c.Uint32T
	ReservedA84 c.Uint32T
	ReservedA88 c.Uint32T
	ReservedA8c c.Uint32T
	ReservedA90 c.Uint32T
	ReservedA94 c.Uint32T
	ReservedA98 c.Uint32T
	ReservedA9c c.Uint32T
	ReservedAa0 c.Uint32T
	ReservedAa4 c.Uint32T
	ReservedAa8 c.Uint32T
	ReservedAac c.Uint32T
	ReservedAb0 c.Uint32T
	ReservedAb4 c.Uint32T
	ReservedAb8 c.Uint32T
	ReservedAbc c.Uint32T
	ReservedAc0 c.Uint32T
	ReservedAc4 c.Uint32T
	ReservedAc8 c.Uint32T
	ReservedAcc c.Uint32T
	ReservedAd0 c.Uint32T
	ReservedAd4 c.Uint32T
	ReservedAd8 c.Uint32T
	ReservedAdc c.Uint32T
	ReservedAe0 c.Uint32T
	ReservedAe4 c.Uint32T
	ReservedAe8 c.Uint32T
	ReservedAec c.Uint32T
	ReservedAf0 c.Uint32T
	ReservedAf4 c.Uint32T
	ReservedAf8 c.Uint32T
	ReservedAfc c.Uint32T
	ReservedB00 c.Uint32T
	ReservedB04 c.Uint32T
	ReservedB08 c.Uint32T
	ReservedB0c c.Uint32T
	ReservedB10 c.Uint32T
	ReservedB14 c.Uint32T
	ReservedB18 c.Uint32T
	ReservedB1c c.Uint32T
	ReservedB20 c.Uint32T
	ReservedB24 c.Uint32T
	ReservedB28 c.Uint32T
	ReservedB2c c.Uint32T
	ReservedB30 c.Uint32T
	ReservedB34 c.Uint32T
	ReservedB38 c.Uint32T
	ReservedB3c c.Uint32T
	ReservedB40 c.Uint32T
	ReservedB44 c.Uint32T
	ReservedB48 c.Uint32T
	ReservedB4c c.Uint32T
	ReservedB50 c.Uint32T
	ReservedB54 c.Uint32T
	ReservedB58 c.Uint32T
	ReservedB5c c.Uint32T
	ReservedB60 c.Uint32T
	ReservedB64 c.Uint32T
	ReservedB68 c.Uint32T
	ReservedB6c c.Uint32T
	ReservedB70 c.Uint32T
	ReservedB74 c.Uint32T
	ReservedB78 c.Uint32T
	ReservedB7c c.Uint32T
	ReservedB80 c.Uint32T
	ReservedB84 c.Uint32T
	ReservedB88 c.Uint32T
	ReservedB8c c.Uint32T
	ReservedB90 c.Uint32T
	ReservedB94 c.Uint32T
	ReservedB98 c.Uint32T
	ReservedB9c c.Uint32T
	ReservedBa0 c.Uint32T
	ReservedBa4 c.Uint32T
	ReservedBa8 c.Uint32T
	ReservedBac c.Uint32T
	ReservedBb0 c.Uint32T
	ReservedBb4 c.Uint32T
	ReservedBb8 c.Uint32T
	ReservedBbc c.Uint32T
	ReservedBc0 c.Uint32T
	ReservedBc4 c.Uint32T
	ReservedBc8 c.Uint32T
	ReservedBcc c.Uint32T
	ReservedBd0 c.Uint32T
	ReservedBd4 c.Uint32T
	ReservedBd8 c.Uint32T
	ReservedBdc c.Uint32T
	ReservedBe0 c.Uint32T
	ReservedBe4 c.Uint32T
	ReservedBe8 c.Uint32T
	ReservedBec c.Uint32T
	ReservedBf0 c.Uint32T
	ReservedBf4 c.Uint32T
	ReservedBf8 c.Uint32T
	ReservedBfc c.Uint32T
	ReservedC00 c.Uint32T
	ReservedC04 c.Uint32T
	ReservedC08 c.Uint32T
	ReservedC0c c.Uint32T
	ReservedC10 c.Uint32T
	ReservedC14 c.Uint32T
	ReservedC18 c.Uint32T
	ReservedC1c c.Uint32T
	ReservedC20 c.Uint32T
	ReservedC24 c.Uint32T
	ReservedC28 c.Uint32T
	ReservedC2c c.Uint32T
	ReservedC30 c.Uint32T
	ReservedC34 c.Uint32T
	ReservedC38 c.Uint32T
	ReservedC3c c.Uint32T
	ReservedC40 c.Uint32T
	ReservedC44 c.Uint32T
	ReservedC48 c.Uint32T
	ReservedC4c c.Uint32T
	ReservedC50 c.Uint32T
	ReservedC54 c.Uint32T
	ReservedC58 c.Uint32T
	ReservedC5c c.Uint32T
	ReservedC60 c.Uint32T
	ReservedC64 c.Uint32T
	ReservedC68 c.Uint32T
	ReservedC6c c.Uint32T
	ReservedC70 c.Uint32T
	ReservedC74 c.Uint32T
	ReservedC78 c.Uint32T
	ReservedC7c c.Uint32T
	ReservedC80 c.Uint32T
	ReservedC84 c.Uint32T
	ReservedC88 c.Uint32T
	ReservedC8c c.Uint32T
	ReservedC90 c.Uint32T
	ReservedC94 c.Uint32T
	ReservedC98 c.Uint32T
	ReservedC9c c.Uint32T
	ReservedCa0 c.Uint32T
	ReservedCa4 c.Uint32T
	ReservedCa8 c.Uint32T
	ReservedCac c.Uint32T
	ReservedCb0 c.Uint32T
	ReservedCb4 c.Uint32T
	ReservedCb8 c.Uint32T
	ReservedCbc c.Uint32T
	ReservedCc0 c.Uint32T
	ReservedCc4 c.Uint32T
	ReservedCc8 c.Uint32T
	ReservedCcc c.Uint32T
	ReservedCd0 c.Uint32T
	ReservedCd4 c.Uint32T
	ReservedCd8 c.Uint32T
	ReservedCdc c.Uint32T
	ReservedCe0 c.Uint32T
	ReservedCe4 c.Uint32T
	ReservedCe8 c.Uint32T
	ReservedCec c.Uint32T
	ReservedCf0 c.Uint32T
	ReservedCf4 c.Uint32T
	ReservedCf8 c.Uint32T
	ReservedCfc c.Uint32T
	ReservedD00 c.Uint32T
	ReservedD04 c.Uint32T
	ReservedD08 c.Uint32T
	ReservedD0c c.Uint32T
	ReservedD10 c.Uint32T
	ReservedD14 c.Uint32T
	ReservedD18 c.Uint32T
	ReservedD1c c.Uint32T
	ReservedD20 c.Uint32T
	ReservedD24 c.Uint32T
	ReservedD28 c.Uint32T
	ReservedD2c c.Uint32T
	ReservedD30 c.Uint32T
	ReservedD34 c.Uint32T
	ReservedD38 c.Uint32T
	ReservedD3c c.Uint32T
	ReservedD40 c.Uint32T
	ReservedD44 c.Uint32T
	ReservedD48 c.Uint32T
	ReservedD4c c.Uint32T
	ReservedD50 c.Uint32T
	ReservedD54 c.Uint32T
	ReservedD58 c.Uint32T
	ReservedD5c c.Uint32T
	ReservedD60 c.Uint32T
	ReservedD64 c.Uint32T
	ReservedD68 c.Uint32T
	ReservedD6c c.Uint32T
	ReservedD70 c.Uint32T
	ReservedD74 c.Uint32T
	ReservedD78 c.Uint32T
	ReservedD7c c.Uint32T
	ReservedD80 c.Uint32T
	ReservedD84 c.Uint32T
	ReservedD88 c.Uint32T
	ReservedD8c c.Uint32T
	ReservedD90 c.Uint32T
	ReservedD94 c.Uint32T
	ReservedD98 c.Uint32T
	ReservedD9c c.Uint32T
	ReservedDa0 c.Uint32T
	ReservedDa4 c.Uint32T
	ReservedDa8 c.Uint32T
	ReservedDac c.Uint32T
	ReservedDb0 c.Uint32T
	ReservedDb4 c.Uint32T
	ReservedDb8 c.Uint32T
	ReservedDbc c.Uint32T
	ReservedDc0 c.Uint32T
	ReservedDc4 c.Uint32T
	ReservedDc8 c.Uint32T
	ReservedDcc c.Uint32T
	ReservedDd0 c.Uint32T
	ReservedDd4 c.Uint32T
	ReservedDd8 c.Uint32T
	ReservedDdc c.Uint32T
	ReservedDe0 c.Uint32T
	ReservedDe4 c.Uint32T
	ReservedDe8 c.Uint32T
	ReservedDec c.Uint32T
	ReservedDf0 c.Uint32T
	ReservedDf4 c.Uint32T
	ReservedDf8 c.Uint32T
	ReservedDfc c.Uint32T
	ReservedE00 c.Uint32T
	ReservedE04 c.Uint32T
	ReservedE08 c.Uint32T
	ReservedE0c c.Uint32T
	ReservedE10 c.Uint32T
	ReservedE14 c.Uint32T
	ReservedE18 c.Uint32T
	ReservedE1c c.Uint32T
	ReservedE20 c.Uint32T
	ReservedE24 c.Uint32T
	ReservedE28 c.Uint32T
	ReservedE2c c.Uint32T
	ReservedE30 c.Uint32T
	ReservedE34 c.Uint32T
	ReservedE38 c.Uint32T
	ReservedE3c c.Uint32T
	ReservedE40 c.Uint32T
	ReservedE44 c.Uint32T
	ReservedE48 c.Uint32T
	ReservedE4c c.Uint32T
	ReservedE50 c.Uint32T
	ReservedE54 c.Uint32T
	ReservedE58 c.Uint32T
	ReservedE5c c.Uint32T
	ReservedE60 c.Uint32T
	ReservedE64 c.Uint32T
	ReservedE68 c.Uint32T
	ReservedE6c c.Uint32T
	ReservedE70 c.Uint32T
	ReservedE74 c.Uint32T
	ReservedE78 c.Uint32T
	ReservedE7c c.Uint32T
	ReservedE80 c.Uint32T
	ReservedE84 c.Uint32T
	ReservedE88 c.Uint32T
	ReservedE8c c.Uint32T
	ReservedE90 c.Uint32T
	ReservedE94 c.Uint32T
	ReservedE98 c.Uint32T
	ReservedE9c c.Uint32T
	ReservedEa0 c.Uint32T
	ReservedEa4 c.Uint32T
	ReservedEa8 c.Uint32T
	ReservedEac c.Uint32T
	ReservedEb0 c.Uint32T
	ReservedEb4 c.Uint32T
	ReservedEb8 c.Uint32T
	ReservedEbc c.Uint32T
	ReservedEc0 c.Uint32T
	ReservedEc4 c.Uint32T
	ReservedEc8 c.Uint32T
	ReservedEcc c.Uint32T
	ReservedEd0 c.Uint32T
	ReservedEd4 c.Uint32T
	ReservedEd8 c.Uint32T
	ReservedEdc c.Uint32T
	ReservedEe0 c.Uint32T
	ReservedEe4 c.Uint32T
	ReservedEe8 c.Uint32T
	ReservedEec c.Uint32T
	ReservedEf0 c.Uint32T
	ReservedEf4 c.Uint32T
	ReservedEf8 c.Uint32T
	ReservedEfc c.Uint32T
	ReservedF00 c.Uint32T
	ReservedF04 c.Uint32T
	ReservedF08 c.Uint32T
	ReservedF0c c.Uint32T
	ReservedF10 c.Uint32T
	ReservedF14 c.Uint32T
	ReservedF18 c.Uint32T
	ReservedF1c c.Uint32T
	ReservedF20 c.Uint32T
	ReservedF24 c.Uint32T
	ReservedF28 c.Uint32T
	ReservedF2c c.Uint32T
	ReservedF30 c.Uint32T
	ReservedF34 c.Uint32T
	ReservedF38 c.Uint32T
	ReservedF3c c.Uint32T
	ReservedF40 c.Uint32T
	ReservedF44 c.Uint32T
	ReservedF48 c.Uint32T
	ReservedF4c c.Uint32T
	ReservedF50 c.Uint32T
	ReservedF54 c.Uint32T
	ReservedF58 c.Uint32T
	ReservedF5c c.Uint32T
	ReservedF60 c.Uint32T
	ReservedF64 c.Uint32T
	ReservedF68 c.Uint32T
	ReservedF6c c.Uint32T
	ReservedF70 c.Uint32T
	ReservedF74 c.Uint32T
	ReservedF78 c.Uint32T
	ReservedF7c c.Uint32T
	ReservedF80 c.Uint32T
	ReservedF84 c.Uint32T
	ReservedF88 c.Uint32T
	ReservedF8c c.Uint32T
	ReservedF90 c.Uint32T
	ReservedF94 c.Uint32T
	ReservedF98 c.Uint32T
	ReservedF9c c.Uint32T
	ReservedFa0 c.Uint32T
	ReservedFa4 c.Uint32T
	ReservedFa8 c.Uint32T
	ReservedFac c.Uint32T
	ReservedFb0 c.Uint32T
	ReservedFb4 c.Uint32T
	ReservedFb8 c.Uint32T
	ReservedFbc c.Uint32T
	ReservedFc0 c.Uint32T
	ReservedFc4 c.Uint32T
	ReservedFc8 c.Uint32T
	ReservedFcc c.Uint32T
	ReservedFd0 c.Uint32T
	ReservedFd4 c.Uint32T
	ReservedFd8 c.Uint32T
	ReservedFdc c.Uint32T
	ReservedFe0 c.Uint32T
	ReservedFe4 c.Uint32T
	ReservedFe8 c.Uint32T
	ReservedFec c.Uint32T
	ReservedFf0 c.Uint32T
	ReservedFf4 c.Uint32T
	ReservedFf8 c.Uint32T
	Date        struct {
		Val c.Uint32T
	}
}
type SystemDevT SystemDevS
type AdcLlPowerT c.Int

const (
	ADC_LL_POWER_BY_FSM AdcLlPowerT = 0
	ADC_LL_POWER_SW_ON  AdcLlPowerT = 1
	ADC_LL_POWER_SW_OFF AdcLlPowerT = 2
)

type AdcLlRtcRawDataT c.Int

const (
	ADC_LL_RTC_DATA_OK         AdcLlRtcRawDataT = 0
	ADC_LL_RTC_CTRL_UNSELECTED AdcLlRtcRawDataT = 1
	ADC_LL_RTC_CTRL_BREAK      AdcLlRtcRawDataT = 2
	ADC_LL_RTC_DATA_FAIL       AdcLlRtcRawDataT = -1
)

type AdcLlControllerT c.Int

const (
	ADC_LL_CTRL_RTC AdcLlControllerT = 0
	ADC_LL_CTRL_ULP AdcLlControllerT = 1
	ADC_LL_CTRL_DIG AdcLlControllerT = 2
	ADC_LL_CTRL_ARB AdcLlControllerT = 3
)

type AdcLlDigiConvertModeT c.Int

const (
	ADC_LL_DIGI_CONV_ONLY_ADC1  AdcLlDigiConvertModeT = 0
	ADC_LL_DIGI_CONV_ONLY_ADC2  AdcLlDigiConvertModeT = 1
	ADC_LL_DIGI_CONV_BOTH_UNIT  AdcLlDigiConvertModeT = 2
	ADC_LL_DIGI_CONV_ALTER_UNIT AdcLlDigiConvertModeT = 3
)

type AdcLlDigiPatternTableT struct {
	Unused [8]uint8
}

/**
 * @brief Analyze whether the obtained raw data is correct.
 *        ADC2 use arbiter by default. The arbitration result can be judged by the flag bit in the original data.
 *
 */

type AdcLlRtcOutputDataT struct {
	Unused [8]uint8
}
type GdmaTriggerPeripheralT c.Int

const (
	GDMA_TRIG_PERIPH_M2M    GdmaTriggerPeripheralT = 0
	GDMA_TRIG_PERIPH_UHCI   GdmaTriggerPeripheralT = 1
	GDMA_TRIG_PERIPH_SPI    GdmaTriggerPeripheralT = 2
	GDMA_TRIG_PERIPH_I2S    GdmaTriggerPeripheralT = 3
	GDMA_TRIG_PERIPH_AES    GdmaTriggerPeripheralT = 4
	GDMA_TRIG_PERIPH_SHA    GdmaTriggerPeripheralT = 5
	GDMA_TRIG_PERIPH_ADC    GdmaTriggerPeripheralT = 6
	GDMA_TRIG_PERIPH_DAC    GdmaTriggerPeripheralT = 7
	GDMA_TRIG_PERIPH_LCD    GdmaTriggerPeripheralT = 8
	GDMA_TRIG_PERIPH_CAM    GdmaTriggerPeripheralT = 9
	GDMA_TRIG_PERIPH_RMT    GdmaTriggerPeripheralT = 10
	GDMA_TRIG_PERIPH_PARLIO GdmaTriggerPeripheralT = 11
	GDMA_TRIG_PERIPH_I3C    GdmaTriggerPeripheralT = 12
)

type GdmaChannelDirectionT c.Int

const (
	GDMA_CHANNEL_DIRECTION_TX GdmaChannelDirectionT = 0
	GDMA_CHANNEL_DIRECTION_RX GdmaChannelDirectionT = 1
)

type GdmaEtmEventTypeT c.Int

const (
	GDMA_ETM_EVENT_EOF GdmaEtmEventTypeT = 0
	GDMA_ETM_EVENT_MAX GdmaEtmEventTypeT = 1
)

type GdmaEtmTaskTypeT c.Int

const (
	GDMA_ETM_TASK_START GdmaEtmTaskTypeT = 0
	GDMA_ETM_TASK_MAX   GdmaEtmTaskTypeT = 1
)

type GdmaDevS struct {
	Channel [5]struct {
		In struct {
			Conf0 struct {
				Val c.Uint32T
			}
			Conf1 struct {
				Val c.Uint32T
			}
			IntRaw struct {
				Val c.Uint32T
			}
			IntSt struct {
				Val c.Uint32T
			}
			IntEna struct {
				Val c.Uint32T
			}
			IntClr struct {
				Val c.Uint32T
			}
			InfifoStatus struct {
				Val c.Uint32T
			}
			Pop struct {
				Val c.Uint32T
			}
			Link struct {
				Val c.Uint32T
			}
			State struct {
				Val c.Uint32T
			}
			SucEofDesAddr c.Uint32T
			ErrEofDesAddr c.Uint32T
			Dscr          c.Uint32T
			DscrBf0       c.Uint32T
			DscrBf1       c.Uint32T
			Weight        struct {
				Val c.Uint32T
			}
			Reserved40 c.Uint32T
			Pri        struct {
				Val c.Uint32T
			}
			PeriSel struct {
				Val c.Uint32T
			}
			Reserved4c c.Uint32T
			Reserved50 c.Uint32T
			Reserved54 c.Uint32T
			Reserved58 c.Uint32T
			Reserved5c c.Uint32T
		}
		Out struct {
			Conf0 struct {
				Val c.Uint32T
			}
			Conf1 struct {
				Val c.Uint32T
			}
			IntRaw struct {
				Val c.Uint32T
			}
			IntSt struct {
				Val c.Uint32T
			}
			IntEna struct {
				Val c.Uint32T
			}
			IntClr struct {
				Val c.Uint32T
			}
			OutfifoStatus struct {
				Val c.Uint32T
			}
			Push struct {
				Val c.Uint32T
			}
			Link struct {
				Val c.Uint32T
			}
			State struct {
				Val c.Uint32T
			}
			EofDesAddr    c.Uint32T
			EofBfrDesAddr c.Uint32T
			Dscr          c.Uint32T
			DscrBf0       c.Uint32T
			DscrBf1       c.Uint32T
			Weight        struct {
				Val c.Uint32T
			}
			ReservedA0 c.Uint32T
			Pri        struct {
				Val c.Uint32T
			}
			PeriSel struct {
				Val c.Uint32T
			}
			ReservedAc c.Uint32T
			ReservedB0 c.Uint32T
			ReservedB4 c.Uint32T
			ReservedB8 c.Uint32T
			ReservedBc c.Uint32T
		}
	}
	AhbTest struct {
		Val c.Uint32T
	}
	PdConf struct {
		Val c.Uint32T
	}
	MiscConf struct {
		Val c.Uint32T
	}
	SramSize [5]struct {
		In struct {
			Val c.Uint32T
		}
		Out struct {
			Val c.Uint32T
		}
	}
	ExtmemRejectAddr c.Uint32T
	ExtmemRejectSt   struct {
		Val c.Uint32T
	}
	ExtmemRejectIntRaw struct {
		Val c.Uint32T
	}
	ExtmemRejectIntSt struct {
		Val c.Uint32T
	}
	ExtmemRejectIntEna struct {
		Val c.Uint32T
	}
	ExtmemRejectIntClr struct {
		Val c.Uint32T
	}
	Date c.Uint32T
}
type GdmaDevT GdmaDevS
type AdcHalDmaDescStatusT c.Int

const (
	ADC_HAL_DMA_DESC_VALID   AdcHalDmaDescStatusT = 0
	ADC_HAL_DMA_DESC_WAITING AdcHalDmaDescStatusT = 1
	ADC_HAL_DMA_DESC_NULL    AdcHalDmaDescStatusT = 2
)

/**
 * @brief Configuration of the HAL
 */

type AdcHalDmaConfigT struct {
	EofDescNum c.Uint32T
	EofStep    c.Uint32T
	EofNum     c.Uint32T
}

/**
 * @brief Context of the HAL
 */

type AdcHalDmaCtxT struct {
	RxDesc        *DmaDescriptorT
	DescDummyHead DmaDescriptorT
	CurDescPtr    *DmaDescriptorT
	EofDescNum    c.Uint32T
	EofStep       c.Uint32T
	EofNum        c.Uint32T
}

type AdcHalDigiCtrlrCfgT struct {
	AdcPatternLen c.Uint32T
	AdcPattern    *AdcDigiPatternConfigT
	SampleFreqHz  c.Uint32T
	ConvMode      AdcDigiConvertModeT
	BitWidth      c.Uint32T
	ClkSrc        AdcContinuousClkSrcT
	ClkSrcFreqHz  c.Uint32T
}

/**
 * @brief Power management config
 *
 * Pass a pointer to this structure as an argument to esp_pm_configure function.
 */

type EspPmConfigT struct {
	MaxFreqMhz       c.Int
	MinFreqMhz       c.Int
	LightSleepEnable bool
}
type EspPmConfigEsp32T EspPmConfigT
type EspPmConfigEsp32s2T EspPmConfigT
type EspPmConfigEsp32s3T EspPmConfigT
type EspPmConfigEsp32c3T EspPmConfigT
type EspPmConfigEsp32c2T EspPmConfigT
type EspPmConfigEsp32c6T EspPmConfigT
type EspPmLockTypeT c.Int

const (
	ESP_PM_CPU_FREQ_MAX   EspPmLockTypeT = 0
	ESP_PM_APB_FREQ_MAX   EspPmLockTypeT = 1
	ESP_PM_NO_LIGHT_SLEEP EspPmLockTypeT = 2
	ESP_PM_LOCK_MAX       EspPmLockTypeT = 3
)

type EspPmLock struct {
	Unused [8]uint8
}
type EspPmLockHandleT *EspPmLock

// llgo:type C
type XtHalVoidFunc func()

/*
 * This structure is used to represent each MPU entry (both foreground and
 * background). The internal representation of the structure is subject to
 * change, so it should only be accessed by the XTHAL_MPU_ENTRY_... macros
 * below.
 */

type XthalMPUEntry struct {
	As c.Uint32T
	At c.Uint32T
}

/*
 *  Kernel vector mode exception stack frame.
 *
 *  NOTE:  due to the limited range of addi used in the current
 *  kernel exception vector, and the fact that historically
 *  the vector is limited to 12 bytes, the size of this
 *  stack frame is limited to 128 bytes (currently at 64).
 */

type KernelFrame struct {
	Pc     c.Long
	Ps     c.Long
	Areg   [4]c.Long
	Sar    c.Long
	Lcount c.Long
	Lbeg   c.Long
	Lend   c.Long
	Acclo  c.Long
	Acchi  c.Long
	Mr     [4]c.Long
}

/*
 *  User vector mode exception stack frame:
 *
 *  WARNING:  if you modify this structure, you MUST modify the
 *  computation of the pad size (ALIGNPAD) accordingly.
 */

type UserFrame struct {
	Pc       c.Long
	Ps       c.Long
	Sar      c.Long
	Vpri     c.Long
	A2       c.Long
	A3       c.Long
	A4       c.Long
	A5       c.Long
	Exccause c.Long
	Lcount   c.Long
	Lbeg     c.Long
	Lend     c.Long
	Acclo    c.Long
	Acchi    c.Long
	Mr       [4]c.Long
	Pad      [2]c.Long
}

/*
-------------------------------------------------------------------------------

	INTERRUPT/EXCEPTION STACK FRAME FOR A THREAD OR NESTED INTERRUPT

	A stack frame of this structure is allocated for any interrupt or exception.
	It goes on the current stack. If the RTOS has a system stack for handling
	interrupts, every thread stack must allow space for just one interrupt stack
	frame, then nested interrupt stack frames go on the system stack.

	The frame includes basic registers (explicit) and "extra" registers introduced
	by user TIE or the use of the MAC16 option in the user's Xtensa config.
	The frame size is minimized by omitting regs not applicable to user's config.

	For Windowed ABI, this stack frame includes the interruptee's base save area,
	another base save area to manage gcc nested functions, and a little temporary
	space to help manage the spilling of the register windows.

-------------------------------------------------------------------------------
*/
type XtExcFrame struct {
	Exit     c.Long
	Pc       c.Long
	Ps       c.Long
	A0       c.Long
	A1       c.Long
	A2       c.Long
	A3       c.Long
	A4       c.Long
	A5       c.Long
	A6       c.Long
	A7       c.Long
	A8       c.Long
	A9       c.Long
	A10      c.Long
	A11      c.Long
	A12      c.Long
	A13      c.Long
	A14      c.Long
	A15      c.Long
	Sar      c.Long
	Exccause c.Long
	Excvaddr c.Long
	Lbeg     c.Long
	Lend     c.Long
	Lcount   c.Long
	Tmp0     c.Long
	Tmp1     c.Long
	Tmp2     c.Long
}

/*
-------------------------------------------------------------------------------

	SOLICITED STACK FRAME FOR A THREAD

	A stack frame of this structure is allocated whenever a thread enters the
	RTOS kernel intentionally (and synchronously) to submit to thread scheduling.
	It goes on the current thread's stack.

	The solicited frame only includes registers that are required to be preserved
	by the callee according to the compiler's ABI conventions, some space to save
	the return address for returning to the caller, and the caller's PS register.

	Note: Although the xtensa ABI considers the threadptr as "global" across
	functions (meanig it is neither caller or callee saved), it is treated as a
	callee-saved register in a solicited stack frame. This omits the need for the
	OS to include extra logic to save "global" registers on each context switch.
	Only the threadptr register is treated as callee-saved, as all other NCP
	(non-coprocessor extra) registers are caller-saved. See "tie.h" for more
	details.

	For Windowed ABI, this stack frame includes the caller's base save area.

	Note on XT_SOL_EXIT field:
	    It is necessary to distinguish a solicited from an interrupt stack frame.
	    This field corresponds to XT_STK_EXIT in the interrupt stack frame and is
	    always at the same offset (0). It can be written with a code (usually 0)
	    to distinguish a solicted frame from an interrupt frame. An RTOS port may
	    opt to ignore this field if it has another way of distinguishing frames.

-------------------------------------------------------------------------------
*/
type XtSolFrame struct {
	Exit      c.Long
	Pc        c.Long
	Ps        c.Long
	Threadptr c.Long
	A0        c.Long
	A1        c.Long
	A2        c.Long
	A3        c.Long
}

type X_glue struct {
	Unused [8]uint8
}

type X_reent struct {
	Unused [8]uint8
}

// llgo:type C
type TaskFunctionT func(c.Pointer)
type X__gnucVaList c.Pointer

/*
 *  Save area for saving entire core state, such as across Power Shut-Off (PSO).
 */

type XtosCoreState struct {
	Signature       c.Long
	RestoreLabel    c.Long
	AftersaveLabel  c.Long
	Areg            [64]c.Long
	CallerRegs      [16]c.Long
	CallerRegsSaved c.Long
	Windowbase      c.Long
	Windowstart     c.Long
	Sar             c.Long
	Epc1            c.Long
	Ps              c.Long
	Excsave1        c.Long
	Depc            c.Long
	Epc             [6]c.Long
	Eps             [6]c.Long
	Excsave         [6]c.Long
	Lcount          c.Long
	Lbeg            c.Long
	Lend            c.Long
	Vecbase         c.Long
	Atomctl         c.Long
	Memctl          c.Long
	Ccount          c.Long
	Ccompare        [3]c.Long
	Intenable       c.Long
	Interrupt       c.Long
	Icount          c.Long
	Icountlevel     c.Long
	Debugcause      c.Long
	Dbreakc         [2]c.Long
	Dbreaka         [2]c.Long
	Ibreaka         [2]c.Long
	Ibreakenable    c.Long
	Misc            [4]c.Long
	Cpenable        c.Long
	Tlbs            [16]c.Long
	Ncp             [36]c.Char
	Cp0             [72]c.Char
	Cp3             [208]c.Char
}

// llgo:type C
type X_xtosHandlerFunc func()
type X_xtosHandler *X_xtosHandlerFunc
type EspCpuCycleCountT c.Uint32T
type EspCpuIntrTypeT c.Int

const (
	ESP_CPU_INTR_TYPE_LEVEL EspCpuIntrTypeT = 0
	ESP_CPU_INTR_TYPE_EDGE  EspCpuIntrTypeT = 1
	ESP_CPU_INTR_TYPE_NA    EspCpuIntrTypeT = 2
)

/**
 * @brief CPU interrupt descriptor
 *
 * Each particular CPU interrupt has an associated descriptor describing that
 * particular interrupt's characteristics. Call esp_cpu_intr_get_desc() to get
 * the descriptors of a particular interrupt.
 */

type EspCpuIntrDescT struct {
	Priority c.Int
	Type     EspCpuIntrTypeT
	Flags    c.Uint32T
}

// llgo:type C
type EspCpuIntrHandlerT func(c.Pointer)
type EspCpuWatchpointTriggerT c.Int

const (
	ESP_CPU_WATCHPOINT_LOAD   EspCpuWatchpointTriggerT = 0
	ESP_CPU_WATCHPOINT_STORE  EspCpuWatchpointTriggerT = 1
	ESP_CPU_WATCHPOINT_ACCESS EspCpuWatchpointTriggerT = 2
)

type SpinlockT struct {
	Owner c.Uint32T
	Count c.Uint32T
}

type MultiHeapInfo struct {
	Unused [8]uint8
}
type MultiHeapHandleT *MultiHeapInfo

/** @brief Structure to access heap metadata via multi_heap_get_info */

type MultiHeapInfoT struct {
	TotalFreeBytes      c.SizeT
	TotalAllocatedBytes c.SizeT
	LargestFreeBlock    c.SizeT
	MinimumFreeBytes    c.SizeT
	AllocatedBlocks     c.SizeT
	FreeBlocks          c.SizeT
	TotalBlocks         c.SizeT
}

// llgo:type C
type MultiHeapWalkerCbT func(c.Pointer, c.SizeT, c.Int, c.Pointer) bool

// llgo:type C
type EspAllocFailedHookT func(c.SizeT, c.Uint32T, *c.Char)

/**
 * @brief Structure used to store heap related data passed to
 * the walker callback function
 */

type WalkerHeapInfo struct {
	Start c.IntptrT
	End   c.IntptrT
}
type WalkerHeapIntoT WalkerHeapInfo

/**
 * @brief Structure used to store block related data passed to
 * the walker callback function
 */

type WalkerBlockInfo struct {
	Ptr  c.Pointer
	Size c.SizeT
	Used bool
}
type WalkerBlockInfoT WalkerBlockInfo

// llgo:type C
type HeapCapsWalkerCbT func(WalkerHeapIntoT, WalkerBlockInfoT, c.Pointer) bool

type ImaxdivT struct {
	Quot c.IntmaxT
	Rem  c.IntmaxT
}
type SocResetReasonT c.Int

const (
	RESET_REASON_CHIP_POWER_ON   SocResetReasonT = 1
	RESET_REASON_CHIP_BROWN_OUT  SocResetReasonT = 1
	RESET_REASON_CHIP_SUPER_WDT  SocResetReasonT = 1
	RESET_REASON_CORE_SW         SocResetReasonT = 3
	RESET_REASON_CORE_DEEP_SLEEP SocResetReasonT = 5
	RESET_REASON_CORE_MWDT0      SocResetReasonT = 7
	RESET_REASON_CORE_MWDT1      SocResetReasonT = 8
	RESET_REASON_CORE_RTC_WDT    SocResetReasonT = 9
	RESET_REASON_CPU0_MWDT0      SocResetReasonT = 11
	RESET_REASON_CPU1_MWDT0      SocResetReasonT = 11
	RESET_REASON_CPU0_SW         SocResetReasonT = 12
	RESET_REASON_CPU1_SW         SocResetReasonT = 12
	RESET_REASON_CPU0_RTC_WDT    SocResetReasonT = 13
	RESET_REASON_CPU1_RTC_WDT    SocResetReasonT = 13
	RESET_REASON_SYS_BROWN_OUT   SocResetReasonT = 15
	RESET_REASON_SYS_RTC_WDT     SocResetReasonT = 16
	RESET_REASON_CPU0_MWDT1      SocResetReasonT = 17
	RESET_REASON_CPU1_MWDT1      SocResetReasonT = 17
	RESET_REASON_SYS_SUPER_WDT   SocResetReasonT = 18
	RESET_REASON_SYS_CLK_GLITCH  SocResetReasonT = 19
	RESET_REASON_CORE_EFUSE_CRC  SocResetReasonT = 20
	RESET_REASON_CORE_USB_UART   SocResetReasonT = 21
	RESET_REASON_CORE_USB_JTAG   SocResetReasonT = 22
	RESET_REASON_CORE_PWR_GLITCH SocResetReasonT = 23
)

type EspResetReasonT c.Int

const (
	ESP_RST_UNKNOWN    EspResetReasonT = 0
	ESP_RST_POWERON    EspResetReasonT = 1
	ESP_RST_EXT        EspResetReasonT = 2
	ESP_RST_SW         EspResetReasonT = 3
	ESP_RST_PANIC      EspResetReasonT = 4
	ESP_RST_INT_WDT    EspResetReasonT = 5
	ESP_RST_TASK_WDT   EspResetReasonT = 6
	ESP_RST_WDT        EspResetReasonT = 7
	ESP_RST_DEEPSLEEP  EspResetReasonT = 8
	ESP_RST_BROWNOUT   EspResetReasonT = 9
	ESP_RST_SDIO       EspResetReasonT = 10
	ESP_RST_USB        EspResetReasonT = 11
	ESP_RST_JTAG       EspResetReasonT = 12
	ESP_RST_EFUSE      EspResetReasonT = 13
	ESP_RST_PWR_GLITCH EspResetReasonT = 14
	ESP_RST_CPU_LOCKUP EspResetReasonT = 15
)

// llgo:type C
type ShutdownHandlerT func()

// llgo:type C
type XtHandler func(c.Pointer)

// llgo:type C
type XtExcHandler func(*XtExcFrame)
type StackTypeT c.Uint8T
type BaseTypeT c.Int
type UBaseTypeT c.Uint
type TickTypeT c.Uint32T
type PortMUXTYPE SpinlockT

/* Used by heap_5.c to define the start address and size of each memory region
 * that together comprise the total FreeRTOS heap space. */

type HeapRegion struct {
	PucStartAddress *c.Uint8T
	XSizeInBytes    c.SizeT
}
type HeapRegionT HeapRegion

/* Used to pass information about the heap out of vPortGetHeapStats(). */

type XHeapStats struct {
	XAvailableHeapSpaceInBytes      c.SizeT
	XSizeOfLargestFreeBlockInBytes  c.SizeT
	XSizeOfSmallestFreeBlockInBytes c.SizeT
	XNumberOfFreeBlocks             c.SizeT
	XMinimumEverFreeBytesRemaining  c.SizeT
	XNumberOfSuccessfulAllocations  c.SizeT
	XNumberOfSuccessfulFrees        c.SizeT
}
type HeapStatsT XHeapStats

/*
 * In line with software engineering best practice, FreeRTOS implements a strict
 * data hiding policy, so the real structures used by FreeRTOS to maintain the
 * state of tasks, queues, semaphores, etc. are not accessible to the application
 * code.  However, if the application writer wants to statically allocate such
 * an object then the size of the object needs to be known.  Dummy structures
 * that are guaranteed to have the same size and alignment requirements of the
 * real objects are used for this purpose.  The dummy list and list item
 * structures below are used for inclusion in such a dummy structure.
 */

type XSTATICLISTITEM struct {
	XDummy2  TickTypeT
	PvDummy3 [4]c.Pointer
}
type StaticListItemT XSTATICLISTITEM

/* See the comments above the struct xSTATIC_LIST_ITEM definition. */

type XSTATICMINILISTITEM struct {
	XDummy2  TickTypeT
	PvDummy3 [2]c.Pointer
}
type StaticMiniListItemT XSTATICMINILISTITEM

/* See the comments above the struct xSTATIC_LIST_ITEM definition. */

type XSTATICLIST struct {
	UxDummy2 UBaseTypeT
	PvDummy3 c.Pointer
	XDummy4  StaticMiniListItemT
}
type StaticListT XSTATICLIST

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the Task structure used internally by
 * FreeRTOS is not accessible to application code.  However, if the application
 * writer wants to statically allocate the memory required to create a task then
 * the size of the task object needs to be known.  The StaticTask_t structure
 * below is provided for this purpose.  Its sizes and alignment requirements are
 * guaranteed to match those of the genuine structure, no matter which
 * architecture is being used, and no matter how the values in FreeRTOSConfig.h
 * are set.  Its contents are somewhat obfuscated in the hope users will
 * recognise that it would be unwise to make direct use of the structure members.
 */

type XSTATICTCB struct {
	PxDummy1     c.Pointer
	XDummy3      [2]StaticListItemT
	UxDummy5     UBaseTypeT
	PxDummy6     c.Pointer
	UcDummy7     [16]c.Uint8T
	XDummyCoreID BaseTypeT
	PxDummy8     c.Pointer
	UxDummy12    [2]UBaseTypeT
	PvDummy15    [2]c.Pointer
	XDummy17     X_reent
	UlDummy18    [1]c.Uint32T
	UcDummy19    [1]c.Uint8T
	UxDummy20    c.Uint8T
	UcDummy21    c.Uint8T
}
type StaticTaskT XSTATICTCB

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the Queue structure used internally by
 * FreeRTOS is not accessible to application code.  However, if the application
 * writer wants to statically allocate the memory required to create a queue
 * then the size of the queue object needs to be known.  The StaticQueue_t
 * structure below is provided for this purpose.  Its sizes and alignment
 * requirements are guaranteed to match those of the genuine structure, no
 * matter which architecture is being used, and no matter how the values in
 * FreeRTOSConfig.h are set.  Its contents are somewhat obfuscated in the hope
 * users will recognise that it would be unwise to make direct use of the
 * structure members.
 */

type XSTATICQUEUE struct {
	PvDummy1 [3]c.Pointer
	U        struct {
		PvDummy2 c.Pointer
	}
	XDummy3         [2]StaticListT
	UxDummy4        [3]UBaseTypeT
	UcDummy5        [2]c.Uint8T
	UcDummy6        c.Uint8T
	PvDummy7        c.Pointer
	XDummyQueueLock PortMUXTYPE
}
type StaticQueueT XSTATICQUEUE
type StaticSemaphoreT StaticQueueT

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the event group structure used
 * internally by FreeRTOS is not accessible to application code.  However, if
 * the application writer wants to statically allocate the memory required to
 * create an event group then the size of the event group object needs to be
 * know.  The StaticEventGroup_t structure below is provided for this purpose.
 * Its sizes and alignment requirements are guaranteed to match those of the
 * genuine structure, no matter which architecture is being used, and no matter
 * how the values in FreeRTOSConfig.h are set.  Its contents are somewhat
 * obfuscated in the hope users will recognise that it would be unwise to make
 * direct use of the structure members.
 */

type XSTATICEVENTGROUP struct {
	XDummy1              TickTypeT
	XDummy2              StaticListT
	UcDummy4             c.Uint8T
	XDummyEventGroupLock PortMUXTYPE
}
type StaticEventGroupT XSTATICEVENTGROUP

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the software timer structure used
 * internally by FreeRTOS is not accessible to application code.  However, if
 * the application writer wants to statically allocate the memory required to
 * create a software timer then the size of the queue object needs to be known.
 * The StaticTimer_t structure below is provided for this purpose.  Its sizes
 * and alignment requirements are guaranteed to match those of the genuine
 * structure, no matter which architecture is being used, and no matter how the
 * values in FreeRTOSConfig.h are set.  Its contents are somewhat obfuscated in
 * the hope users will recognise that it would be unwise to make direct use of
 * the structure members.
 */

type XSTATICTIMER struct {
	PvDummy1 c.Pointer
	XDummy2  StaticListItemT
	XDummy3  TickTypeT
	PvDummy5 c.Pointer
	PvDummy6 TaskFunctionT
	UcDummy8 c.Uint8T
}
type StaticTimerT XSTATICTIMER

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the stream buffer structure used
 * internally by FreeRTOS is not accessible to application code.  However, if
 * the application writer wants to statically allocate the memory required to
 * create a stream buffer then the size of the stream buffer object needs to be
 * known.  The StaticStreamBuffer_t structure below is provided for this
 * purpose.  Its size and alignment requirements are guaranteed to match those
 * of the genuine structure, no matter which architecture is being used, and
 * no matter how the values in FreeRTOSConfig.h are set.  Its contents are
 * somewhat obfuscated in the hope users will recognise that it would be unwise
 * to make direct use of the structure members.
 */

type XSTATICSTREAMBUFFER struct {
	UxDummy1               [4]c.SizeT
	PvDummy2               [3]c.Pointer
	UcDummy3               c.Uint8T
	XDummyStreamBufferLock PortMUXTYPE
}
type StaticStreamBufferT XSTATICSTREAMBUFFER
type StaticMessageBufferT StaticStreamBufferT

/*
 * Definition of the only type of object that a list can contain.
 */

type XLIST struct {
	Unused [8]uint8
}

type XLISTITEM struct {
	XItemValue  TickTypeT
	PxNext      *XLISTITEM
	PxPrevious  *XLISTITEM
	PvOwner     c.Pointer
	PxContainer *XLIST
}
type ListItemT XLISTITEM

type XMINILISTITEM struct {
	XItemValue TickTypeT
	PxNext     *XLISTITEM
	PxPrevious *XLISTITEM
}
type MiniListItemT XMINILISTITEM
type ListT XLIST

/**
 *
 * Type by which tasks are referenced.  For example, a call to xTaskCreate
 * returns (via a pointer parameter) an TaskHandle_t variable that can then
 * be used as a parameter to vTaskDelete to delete the task.
 *
 * \ingroup Tasks
 */

type TskTaskControlBlock struct {
	Unused [8]uint8
}
type TaskHandleT *TskTaskControlBlock

// llgo:type C
type TaskHookFunctionT func(c.Pointer) BaseTypeT
type ETaskState c.Int

const (
	ERunning   ETaskState = 0
	EReady     ETaskState = 1
	EBlocked   ETaskState = 2
	ESuspended ETaskState = 3
	EDeleted   ETaskState = 4
	EInvalid   ETaskState = 5
)

type ENotifyAction c.Int

const (
	ENoAction                 ENotifyAction = 0
	ESetBits                  ENotifyAction = 1
	EIncrement                ENotifyAction = 2
	ESetValueWithOverwrite    ENotifyAction = 3
	ESetValueWithoutOverwrite ENotifyAction = 4
)

/*
 * Used internally only.
 */

type XTIMEOUT struct {
	XOverflowCount  BaseTypeT
	XTimeOnEntering TickTypeT
}
type TimeOutT XTIMEOUT

/*
 * Defines the memory ranges allocated to the task when an MPU is used.
 */

type XMEMORYREGION struct {
	PvBaseAddress   c.Pointer
	UlLengthInBytes c.Uint32T
	UlParameters    c.Uint32T
}
type MemoryRegionT XMEMORYREGION

/*
 * Parameters required to create an MPU protected task.
 */

type XTASKPARAMETERS struct {
	PvTaskCode     TaskFunctionT
	PcName         *c.Char
	UsStackDepth   c.Uint32T
	PvParameters   c.Pointer
	UxPriority     UBaseTypeT
	PuxStackBuffer *StackTypeT
	XRegions       [1]MemoryRegionT
}
type TaskParametersT XTASKPARAMETERS

/** Used with the uxTaskGetSystemState() function to return the state of each task
 * in the system. */

type XTASKSTATUS struct {
	XHandle              TaskHandleT
	PcTaskName           *c.Char
	XTaskNumber          UBaseTypeT
	ECurrentState        ETaskState
	UxCurrentPriority    UBaseTypeT
	UxBasePriority       UBaseTypeT
	UlRunTimeCounter     c.Uint32T
	PxStackBase          *StackTypeT
	UsStackHighWaterMark c.Uint32T
}
type TaskStatusT XTASKSTATUS
type ESleepModeStatus c.Int

const (
	EAbortSleep            ESleepModeStatus = 0
	EStandardSleep         ESleepModeStatus = 1
	ENoTasksWaitingTimeout ESleepModeStatus = 2
)

/**
 * Type by which queues are referenced.  For example, a call to xQueueCreate()
 * returns an QueueHandle_t variable that can then be used as a parameter to
 * xQueueSend(), xQueueReceive(), etc.
 */

type QueueDefinition struct {
	Unused [8]uint8
}
type QueueHandleT *QueueDefinition
type QueueSetHandleT *QueueDefinition
type QueueSetMemberHandleT *QueueDefinition
type RingbufHandleT c.Pointer
type RingbufferTypeT c.Int

const (
	RINGBUF_TYPE_NOSPLIT    RingbufferTypeT = 0
	RINGBUF_TYPE_ALLOWSPLIT RingbufferTypeT = 1
	RINGBUF_TYPE_BYTEBUF    RingbufferTypeT = 2
	RINGBUF_TYPE_MAX        RingbufferTypeT = 3
)

/**
 * @brief Struct that is equivalent in size to the ring buffer's data structure
 *
 * The contents of this struct are not meant to be used directly. This
 * structure is meant to be used when creating a statically allocated ring
 * buffer where this struct is of the exact size required to store a ring
 * buffer's control data structure.
 *
 */

type XSTATICRINGBUFFER struct {
	XDummy1  [2]c.SizeT
	UxDummy2 UBaseTypeT
	PvDummy3 [11]c.Pointer
	XDummy4  BaseTypeT
	XDummy5  [2]StaticListT
	PvDummy6 c.Pointer
	MuxDummy PortMUXTYPE
}
type StaticRingbufferT XSTATICRINGBUFFER

type EspEtmChannelT struct {
	Unused [8]uint8
}
type EspEtmChannelHandleT *EspEtmChannelT

type EspEtmEventT struct {
	Unused [8]uint8
}
type EspEtmEventHandleT *EspEtmEventT

type EspEtmTaskT struct {
	Unused [8]uint8
}
type EspEtmTaskHandleT *EspEtmTaskT

/**
 * @brief ETM channel configuration
 */

type EspEtmChannelConfigT struct {
	Flags EtmChanFlags
}

type EtmChanFlags struct {
	Unused [8]uint8
}

type GdmaChannelT struct {
	Unused [8]uint8
}
type GdmaChannelHandleT *GdmaChannelT

/**
 * @brief Collection of configuration items that used for allocating GDMA channel
 *
 */

type GdmaChannelAllocConfigT struct {
	SiblingChan GdmaChannelHandleT
	Direction   GdmaChannelDirectionT
	Flags       struct {
		ReserveSibling c.Int
		IsrCacheSafe   c.Int
	}
}

/**
 * @brief Type of GDMA event data
 */

type GdmaEventDataT struct {
	Flags struct {
		AbnormalEof c.Uint32T
		NormalEof   c.Uint32T
	}
}

// llgo:type C
type GdmaEventCallbackT func(GdmaChannelHandleT, *GdmaEventDataT, c.Pointer) bool

/**
 * @brief Group of supported GDMA TX callbacks
 * @note The callbacks are all running under ISR environment
 */

type GdmaTxEventCallbacksT struct {
	OnTransEof GdmaEventCallbackT
	OnDescrErr GdmaEventCallbackT
}

/**
 * @brief Group of supported GDMA RX callbacks
 * @note The callbacks are all running under ISR environment
 */

type GdmaRxEventCallbacksT struct {
	OnRecvEof  GdmaEventCallbackT
	OnDescrErr GdmaEventCallbackT
	OnRecvDone GdmaEventCallbackT
}

/**
 * @brief Type of GDMA engine trigger
 * @note It's recommended to initialize this structure with `GDMA_MAKE_TRIGGER`.
 *
 */

type GdmaTriggerT struct {
	Periph     GdmaTriggerPeripheralT
	InstanceId c.Int
	BusId      c.Int
}

/**
 * @brief A collection of strategy item that each GDMA channel could apply
 *
 */

type GdmaStrategyConfigT struct {
	OwnerCheck        bool
	AutoUpdateDesc    bool
	EofTillDataPopped bool
}

/**
 * @brief Channel transfer configurations
 */

type GdmaTransferConfigT struct {
	MaxDataBurstSize c.Uint32T
	AccessExtMem     bool
}

/**
 * @brief GDMA transfer ability
 *
 * @note The alignment set in this structure is **not** a guarantee that gdma driver will take care of the nonalignment cases.
 *       Actually the GDMA driver has no knowledge about the DMA buffer (address and size) used by upper layer.
 *       So it's the responsibility of the **upper layer** to take care of the buffer address and size.
 *
 */

type GdmaTransferAbilityT struct {
	SramTransAlign  c.SizeT
	PsramTransAlign c.SizeT
}

/**
 * @brief ADC DMA context
 */

type AdcDmaT struct {
	GdmaChan   GdmaChannelHandleT
	DmaIntrHdl IntrHandleT
}
type AdcFsmT c.Int

const (
	ADC_FSM_INIT    AdcFsmT = 0
	ADC_FSM_STARTED AdcFsmT = 1
)

type AdcMonitorFsmT c.Int

const (
	ADC_MONITOR_FSM_INIT    AdcMonitorFsmT = 0
	ADC_MONITOR_FSM_ENABLED AdcMonitorFsmT = 1
)

// llgo:type C
type AdcDmaIntrFuncT func(*AdcContinuousCtxT) bool
