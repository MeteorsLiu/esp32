package hal

import (
	"github.com/goplus/lib/c"
	_ "unsafe"
)

const X_NEWLIB_VERSION_H__ = 1
const X_NEWLIB_VERSION = "4.3.0"
const X__NEWLIB__ = 4
const X__NEWLIB_MINOR__ = 3
const X__NEWLIB_PATCHLEVEL__ = 0
const X_DEFAULT_SOURCE = 1
const X_POSIX_SOURCE = 1
const X_ATFILE_SOURCE = 1
const X__ATFILE_VISIBLE = 1
const X__BSD_VISIBLE = 1
const X__GNU_VISIBLE = 0
const X__ISO_C_VISIBLE = 2011
const X__LARGEFILE_VISIBLE = 0
const X__MISC_VISIBLE = 1
const X__POSIX_VISIBLE = 200809
const X__SVID_VISIBLE = 1
const X__XSI_VISIBLE = 0
const X__SSP_FORTIFY_LEVEL = 0
const X_POSIX_THREADS = 1
const X_POSIX_TIMEOUTS = 1
const X_POSIX_TIMERS = 1
const X_UNIX98_THREAD_MUTEX_ATTRIBUTES = 1
const X__have_longlong64 = 1
const X__have_long32 = 1
const X___int8_t_defined = 1
const X___int16_t_defined = 1
const X___int32_t_defined = 1
const X___int64_t_defined = 1
const X___int_least8_t_defined = 1
const X___int_least16_t_defined = 1
const X___int_least32_t_defined = 1
const X___int_least64_t_defined = 1
const X__INT8 = "hh"
const X__INT16 = "h"
const X__INT64 = "ll"
const X__FAST8 = "hh"
const X__FAST16 = "h"
const X__FAST64 = "ll"
const X__LEAST8 = "hh"
const X__LEAST16 = "h"
const X__LEAST64 = "ll"
const X__int8_t_defined = 1
const X__int16_t_defined = 1
const X__int32_t_defined = 1
const X__int64_t_defined = 1
const X__int_least8_t_defined = 1
const X__int_least16_t_defined = 1
const X__int_least32_t_defined = 1
const X__int_least64_t_defined = 1
const X__int_fast8_t_defined = 1
const X__int_fast16_t_defined = 1
const X__int_fast32_t_defined = 1
const X__int_fast64_t_defined = 1
const X__bool_true_false_are_defined = 1
const True = 1
const False = 0
const X__OBSOLETE_MATH_DEFAULT = 1
const X__NEWLIB_H__ = 1
const X_ATEXIT_DYNAMIC_ALLOC = 1
const X_FSEEK_OPTIMIZATION = 1
const X_FVWRITE_IN_STREAMIO = 1
const X_HAVE_INITFINI_ARRAY = 1
const X_HAVE_LONG_DOUBLE = 1
const X_ICONV_ENABLED = 1
const X_MB_LEN_MAX = 1
const X_NANO_MALLOC = 1
const X_REENT_CHECK_VERIFY = 1
const X_RETARGETABLE_LOCKING = 1
const X_UNBUF_STREAM_OPT = 1
const X_WANT_IO_C99_FORMATS = 1
const X_WANT_IO_LONG_LONG = 1
const X_WANT_IO_POS_ARGS = 1
const X_WANT_REENT_BACKWARD_BINARY_COMPAT = 1
const X_WANT_REENT_SMALL = 1
const X_WANT_USE_GDTOA = 1
const X__BUFSIZ__ = 128
const X__RAND_MAX = 0x7fffffff
const X_NULL = 0
const CONFIG_SOC_ADC_SUPPORTED = 1
const CONFIG_SOC_DEDICATED_GPIO_SUPPORTED = 1
const CONFIG_SOC_UART_SUPPORTED = 1
const CONFIG_SOC_GDMA_SUPPORTED = 1
const CONFIG_SOC_AHB_GDMA_SUPPORTED = 1
const CONFIG_SOC_GPTIMER_SUPPORTED = 1
const CONFIG_SOC_PCNT_SUPPORTED = 1
const CONFIG_SOC_MCPWM_SUPPORTED = 1
const CONFIG_SOC_TWAI_SUPPORTED = 1
const CONFIG_SOC_ETM_SUPPORTED = 1
const CONFIG_SOC_PARLIO_SUPPORTED = 1
const CONFIG_SOC_BT_SUPPORTED = 1
const CONFIG_SOC_IEEE802154_SUPPORTED = 1
const CONFIG_SOC_ASYNC_MEMCPY_SUPPORTED = 1
const CONFIG_SOC_USB_SERIAL_JTAG_SUPPORTED = 1
const CONFIG_SOC_TEMP_SENSOR_SUPPORTED = 1
const CONFIG_SOC_PHY_SUPPORTED = 1
const CONFIG_SOC_WIFI_SUPPORTED = 1
const CONFIG_SOC_SUPPORTS_SECURE_DL_MODE = 1
const CONFIG_SOC_ULP_SUPPORTED = 1
const CONFIG_SOC_LP_CORE_SUPPORTED = 1
const CONFIG_SOC_EFUSE_KEY_PURPOSE_FIELD = 1
const CONFIG_SOC_EFUSE_SUPPORTED = 1
const CONFIG_SOC_RTC_FAST_MEM_SUPPORTED = 1
const CONFIG_SOC_RTC_MEM_SUPPORTED = 1
const CONFIG_SOC_I2S_SUPPORTED = 1
const CONFIG_SOC_RMT_SUPPORTED = 1
const CONFIG_SOC_SDM_SUPPORTED = 1
const CONFIG_SOC_GPSPI_SUPPORTED = 1
const CONFIG_SOC_LEDC_SUPPORTED = 1
const CONFIG_SOC_I2C_SUPPORTED = 1
const CONFIG_SOC_SYSTIMER_SUPPORTED = 1
const CONFIG_SOC_SUPPORT_COEXISTENCE = 1
const CONFIG_SOC_AES_SUPPORTED = 1
const CONFIG_SOC_MPI_SUPPORTED = 1
const CONFIG_SOC_SHA_SUPPORTED = 1
const CONFIG_SOC_HMAC_SUPPORTED = 1
const CONFIG_SOC_DIG_SIGN_SUPPORTED = 1
const CONFIG_SOC_ECC_SUPPORTED = 1
const CONFIG_SOC_FLASH_ENC_SUPPORTED = 1
const CONFIG_SOC_SECURE_BOOT_SUPPORTED = 1
const CONFIG_SOC_SDIO_SLAVE_SUPPORTED = 1
const CONFIG_SOC_BOD_SUPPORTED = 1
const CONFIG_SOC_APM_SUPPORTED = 1
const CONFIG_SOC_PMU_SUPPORTED = 1
const CONFIG_SOC_PAU_SUPPORTED = 1
const CONFIG_SOC_LP_TIMER_SUPPORTED = 1
const CONFIG_SOC_LP_AON_SUPPORTED = 1
const CONFIG_SOC_LP_PERIPHERALS_SUPPORTED = 1
const CONFIG_SOC_LP_I2C_SUPPORTED = 1
const CONFIG_SOC_ULP_LP_UART_SUPPORTED = 1
const CONFIG_SOC_CLK_TREE_SUPPORTED = 1
const CONFIG_SOC_ASSIST_DEBUG_SUPPORTED = 1
const CONFIG_SOC_WDT_SUPPORTED = 1
const CONFIG_SOC_SPI_FLASH_SUPPORTED = 1
const CONFIG_SOC_RNG_SUPPORTED = 1
const CONFIG_SOC_LIGHT_SLEEP_SUPPORTED = 1
const CONFIG_SOC_DEEP_SLEEP_SUPPORTED = 1
const CONFIG_SOC_MODEM_CLOCK_SUPPORTED = 1
const CONFIG_SOC_PM_SUPPORTED = 1
const CONFIG_SOC_XTAL_SUPPORT_40M = 1
const CONFIG_SOC_XTAL_CLOCK_PATH_DEPENDS_ON_TOP_DOMAIN = 1
const CONFIG_SOC_AES_SUPPORT_DMA = 1
const CONFIG_SOC_AES_GDMA = 1
const CONFIG_SOC_AES_SUPPORT_AES_128 = 1
const CONFIG_SOC_AES_SUPPORT_AES_256 = 1
const CONFIG_SOC_ADC_DIG_CTRL_SUPPORTED = 1
const CONFIG_SOC_ADC_DIG_IIR_FILTER_SUPPORTED = 1
const CONFIG_SOC_ADC_MONITOR_SUPPORTED = 1
const CONFIG_SOC_ADC_DMA_SUPPORTED = 1
const CONFIG_SOC_ADC_PERIPH_NUM = 1
const CONFIG_SOC_ADC_MAX_CHANNEL_NUM = 7
const CONFIG_SOC_ADC_ATTEN_NUM = 4
const CONFIG_SOC_ADC_DIGI_CONTROLLER_NUM = 1
const CONFIG_SOC_ADC_PATT_LEN_MAX = 8
const CONFIG_SOC_ADC_DIGI_MAX_BITWIDTH = 12
const CONFIG_SOC_ADC_DIGI_MIN_BITWIDTH = 12
const CONFIG_SOC_ADC_DIGI_IIR_FILTER_NUM = 2
const CONFIG_SOC_ADC_DIGI_MONITOR_NUM = 2
const CONFIG_SOC_ADC_DIGI_RESULT_BYTES = 4
const CONFIG_SOC_ADC_DIGI_DATA_BYTES_PER_CONV = 4
const CONFIG_SOC_ADC_SAMPLE_FREQ_THRES_HIGH = 83333
const CONFIG_SOC_ADC_SAMPLE_FREQ_THRES_LOW = 611
const CONFIG_SOC_ADC_RTC_MIN_BITWIDTH = 12
const CONFIG_SOC_ADC_RTC_MAX_BITWIDTH = 12
const CONFIG_SOC_ADC_CALIBRATION_V1_SUPPORTED = 1
const CONFIG_SOC_ADC_SELF_HW_CALI_SUPPORTED = 1
const CONFIG_SOC_ADC_CALIB_CHAN_COMPENS_SUPPORTED = 1
const CONFIG_SOC_ADC_TEMPERATURE_SHARE_INTR = 1
const CONFIG_SOC_ADC_SHARED_POWER = 1
const CONFIG_SOC_BROWNOUT_RESET_SUPPORTED = 1
const CONFIG_SOC_SHARED_IDCACHE_SUPPORTED = 1
const CONFIG_SOC_CACHE_FREEZE_SUPPORTED = 1
const CONFIG_SOC_CPU_CORES_NUM = 1
const CONFIG_SOC_CPU_INTR_NUM = 32
const CONFIG_SOC_CPU_HAS_FLEXIBLE_INTC = 1
const CONFIG_SOC_INT_PLIC_SUPPORTED = 1
const CONFIG_SOC_CPU_HAS_CSR_PC = 1
const CONFIG_SOC_CPU_BREAKPOINTS_NUM = 4
const CONFIG_SOC_CPU_WATCHPOINTS_NUM = 4
const CONFIG_SOC_CPU_WATCHPOINT_MAX_REGION_SIZE = 0x80000000
const CONFIG_SOC_CPU_HAS_PMA = 1
const CONFIG_SOC_CPU_IDRAM_SPLIT_USING_PMP = 1
const CONFIG_SOC_CPU_PMP_REGION_GRANULARITY = 4
const CONFIG_SOC_DS_SIGNATURE_MAX_BIT_LEN = 3072
const CONFIG_SOC_DS_KEY_PARAM_MD_IV_LENGTH = 16
const CONFIG_SOC_DS_KEY_CHECK_MAX_WAIT_US = 1100
const CONFIG_SOC_AHB_GDMA_VERSION = 1
const CONFIG_SOC_GDMA_NUM_GROUPS_MAX = 1
const CONFIG_SOC_GDMA_PAIRS_PER_GROUP_MAX = 3
const CONFIG_SOC_GDMA_SUPPORT_ETM = 1
const CONFIG_SOC_GDMA_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_ETM_GROUPS = 1
const CONFIG_SOC_ETM_CHANNELS_PER_GROUP = 50
const CONFIG_SOC_ETM_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_GPIO_PORT = 1
const CONFIG_SOC_GPIO_PIN_COUNT = 31
const CONFIG_SOC_GPIO_SUPPORT_PIN_GLITCH_FILTER = 1
const CONFIG_SOC_GPIO_FLEX_GLITCH_FILTER_NUM = 8
const CONFIG_SOC_GPIO_SUPPORT_ETM = 1
const CONFIG_SOC_GPIO_SUPPORT_RTC_INDEPENDENT = 1
const CONFIG_SOC_GPIO_SUPPORT_DEEPSLEEP_WAKEUP = 1
const CONFIG_SOC_LP_IO_CLOCK_IS_INDEPENDENT = 1
const CONFIG_SOC_GPIO_IN_RANGE_MAX = 30
const CONFIG_SOC_GPIO_OUT_RANGE_MAX = 30
const CONFIG_SOC_GPIO_DEEP_SLEEP_WAKE_VALID_GPIO_MASK = 0
const CONFIG_SOC_GPIO_DEEP_SLEEP_WAKE_SUPPORTED_PIN_CNT = 8
const CONFIG_SOC_GPIO_VALID_DIGITAL_IO_PAD_MASK = 0x000000007FFFFF00
const CONFIG_SOC_GPIO_SUPPORT_FORCE_HOLD = 1
const CONFIG_SOC_GPIO_SUPPORT_HOLD_IO_IN_DSLP = 1
const CONFIG_SOC_GPIO_SUPPORT_HOLD_SINGLE_IO_IN_DSLP = 1
const CONFIG_SOC_GPIO_CLOCKOUT_BY_GPIO_MATRIX = 1
const CONFIG_SOC_CLOCKOUT_HAS_SOURCE_GATE = 1
const CONFIG_SOC_GPIO_CLOCKOUT_CHANNEL_NUM = 3
const CONFIG_SOC_RTCIO_PIN_COUNT = 8
const CONFIG_SOC_RTCIO_INPUT_OUTPUT_SUPPORTED = 1
const CONFIG_SOC_RTCIO_HOLD_SUPPORTED = 1
const CONFIG_SOC_RTCIO_WAKE_SUPPORTED = 1
const CONFIG_SOC_RTCIO_EDGE_WAKE_SUPPORTED = 1
const CONFIG_SOC_DEDIC_GPIO_OUT_CHANNELS_NUM = 8
const CONFIG_SOC_DEDIC_GPIO_IN_CHANNELS_NUM = 8
const CONFIG_SOC_DEDIC_PERIPH_ALWAYS_ENABLE = 1
const CONFIG_SOC_I2C_NUM = 2
const CONFIG_SOC_HP_I2C_NUM = 1
const CONFIG_SOC_I2C_FIFO_LEN = 32
const CONFIG_SOC_I2C_CMD_REG_NUM = 8
const CONFIG_SOC_I2C_SUPPORT_SLAVE = 1
const CONFIG_SOC_I2C_SUPPORT_HW_FSM_RST = 1
const CONFIG_SOC_I2C_SUPPORT_HW_CLR_BUS = 1
const CONFIG_SOC_I2C_SUPPORT_XTAL = 1
const CONFIG_SOC_I2C_SUPPORT_RTC = 1
const CONFIG_SOC_I2C_SUPPORT_10BIT_ADDR = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_BROADCAST = 1
const CONFIG_SOC_I2C_SLAVE_CAN_GET_STRETCH_CAUSE = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_I2CRAM_ACCESS = 1
const CONFIG_SOC_I2C_SLAVE_SUPPORT_SLAVE_UNMATCH = 1
const CONFIG_SOC_I2C_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_LP_I2C_NUM = 1
const CONFIG_SOC_LP_I2C_FIFO_LEN = 16
const CONFIG_SOC_I2S_NUM = 1
const CONFIG_SOC_I2S_HW_VERSION_2 = 1
const CONFIG_SOC_I2S_SUPPORTS_ETM = 1
const CONFIG_SOC_I2S_SUPPORTS_XTAL = 1
const CONFIG_SOC_I2S_SUPPORTS_PLL_F160M = 1
const CONFIG_SOC_I2S_SUPPORTS_PCM = 1
const CONFIG_SOC_I2S_SUPPORTS_PDM = 1
const CONFIG_SOC_I2S_SUPPORTS_PDM_TX = 1
const CONFIG_SOC_I2S_PDM_MAX_TX_LINES = 2
const CONFIG_SOC_I2S_SUPPORTS_TDM = 1
const CONFIG_SOC_I2S_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_LEDC_SUPPORT_PLL_DIV_CLOCK = 1
const CONFIG_SOC_LEDC_SUPPORT_XTAL_CLOCK = 1
const CONFIG_SOC_LEDC_TIMER_NUM = 4
const CONFIG_SOC_LEDC_CHANNEL_NUM = 6
const CONFIG_SOC_LEDC_TIMER_BIT_WIDTH = 20
const CONFIG_SOC_LEDC_SUPPORT_FADE_STOP = 1
const CONFIG_SOC_LEDC_GAMMA_CURVE_FADE_SUPPORTED = 1
const CONFIG_SOC_LEDC_GAMMA_CURVE_FADE_RANGE_MAX = 16
const CONFIG_SOC_LEDC_FADE_PARAMS_BIT_WIDTH = 10
const CONFIG_SOC_LEDC_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MMU_PAGE_SIZE_CONFIGURABLE = 1
const CONFIG_SOC_MMU_PAGE_SIZE_8KB_SUPPORTED = 1
const CONFIG_SOC_MMU_PERIPH_NUM = 1
const CONFIG_SOC_MMU_LINEAR_ADDRESS_REGION_NUM = 1
const CONFIG_SOC_MMU_DI_VADDR_SHARED = 1
const CONFIG_SOC_MPU_MIN_REGION_SIZE = 0x20000000
const CONFIG_SOC_MPU_REGIONS_MAX_NUM = 8
const CONFIG_SOC_PCNT_GROUPS = 1
const CONFIG_SOC_PCNT_UNITS_PER_GROUP = 4
const CONFIG_SOC_PCNT_CHANNELS_PER_UNIT = 2
const CONFIG_SOC_PCNT_THRES_POINT_PER_UNIT = 2
const CONFIG_SOC_PCNT_SUPPORT_RUNTIME_THRES_UPDATE = 1
const CONFIG_SOC_PCNT_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_RMT_GROUPS = 1
const CONFIG_SOC_RMT_TX_CANDIDATES_PER_GROUP = 2
const CONFIG_SOC_RMT_RX_CANDIDATES_PER_GROUP = 2
const CONFIG_SOC_RMT_CHANNELS_PER_GROUP = 4
const CONFIG_SOC_RMT_MEM_WORDS_PER_CHANNEL = 48
const CONFIG_SOC_RMT_SUPPORT_RX_PINGPONG = 1
const CONFIG_SOC_RMT_SUPPORT_RX_DEMODULATION = 1
const CONFIG_SOC_RMT_SUPPORT_TX_ASYNC_STOP = 1
const CONFIG_SOC_RMT_SUPPORT_TX_LOOP_COUNT = 1
const CONFIG_SOC_RMT_SUPPORT_TX_LOOP_AUTO_STOP = 1
const CONFIG_SOC_RMT_SUPPORT_TX_SYNCHRO = 1
const CONFIG_SOC_RMT_SUPPORT_TX_CARRIER_DATA_ONLY = 1
const CONFIG_SOC_RMT_SUPPORT_XTAL = 1
const CONFIG_SOC_RMT_SUPPORT_RC_FAST = 1
const CONFIG_SOC_RMT_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MCPWM_GROUPS = 1
const CONFIG_SOC_MCPWM_TIMERS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_OPERATORS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_COMPARATORS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_GENERATORS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_TRIGGERS_PER_OPERATOR = 2
const CONFIG_SOC_MCPWM_GPIO_FAULTS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_CAPTURE_TIMERS_PER_GROUP = 1
const CONFIG_SOC_MCPWM_CAPTURE_CHANNELS_PER_TIMER = 3
const CONFIG_SOC_MCPWM_GPIO_SYNCHROS_PER_GROUP = 3
const CONFIG_SOC_MCPWM_SWSYNC_CAN_PROPAGATE = 1
const CONFIG_SOC_MCPWM_SUPPORT_ETM = 1
const CONFIG_SOC_MCPWM_CAPTURE_CLK_FROM_GROUP = 1
const CONFIG_SOC_MCPWM_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_PARLIO_GROUPS = 1
const CONFIG_SOC_PARLIO_TX_UNITS_PER_GROUP = 1
const CONFIG_SOC_PARLIO_RX_UNITS_PER_GROUP = 1
const CONFIG_SOC_PARLIO_TX_UNIT_MAX_DATA_WIDTH = 16
const CONFIG_SOC_PARLIO_RX_UNIT_MAX_DATA_WIDTH = 16
const CONFIG_SOC_PARLIO_TX_RX_SHARE_INTERRUPT = 1
const CONFIG_SOC_PARLIO_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MPI_MEM_BLOCKS_NUM = 4
const CONFIG_SOC_MPI_OPERATIONS_NUM = 3
const CONFIG_SOC_RSA_MAX_BIT_LEN = 3072
const CONFIG_SOC_SHA_DMA_MAX_BUFFER_SIZE = 3968
const CONFIG_SOC_SHA_SUPPORT_DMA = 1
const CONFIG_SOC_SHA_SUPPORT_RESUME = 1
const CONFIG_SOC_SHA_GDMA = 1
const CONFIG_SOC_SHA_SUPPORT_SHA1 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA224 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA256 = 1
const CONFIG_SOC_SDM_GROUPS = 1
const CONFIG_SOC_SDM_CHANNELS_PER_GROUP = 4
const CONFIG_SOC_SDM_CLK_SUPPORT_PLL_F80M = 1
const CONFIG_SOC_SDM_CLK_SUPPORT_XTAL = 1
const CONFIG_SOC_SPI_PERIPH_NUM = 2
const CONFIG_SOC_SPI_MAX_CS_NUM = 6
const CONFIG_SOC_SPI_MAXIMUM_BUFFER_SIZE = 64
const CONFIG_SOC_SPI_SUPPORT_DDRCLK = 1
const CONFIG_SOC_SPI_SLAVE_SUPPORT_SEG_TRANS = 1
const CONFIG_SOC_SPI_SUPPORT_CD_SIG = 1
const CONFIG_SOC_SPI_SUPPORT_CONTINUOUS_TRANS = 1
const CONFIG_SOC_SPI_SUPPORT_SLAVE_HD_VER2 = 1
const CONFIG_SOC_SPI_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_XTAL = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_PLL_F80M = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_RC_FAST = 1
const CONFIG_SOC_SPI_SCT_SUPPORTED = 1
const CONFIG_SOC_SPI_SCT_REG_NUM = 14
const CONFIG_SOC_SPI_SCT_BUFFER_NUM_MAX = 1
const CONFIG_SOC_SPI_SCT_CONF_BITLEN_MAX = 0x3FFFA
const CONFIG_SOC_MEMSPI_IS_INDEPENDENT = 1
const CONFIG_SOC_SPI_MAX_PRE_DIVIDER = 16
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_WAIT_IDLE = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_SUSPEND = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_RESUME = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_IDLE_INTR = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_SW_SUSPEND = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_CHECK_SUS = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_WRAP = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_80M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_40M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_20M_SUPPORTED = 1
const CONFIG_SOC_SYSTIMER_COUNTER_NUM = 2
const CONFIG_SOC_SYSTIMER_ALARM_NUM = 3
const CONFIG_SOC_SYSTIMER_BIT_WIDTH_LO = 32
const CONFIG_SOC_SYSTIMER_BIT_WIDTH_HI = 20
const CONFIG_SOC_SYSTIMER_FIXED_DIVIDER = 1
const CONFIG_SOC_SYSTIMER_SUPPORT_RC_FAST = 1
const CONFIG_SOC_SYSTIMER_INT_LEVEL = 1
const CONFIG_SOC_SYSTIMER_ALARM_MISS_COMPENSATE = 1
const CONFIG_SOC_SYSTIMER_SUPPORT_ETM = 1
const CONFIG_SOC_LP_TIMER_BIT_WIDTH_LO = 32
const CONFIG_SOC_LP_TIMER_BIT_WIDTH_HI = 16
const CONFIG_SOC_TIMER_GROUPS = 2
const CONFIG_SOC_TIMER_GROUP_TIMERS_PER_GROUP = 1
const CONFIG_SOC_TIMER_GROUP_COUNTER_BIT_WIDTH = 54
const CONFIG_SOC_TIMER_GROUP_SUPPORT_XTAL = 1
const CONFIG_SOC_TIMER_GROUP_SUPPORT_RC_FAST = 1
const CONFIG_SOC_TIMER_GROUP_TOTAL_TIMERS = 2
const CONFIG_SOC_TIMER_SUPPORT_ETM = 1
const CONFIG_SOC_TIMER_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_MWDT_SUPPORT_XTAL = 1
const CONFIG_SOC_MWDT_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_TWAI_CONTROLLER_NUM = 2
const CONFIG_SOC_TWAI_CLK_SUPPORT_XTAL = 1
const CONFIG_SOC_TWAI_BRP_MIN = 2
const CONFIG_SOC_TWAI_BRP_MAX = 32768
const CONFIG_SOC_TWAI_SUPPORTS_RX_STATUS = 1
const CONFIG_SOC_TWAI_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_EFUSE_DIS_DOWNLOAD_ICACHE = 1
const CONFIG_SOC_EFUSE_DIS_PAD_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_USB_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_DIRECT_BOOT = 1
const CONFIG_SOC_EFUSE_SOFT_DIS_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_ICACHE = 1
const CONFIG_SOC_EFUSE_BLOCK9_KEY_PURPOSE_QUIRK = 1
const CONFIG_SOC_SECURE_BOOT_V2_RSA = 1
const CONFIG_SOC_SECURE_BOOT_V2_ECC = 1
const CONFIG_SOC_EFUSE_SECURE_BOOT_KEY_DIGESTS = 3
const CONFIG_SOC_EFUSE_REVOKE_BOOT_KEY_DIGESTS = 1
const CONFIG_SOC_SUPPORT_SECURE_BOOT_REVOKE_KEY = 1
const CONFIG_SOC_FLASH_ENCRYPTED_XTS_AES_BLOCK_MAX = 64
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES = 1
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES_128 = 1
const CONFIG_SOC_APM_CTRL_FILTER_SUPPORTED = 1
const CONFIG_SOC_APM_LP_APM0_SUPPORTED = 1
const CONFIG_SOC_CRYPTO_DPA_PROTECTION_SUPPORTED = 1
const CONFIG_SOC_UART_NUM = 3
const CONFIG_SOC_UART_HP_NUM = 2
const CONFIG_SOC_UART_LP_NUM = 1
const CONFIG_SOC_UART_FIFO_LEN = 128
const CONFIG_SOC_LP_UART_FIFO_LEN = 16
const CONFIG_SOC_UART_BITRATE_MAX = 5000000
const CONFIG_SOC_UART_SUPPORT_PLL_F80M_CLK = 1
const CONFIG_SOC_UART_SUPPORT_RTC_CLK = 1
const CONFIG_SOC_UART_SUPPORT_XTAL_CLK = 1
const CONFIG_SOC_UART_SUPPORT_WAKEUP_INT = 1
const CONFIG_SOC_UART_HAS_LP_UART = 1
const CONFIG_SOC_UART_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_UART_SUPPORT_FSM_TX_WAIT_SEND = 1
const CONFIG_SOC_COEX_HW_PTI = 1
const CONFIG_SOC_EXTERNAL_COEX_ADVANCE = 1
const CONFIG_SOC_PHY_DIG_REGS_MEM_SIZE = 21
const CONFIG_SOC_WIFI_LIGHT_SLEEP_CLK_WIDTH = 12
const CONFIG_SOC_PM_SUPPORT_WIFI_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_BEACON_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_BT_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_EXT1_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_EXT1_WAKEUP_MODE_PER_PIN = 1
const CONFIG_SOC_PM_SUPPORT_CPU_PD = 1
const CONFIG_SOC_PM_SUPPORT_MODEM_PD = 1
const CONFIG_SOC_PM_SUPPORT_XTAL32K_PD = 1
const CONFIG_SOC_PM_SUPPORT_RC32K_PD = 1
const CONFIG_SOC_PM_SUPPORT_RC_FAST_PD = 1
const CONFIG_SOC_PM_SUPPORT_VDDSDIO_PD = 1
const CONFIG_SOC_PM_SUPPORT_TOP_PD = 1
const CONFIG_SOC_PM_SUPPORT_HP_AON_PD = 1
const CONFIG_SOC_PM_SUPPORT_MAC_BB_PD = 1
const CONFIG_SOC_PM_SUPPORT_RTC_PERIPH_PD = 1
const CONFIG_SOC_PM_SUPPORT_PMU_MODEM_STATE = 1
const CONFIG_SOC_PM_SUPPORT_DEEPSLEEP_CHECK_STUB_ONLY = 1
const CONFIG_SOC_PM_CPU_RETENTION_BY_SW = 1
const CONFIG_SOC_PM_MODEM_RETENTION_BY_REGDMA = 1
const CONFIG_SOC_PM_RETENTION_HAS_CLOCK_BUG = 1
const CONFIG_SOC_EXT_MEM_CACHE_TAG_IN_CPU_DOMAIN = 1
const CONFIG_SOC_PM_PAU_LINK_NUM = 4
const CONFIG_SOC_PM_PAU_REGDMA_LINK_MULTI_ADDR = 1
const CONFIG_SOC_PM_PAU_REGDMA_LINK_WIFIMAC = 1
const CONFIG_SOC_PM_PAU_REGDMA_UPDATE_CACHE_BEFORE_WAIT_COMPARE = 1
const CONFIG_SOC_PM_PMU_MIN_SLP_SLOW_CLK_CYCLE_FIXED = 1
const CONFIG_SOC_PM_RETENTION_MODULE_NUM = 32
const CONFIG_SOC_CLK_RC_FAST_SUPPORT_CALIBRATION = 1
const CONFIG_SOC_MODEM_CLOCK_IS_INDEPENDENT = 1
const CONFIG_SOC_CLK_XTAL32K_SUPPORTED = 1
const CONFIG_SOC_CLK_OSC_SLOW_SUPPORTED = 1
const CONFIG_SOC_CLK_RC32K_SUPPORTED = 1
const CONFIG_SOC_RCC_IS_INDEPENDENT = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_FAST_RC = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_XTAL = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_INTR_SUPPORT = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_ETM = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_SUPPORT_SLEEP_RETENTION = 1
const CONFIG_SOC_TEMPERATURE_SENSOR_UNDER_PD_TOP_DOMAIN = 1
const CONFIG_SOC_RNG_CLOCK_IS_INDEPENDENT = 1
const CONFIG_SOC_WIFI_HW_TSF = 1
const CONFIG_SOC_WIFI_FTM_SUPPORT = 1
const CONFIG_SOC_WIFI_GCMP_SUPPORT = 1
const CONFIG_SOC_WIFI_WAPI_SUPPORT = 1
const CONFIG_SOC_WIFI_CSI_SUPPORT = 1
const CONFIG_SOC_WIFI_MESH_SUPPORT = 1
const CONFIG_SOC_WIFI_HE_SUPPORT = 1
const CONFIG_SOC_WIFI_MAC_VERSION_NUM = 2
const CONFIG_SOC_BLE_SUPPORTED = 1
const CONFIG_SOC_BLE_MESH_SUPPORTED = 1
const CONFIG_SOC_ESP_NIMBLE_CONTROLLER = 1
const CONFIG_SOC_BLE_50_SUPPORTED = 1
const CONFIG_SOC_BLE_DEVICE_PRIVACY_SUPPORTED = 1
const CONFIG_SOC_BLE_POWER_CONTROL_SUPPORTED = 1
const CONFIG_SOC_BLE_PERIODIC_ADV_ENH_SUPPORTED = 1
const CONFIG_SOC_BLUFI_SUPPORTED = 1
const CONFIG_SOC_BLE_MULTI_CONN_OPTIMIZATION = 1
const CONFIG_SOC_BLE_USE_WIFI_PWR_CLK_WORKAROUND = 1
const CONFIG_SOC_PHY_COMBO_MODULE = 1
const CONFIG_SOC_CAPS_NO_RESET_BY_ANA_BOD = 1
const CONFIG_SOC_LP_CORE_SINGLE_INTERRUPT_VECTOR = 1
const CONFIG_SOC_LP_CORE_SUPPORT_ETM = 1
const CONFIG_SOC_DEBUG_HAVE_OCD_STUB_BINS = 1
const CONFIG_IDF_CMAKE = 1
const CONFIG_IDF_TOOLCHAIN = "gcc"
const CONFIG_IDF_TOOLCHAIN_GCC = 1
const CONFIG_IDF_TARGET_ARCH_RISCV = 1
const CONFIG_IDF_TARGET_ARCH = "riscv"
const CONFIG_IDF_TARGET = "esp32c6"
const CONFIG_IDF_INIT_VERSION = "5.4.2"
const CONFIG_IDF_TARGET_ESP32C6 = 1
const CONFIG_IDF_FIRMWARE_CHIP_ID = 0x000D
const CONFIG_APP_BUILD_TYPE_APP_2NDBOOT = 1
const CONFIG_APP_BUILD_GENERATE_BINARIES = 1
const CONFIG_APP_BUILD_BOOTLOADER = 1
const CONFIG_APP_BUILD_USE_FLASH_SECTIONS = 1
const CONFIG_BOOTLOADER_COMPILE_TIME_DATE = 1
const CONFIG_BOOTLOADER_PROJECT_VER = 1
const CONFIG_BOOTLOADER_OFFSET_IN_FLASH = 0x0
const CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_SIZE = 1
const CONFIG_BOOTLOADER_LOG_LEVEL_INFO = 1
const CONFIG_BOOTLOADER_LOG_LEVEL = 3
const CONFIG_BOOTLOADER_LOG_TIMESTAMP_SOURCE_CPU_TICKS = 1
const CONFIG_BOOTLOADER_FLASH_XMC_SUPPORT = 1
const CONFIG_BOOTLOADER_REGION_PROTECTION_ENABLE = 1
const CONFIG_BOOTLOADER_WDT_ENABLE = 1
const CONFIG_BOOTLOADER_WDT_TIME_MS = 9000
const CONFIG_BOOTLOADER_RESERVE_RTC_SIZE = 0x0
const CONFIG_SECURE_BOOT_V2_RSA_SUPPORTED = 1
const CONFIG_SECURE_BOOT_V2_ECC_SUPPORTED = 1
const CONFIG_SECURE_BOOT_V2_PREFERRED = 1
const CONFIG_SECURE_ROM_DL_MODE_ENABLED = 1
const CONFIG_APP_COMPILE_TIME_DATE = 1
const CONFIG_APP_RETRIEVE_LEN_ELF_SHA = 9
const CONFIG_ESP_ROM_HAS_CRC_LE = 1
const CONFIG_ESP_ROM_HAS_CRC_BE = 1
const CONFIG_ESP_ROM_HAS_JPEG_DECODE = 1
const CONFIG_ESP_ROM_UART_CLK_IS_XTAL = 1
const CONFIG_ESP_ROM_USB_SERIAL_DEVICE_NUM = 3
const CONFIG_ESP_ROM_HAS_RETARGETABLE_LOCKING = 1
const CONFIG_ESP_ROM_GET_CLK_FREQ = 1
const CONFIG_ESP_ROM_HAS_RVFPLIB = 1
const CONFIG_ESP_ROM_HAS_HAL_WDT = 1
const CONFIG_ESP_ROM_HAS_HAL_SYSTIMER = 1
const CONFIG_ESP_ROM_HAS_HEAP_TLSF = 1
const CONFIG_ESP_ROM_TLSF_CHECK_PATCH = 1
const CONFIG_ESP_ROM_MULTI_HEAP_WALK_PATCH = 1
const CONFIG_ESP_ROM_HAS_LAYOUT_TABLE = 1
const CONFIG_ESP_ROM_HAS_SPI_FLASH = 1
const CONFIG_ESP_ROM_HAS_REGI2C_BUG = 1
const CONFIG_ESP_ROM_HAS_NEWLIB = 1
const CONFIG_ESP_ROM_HAS_NEWLIB_NORMAL_FORMAT = 1
const CONFIG_ESP_ROM_REV0_HAS_NO_ECDSA_INTERFACE = 1
const CONFIG_ESP_ROM_WDT_INIT_PATCH = 1
const CONFIG_ESP_ROM_NEEDS_SET_CACHE_MMU_SIZE = 1
const CONFIG_ESP_ROM_RAM_APP_NEEDS_MMU_INIT = 1
const CONFIG_ESP_ROM_HAS_SW_FLOAT = 1
const CONFIG_ESP_ROM_HAS_VERSION = 1
const CONFIG_ESP_ROM_SUPPORT_DEEP_SLEEP_WAKEUP_STUB = 1
const CONFIG_ESP_ROM_HAS_OUTPUT_PUTC_FUNC = 1
const CONFIG_BOOT_ROM_LOG_ALWAYS_ON = 1
const CONFIG_ESPTOOLPY_FLASHMODE_DIO = 1
const CONFIG_ESPTOOLPY_FLASH_SAMPLE_MODE_STR = 1
const CONFIG_ESPTOOLPY_FLASHMODE = "dio"
const CONFIG_ESPTOOLPY_FLASHFREQ_80M = 1
const CONFIG_ESPTOOLPY_FLASHFREQ = "80m"
const CONFIG_ESPTOOLPY_FLASHSIZE_2MB = 1
const CONFIG_ESPTOOLPY_FLASHSIZE = "2MB"
const CONFIG_ESPTOOLPY_BEFORE_RESET = 1
const CONFIG_ESPTOOLPY_BEFORE = "default_reset"
const CONFIG_ESPTOOLPY_AFTER_RESET = 1
const CONFIG_ESPTOOLPY_AFTER = "hard_reset"
const CONFIG_ESPTOOLPY_MONITOR_BAUD = 115200
const CONFIG_PARTITION_TABLE_SINGLE_APP = 1
const CONFIG_PARTITION_TABLE_CUSTOM_FILENAME = "partitions.csv"
const CONFIG_PARTITION_TABLE_FILENAME = "partitions_singleapp.csv"
const CONFIG_PARTITION_TABLE_OFFSET = 0x8000
const CONFIG_PARTITION_TABLE_MD5 = 1
const CONFIG_COMPILER_OPTIMIZATION_DEBUG = 1
const CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE = 1
const CONFIG_COMPILER_ASSERT_NDEBUG_EVALUATE = 1
const CONFIG_COMPILER_FLOAT_LIB_FROM_RVFPLIB = 1
const CONFIG_COMPILER_OPTIMIZATION_ASSERTION_LEVEL = 2
const CONFIG_COMPILER_HIDE_PATHS_MACROS = 1
const CONFIG_COMPILER_STACK_CHECK_MODE_NONE = 1
const CONFIG_COMPILER_DISABLE_DEFAULT_ERRORS = 1
const CONFIG_COMPILER_RT_LIB_GCCLIB = 1
const CONFIG_COMPILER_RT_LIB_NAME = "gcc"
const CONFIG_COMPILER_ORPHAN_SECTIONS_WARNING = 1
const CONFIG_APPTRACE_DEST_NONE = 1
const CONFIG_APPTRACE_DEST_UART_NONE = 1
const CONFIG_APPTRACE_UART_TASK_PRIO = 1
const CONFIG_APPTRACE_LOCK_ENABLE = 1
const CONFIG_EFUSE_MAX_BLK_LEN = 256
const CONFIG_ESP_TLS_USING_MBEDTLS = 1
const CONFIG_ESP_TLS_USE_DS_PERIPHERAL = 1
const CONFIG_ESP_COEX_ENABLED = 1
const CONFIG_ESP_COEX_SW_COEXIST_ENABLE = 1
const CONFIG_ESP_ERR_TO_NAME_LOOKUP = 1
const CONFIG_GPTIMER_ISR_HANDLER_IN_IRAM = 1
const CONFIG_GPTIMER_OBJ_CACHE_SAFE = 1
const CONFIG_SPI_MASTER_ISR_IN_IRAM = 1
const CONFIG_SPI_SLAVE_ISR_IN_IRAM = 1
const CONFIG_USJ_ENABLE_USB_SERIAL_JTAG = 1
const CONFIG_ETH_ENABLED = 1
const CONFIG_ETH_USE_SPI_ETHERNET = 1
const CONFIG_ESP_EVENT_POST_FROM_ISR = 1
const CONFIG_ESP_EVENT_POST_FROM_IRAM_ISR = 1
const CONFIG_ESP_GDBSTUB_ENABLED = 1
const CONFIG_ESP_GDBSTUB_SUPPORT_TASKS = 1
const CONFIG_ESP_GDBSTUB_MAX_TASKS = 32
const CONFIG_ESPHID_TASK_SIZE_BT = 2048
const CONFIG_ESPHID_TASK_SIZE_BLE = 4096
const CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS = 1
const CONFIG_ESP_HTTP_CLIENT_EVENT_POST_TIMEOUT = 2000
const CONFIG_HTTPD_MAX_REQ_HDR_LEN = 512
const CONFIG_HTTPD_MAX_URI_LEN = 512
const CONFIG_HTTPD_ERR_RESP_NO_DELAY = 1
const CONFIG_HTTPD_PURGE_BUF_LEN = 32
const CONFIG_HTTPD_SERVER_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP_HTTPS_OTA_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP_HTTPS_SERVER_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP32C6_REV_MIN_0 = 1
const CONFIG_ESP32C6_REV_MIN_FULL = 0
const CONFIG_ESP_REV_MIN_FULL = 0
const CONFIG_ESP32C6_REV_MAX_FULL = 99
const CONFIG_ESP_REV_MAX_FULL = 99
const CONFIG_ESP_EFUSE_BLOCK_REV_MIN_FULL = 0
const CONFIG_ESP_EFUSE_BLOCK_REV_MAX_FULL = 99
const CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_STA = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_AP = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_BT = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_ETH = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_IEEE802154 = 1
const CONFIG_ESP_MAC_UNIVERSAL_MAC_ADDRESSES_FOUR = 1
const CONFIG_ESP_MAC_UNIVERSAL_MAC_ADDRESSES = 4
const CONFIG_ESP32C6_UNIVERSAL_MAC_ADDRESSES_FOUR = 1
const CONFIG_ESP32C6_UNIVERSAL_MAC_ADDRESSES = 4
const CONFIG_ESP_SLEEP_FLASH_LEAKAGE_WORKAROUND = 1
const CONFIG_ESP_SLEEP_GPIO_RESET_WORKAROUND = 1
const CONFIG_ESP_SLEEP_WAIT_FLASH_READY_EXTRA_DELAY = 0
const CONFIG_ESP_SLEEP_GPIO_ENABLE_INTERNAL_RESISTORS = 1
const CONFIG_RTC_CLK_SRC_INT_RC = 1
const CONFIG_RTC_CLK_CAL_CYCLES = 1024
const CONFIG_PERIPH_CTRL_FUNC_IN_IRAM = 1
const CONFIG_GDMA_CTRL_FUNC_IN_IRAM = 1
const CONFIG_GDMA_ISR_HANDLER_IN_IRAM = 1
const CONFIG_GDMA_OBJ_DRAM_SAFE = 1
const CONFIG_XTAL_FREQ_40 = 1
const CONFIG_XTAL_FREQ = 40
const CONFIG_ESP_SPI_BUS_LOCK_ISR_FUNCS_IN_IRAM = 1
const CONFIG_ESP_NETIF_IP_LOST_TIMER_INTERVAL = 120
const CONFIG_ESP_NETIF_TCPIP_LWIP = 1
const CONFIG_ESP_NETIF_USES_TCPIP_WITH_BSD_API = 1
const CONFIG_ESP_NETIF_REPORT_DATA_TRAFFIC = 1
const CONFIG_ESP_PHY_ENABLED = 1
const CONFIG_ESP_PHY_CALIBRATION_AND_DATA_STORAGE = 1
const CONFIG_ESP_PHY_MAX_WIFI_TX_POWER = 20
const CONFIG_ESP_PHY_MAX_TX_POWER = 20
const CONFIG_ESP_PHY_RF_CAL_PARTIAL = 1
const CONFIG_ESP_PHY_CALIBRATION_MODE = 0
const CONFIG_PM_SLP_DEFAULT_PARAMS_OPT = 1
const CONFIG_PM_POWER_DOWN_CPU_IN_LIGHT_SLEEP = 1
const CONFIG_ESP_CRYPTO_DPA_PROTECTION_AT_STARTUP = 1
const CONFIG_ESP_CRYPTO_DPA_PROTECTION_LEVEL_LOW = 1
const CONFIG_ESP_CRYPTO_DPA_PROTECTION_LEVEL = 1
const CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ_160 = 1
const CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ = 160
const CONFIG_ESP_SYSTEM_PANIC_PRINT_REBOOT = 1
const CONFIG_ESP_SYSTEM_PANIC_REBOOT_DELAY_SECONDS = 0
const CONFIG_ESP_SYSTEM_SINGLE_CORE_MODE = 1
const CONFIG_ESP_SYSTEM_RTC_FAST_MEM_AS_HEAP_DEPCHECK = 1
const CONFIG_ESP_SYSTEM_ALLOW_RTC_FAST_MEM_AS_HEAP = 1
const CONFIG_ESP_SYSTEM_PMP_IDRAM_SPLIT = 1
const CONFIG_ESP_SYSTEM_EVENT_QUEUE_SIZE = 32
const CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE = 2304
const CONFIG_ESP_MAIN_TASK_STACK_SIZE = 3584
const CONFIG_ESP_MAIN_TASK_AFFINITY_CPU0 = 1
const CONFIG_ESP_MAIN_TASK_AFFINITY = 0x0
const CONFIG_ESP_MINIMAL_SHARED_STACK_SIZE = 2048
const CONFIG_ESP_CONSOLE_UART_DEFAULT = 1
const CONFIG_ESP_CONSOLE_SECONDARY_USB_SERIAL_JTAG = 1
const CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG_ENABLED = 1
const CONFIG_ESP_CONSOLE_UART = 1
const CONFIG_ESP_CONSOLE_UART_NUM = 0
const CONFIG_ESP_CONSOLE_ROM_SERIAL_PORT_NUM = 0
const CONFIG_ESP_CONSOLE_UART_BAUDRATE = 115200
const CONFIG_ESP_INT_WDT = 1
const CONFIG_ESP_INT_WDT_TIMEOUT_MS = 300
const CONFIG_ESP_TASK_WDT_EN = 1
const CONFIG_ESP_TASK_WDT_INIT = 1
const CONFIG_ESP_TASK_WDT_TIMEOUT_S = 5
const CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU0 = 1
const CONFIG_ESP_DEBUG_OCDAWARE = 1
const CONFIG_ESP_SYSTEM_CHECK_INT_LEVEL_4 = 1
const CONFIG_ESP_BROWNOUT_DET = 1
const CONFIG_ESP_BROWNOUT_DET_LVL_SEL_7 = 1
const CONFIG_ESP_BROWNOUT_DET_LVL = 7
const CONFIG_ESP_SYSTEM_BROWNOUT_INTR = 1
const CONFIG_ESP_SYSTEM_HW_STACK_GUARD = 1
const CONFIG_ESP_SYSTEM_BBPLL_RECALIB = 1
const CONFIG_ESP_SYSTEM_HW_PC_RECORD = 1
const CONFIG_ESP_IPC_TASK_STACK_SIZE = 1024
const CONFIG_ESP_TIME_FUNCS_USE_RTC_TIMER = 1
const CONFIG_ESP_TIME_FUNCS_USE_ESP_TIMER = 1
const CONFIG_ESP_TIMER_TASK_STACK_SIZE = 3584
const CONFIG_ESP_TIMER_INTERRUPT_LEVEL = 1
const CONFIG_ESP_TIMER_TASK_AFFINITY = 0x0
const CONFIG_ESP_TIMER_TASK_AFFINITY_CPU0 = 1
const CONFIG_ESP_TIMER_ISR_AFFINITY_CPU0 = 1
const CONFIG_ESP_TIMER_IMPL_SYSTIMER = 1
const CONFIG_ESP_WIFI_ENABLED = 1
const CONFIG_ESP_WIFI_STATIC_RX_BUFFER_NUM = 10
const CONFIG_ESP_WIFI_DYNAMIC_RX_BUFFER_NUM = 32
const CONFIG_ESP_WIFI_DYNAMIC_TX_BUFFER = 1
const CONFIG_ESP_WIFI_TX_BUFFER_TYPE = 1
const CONFIG_ESP_WIFI_DYNAMIC_TX_BUFFER_NUM = 32
const CONFIG_ESP_WIFI_STATIC_RX_MGMT_BUFFER = 1
const CONFIG_ESP_WIFI_DYNAMIC_RX_MGMT_BUF = 0
const CONFIG_ESP_WIFI_RX_MGMT_BUF_NUM_DEF = 5
const CONFIG_ESP_WIFI_AMPDU_TX_ENABLED = 1
const CONFIG_ESP_WIFI_TX_BA_WIN = 6
const CONFIG_ESP_WIFI_AMPDU_RX_ENABLED = 1
const CONFIG_ESP_WIFI_RX_BA_WIN = 6
const CONFIG_ESP_WIFI_NVS_ENABLED = 1
const CONFIG_ESP_WIFI_SOFTAP_BEACON_MAX_LEN = 752
const CONFIG_ESP_WIFI_MGMT_SBUF_NUM = 32
const CONFIG_ESP_WIFI_IRAM_OPT = 1
const CONFIG_ESP_WIFI_EXTRA_IRAM_OPT = 1
const CONFIG_ESP_WIFI_RX_IRAM_OPT = 1
const CONFIG_ESP_WIFI_ENABLE_WPA3_SAE = 1
const CONFIG_ESP_WIFI_ENABLE_SAE_PK = 1
const CONFIG_ESP_WIFI_SOFTAP_SAE_SUPPORT = 1
const CONFIG_ESP_WIFI_ENABLE_WPA3_OWE_STA = 1
const CONFIG_ESP_WIFI_SLP_IRAM_OPT = 1
const CONFIG_ESP_WIFI_SLP_DEFAULT_MIN_ACTIVE_TIME = 50
const CONFIG_ESP_WIFI_SLP_DEFAULT_MAX_ACTIVE_TIME = 10
const CONFIG_ESP_WIFI_SLP_DEFAULT_WAIT_BROADCAST_DATA_TIME = 15
const CONFIG_ESP_WIFI_STA_DISCONNECTED_PM_ENABLE = 1
const CONFIG_ESP_WIFI_GMAC_SUPPORT = 1
const CONFIG_ESP_WIFI_SOFTAP_SUPPORT = 1
const CONFIG_ESP_WIFI_ESPNOW_MAX_ENCRYPT_NUM = 7
const CONFIG_ESP_WIFI_MBEDTLS_CRYPTO = 1
const CONFIG_ESP_WIFI_MBEDTLS_TLS_CLIENT = 1
const CONFIG_ESP_WIFI_TX_HETB_QUEUE_NUM = 3
const CONFIG_ESP_WIFI_ENTERPRISE_SUPPORT = 1
const CONFIG_ESP_COREDUMP_ENABLE_TO_NONE = 1
const CONFIG_FATFS_VOLUME_COUNT = 2
const CONFIG_FATFS_LFN_NONE = 1
const CONFIG_FATFS_SECTOR_4096 = 1
const CONFIG_FATFS_CODEPAGE_437 = 1
const CONFIG_FATFS_CODEPAGE = 437
const CONFIG_FATFS_FS_LOCK = 0
const CONFIG_FATFS_TIMEOUT_MS = 10000
const CONFIG_FATFS_PER_FILE_CACHE = 1
const CONFIG_FATFS_USE_STRFUNC_NONE = 1
const CONFIG_FATFS_VFS_FSTAT_BLKSIZE = 0
const CONFIG_FATFS_LINK_LOCK = 1
const CONFIG_FATFS_DONT_TRUST_FREE_CLUSTER_CNT = 0
const CONFIG_FATFS_DONT_TRUST_LAST_ALLOC = 0
const CONFIG_FREERTOS_UNICORE = 1
const CONFIG_FREERTOS_HZ = 100
const CONFIG_FREERTOS_OPTIMIZED_SCHEDULER = 1
const CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY = 1
const CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS = 1
const CONFIG_FREERTOS_IDLE_TASK_STACKSIZE = 1536
const CONFIG_FREERTOS_MAX_TASK_NAME_LEN = 16
const CONFIG_FREERTOS_USE_TIMERS = 1
const CONFIG_FREERTOS_TIMER_SERVICE_TASK_NAME = "Tmr Svc"
const CONFIG_FREERTOS_TIMER_TASK_NO_AFFINITY = 1
const CONFIG_FREERTOS_TIMER_SERVICE_TASK_CORE_AFFINITY = 0x7FFFFFFF
const CONFIG_FREERTOS_TIMER_TASK_PRIORITY = 1
const CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH = 2048
const CONFIG_FREERTOS_TIMER_QUEUE_LENGTH = 10
const CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE = 0
const CONFIG_FREERTOS_TASK_NOTIFICATION_ARRAY_ENTRIES = 1
const CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER = 1
const CONFIG_FREERTOS_TLSP_DELETION_CALLBACKS = 1
const CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER = 1
const CONFIG_FREERTOS_ISR_STACKSIZE = 1536
const CONFIG_FREERTOS_INTERRUPT_BACKTRACE = 1
const CONFIG_FREERTOS_TICK_SUPPORT_SYSTIMER = 1
const CONFIG_FREERTOS_CORETIMER_SYSTIMER_LVL1 = 1
const CONFIG_FREERTOS_SYSTICK_USES_SYSTIMER = 1
const CONFIG_FREERTOS_PORT = 1
const CONFIG_FREERTOS_NO_AFFINITY = 0x7FFFFFFF
const CONFIG_FREERTOS_SUPPORT_STATIC_ALLOCATION = 1
const CONFIG_FREERTOS_DEBUG_OCDAWARE = 1
const CONFIG_FREERTOS_ENABLE_TASK_SNAPSHOT = 1
const CONFIG_FREERTOS_PLACE_SNAPSHOT_FUNS_INTO_FLASH = 1
const CONFIG_FREERTOS_NUMBER_OF_CORES = 1
const CONFIG_HAL_ASSERTION_EQUALS_SYSTEM = 1
const CONFIG_HAL_DEFAULT_ASSERTION_LEVEL = 2
const CONFIG_HAL_SYSTIMER_USE_ROM_IMPL = 1
const CONFIG_HAL_WDT_USE_ROM_IMPL = 1
const CONFIG_HAL_SPI_MASTER_FUNC_IN_IRAM = 1
const CONFIG_HAL_SPI_SLAVE_FUNC_IN_IRAM = 1
const CONFIG_HEAP_POISONING_DISABLED = 1
const CONFIG_HEAP_TRACING_OFF = 1
const CONFIG_HEAP_TLSF_USE_ROM_IMPL = 1
const CONFIG_IEEE802154_ENABLED = 1
const CONFIG_IEEE802154_RX_BUFFER_SIZE = 20
const CONFIG_IEEE802154_CCA_ED = 1
const CONFIG_IEEE802154_CCA_MODE = 1
const CONFIG_IEEE802154_PENDING_TABLE_SIZE = 20
const CONFIG_IEEE802154_TIMING_OPTIMIZATION = 1
const CONFIG_LOG_DEFAULT_LEVEL_INFO = 1
const CONFIG_LOG_DEFAULT_LEVEL = 3
const CONFIG_LOG_MAXIMUM_EQUALS_DEFAULT = 1
const CONFIG_LOG_MAXIMUM_LEVEL = 3
const CONFIG_LOG_DYNAMIC_LEVEL_CONTROL = 1
const CONFIG_LOG_TAG_LEVEL_IMPL_CACHE_AND_LINKED_LIST = 1
const CONFIG_LOG_TAG_LEVEL_CACHE_BINARY_MIN_HEAP = 1
const CONFIG_LOG_TAG_LEVEL_IMPL_CACHE_SIZE = 31
const CONFIG_LOG_TIMESTAMP_SOURCE_RTOS = 1
const CONFIG_LWIP_ENABLE = 1
const CONFIG_LWIP_LOCAL_HOSTNAME = "espressif"
const CONFIG_LWIP_TCPIP_TASK_PRIO = 18
const CONFIG_LWIP_DNS_SUPPORT_MDNS_QUERIES = 1
const CONFIG_LWIP_TIMERS_ONDEMAND = 1
const CONFIG_LWIP_ND6 = 1
const CONFIG_LWIP_MAX_SOCKETS = 10
const CONFIG_LWIP_SO_REUSE = 1
const CONFIG_LWIP_SO_REUSE_RXTOALL = 1
const CONFIG_LWIP_IP_DEFAULT_TTL = 64
const CONFIG_LWIP_IP4_FRAG = 1
const CONFIG_LWIP_IP6_FRAG = 1
const CONFIG_LWIP_IP_REASS_MAX_PBUFS = 10
const CONFIG_LWIP_ESP_GRATUITOUS_ARP = 1
const CONFIG_LWIP_GARP_TMR_INTERVAL = 60
const CONFIG_LWIP_ESP_MLDV6_REPORT = 1
const CONFIG_LWIP_MLDV6_TMR_INTERVAL = 40
const CONFIG_LWIP_TCPIP_RECVMBOX_SIZE = 32
const CONFIG_LWIP_DHCP_DOES_ARP_CHECK = 1
const CONFIG_LWIP_DHCP_DISABLE_VENDOR_CLASS_ID = 1
const CONFIG_LWIP_DHCP_OPTIONS_LEN = 68
const CONFIG_LWIP_NUM_NETIF_CLIENT_DATA = 0
const CONFIG_LWIP_DHCP_COARSE_TIMER_SECS = 1
const CONFIG_LWIP_DHCPS = 1
const CONFIG_LWIP_DHCPS_LEASE_UNIT = 60
const CONFIG_LWIP_DHCPS_MAX_STATION_NUM = 8
const CONFIG_LWIP_DHCPS_STATIC_ENTRIES = 1
const CONFIG_LWIP_DHCPS_ADD_DNS = 1
const CONFIG_LWIP_IPV4 = 1
const CONFIG_LWIP_IPV6 = 1
const CONFIG_LWIP_IPV6_NUM_ADDRESSES = 3
const CONFIG_LWIP_NETIF_LOOPBACK = 1
const CONFIG_LWIP_LOOPBACK_MAX_PBUFS = 8
const CONFIG_LWIP_MAX_ACTIVE_TCP = 16
const CONFIG_LWIP_MAX_LISTENING_TCP = 16
const CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION = 1
const CONFIG_LWIP_TCP_MAXRTX = 12
const CONFIG_LWIP_TCP_SYNMAXRTX = 12
const CONFIG_LWIP_TCP_MSS = 1440
const CONFIG_LWIP_TCP_TMR_INTERVAL = 250
const CONFIG_LWIP_TCP_MSL = 60000
const CONFIG_LWIP_TCP_FIN_WAIT_TIMEOUT = 20000
const CONFIG_LWIP_TCP_SND_BUF_DEFAULT = 5760
const CONFIG_LWIP_TCP_WND_DEFAULT = 5760
const CONFIG_LWIP_TCP_RECVMBOX_SIZE = 6
const CONFIG_LWIP_TCP_ACCEPTMBOX_SIZE = 6
const CONFIG_LWIP_TCP_QUEUE_OOSEQ = 1
const CONFIG_LWIP_TCP_OOSEQ_TIMEOUT = 6
const CONFIG_LWIP_TCP_OOSEQ_MAX_PBUFS = 4
const CONFIG_LWIP_TCP_OVERSIZE_MSS = 1
const CONFIG_LWIP_TCP_RTO_TIME = 1500
const CONFIG_LWIP_MAX_UDP_PCBS = 16
const CONFIG_LWIP_UDP_RECVMBOX_SIZE = 6
const CONFIG_LWIP_CHECKSUM_CHECK_ICMP = 1
const CONFIG_LWIP_TCPIP_TASK_STACK_SIZE = 3072
const CONFIG_LWIP_TCPIP_TASK_AFFINITY_NO_AFFINITY = 1
const CONFIG_LWIP_TCPIP_TASK_AFFINITY = 0x7FFFFFFF
const CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE = 3
const CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS = 5
const CONFIG_LWIP_IPV6_ND6_NUM_PREFIXES = 5
const CONFIG_LWIP_IPV6_ND6_NUM_ROUTERS = 3
const CONFIG_LWIP_IPV6_ND6_NUM_DESTINATIONS = 10
const CONFIG_LWIP_ICMP = 1
const CONFIG_LWIP_MAX_RAW_PCBS = 16
const CONFIG_LWIP_SNTP_MAX_SERVERS = 1
const CONFIG_LWIP_SNTP_UPDATE_DELAY = 3600000
const CONFIG_LWIP_SNTP_STARTUP_DELAY = 1
const CONFIG_LWIP_SNTP_MAXIMUM_STARTUP_DELAY = 5000
const CONFIG_LWIP_DNS_MAX_HOST_IP = 1
const CONFIG_LWIP_DNS_MAX_SERVERS = 3
const CONFIG_LWIP_BRIDGEIF_MAX_PORTS = 7
const CONFIG_LWIP_ESP_LWIP_ASSERT = 1
const CONFIG_LWIP_HOOK_TCP_ISN_DEFAULT = 1
const CONFIG_LWIP_HOOK_IP6_ROUTE_NONE = 1
const CONFIG_LWIP_HOOK_ND6_GET_GW_NONE = 1
const CONFIG_LWIP_HOOK_IP6_SELECT_SRC_ADDR_NONE = 1
const CONFIG_LWIP_HOOK_NETCONN_EXT_RESOLVE_NONE = 1
const CONFIG_LWIP_HOOK_DNS_EXT_RESOLVE_NONE = 1
const CONFIG_LWIP_HOOK_IP6_INPUT_DEFAULT = 1
const CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC = 1
const CONFIG_MBEDTLS_ASYMMETRIC_CONTENT_LEN = 1
const CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN = 16384
const CONFIG_MBEDTLS_SSL_OUT_CONTENT_LEN = 4096
const CONFIG_MBEDTLS_SSL_KEEP_PEER_CERTIFICATE = 1
const CONFIG_MBEDTLS_PKCS7_C = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_FULL = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_MAX_CERTS = 200
const CONFIG_MBEDTLS_CMAC_C = 1
const CONFIG_MBEDTLS_HARDWARE_AES = 1
const CONFIG_MBEDTLS_AES_USE_INTERRUPT = 1
const CONFIG_MBEDTLS_AES_INTERRUPT_LEVEL = 0
const CONFIG_MBEDTLS_GCM_SUPPORT_NON_AES_CIPHER = 1
const CONFIG_MBEDTLS_HARDWARE_MPI = 1
const CONFIG_MBEDTLS_LARGE_KEY_SOFTWARE_MPI = 1
const CONFIG_MBEDTLS_MPI_USE_INTERRUPT = 1
const CONFIG_MBEDTLS_MPI_INTERRUPT_LEVEL = 0
const CONFIG_MBEDTLS_HARDWARE_SHA = 1
const CONFIG_MBEDTLS_HARDWARE_ECC = 1
const CONFIG_MBEDTLS_ECC_OTHER_CURVES_SOFT_FALLBACK = 1
const CONFIG_MBEDTLS_ROM_MD5 = 1
const CONFIG_MBEDTLS_HAVE_TIME = 1
const CONFIG_MBEDTLS_ECDSA_DETERMINISTIC = 1
const CONFIG_MBEDTLS_SHA1_C = 1
const CONFIG_MBEDTLS_SHA512_C = 1
const CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT = 1
const CONFIG_MBEDTLS_TLS_SERVER = 1
const CONFIG_MBEDTLS_TLS_CLIENT = 1
const CONFIG_MBEDTLS_TLS_ENABLED = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_RSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA = 1
const CONFIG_MBEDTLS_SSL_RENEGOTIATION = 1
const CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 = 1
const CONFIG_MBEDTLS_SSL_ALPN = 1
const CONFIG_MBEDTLS_CLIENT_SSL_SESSION_TICKETS = 1
const CONFIG_MBEDTLS_SERVER_SSL_SESSION_TICKETS = 1
const CONFIG_MBEDTLS_AES_C = 1
const CONFIG_MBEDTLS_CCM_C = 1
const CONFIG_MBEDTLS_GCM_C = 1
const CONFIG_MBEDTLS_PEM_PARSE_C = 1
const CONFIG_MBEDTLS_PEM_WRITE_C = 1
const CONFIG_MBEDTLS_X509_CRL_PARSE_C = 1
const CONFIG_MBEDTLS_X509_CSR_PARSE_C = 1
const CONFIG_MBEDTLS_ECP_C = 1
const CONFIG_MBEDTLS_PK_PARSE_EC_EXTENDED = 1
const CONFIG_MBEDTLS_PK_PARSE_EC_COMPRESSED = 1
const CONFIG_MBEDTLS_ECDH_C = 1
const CONFIG_MBEDTLS_ECDSA_C = 1
const CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED = 1
const CONFIG_MBEDTLS_ECP_NIST_OPTIM = 1
const CONFIG_MBEDTLS_ERROR_STRINGS = 1
const CONFIG_MBEDTLS_FS_IO = 1
const CONFIG_MQTT_PROTOCOL_311 = 1
const CONFIG_MQTT_TRANSPORT_SSL = 1
const CONFIG_MQTT_TRANSPORT_WEBSOCKET = 1
const CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE = 1
const CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF = 1
const CONFIG_NEWLIB_STDIN_LINE_ENDING_CR = 1
const CONFIG_NEWLIB_TIME_SYSCALL_USE_RTC_HRT = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_0 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_1 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_2 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_PATCH_VERSION = 1
const CONFIG_PTHREAD_TASK_PRIO_DEFAULT = 5
const CONFIG_PTHREAD_TASK_STACK_SIZE_DEFAULT = 3072
const CONFIG_PTHREAD_STACK_MIN = 768
const CONFIG_PTHREAD_TASK_NAME_DEFAULT = "pthread"
const CONFIG_MMU_PAGE_SIZE_32KB = 1
const CONFIG_MMU_PAGE_MODE = "32KB"
const CONFIG_MMU_PAGE_SIZE = 0x8000
const CONFIG_SPI_FLASH_BROWNOUT_RESET_XMC = 1
const CONFIG_SPI_FLASH_BROWNOUT_RESET = 1
const CONFIG_SPI_FLASH_SUSPEND_TSUS_VAL_US = 50
const CONFIG_SPI_FLASH_ROM_DRIVER_PATCH = 1
const CONFIG_SPI_FLASH_DANGEROUS_WRITE_ABORTS = 1
const CONFIG_SPI_FLASH_YIELD_DURING_ERASE = 1
const CONFIG_SPI_FLASH_ERASE_YIELD_DURATION_MS = 20
const CONFIG_SPI_FLASH_ERASE_YIELD_TICKS = 1
const CONFIG_SPI_FLASH_WRITE_CHUNK_SIZE = 8192
const CONFIG_SPI_FLASH_VENDOR_XMC_SUPPORTED = 1
const CONFIG_SPI_FLASH_ENABLE_ENCRYPTED_READ_WRITE = 1
const CONFIG_SPIFFS_MAX_PARTITIONS = 3
const CONFIG_SPIFFS_CACHE = 1
const CONFIG_SPIFFS_CACHE_WR = 1
const CONFIG_SPIFFS_PAGE_CHECK = 1
const CONFIG_SPIFFS_GC_MAX_RUNS = 10
const CONFIG_SPIFFS_PAGE_SIZE = 256
const CONFIG_SPIFFS_OBJ_NAME_LEN = 32
const CONFIG_SPIFFS_USE_MAGIC = 1
const CONFIG_SPIFFS_USE_MAGIC_LENGTH = 1
const CONFIG_SPIFFS_META_LENGTH = 4
const CONFIG_SPIFFS_USE_MTIME = 1
const CONFIG_WS_TRANSPORT = 1
const CONFIG_WS_BUFFER_SIZE = 1024
const CONFIG_UNITY_ENABLE_FLOAT = 1
const CONFIG_UNITY_ENABLE_DOUBLE = 1
const CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER = 1
const CONFIG_VFS_SUPPORT_IO = 1
const CONFIG_VFS_SUPPORT_DIR = 1
const CONFIG_VFS_SUPPORT_SELECT = 1
const CONFIG_VFS_SUPPRESS_SELECT_DEBUG_OUTPUT = 1
const CONFIG_VFS_SUPPORT_TERMIOS = 1
const CONFIG_VFS_MAX_COUNT = 8
const CONFIG_VFS_SEMIHOSTFS_MAX_MOUNT_POINTS = 1
const CONFIG_VFS_INITIALIZE_DEV_NULL = 1
const CONFIG_WL_SECTOR_SIZE_4096 = 1
const CONFIG_WL_SECTOR_SIZE = 4096
const CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES = 16
const CONFIG_WIFI_PROV_AUTOSTOP_TIMEOUT = 30
const CONFIG_WIFI_PROV_STA_ALL_CHANNEL_SCAN = 1
const X_ATEXIT_SIZE = 32
const X_REENT_EMERGENCY_SIZE = 25
const X_REENT_ASCTIME_SIZE = 26
const X_REENT_SIGNAL_SIZE = 24
const X__GNUCLIKE_ASM = 3
const X__GNUCLIKE___TYPEOF = 1
const X__GNUCLIKE___SECTION = 1
const X__GNUCLIKE_CTOR_SECTION_HANDLING = 1
const X__GNUCLIKE_BUILTIN_CONSTANT_P = 1
const X__GNUCLIKE_BUILTIN_VARARGS = 1
const X__GNUCLIKE_BUILTIN_STDARG = 1
const X__GNUCLIKE_BUILTIN_VAALIST = 1
const X__GNUC_VA_LIST_COMPATIBILITY = 1
const X__GNUCLIKE_BUILTIN_NEXT_ARG = 1
const X__GNUCLIKE_BUILTIN_MEMCPY = 1
const X__CC_SUPPORTS_INLINE = 1
const X__CC_SUPPORTS___INLINE = 1
const X__CC_SUPPORTS___INLINE__ = 1
const X__CC_SUPPORTS___FUNC__ = 1
const X__CC_SUPPORTS_WARNING = 1
const X__CC_SUPPORTS_VARADIC_XXX = 1
const X__CC_SUPPORTS_DYNAMIC_ARRAY_INIT = 1
const EXIT_FAILURE = 1
const EXIT_SUCCESS = 0
const SOC_ADC_SUPPORTED = 1
const SOC_DEDICATED_GPIO_SUPPORTED = 1
const SOC_UART_SUPPORTED = 1
const SOC_GDMA_SUPPORTED = 1
const SOC_AHB_GDMA_SUPPORTED = 1
const SOC_GPTIMER_SUPPORTED = 1
const SOC_PCNT_SUPPORTED = 1
const SOC_MCPWM_SUPPORTED = 1
const SOC_TWAI_SUPPORTED = 1
const SOC_ETM_SUPPORTED = 1
const SOC_PARLIO_SUPPORTED = 1
const SOC_BT_SUPPORTED = 1
const SOC_IEEE802154_SUPPORTED = 1
const SOC_ASYNC_MEMCPY_SUPPORTED = 1
const SOC_USB_SERIAL_JTAG_SUPPORTED = 1
const SOC_TEMP_SENSOR_SUPPORTED = 1
const SOC_PHY_SUPPORTED = 1
const SOC_WIFI_SUPPORTED = 1
const SOC_SUPPORTS_SECURE_DL_MODE = 1
const SOC_ULP_SUPPORTED = 1
const SOC_LP_CORE_SUPPORTED = 1
const SOC_EFUSE_KEY_PURPOSE_FIELD = 1
const SOC_EFUSE_SUPPORTED = 1
const SOC_RTC_FAST_MEM_SUPPORTED = 1
const SOC_RTC_MEM_SUPPORTED = 1
const SOC_I2S_SUPPORTED = 1
const SOC_RMT_SUPPORTED = 1
const SOC_SDM_SUPPORTED = 1
const SOC_GPSPI_SUPPORTED = 1
const SOC_LEDC_SUPPORTED = 1
const SOC_I2C_SUPPORTED = 1
const SOC_SYSTIMER_SUPPORTED = 1
const SOC_SUPPORT_COEXISTENCE = 1
const SOC_AES_SUPPORTED = 1
const SOC_MPI_SUPPORTED = 1
const SOC_SHA_SUPPORTED = 1
const SOC_HMAC_SUPPORTED = 1
const SOC_DIG_SIGN_SUPPORTED = 1
const SOC_ECC_SUPPORTED = 1
const SOC_FLASH_ENC_SUPPORTED = 1
const SOC_SECURE_BOOT_SUPPORTED = 1
const SOC_SDIO_SLAVE_SUPPORTED = 1
const SOC_BOD_SUPPORTED = 1
const SOC_APM_SUPPORTED = 1
const SOC_PMU_SUPPORTED = 1
const SOC_PAU_SUPPORTED = 1
const SOC_LP_TIMER_SUPPORTED = 1
const SOC_LP_AON_SUPPORTED = 1
const SOC_LP_PERIPHERALS_SUPPORTED = 1
const SOC_LP_I2C_SUPPORTED = 1
const SOC_ULP_LP_UART_SUPPORTED = 1
const SOC_CLK_TREE_SUPPORTED = 1
const SOC_ASSIST_DEBUG_SUPPORTED = 1
const SOC_WDT_SUPPORTED = 1
const SOC_SPI_FLASH_SUPPORTED = 1
const SOC_RNG_SUPPORTED = 1
const SOC_LIGHT_SLEEP_SUPPORTED = 1
const SOC_DEEP_SLEEP_SUPPORTED = 1
const SOC_MODEM_CLOCK_SUPPORTED = 1
const SOC_PM_SUPPORTED = 1
const SOC_XTAL_SUPPORT_40M = 1
const SOC_XTAL_CLOCK_PATH_DEPENDS_ON_TOP_DOMAIN = 1
const SOC_ADC_DIG_CTRL_SUPPORTED = 1
const SOC_ADC_DIG_IIR_FILTER_SUPPORTED = 1
const SOC_ADC_MONITOR_SUPPORTED = 1
const SOC_ADC_DMA_SUPPORTED = 1
const SOC_ADC_SAMPLE_FREQ_THRES_HIGH = 83333
const SOC_ADC_SAMPLE_FREQ_THRES_LOW = 611
const SOC_ADC_SHARED_POWER = 1
const SOC_BROWNOUT_RESET_SUPPORTED = 1
const SOC_SHARED_IDCACHE_SUPPORTED = 1
const SOC_CACHE_FREEZE_SUPPORTED = 1
const SOC_CPU_INTR_NUM = 32
const SOC_CPU_HAS_FLEXIBLE_INTC = 1
const SOC_INT_PLIC_SUPPORTED = 1
const SOC_CPU_HAS_CSR_PC = 1
const SOC_CPU_BREAKPOINTS_NUM = 4
const SOC_CPU_WATCHPOINTS_NUM = 4
const SOC_CPU_WATCHPOINT_MAX_REGION_SIZE = 0x80000000
const SOC_CPU_HAS_PMA = 1
const SOC_CPU_IDRAM_SPLIT_USING_PMP = 1
const SOC_CPU_PMP_REGION_GRANULARITY = 4
const SOC_GDMA_PAIRS_PER_GROUP_MAX = 3
const SOC_GDMA_SUPPORT_ETM = 1
const SOC_GDMA_SUPPORT_SLEEP_RETENTION = 1
const SOC_ETM_CHANNELS_PER_GROUP = 50
const SOC_ETM_SUPPORT_SLEEP_RETENTION = 1
const SOC_GPIO_PIN_COUNT = 31
const SOC_GPIO_SUPPORT_PIN_GLITCH_FILTER = 1
const SOC_GPIO_FLEX_GLITCH_FILTER_NUM = 8
const SOC_GPIO_SUPPORT_ETM = 1
const SOC_GPIO_IN_RANGE_MAX = 30
const SOC_GPIO_OUT_RANGE_MAX = 30
const SOC_RTCIO_PIN_COUNT = 8
const SOC_RTCIO_INPUT_OUTPUT_SUPPORTED = 1
const SOC_RTCIO_HOLD_SUPPORTED = 1
const SOC_RTCIO_WAKE_SUPPORTED = 1
const SOC_RTCIO_EDGE_WAKE_SUPPORTED = 1
const SOC_I2S_SUPPORT_SLEEP_RETENTION = 1
const SOC_MPU_CONFIGURABLE_REGIONS_SUPPORTED = 0
const SOC_MPU_REGIONS_MAX_NUM = 8
const SOC_MPU_REGION_RO_SUPPORTED = 0
const SOC_MPU_REGION_WO_SUPPORTED = 0
const SOC_PCNT_UNITS_PER_GROUP = 4
const SOC_PCNT_CHANNELS_PER_UNIT = 2
const SOC_PCNT_THRES_POINT_PER_UNIT = 2
const SOC_PCNT_SUPPORT_RUNTIME_THRES_UPDATE = 1
const SOC_PCNT_SUPPORT_SLEEP_RETENTION = 1
const SOC_RMT_TX_CANDIDATES_PER_GROUP = 2
const SOC_RMT_RX_CANDIDATES_PER_GROUP = 2
const SOC_RMT_CHANNELS_PER_GROUP = 4
const SOC_RMT_MEM_WORDS_PER_CHANNEL = 48
const SOC_RMT_SUPPORT_RX_PINGPONG = 1
const SOC_RMT_SUPPORT_RX_DEMODULATION = 1
const SOC_RMT_SUPPORT_TX_ASYNC_STOP = 1
const SOC_RMT_SUPPORT_TX_LOOP_COUNT = 1
const SOC_RMT_SUPPORT_TX_LOOP_AUTO_STOP = 1
const SOC_RMT_SUPPORT_TX_SYNCHRO = 1
const SOC_RMT_SUPPORT_TX_CARRIER_DATA_ONLY = 1
const SOC_RMT_SUPPORT_XTAL = 1
const SOC_RMT_SUPPORT_RC_FAST = 1
const SOC_RMT_SUPPORT_SLEEP_RETENTION = 1
const SOC_PARLIO_TX_UNIT_MAX_DATA_WIDTH = 16
const SOC_PARLIO_RX_UNIT_MAX_DATA_WIDTH = 16
const SOC_PARLIO_TX_RX_SHARE_INTERRUPT = 1
const SOC_PARLIO_SUPPORT_SLEEP_RETENTION = 1
const SOC_SDM_CHANNELS_PER_GROUP = 4
const SOC_SDM_CLK_SUPPORT_PLL_F80M = 1
const SOC_SDM_CLK_SUPPORT_XTAL = 1
const SOC_SPI_PERIPH_NUM = 2
const SOC_SPI_MAX_CS_NUM = 6
const SOC_SPI_MAXIMUM_BUFFER_SIZE = 64
const SOC_SPI_SUPPORT_DDRCLK = 1
const SOC_SPI_SLAVE_SUPPORT_SEG_TRANS = 1
const SOC_SPI_SUPPORT_CD_SIG = 1
const SOC_SPI_SUPPORT_CONTINUOUS_TRANS = 1
const SOC_SPI_SUPPORT_SLAVE_HD_VER2 = 1
const SOC_SPI_SUPPORT_SLEEP_RETENTION = 1
const SOC_SPI_SUPPORT_CLK_XTAL = 1
const SOC_SPI_SUPPORT_CLK_PLL_F80M = 1
const SOC_SPI_SUPPORT_CLK_RC_FAST = 1
const SOC_SPI_SCT_SUPPORTED = 1
const SOC_SPI_SCT_REG_NUM = 14
const SOC_SPI_SCT_CONF_BITLEN_MAX = 0x3FFFA
const SOC_MEMSPI_IS_INDEPENDENT = 1
const SOC_SPI_MAX_PRE_DIVIDER = 16
const SOC_MEMSPI_SRC_FREQ_80M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_40M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_20M_SUPPORTED = 1
const SOC_SYSTIMER_COUNTER_NUM = 2
const SOC_SYSTIMER_ALARM_NUM = 3
const SOC_SYSTIMER_BIT_WIDTH_LO = 32
const SOC_SYSTIMER_BIT_WIDTH_HI = 20
const SOC_SYSTIMER_FIXED_DIVIDER = 1
const SOC_SYSTIMER_SUPPORT_RC_FAST = 1
const SOC_SYSTIMER_INT_LEVEL = 1
const SOC_SYSTIMER_ALARM_MISS_COMPENSATE = 1
const SOC_SYSTIMER_SUPPORT_ETM = 1
const SOC_LP_TIMER_BIT_WIDTH_LO = 32
const SOC_LP_TIMER_BIT_WIDTH_HI = 16
const SOC_TWAI_CONTROLLER_NUM = 2
const SOC_TWAI_CLK_SUPPORT_XTAL = 1
const SOC_TWAI_BRP_MIN = 2
const SOC_TWAI_BRP_MAX = 32768
const SOC_TWAI_SUPPORTS_RX_STATUS = 1
const SOC_TWAI_SUPPORT_SLEEP_RETENTION = 1
const SOC_EFUSE_DIS_DOWNLOAD_ICACHE = 1
const SOC_EFUSE_DIS_PAD_JTAG = 1
const SOC_EFUSE_DIS_USB_JTAG = 1
const SOC_EFUSE_DIS_DIRECT_BOOT = 1
const SOC_EFUSE_SOFT_DIS_JTAG = 1
const SOC_EFUSE_DIS_ICACHE = 1
const SOC_EFUSE_BLOCK9_KEY_PURPOSE_QUIRK = 1
const SOC_SECURE_BOOT_V2_RSA = 1
const SOC_SECURE_BOOT_V2_ECC = 1
const SOC_EFUSE_SECURE_BOOT_KEY_DIGESTS = 3
const SOC_EFUSE_REVOKE_BOOT_KEY_DIGESTS = 1
const SOC_SUPPORT_SECURE_BOOT_REVOKE_KEY = 1
const SOC_FLASH_ENCRYPTION_XTS_AES = 1
const SOC_FLASH_ENCRYPTION_XTS_AES_128 = 1
const SOC_APM_CTRL_FILTER_SUPPORTED = 1
const SOC_APM_LP_APM0_SUPPORTED = 1
const SOC_CRYPTO_DPA_PROTECTION_SUPPORTED = 1
const SOC_RCC_IS_INDEPENDENT = 1
const BIT31 = 0x80000000
const BIT30 = 0x40000000
const BIT29 = 0x20000000
const BIT28 = 0x10000000
const BIT27 = 0x08000000
const BIT26 = 0x04000000
const BIT25 = 0x02000000
const BIT24 = 0x01000000
const BIT23 = 0x00800000
const BIT22 = 0x00400000
const BIT21 = 0x00200000
const BIT20 = 0x00100000
const BIT19 = 0x00080000
const BIT18 = 0x00040000
const BIT17 = 0x00020000
const BIT16 = 0x00010000
const BIT15 = 0x00008000
const BIT14 = 0x00004000
const BIT13 = 0x00002000
const BIT12 = 0x00001000
const BIT11 = 0x00000800
const BIT10 = 0x00000400
const BIT9 = 0x00000200
const BIT8 = 0x00000100
const BIT7 = 0x00000080
const BIT6 = 0x00000040
const BIT5 = 0x00000020
const BIT4 = 0x00000010
const BIT3 = 0x00000008
const BIT2 = 0x00000004
const BIT1 = 0x00000002
const BIT0 = 0x00000001
const ARG_MAX = 65536
const CHILD_MAX = 40
const LINK_MAX = 32767
const MAX_CANON = 255
const MAX_INPUT = 255
const NAME_MAX = 255
const NGROUPS_MAX = 16
const OPEN_MAX = 64
const PATH_MAX = 1024
const PIPE_BUF = 512
const IOV_MAX = 1024
const BC_BASE_MAX = 99
const BC_DIM_MAX = 2048
const BC_SCALE_MAX = 99
const BC_STRING_MAX = 1000
const COLL_WEIGHTS_MAX = 0
const EXPR_NEST_MAX = 32
const LINE_MAX = 2048
const RE_DUP_MAX = 255
const X_LITTLE_ENDIAN = 1234
const X_BIG_ENDIAN = 4321
const X_PDP_ENDIAN = 3412
const X_QUAD_HIGHWORD = 1
const X_QUAD_LOWWORD = 0
const NBBY = 8
const SOC_CLK_RC_FAST_FREQ_APPROX = 17500000
const SOC_CLK_RC_SLOW_FREQ_APPROX = 136000
const SOC_CLK_RC32K_FREQ_APPROX = 32768
const SOC_CLK_XTAL32K_FREQ_APPROX = 32768
const SOC_CLK_OSC_SLOW_FREQ_APPROX = 32768
const X__SLBF = 0x0001
const X__SNBF = 0x0002
const X__SRD = 0x0004
const X__SWR = 0x0008
const X__SRW = 0x0010
const X__SEOF = 0x0020
const X__SERR = 0x0040
const X__SMBF = 0x0080
const X__SAPP = 0x0100
const X__SSTR = 0x0200
const X__SOPT = 0x0400
const X__SNPT = 0x0800
const X__SOFF = 0x1000
const X__SORD = 0x2000
const X__SL64 = 0x8000
const X__SNLK = 0x0001
const X__SWID = 0x2000
const X_IOFBF = 0
const X_IOLBF = 1
const X_IONBF = 2
const FOPEN_MAX = 20
const FILENAME_MAX = 1024
const P_tmpdir = "/tmp"
const SEEK_SET = 0
const SEEK_CUR = 1
const SEEK_END = 2
const TMP_MAX = 26
const L_ctermid = 16
const X_LIBC_LIMITS_H_ = 1
const NL_ARGMAX = 32
const X_POSIX2_RE_DUP_MAX = 255
const CHAR_MIN = 0
const MACSTR = "%02x:%02x:%02x:%02x:%02x:%02x"
const ESP_OK = 0
const ESP_ERR_NO_MEM = 0x101
const ESP_ERR_INVALID_ARG = 0x102
const ESP_ERR_INVALID_STATE = 0x103
const ESP_ERR_INVALID_SIZE = 0x104
const ESP_ERR_NOT_FOUND = 0x105
const ESP_ERR_NOT_SUPPORTED = 0x106
const ESP_ERR_TIMEOUT = 0x107
const ESP_ERR_INVALID_RESPONSE = 0x108
const ESP_ERR_INVALID_CRC = 0x109
const ESP_ERR_INVALID_VERSION = 0x10A
const ESP_ERR_INVALID_MAC = 0x10B
const ESP_ERR_NOT_FINISHED = 0x10C
const ESP_ERR_NOT_ALLOWED = 0x10D
const ESP_ERR_WIFI_BASE = 0x3000
const ESP_ERR_MESH_BASE = 0x4000
const ESP_ERR_FLASH_BASE = 0x6000
const ESP_ERR_HW_CRYPTO_BASE = 0xc000
const ESP_ERR_MEMPROT_BASE = 0xd000
const MSTATUS_UIE = 0x00000001
const MSTATUS_SIE = 0x00000002
const MSTATUS_HIE = 0x00000004
const MSTATUS_MIE = 0x00000008
const MSTATUS_UPIE = 0x00000010
const MSTATUS_SPIE = 0x00000020
const MSTATUS_HPIE = 0x00000040
const MSTATUS_MPIE = 0x00000080
const MSTATUS_SPP = 0x00000100
const MSTATUS_VS = 0x00000600
const MSTATUS_MPP = 0x00001800
const MSTATUS_FS = 0x00006000
const MSTATUS_XS = 0x00018000
const MSTATUS_MPRV = 0x00020000
const MSTATUS_SUM = 0x00040000
const MSTATUS_MXR = 0x00080000
const MSTATUS_TVM = 0x00100000
const MSTATUS_TW = 0x00200000
const MSTATUS_TSR = 0x00400000
const MSTATUS32_SD = 0x80000000
const MSTATUS_UXL = 0x0000000300000000
const MSTATUS_SXL = 0x0000000C00000000
const MSTATUS64_SD = 0x8000000000000000
const MEXSTATUS_SOFT_RST = 0x00000003
const MEXSTATUS_LPMD = 0x0000000C
const MEXSTATUS_WFFEN = 0x00000010
const MEXSTATUS_EXPT_VLD = 0x00000020
const MEXSTATUS_LOCKUP = 0x00000040
const MEXSTATUS_NMISTS = 0x00000080
const MEXSTATUS_BUSEER = 0x00000100
const SSTATUS_UIE = 0x00000001
const SSTATUS_SIE = 0x00000002
const SSTATUS_UPIE = 0x00000010
const SSTATUS_SPIE = 0x00000020
const SSTATUS_SPP = 0x00000100
const SSTATUS_VS = 0x00000600
const SSTATUS_FS = 0x00006000
const SSTATUS_XS = 0x00018000
const SSTATUS_SUM = 0x00040000
const SSTATUS_MXR = 0x00080000
const SSTATUS32_SD = 0x80000000
const SSTATUS_UXL = 0x0000000300000000
const SSTATUS64_SD = 0x8000000000000000
const USTATUS_UIE = 0x00000001
const USTATUS_UPIE = 0x00000010
const DCSR_CAUSE_NONE = 0
const DCSR_CAUSE_SWBP = 1
const DCSR_CAUSE_HWBP = 2
const DCSR_CAUSE_DEBUGINT = 3
const DCSR_CAUSE_STEP = 4
const DCSR_CAUSE_HALT = 5
const DCSR_CAUSE_GROUP = 6
const MCONTROL_TYPE_NONE = 0
const MCONTROL_TYPE_MATCH = 2
const MCONTROL_ACTION_DEBUG_EXCEPTION = 0
const MCONTROL_ACTION_DEBUG_MODE = 1
const MCONTROL_ACTION_TRACE_START = 2
const MCONTROL_ACTION_TRACE_STOP = 3
const MCONTROL_ACTION_TRACE_EMIT = 4
const MCONTROL_MATCH_EQUAL = 0
const MCONTROL_MATCH_NAPOT = 1
const MCONTROL_MATCH_GE = 2
const MCONTROL_MATCH_LT = 3
const MCONTROL_MATCH_MASK_LOW = 4
const MCONTROL_MATCH_MASK_HIGH = 5
const PRV_U = 0
const PRV_S = 1
const PRV_H = 2
const PRV_M = 3
const SATP32_MODE = 0x80000000
const SATP32_ASID = 0x7FC00000
const SATP32_PPN = 0x003FFFFF
const SATP64_MODE = 0xF000000000000000
const SATP64_ASID = 0x0FFFF00000000000
const SATP64_PPN = 0x00000FFFFFFFFFFF
const SATP_MODE_OFF = 0
const SATP_MODE_SV32 = 1
const SATP_MODE_SV39 = 8
const SATP_MODE_SV48 = 9
const SATP_MODE_SV57 = 10
const SATP_MODE_SV64 = 11
const PMP_R = 0x01
const PMP_W = 0x02
const PMP_X = 0x04
const PMP_A = 0x18
const PMP_L = 0x80
const PMP_SHIFT = 2
const PMP_TOR = 0x08
const PMP_NA4 = 0x10
const PMP_NAPOT = 0x18
const IRQ_U_SOFT = 0
const IRQ_S_SOFT = 1
const IRQ_H_SOFT = 2
const IRQ_M_SOFT = 3
const IRQ_U_TIMER = 4
const IRQ_S_TIMER = 5
const IRQ_H_TIMER = 6
const IRQ_M_TIMER = 7
const IRQ_U_EXT = 8
const IRQ_S_EXT = 9
const IRQ_H_EXT = 10
const IRQ_M_EXT = 11
const IRQ_COP = 12
const IRQ_HOST = 13
const DEFAULT_RSTVEC = 0x00001000
const CLINT_BASE = 0x02000000
const CLINT_SIZE = 0x000c0000
const EXT_IO_BASE = 0x40000000
const DRAM_BASE = 0x80000000
const PTE_V = 0x001
const PTE_R = 0x002
const PTE_W = 0x004
const PTE_X = 0x008
const PTE_U = 0x010
const PTE_G = 0x020
const PTE_A = 0x040
const PTE_D = 0x080
const PTE_SOFT = 0x300
const PTE_PPN_SHIFT = 10
const RISCV_PGLEVEL_BITS = 10
const RISCV_PGSHIFT = 12
const CSR_PMACFG0 = 0xBC0
const CSR_PMAADDR0 = 0xBD0
const PMA_SHIFT = 2
const PMA_TOR = 0x40000000
const PMA_NA4 = 0x80000000
const PMA_NAPOT = 0xC0000000
const CSR_PMPCFG0 = 0x3A0
const CSR_PMPADDR0 = 0x3B0
const PMPADDR_ALL = 0xFFFFFFFF
const MEXSTATUS = 0x7E1
const MHINT = 0x7C5
const LDPC0 = 0xBE0
const LDPC1 = 0xBE1
const STPC0 = 0xBF0
const STPC1 = 0xBF1
const STPC2 = 0xBF2
const I2C_MST_ANA_CONF0_REG = 0x600AF818
const ANA_CONFIG_REG = 0x600AF81C
const ANA_CONFIG2_REG = 0x600AF820
const GPIO_EVT_CH0_RISE_EDGE = 1
const GPIO_EVT_CH1_RISE_EDGE = 2
const GPIO_EVT_CH2_RISE_EDGE = 3
const GPIO_EVT_CH3_RISE_EDGE = 4
const GPIO_EVT_CH4_RISE_EDGE = 5
const GPIO_EVT_CH5_RISE_EDGE = 6
const GPIO_EVT_CH6_RISE_EDGE = 7
const GPIO_EVT_CH7_RISE_EDGE = 8
const GPIO_EVT_CH0_FALL_EDGE = 9
const GPIO_EVT_CH1_FALL_EDGE = 10
const GPIO_EVT_CH2_FALL_EDGE = 11
const GPIO_EVT_CH3_FALL_EDGE = 12
const GPIO_EVT_CH4_FALL_EDGE = 13
const GPIO_EVT_CH5_FALL_EDGE = 14
const GPIO_EVT_CH6_FALL_EDGE = 15
const GPIO_EVT_CH7_FALL_EDGE = 16
const GPIO_EVT_CH0_ANY_EDGE = 17
const GPIO_EVT_CH1_ANY_EDGE = 18
const GPIO_EVT_CH2_ANY_EDGE = 19
const GPIO_EVT_CH3_ANY_EDGE = 20
const GPIO_EVT_CH4_ANY_EDGE = 21
const GPIO_EVT_CH5_ANY_EDGE = 22
const GPIO_EVT_CH6_ANY_EDGE = 23
const GPIO_EVT_CH7_ANY_EDGE = 24
const LEDC_EVT_DUTY_CHNG_END_CH0 = 25
const LEDC_EVT_DUTY_CHNG_END_CH1 = 26
const LEDC_EVT_DUTY_CHNG_END_CH2 = 27
const LEDC_EVT_DUTY_CHNG_END_CH3 = 28
const LEDC_EVT_DUTY_CHNG_END_CH4 = 29
const LEDC_EVT_DUTY_CHNG_END_CH5 = 30
const LEDC_EVT_OVF_CNT_PLS_CH0 = 31
const LEDC_EVT_OVF_CNT_PLS_CH1 = 32
const LEDC_EVT_OVF_CNT_PLS_CH2 = 33
const LEDC_EVT_OVF_CNT_PLS_CH3 = 34
const LEDC_EVT_OVF_CNT_PLS_CH4 = 35
const LEDC_EVT_OVF_CNT_PLS_CH5 = 36
const LEDC_EVT_TIME_OVF_TIMER0 = 37
const LEDC_EVT_TIME_OVF_TIMER1 = 38
const LEDC_EVT_TIME_OVF_TIMER2 = 39
const LEDC_EVT_TIME_OVF_TIMER3 = 40
const LEDC_EVT_TIMER0_CMP = 41
const LEDC_EVT_TIMER1_CMP = 42
const LEDC_EVT_TIMER2_CMP = 43
const LEDC_EVT_TIMER3_CMP = 44
const PCNT_EVT_CNT_EQ_THRESH = 45
const PCNT_EVT_CNT_EQ_LMT = 46
const PCNT_EVT_CNT_EQ_ZERO = 47
const TIMER0_EVT_CNT_CMP_TIMER0 = 48
const TIMER1_EVT_CNT_CMP_TIMER0 = 49
const SYSTIMER_EVT_CNT_CMP0 = 50
const SYSTIMER_EVT_CNT_CMP1 = 51
const SYSTIMER_EVT_CNT_CMP2 = 52
const RMT_EVT_TX_END = 53
const RMT_EVT_TX_LOOP = 54
const RMT_EVT_RX_END = 55
const RMT_EVT_TX_THRESH = 56
const RMT_EVT_RX_THRESH = 57
const MCPWM_EVT_TIMER0_STOP = 58
const MCPWM_EVT_TIMER1_STOP = 59
const MCPWM_EVT_TIMER2_STOP = 60
const MCPWM_EVT_TIMER0_TEZ = 61
const MCPWM_EVT_TIMER1_TEZ = 62
const MCPWM_EVT_TIMER2_TEZ = 63
const MCPWM_EVT_TIMER0_TEP = 64
const MCPWM_EVT_TIMER1_TEP = 65
const MCPWM_EVT_TIMER2_TEP = 66
const MCPWM_EVT_OP0_TEA = 67
const MCPWM_EVT_OP1_TEA = 68
const MCPWM_EVT_OP2_TEA = 69
const MCPWM_EVT_OP0_TEB = 70
const MCPWM_EVT_OP1_TEB = 71
const MCPWM_EVT_OP2_TEB = 72
const MCPWM_EVT_F0 = 73
const MCPWM_EVT_F1 = 74
const MCPWM_EVT_F2 = 75
const MCPWM_EVT_F0_CLR = 76
const MCPWM_EVT_F1_CLR = 77
const MCPWM_EVT_F2_CLR = 78
const MCPWM_EVT_TZ0_CBC = 79
const MCPWM_EVT_TZ1_CBC = 80
const MCPWM_EVT_TZ2_CBC = 81
const MCPWM_EVT_TZ0_OST = 82
const MCPWM_EVT_TZ1_OST = 83
const MCPWM_EVT_TZ2_OST = 84
const MCPWM_EVT_CAP0 = 85
const MCPWM_EVT_CAP1 = 86
const MCPWM_EVT_CAP2 = 87
const ADC_EVT_CONV_CMPLT0 = 88
const ADC_EVT_EQ_ABOVE_THRESH0 = 89
const ADC_EVT_EQ_ABOVE_THRESH1 = 90
const ADC_EVT_EQ_BELOW_THRESH0 = 91
const ADC_EVT_EQ_BELOW_THRESH1 = 92
const ADC_EVT_RESULT_DONE0 = 93
const ADC_EVT_STOPPED0 = 94
const ADC_EVT_STARTED0 = 95
const REGDMA_EVT_DONE0 = 96
const REGDMA_EVT_DONE1 = 97
const REGDMA_EVT_DONE2 = 98
const REGDMA_EVT_DONE3 = 99
const REGDMA_EVT_ERR0 = 100
const REGDMA_EVT_ERR1 = 101
const REGDMA_EVT_ERR2 = 102
const REGDMA_EVT_ERR3 = 103
const PDMA_EVT_TX_DONE = 104
const PDMA_EVT_OUT_EOF = 105
const PDMA_EVT_IN_SUC_EOF = 106
const PDMA_EVT_FULL_OR_EMPTY = 107
const PDMA_EVT_ALL_DONE = 108
const PDMA_EVT_RX_DONE = 109
const TMPSNSR_EVT_OVER_LIMIT = 110
const UART_EVT_REC_DATA_OVF0 = 111
const UART_EVT_REC_DATA_OVF1 = 112
const UART_EVT_TX_DONE0 = 113
const UART_EVT_TX_DONE1 = 114
const UART_EVT_TIMEOUT0 = 115
const UART_EVT_TIMEOUT1 = 116
const UART_EVT_ERR0 = 117
const UART_EVT_ERR1 = 118
const UART_EVT_CTS0 = 119
const UART_EVT_CTS1 = 120
const UART_EVT_TX_EMPTY0 = 121
const UART_EVT_TX_EMPTY1 = 122
const UART_EVT_AT_PATTERNS0 = 123
const UART_EVT_AT_PATTERNS1 = 124
const SPI_EVT_STOPPED = 125
const I2S_EVT_RX_DONE = 126
const I2S_EVT_TX_DONE = 127
const I2S_EVT_X_WORDS_RECEIVED = 128
const I2S_EVT_X_WORDS_SENT = 129
const I2C_EVT_TRANS_DONE = 130
const LCDCAM_EVT_TRANS_DONE = 131
const CAN_EVT_TRANS_DONE = 132
const ULP_EVT_ERR_INTR = 133
const ULP_EVT_START_INTR = 134
const RTC_EVT_TICK = 135
const RTC_EVT_OVF = 136
const RTC_EVT_CMP = 137
const GDMA_EVT_IN_DONE_CH0 = 138
const GDMA_EVT_IN_DONE_CH1 = 139
const GDMA_EVT_IN_DONE_CH2 = 140
const GDMA_EVT_IN_SUC_EOF_CH0 = 141
const GDMA_EVT_IN_SUC_EOF_CH1 = 142
const GDMA_EVT_IN_SUC_EOF_CH2 = 143
const GDMA_EVT_IN_FIFO_EMPTY_CH0 = 144
const GDMA_EVT_IN_FIFO_EMPTY_CH1 = 145
const GDMA_EVT_IN_FIFO_EMPTY_CH2 = 146
const GDMA_EVT_IN_FIFO_FULL_CH0 = 147
const GDMA_EVT_IN_FIFO_FULL_CH1 = 148
const GDMA_EVT_IN_FIFO_FULL_CH2 = 149
const GDMA_EVT_OUT_DONE_CH0 = 150
const GDMA_EVT_OUT_DONE_CH1 = 151
const GDMA_EVT_OUT_DONE_CH2 = 152
const GDMA_EVT_OUT_EOF_CH0 = 153
const GDMA_EVT_OUT_EOF_CH1 = 154
const GDMA_EVT_OUT_EOF_CH2 = 155
const GDMA_EVT_OUT_TOTAL_EOF_CH0 = 156
const GDMA_EVT_OUT_TOTAL_EOF_CH1 = 157
const GDMA_EVT_OUT_TOTAL_EOF_CH2 = 158
const GDMA_EVT_OUT_FIFO_EMPTY_CH0 = 159
const GDMA_EVT_OUT_FIFO_EMPTY_CH1 = 160
const GDMA_EVT_OUT_FIFO_EMPTY_CH2 = 161
const GDMA_EVT_OUT_FIFO_FULL_CH0 = 162
const GDMA_EVT_OUT_FIFO_FULL_CH1 = 163
const GDMA_EVT_OUT_FIFO_FULL_CH2 = 164
const PMU_EVT_SLEEP_WEEKUP = 165
const GPIO_TASK_CH0_SET = 1
const GPIO_TASK_CH1_SET = 2
const GPIO_TASK_CH2_SET = 3
const GPIO_TASK_CH3_SET = 4
const GPIO_TASK_CH4_SET = 5
const GPIO_TASK_CH5_SET = 6
const GPIO_TASK_CH6_SET = 7
const GPIO_TASK_CH7_SET = 8
const GPIO_TASK_CH0_CLEAR = 9
const GPIO_TASK_CH1_CLEAR = 10
const GPIO_TASK_CH2_CLEAR = 11
const GPIO_TASK_CH3_CLEAR = 12
const GPIO_TASK_CH4_CLEAR = 13
const GPIO_TASK_CH5_CLEAR = 14
const GPIO_TASK_CH6_CLEAR = 15
const GPIO_TASK_CH7_CLEAR = 16
const GPIO_TASK_CH0_TOGGLE = 17
const GPIO_TASK_CH1_TOGGLE = 18
const GPIO_TASK_CH2_TOGGLE = 19
const GPIO_TASK_CH3_TOGGLE = 20
const GPIO_TASK_CH4_TOGGLE = 21
const GPIO_TASK_CH5_TOGGLE = 22
const GPIO_TASK_CH6_TOGGLE = 23
const GPIO_TASK_CH7_TOGGLE = 24
const LEDC_TASK_TIMER0_RES_UPDATE = 25
const LEDC_TASK_TIMER1_RES_UPDATE = 26
const LEDC_TASK_TIMER2_RES_UPDATE = 27
const LEDC_TASK_TIMER3_RES_UPDATE = 28
const LEDC_TASK_RESERVED0 = 29
const LEDC_TASK_RESERVED1 = 30
const LEDC_TASK_DUTY_SCALE_UPDATE_CH0 = 31
const LEDC_TASK_DUTY_SCALE_UPDATE_CH1 = 32
const LEDC_TASK_DUTY_SCALE_UPDATE_CH2 = 33
const LEDC_TASK_DUTY_SCALE_UPDATE_CH3 = 34
const LEDC_TASK_DUTY_SCALE_UPDATE_CH4 = 35
const LEDC_TASK_DUTY_SCALE_UPDATE_CH5 = 36
const LEDC_TASK_TIMER0_CAP = 37
const LEDC_TASK_TIMER1_CAP = 38
const LEDC_TASK_TIMER2_CAP = 39
const LEDC_TASK_TIMER3_CAP = 40
const LEDC_TASK_SIG_OUT_DIS_CH0 = 41
const LEDC_TASK_SIG_OUT_DIS_CH1 = 42
const LEDC_TASK_SIG_OUT_DIS_CH2 = 43
const LEDC_TASK_SIG_OUT_DIS_CH3 = 44
const LEDC_TASK_SIG_OUT_DIS_CH4 = 45
const LEDC_TASK_SIG_OUT_DIS_CH5 = 46
const LEDC_TASK_OVF_CNT_RST_CH0 = 47
const LEDC_TASK_OVF_CNT_RST_CH1 = 48
const LEDC_TASK_OVF_CNT_RST_CH2 = 49
const LEDC_TASK_OVF_CNT_RST_CH3 = 50
const LEDC_TASK_OVF_CNT_RST_CH4 = 51
const LEDC_TASK_OVF_CNT_RST_CH5 = 52
const LEDC_TASK_TIMER0_RST = 53
const LEDC_TASK_TIMER1_RST = 54
const LEDC_TASK_TIMER2_RST = 55
const LEDC_TASK_TIMER3_RST = 56
const LEDC_TASK_TIMER0_RESUME = 57
const LEDC_TASK_TIMER1_RESUME = 58
const LEDC_TASK_TIMER2_RESUME = 59
const LEDC_TASK_TIMER3_RESUME = 60
const LEDC_TASK_TIMER0_PAUSE = 61
const LEDC_TASK_TIMER1_PAUSE = 62
const LEDC_TASK_TIMER2_PAUSE = 63
const LEDC_TASK_TIMER3_PAUSE = 64
const LEDC_TASK_GAMMA_RESTART_CH0 = 65
const LEDC_TASK_GAMMA_RESTART_CH1 = 66
const LEDC_TASK_GAMMA_RESTART_CH2 = 67
const LEDC_TASK_GAMMA_RESTART_CH3 = 68
const LEDC_TASK_GAMMA_RESTART_CH4 = 69
const LEDC_TASK_GAMMA_RESTART_CH5 = 70
const LEDC_TASK_GAMMA_PAUSE_CH0 = 71
const LEDC_TASK_GAMMA_PAUSE_CH1 = 72
const LEDC_TASK_GAMMA_PAUSE_CH2 = 73
const LEDC_TASK_GAMMA_PAUSE_CH3 = 74
const LEDC_TASK_GAMMA_PAUSE_CH4 = 75
const LEDC_TASK_GAMMA_PAUSE_CH5 = 76
const LEDC_TASK_GAMMA_RESUME_CH0 = 77
const LEDC_TASK_GAMMA_RESUME_CH1 = 78
const LEDC_TASK_GAMMA_RESUME_CH2 = 79
const LEDC_TASK_GAMMA_RESUME_CH3 = 80
const LEDC_TASK_GAMMA_RESUME_CH4 = 81
const LEDC_TASK_GAMMA_RESUME_CH5 = 82
const PCNT_TASK_START = 83
const PCNT_TASK_STOP = 84
const PCNT_TASK_CNT_INC = 85
const PCNT_TASK_CNT_DEC = 86
const PCNT_TASK_CNT_RST = 87
const TIMER0_TASK_CNT_START_TIMER0 = 88
const TIMER1_TASK_CNT_START_TIMER0 = 89
const TIMER0_TASK_ALARM_START_TIMER0 = 90
const TIMER1_TASK_ALARM_START_TIMER0 = 91
const TIMER0_TASK_CNT_STOP_TIMER0 = 92
const TIMER1_TASK_CNT_STOP_TIMER0 = 93
const TIMER0_TASK_CNT_RELOAD_TIMER0 = 94
const TIMER1_TASK_CNT_RELOAD_TIMER0 = 95
const TIMER0_TASK_CNT_CAP_TIMER0 = 96
const TIMER1_TASK_CNT_CAP_TIMER0 = 97
const RMT_TASK_TX_START = 98
const RMT_TASK_TX_STOP = 99
const RMT_TASK_RX_DONE = 100
const RMT_TASK_RX_START = 101
const MCPWM_TASK_CMPR0_A_UP = 102
const MCPWM_TASK_CMPR1_A_UP = 103
const MCPWM_TASK_CMPR2_A_UP = 104
const MCPWM_TASK_CMPR0_B_UP = 105
const MCPWM_TASK_CMPR1_B_UP = 106
const MCPWM_TASK_CMPR2_B_UP = 107
const MCPWM_TASK_GEN_STOP = 108
const MCPWM_TASK_TIMER0_SYN = 109
const MCPWM_TASK_TIMER1_SYN = 110
const MCPWM_TASK_TIMER2_SYN = 111
const MCPWM_TASK_TIMER0_PERIOD_UP = 112
const MCPWM_TASK_TIMER1_PERIOD_UP = 113
const MCPWM_TASK_TIMER2_PERIOD_UP = 114
const MCPWM_TASK_TZ0_OST = 115
const MCPWM_TASK_TZ1_OST = 116
const MCPWM_TASK_TZ2_OST = 117
const MCPWM_TASK_CLR0_OST = 118
const MCPWM_TASK_CLR1_OST = 119
const MCPWM_TASK_CLR2_OST = 120
const MCPWM_TASK_CAP0 = 121
const MCPWM_TASK_CAP1 = 122
const MCPWM_TASK_CAP2 = 123
const ADC_TASK_SAMPLE0 = 124
const ADC_TASK_SAMPLE1 = 125
const ADC_TASK_START0 = 126
const ADC_TASK_STOP0 = 127
const REGDMA_TASK_START0 = 128
const REGDMA_TASK_START1 = 129
const REGDMA_TASK_START2 = 130
const REGDMA_TASK_START3 = 131
const PDMA_TASK_START_TX = 132
const PDMA_TASK_START_RX = 133
const PDMA_TASK_STOP = 134
const TMPSNSR_TASK_START_SAMPLE = 135
const TMPSNSR_TASK_STOP_SAMPLE = 136
const UART_TASK_TX_START0 = 137
const UART_TASK_TX_START1 = 138
const UART_TASK_TX_STOP0 = 139
const UART_TASK_TX_STOP1 = 140
const UART_TASK_RX_START0 = 141
const UART_TASK_RX_START1 = 142
const UART_TASK_RX_STOP0 = 143
const UART_TASK_RX_STOP1 = 144
const SPI_TASK_TX_START = 145
const SPI_TASK_SLAVE_HD = 146
const SPI_TASK_STOP = 147
const I2S_TASK_START_RX = 148
const I2S_TASK_START_TX = 149
const I2S_TASK_STOP_RX = 150
const I2S_TASK_STOP_TX = 151
const I2C_TASK_START_TRANS = 152
const CAN_TASK_TRANS_START = 153
const ULP_TASK_WAKEUP_CPU = 154
const RTC_TASK_START = 155
const RTC_TASK_STOP = 156
const RTC_TASK_CLR = 157
const RTC_TASK_TRIGGERFLW = 158
const GDMA_TASK_IN_START_CH0 = 159
const GDMA_TASK_IN_START_CH1 = 160
const GDMA_TASK_IN_START_CH2 = 161
const GDMA_TASK_OUT_START_CH0 = 162
const GDMA_TASK_OUT_START_CH1 = 163
const GDMA_TASK_OUT_START_CH2 = 164
const PMU_TASK_SLEEP_REQ = 165
const DR_REG_PLIC_MX_BASE = 0x20001000
const DR_REG_PLIC_UX_BASE = 0x20001400
const DR_REG_CLINT_M_BASE = 0x20001800
const DR_REG_CLINT_U_BASE = 0x20001C00
const DR_REG_UART_BASE = 0x60000000
const DR_REG_UART1_BASE = 0x60001000
const DR_REG_SPI0_BASE = 0x60002000
const DR_REG_SPI1_BASE = 0x60003000
const DR_REG_I2C_EXT_BASE = 0x60004000
const DR_REG_UHCI0_BASE = 0x60005000
const DR_REG_RMT_BASE = 0x60006000
const DR_REG_LEDC_BASE = 0x60007000
const DR_REG_TIMERGROUP0_BASE = 0x60008000
const DR_REG_TIMERGROUP1_BASE = 0x60009000
const DR_REG_SYSTIMER_BASE = 0x6000A000
const DR_REG_TWAI0_BASE = 0x6000B000
const DR_REG_I2S_BASE = 0x6000C000
const DR_REG_TWAI1_BASE = 0x6000D000
const DR_REG_APB_SARADC_BASE = 0x6000E000
const DR_REG_USB_SERIAL_JTAG_BASE = 0x6000F000
const DR_REG_INTERRUPT_MATRIX_BASE = 0x60010000
const DR_REG_ATOMIC_BASE = 0x60011000
const DR_REG_PCNT_BASE = 0x60012000
const DR_REG_SOC_ETM_BASE = 0x60013000
const DR_REG_MCPWM_BASE = 0x60014000
const DR_REG_PARL_IO_BASE = 0x60015000
const DR_REG_HINF_BASE = 0x60016000
const DR_REG_SLC_BASE = 0x60017000
const DR_REG_SLCHOST_BASE = 0x60018000
const DR_REG_PVT_MONITOR_BASE = 0x60019000
const DR_REG_GDMA_BASE = 0x60080000
const DR_REG_SPI2_BASE = 0x60081000
const DR_REG_AES_BASE = 0x60088000
const DR_REG_SHA_BASE = 0x60089000
const DR_REG_RSA_BASE = 0x6008A000
const DR_REG_ECC_MULT_BASE = 0x6008B000
const DR_REG_DS_BASE = 0x6008C000
const DR_REG_HMAC_BASE = 0x6008D000
const DR_REG_IO_MUX_BASE = 0x60090000
const DR_REG_GPIO_BASE = 0x60091000
const DR_REG_GPIO_EXT_BASE = 0x60091f00
const DR_REG_MEM_MONITOR_BASE = 0x60092000
const DR_REG_PAU_BASE = 0x60093000
const DR_REG_HP_SYSTEM_BASE = 0x60095000
const DR_REG_PCR_BASE = 0x60096000
const DR_REG_TEE_BASE = 0x60098000
const DR_REG_HP_APM_BASE = 0x60099000
const DR_REG_LP_APM0_BASE = 0x60099800
const DR_REG_MISC_BASE = 0x6009F000
const DR_REG_I2C_ANA_MST_BASE = 0x600AF800
const DR_REG_PMU_BASE = 0x600B0000
const DR_REG_LP_CLKRST_BASE = 0x600B0400
const DR_REG_EFUSE_BASE = 0x600B0800
const DR_REG_LP_TIMER_BASE = 0x600B0C00
const DR_REG_LP_AON_BASE = 0x600B1000
const DR_REG_LP_UART_BASE = 0x600B1400
const DR_REG_LP_I2C_BASE = 0x600B1800
const DR_REG_LP_WDT_BASE = 0x600B1C00
const DR_REG_LP_IO_BASE = 0x600B2000
const DR_REG_LP_I2C_ANA_MST_BASE = 0x600B2400
const DR_REG_LPPERI_BASE = 0x600B2800
const DR_REG_LP_ANALOG_PERI_BASE = 0x600B2C00
const DR_REG_LP_TEE_BASE = 0x600B3400
const DR_REG_LP_APM_BASE = 0x600B3800
const DR_REG_OPT_DEBUG_BASE = 0x600B3C00
const DR_REG_TRACE_BASE = 0x600C0000
const DR_REG_ASSIST_DEBUG_BASE = 0x600C2000
const DR_REG_CPU_BUS_MONITOR_BASE = 0x600C2000
const DR_REG_INTPRI_BASE = 0x600C5000
const DR_REG_EXTMEM_BASE = 0x600C8000
const PWDET_CONF_REG = 0x600A0810
const IEEE802154_REG_BASE = 0x600A3000
const SOC_IROM_LOW = 0x42000000
const SOC_IROM_MASK_LOW = 0x40000000
const SOC_IROM_MASK_HIGH = 0x40050000
const SOC_DROM_MASK_LOW = 0x40000000
const SOC_DROM_MASK_HIGH = 0x40050000
const SOC_IRAM_LOW = 0x40800000
const SOC_IRAM_HIGH = 0x40880000
const SOC_DRAM_LOW = 0x40800000
const SOC_DRAM_HIGH = 0x40880000
const SOC_RTC_IRAM_LOW = 0x50000000
const SOC_RTC_IRAM_HIGH = 0x50004000
const SOC_RTC_DRAM_LOW = 0x50000000
const SOC_RTC_DRAM_HIGH = 0x50004000
const SOC_RTC_DATA_LOW = 0x50000000
const SOC_RTC_DATA_HIGH = 0x50004000
const SOC_DIRAM_IRAM_LOW = 0x40800000
const SOC_DIRAM_IRAM_HIGH = 0x40880000
const SOC_DIRAM_DRAM_LOW = 0x40800000
const SOC_DIRAM_DRAM_HIGH = 0x40880000
const SOC_DMA_LOW = 0x40800000
const SOC_DMA_HIGH = 0x40880000
const SOC_BYTE_ACCESSIBLE_LOW = 0x40800000
const SOC_BYTE_ACCESSIBLE_HIGH = 0x40880000
const SOC_MEM_INTERNAL_LOW = 0x40800000
const SOC_MEM_INTERNAL_HIGH = 0x40880000
const SOC_MEM_INTERNAL_LOW1 = 0x40800000
const SOC_MEM_INTERNAL_HIGH1 = 0x40880000
const SOC_PERIPHERAL_LOW = 0x60000000
const SOC_PERIPHERAL_HIGH = 0x60100000
const SOC_CPU_SUBSYSTEM_LOW = 0x20000000
const SOC_CPU_SUBSYSTEM_HIGH = 0x30000000
const SOC_ROM_STACK_START = 0x4087e610
const SOC_ROM_STACK_SIZE = 0x2000
const ETS_T1_WDT_INUM = 24
const ETS_CACHEERR_INUM = 25
const ETS_MEMPROT_ERR_INUM = 26
const ETS_ASSIST_DEBUG_INUM = 27
const ETS_MAX_INUM = 31
const ETS_SLC_INUM = 1
const ETS_UART0_INUM = 5
const ETS_UART1_INUM = 5
const ETS_SPI2_INUM = 1
const ETS_GPIO_INUM = 4
const ETS_INVALID_INUM = 0
const SOC_INTERRUPT_LEVEL_MEDIUM = 4
const LOG_ANSI_COLOR_BLACK = "30"
const LOG_ANSI_COLOR_RED = "31"
const LOG_ANSI_COLOR_GREEN = "32"
const LOG_ANSI_COLOR_YELLOW = "33"
const LOG_ANSI_COLOR_BLUE = "34"
const LOG_ANSI_COLOR_MAGENTA = "35"
const LOG_ANSI_COLOR_CYAN = "36"
const LOG_ANSI_COLOR_WHITE = "37"
const LOG_ANSI_COLOR_DEFAULT = "39"
const LOG_ANSI_COLOR_BG_BLACK = "40"
const LOG_ANSI_COLOR_BG_RED = "41"
const LOG_ANSI_COLOR_BG_GREEN = "42"
const LOG_ANSI_COLOR_BG_YELLOW = "43"
const LOG_ANSI_COLOR_BG_BLUE = "44"
const LOG_ANSI_COLOR_BG_MAGENTA = "45"
const LOG_ANSI_COLOR_BG_CYAN = "46"
const LOG_ANSI_COLOR_BG_WHITE = "47"
const LOG_ANSI_COLOR_BG_DEFAULT = "49"
const LOG_ANSI_COLOR_STYLE_RESET = "0"
const LOG_ANSI_COLOR_STYLE_BOLD = "1"
const LOG_ANSI_COLOR_STYLE_ITALIC = "3"
const LOG_ANSI_COLOR_STYLE_UNDERLINE = "4"
const LOG_RESET_COLOR = ""
const LOG_COLOR_E = ""
const LOG_COLOR_W = ""
const LOG_COLOR_I = ""
const LOG_COLOR_D = ""
const LOG_COLOR_V = ""
const INTPRI_CORE0_CPU_INT_ENABLE_S = 0
const INTPRI_CORE0_CPU_INT_TYPE_S = 0
const INTPRI_CORE0_CPU_INT_EIP_STATUS_S = 0
const INTPRI_CORE0_CPU_PRI_0_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_1_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_2_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_3_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_4_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_5_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_6_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_7_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_8_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_9_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_10_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_11_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_12_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_13_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_14_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_15_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_16_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_17_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_18_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_19_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_20_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_21_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_22_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_23_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_24_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_25_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_26_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_27_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_28_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_29_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_30_MAP_S = 0
const INTPRI_CORE0_CPU_PRI_31_MAP_S = 0
const INTPRI_CORE0_CPU_INT_THRESH_S = 0
const INTPRI_CPU_INTR_FROM_CPU_0_S = 0
const INTPRI_CPU_INTR_FROM_CPU_1_S = 0
const INTPRI_CPU_INTR_FROM_CPU_2_S = 0
const INTPRI_CPU_INTR_FROM_CPU_3_S = 0
const INTPRI_DATE_S = 0
const INTPRI_CLK_EN_S = 0
const INTPRI_CORE0_CPU_INT_CLEAR_S = 0
const INTPRI_REDCY_ENA_S = 0
const INTPRI_REDCY_RESULT_S = 1
const INTPRI_REDCY_LOW_S = 0
const INTPRI_REDCY_HIGH_S = 0
const I2C_BOD = 0x61
const I2C_BOD_HOSTID = 0
const I2C_BOD_THRESHOLD = 0x5
const I2C_BOD_THRESHOLD_MSB = 2
const I2C_BOD_THRESHOLD_LSB = 0
const LP_AON_STORE0_S = 0
const LP_AON_STORE1_S = 0
const LP_AON_STORE2_S = 0
const LP_AON_STORE3_S = 0
const LP_AON_STORE4_S = 0
const LP_AON_STORE5_S = 0
const LP_AON_STORE6_S = 0
const LP_AON_STORE7_S = 0
const LP_AON_STORE8_S = 0
const LP_AON_STORE9_S = 0
const LP_AON_GPIO_MUX_SEL_S = 0
const LP_AON_GPIO_HOLD0_S = 0
const LP_AON_GPIO_HOLD1_S = 0
const LP_AON_FORCE_DOWNLOAD_BOOT_S = 30
const LP_AON_HPSYS_SW_RESET_S = 31
const LP_AON_CPU_CORE0_SW_STALL_S = 0
const LP_AON_CPU_CORE0_SW_RESET_S = 28
const LP_AON_CPU_CORE0_OCD_HALT_ON_RESET_S = 29
const LP_AON_CPU_CORE0_STAT_VECTOR_SEL_S = 30
const LP_AON_CPU_CORE0_DRESET_MASK_S = 31
const LP_AON_IO_MUX_RESET_DISABLE_S = 31
const LP_AON_EXT_WAKEUP_STATUS_S = 0
const LP_AON_EXT_WAKEUP_STATUS_CLR_S = 14
const LP_AON_EXT_WAKEUP_SEL_S = 15
const LP_AON_EXT_WAKEUP_LV_S = 23
const LP_AON_EXT_WAKEUP_FILTER_S = 31
const LP_AON_USB_RESET_DISABLE_S = 31
const LP_AON_FAST_MEM_WPULSE_S = 16
const LP_AON_FAST_MEM_WA_S = 19
const LP_AON_FAST_MEM_RA_S = 22
const LP_AON_FAST_MEM_MUX_FSM_IDLE_S = 28
const LP_AON_FAST_MEM_MUX_SEL_STATUS_S = 29
const LP_AON_FAST_MEM_MUX_SEL_UPDATE_S = 30
const LP_AON_FAST_MEM_MUX_SEL_S = 31
const LP_AON_SDIO_ACT_DNUM_S = 22
const LP_AON_LPCORE_ETM_WAKEUP_FLAG_CLR_S = 0
const LP_AON_LPCORE_ETM_WAKEUP_FLAG_S = 1
const LP_AON_LPCORE_DISABLE_S = 31
const LP_AON_SAR2_PWDET_CCT_S = 29
const LP_AON_DATE_S = 0
const LP_AON_CLK_EN_S = 31
const PCR_UART0_CLK_EN_S = 0
const PCR_UART0_RST_EN_S = 1
const PCR_UART0_SCLK_DIV_A_S = 0
const PCR_UART0_SCLK_DIV_B_S = 6
const PCR_UART0_SCLK_DIV_NUM_S = 12
const PCR_UART0_SCLK_SEL_S = 20
const PCR_UART0_SCLK_EN_S = 22
const PCR_UART0_MEM_FORCE_PU_S = 1
const PCR_UART0_MEM_FORCE_PD_S = 2
const PCR_UART1_CLK_EN_S = 0
const PCR_UART1_RST_EN_S = 1
const PCR_UART1_SCLK_DIV_A_S = 0
const PCR_UART1_SCLK_DIV_B_S = 6
const PCR_UART1_SCLK_DIV_NUM_S = 12
const PCR_UART1_SCLK_SEL_S = 20
const PCR_UART1_SCLK_EN_S = 22
const PCR_UART1_MEM_FORCE_PU_S = 1
const PCR_UART1_MEM_FORCE_PD_S = 2
const PCR_MSPI_CLK_EN_S = 0
const PCR_MSPI_RST_EN_S = 1
const PCR_MSPI_PLL_CLK_EN_S = 2
const PCR_MSPI_FAST_LS_DIV_NUM_S = 0
const PCR_MSPI_FAST_HS_DIV_NUM_S = 8
const PCR_I2C_CLK_EN_S = 0
const PCR_I2C_RST_EN_S = 1
const PCR_I2C_SCLK_DIV_A_S = 0
const PCR_I2C_SCLK_DIV_B_S = 6
const PCR_I2C_SCLK_DIV_NUM_S = 12
const PCR_I2C_SCLK_SEL_S = 20
const PCR_I2C_SCLK_EN_S = 22
const PCR_UHCI_CLK_EN_S = 0
const PCR_UHCI_RST_EN_S = 1
const PCR_RMT_CLK_EN_S = 0
const PCR_RMT_RST_EN_S = 1
const PCR_RMT_SCLK_DIV_A_S = 0
const PCR_RMT_SCLK_DIV_B_S = 6
const PCR_RMT_SCLK_DIV_NUM_S = 12
const PCR_RMT_SCLK_SEL_S = 20
const PCR_RMT_SCLK_EN_S = 22
const PCR_LEDC_CLK_EN_S = 0
const PCR_LEDC_RST_EN_S = 1
const PCR_LEDC_SCLK_SEL_S = 20
const PCR_LEDC_SCLK_EN_S = 22
const PCR_TG0_CLK_EN_S = 0
const PCR_TG0_RST_EN_S = 1
const PCR_TG0_TIMER_CLK_SEL_S = 20
const PCR_TG0_TIMER_CLK_EN_S = 22
const PCR_TG0_WDT_CLK_SEL_S = 20
const PCR_TG0_WDT_CLK_EN_S = 22
const PCR_TG1_CLK_EN_S = 0
const PCR_TG1_RST_EN_S = 1
const PCR_TG1_TIMER_CLK_SEL_S = 20
const PCR_TG1_TIMER_CLK_EN_S = 22
const PCR_TG1_WDT_CLK_SEL_S = 20
const PCR_TG1_WDT_CLK_EN_S = 22
const PCR_SYSTIMER_CLK_EN_S = 0
const PCR_SYSTIMER_RST_EN_S = 1
const PCR_SYSTIMER_FUNC_CLK_SEL_S = 20
const PCR_SYSTIMER_FUNC_CLK_EN_S = 22
const PCR_TWAI0_CLK_EN_S = 0
const PCR_TWAI0_RST_EN_S = 1
const PCR_TWAI0_FUNC_CLK_SEL_S = 20
const PCR_TWAI0_FUNC_CLK_EN_S = 22
const PCR_TWAI1_CLK_EN_S = 0
const PCR_TWAI1_RST_EN_S = 1
const PCR_TWAI1_FUNC_CLK_SEL_S = 20
const PCR_TWAI1_FUNC_CLK_EN_S = 22
const PCR_I2S_CLK_EN_S = 0
const PCR_I2S_RST_EN_S = 1
const PCR_I2S_TX_CLKM_DIV_NUM_S = 12
const PCR_I2S_TX_CLKM_SEL_S = 20
const PCR_I2S_TX_CLKM_EN_S = 22
const PCR_I2S_TX_CLKM_DIV_Z_S = 0
const PCR_I2S_TX_CLKM_DIV_Y_S = 9
const PCR_I2S_TX_CLKM_DIV_X_S = 18
const PCR_I2S_TX_CLKM_DIV_YN1_S = 27
const PCR_I2S_RX_CLKM_DIV_NUM_S = 12
const PCR_I2S_RX_CLKM_SEL_S = 20
const PCR_I2S_RX_CLKM_EN_S = 22
const PCR_I2S_MCLK_SEL_S = 23
const PCR_I2S_RX_CLKM_DIV_Z_S = 0
const PCR_I2S_RX_CLKM_DIV_Y_S = 9
const PCR_I2S_RX_CLKM_DIV_X_S = 18
const PCR_I2S_RX_CLKM_DIV_YN1_S = 27
const PCR_SARADC_CLK_EN_S = 0
const PCR_SARADC_RST_EN_S = 1
const PCR_SARADC_REG_CLK_EN_S = 2
const PCR_SARADC_REG_RST_EN_S = 3
const PCR_SARADC_CLKM_DIV_A_S = 0
const PCR_SARADC_CLKM_DIV_B_S = 6
const PCR_SARADC_CLKM_DIV_NUM_S = 12
const PCR_SARADC_CLKM_SEL_S = 20
const PCR_SARADC_CLKM_EN_S = 22
const PCR_TSENS_CLK_SEL_S = 20
const PCR_TSENS_CLK_EN_S = 22
const PCR_TSENS_RST_EN_S = 23
const PCR_USB_DEVICE_CLK_EN_S = 0
const PCR_USB_DEVICE_RST_EN_S = 1
const PCR_INTMTX_CLK_EN_S = 0
const PCR_INTMTX_RST_EN_S = 1
const PCR_PCNT_CLK_EN_S = 0
const PCR_PCNT_RST_EN_S = 1
const PCR_ETM_CLK_EN_S = 0
const PCR_ETM_RST_EN_S = 1
const PCR_PWM_CLK_EN_S = 0
const PCR_PWM_RST_EN_S = 1
const PCR_PWM_DIV_NUM_S = 12
const PCR_PWM_CLKM_SEL_S = 20
const PCR_PWM_CLKM_EN_S = 22
const PCR_PARL_CLK_EN_S = 0
const PCR_PARL_RST_EN_S = 1
const PCR_PARL_CLK_RX_DIV_NUM_S = 0
const PCR_PARL_CLK_RX_SEL_S = 16
const PCR_PARL_CLK_RX_EN_S = 18
const PCR_PARL_RX_RST_EN_S = 19
const PCR_PARL_CLK_TX_DIV_NUM_S = 0
const PCR_PARL_CLK_TX_SEL_S = 16
const PCR_PARL_CLK_TX_EN_S = 18
const PCR_PARL_TX_RST_EN_S = 19
const PCR_SDIO_SLAVE_CLK_EN_S = 0
const PCR_SDIO_SLAVE_RST_EN_S = 1
const PCR_PVT_MONITOR_CLK_EN_S = 0
const PCR_PVT_MONITOR_RST_EN_S = 1
const PCR_PVT_MONITOR_SITE1_CLK_EN_S = 2
const PCR_PVT_MONITOR_SITE2_CLK_EN_S = 3
const PCR_PVT_MONITOR_SITE3_CLK_EN_S = 4
const PCR_PVT_MONITOR_FUNC_CLK_DIV_NUM_S = 0
const PCR_PVT_MONITOR_FUNC_CLK_SEL_S = 20
const PCR_PVT_MONITOR_FUNC_CLK_EN_S = 22
const PCR_GDMA_CLK_EN_S = 0
const PCR_GDMA_RST_EN_S = 1
const PCR_SPI2_CLK_EN_S = 0
const PCR_SPI2_RST_EN_S = 1
const PCR_SPI2_CLKM_SEL_S = 20
const PCR_SPI2_CLKM_EN_S = 22
const PCR_AES_CLK_EN_S = 0
const PCR_AES_RST_EN_S = 1
const PCR_SHA_CLK_EN_S = 0
const PCR_SHA_RST_EN_S = 1
const PCR_RSA_CLK_EN_S = 0
const PCR_RSA_RST_EN_S = 1
const PCR_RSA_MEM_PD_S = 0
const PCR_RSA_MEM_FORCE_PU_S = 1
const PCR_RSA_MEM_FORCE_PD_S = 2
const PCR_ECC_CLK_EN_S = 0
const PCR_ECC_RST_EN_S = 1
const PCR_ECC_MEM_PD_S = 0
const PCR_ECC_MEM_FORCE_PU_S = 1
const PCR_ECC_MEM_FORCE_PD_S = 2
const PCR_DS_CLK_EN_S = 0
const PCR_DS_RST_EN_S = 1
const PCR_HMAC_CLK_EN_S = 0
const PCR_HMAC_RST_EN_S = 1
const PCR_IOMUX_CLK_EN_S = 0
const PCR_IOMUX_RST_EN_S = 1
const PCR_IOMUX_FUNC_CLK_SEL_S = 20
const PCR_IOMUX_FUNC_CLK_EN_S = 22
const PCR_MEM_MONITOR_CLK_EN_S = 0
const PCR_MEM_MONITOR_RST_EN_S = 1
const PCR_REGDMA_CLK_EN_S = 0
const PCR_REGDMA_RST_EN_S = 1
const PCR_RETENTION_CLK_EN_S = 0
const PCR_RETENTION_RST_EN_S = 1
const PCR_TRACE_CLK_EN_S = 0
const PCR_TRACE_RST_EN_S = 1
const PCR_ASSIST_CLK_EN_S = 0
const PCR_ASSIST_RST_EN_S = 1
const PCR_CACHE_CLK_EN_S = 0
const PCR_CACHE_RST_EN_S = 1
const PCR_MODEM_APB_CLK_EN_S = 0
const PCR_MODEM_RST_EN_S = 1
const PCR_CPU_TIMEOUT_RST_EN_S = 1
const PCR_HP_TIMEOUT_RST_EN_S = 2
const PCR_LS_DIV_NUM_S = 0
const PCR_HS_DIV_NUM_S = 8
const PCR_SOC_CLK_SEL_S = 16
const PCR_CLK_XTAL_FREQ_S = 24
const PCR_CPUPERIOD_SEL_S = 0
const PCR_PLL_FREQ_SEL_S = 2
const PCR_CPU_WAIT_MODE_FORCE_ON_S = 3
const PCR_CPU_WAITI_DELAY_NUM_S = 4
const PCR_CPU_LS_DIV_NUM_S = 0
const PCR_CPU_HS_DIV_NUM_S = 8
const PCR_CPU_HS_120M_FORCE_S = 16
const PCR_AHB_LS_DIV_NUM_S = 0
const PCR_AHB_HS_DIV_NUM_S = 8
const PCR_APB_DECREASE_DIV_NUM_S = 0
const PCR_APB_DIV_NUM_S = 8
const PCR_FOSC_FREQ_S = 0
const PCR_PLL_FREQ_S = 8
const PCR_PLL_240M_CLK_EN_S = 0
const PCR_PLL_160M_CLK_EN_S = 1
const PCR_PLL_120M_CLK_EN_S = 2
const PCR_PLL_80M_CLK_EN_S = 3
const PCR_PLL_48M_CLK_EN_S = 4
const PCR_PLL_40M_CLK_EN_S = 5
const PCR_PLL_20M_CLK_EN_S = 6
const PCR_CLK20_OEN_S = 0
const PCR_CLK22_OEN_S = 1
const PCR_CLK44_OEN_S = 2
const PCR_CLK_BB_OEN_S = 3
const PCR_CLK80_OEN_S = 4
const PCR_CLK160_OEN_S = 5
const PCR_CLK_320M_OEN_S = 6
const PCR_CLK_ADC_INF_OEN_S = 7
const PCR_CLK_DAC_CPU_OEN_S = 8
const PCR_CLK40X_BB_OEN_S = 9
const PCR_CLK_XTAL_OEN_S = 10
const PCR_XTAL_TICK_NUM_S = 0
const PCR_FOSC_TICK_NUM_S = 8
const PCR_TICK_ENABLE_S = 16
const PCR_RST_TICK_CNT_S = 17
const PCR_32K_SEL_S = 0
const PCR_SRAM_FORCE_PU_S = 0
const PCR_SRAM_FORCE_PD_S = 4
const PCR_SRAM_CLKGATE_FORCE_ON_S = 8
const PCR_ROM_FORCE_PU_S = 12
const PCR_ROM_FORCE_PD_S = 15
const PCR_ROM_CLKGATE_FORCE_ON_S = 18
const PCR_RESET_EVENT_BYPASS_APM_S = 0
const PCR_RESET_EVENT_BYPASS_S = 1
const PCR_FPGA_DEBUG_S = 0
const PCR_CLK_EN_S = 0
const PCR_DATE_S = 0
const PMU_HP_ACTIVE_VDD_SPI_PD_EN_S = 21
const PMU_HP_ACTIVE_HP_MEM_DSLP_S = 22
const PMU_HP_ACTIVE_PD_HP_MEM_PD_EN_S = 23
const PMU_HP_ACTIVE_PD_HP_WIFI_PD_EN_S = 27
const PMU_HP_ACTIVE_PD_HP_CPU_PD_EN_S = 29
const PMU_HP_ACTIVE_PD_HP_AON_PD_EN_S = 30
const PMU_HP_ACTIVE_PD_TOP_PD_EN_S = 31
const PMU_HP_ACTIVE_DIG_ICG_FUNC_EN_S = 0
const PMU_HP_ACTIVE_DIG_ICG_APB_EN_S = 0
const PMU_HP_ACTIVE_DIG_ICG_MODEM_CODE_S = 30
const PMU_HP_ACTIVE_UART_WAKEUP_EN_S = 24
const PMU_HP_ACTIVE_LP_PAD_HOLD_ALL_S = 25
const PMU_HP_ACTIVE_HP_PAD_HOLD_ALL_S = 26
const PMU_HP_ACTIVE_DIG_PAD_SLP_SEL_S = 27
const PMU_HP_ACTIVE_DIG_PAUSE_WDT_S = 28
const PMU_HP_ACTIVE_DIG_CPU_STALL_S = 29
const PMU_HP_ACTIVE_I2C_ISO_EN_S = 26
const PMU_HP_ACTIVE_I2C_RETENTION_S = 27
const PMU_HP_ACTIVE_XPD_BB_I2C_S = 28
const PMU_HP_ACTIVE_XPD_BBPLL_I2C_S = 29
const PMU_HP_ACTIVE_XPD_BBPLL_S = 30
const PMU_HP_ACTIVE_XPD_BIAS_S = 25
const PMU_HP_ACTIVE_DBG_ATTEN_S = 26
const PMU_HP_ACTIVE_PD_CUR_S = 30
const PMU_HP_ACTIVE_BIAS_SLEEP_S = 31
const PMU_HP_SLEEP2ACTIVE_BACKUP_MODEM_CLK_CODE_S = 4
const PMU_HP_MODEM2ACTIVE_BACKUP_MODEM_CLK_CODE_S = 6
const PMU_HP_ACTIVE_RETENTION_MODE_S = 10
const PMU_HP_SLEEP2ACTIVE_RETENTION_EN_S = 11
const PMU_HP_MODEM2ACTIVE_RETENTION_EN_S = 12
const PMU_HP_SLEEP2ACTIVE_BACKUP_CLK_SEL_S = 14
const PMU_HP_MODEM2ACTIVE_BACKUP_CLK_SEL_S = 16
const PMU_HP_SLEEP2ACTIVE_BACKUP_MODE_S = 20
const PMU_HP_MODEM2ACTIVE_BACKUP_MODE_S = 23
const PMU_HP_SLEEP2ACTIVE_BACKUP_EN_S = 29
const PMU_HP_MODEM2ACTIVE_BACKUP_EN_S = 30
const PMU_HP_ACTIVE_BACKUP_ICG_FUNC_EN_S = 0
const PMU_HP_ACTIVE_DIG_SYS_CLK_NO_DIV_S = 26
const PMU_HP_ACTIVE_ICG_SYS_CLOCK_EN_S = 27
const PMU_HP_ACTIVE_SYS_CLK_SLP_SEL_S = 28
const PMU_HP_ACTIVE_ICG_SLP_SEL_S = 29
const PMU_HP_ACTIVE_DIG_SYS_CLK_SEL_S = 30
const PMU_LP_DBIAS_VOL_S = 4
const PMU_HP_DBIAS_VOL_S = 9
const PMU_DIG_REGULATOR0_DBIAS_SEL_S = 14
const PMU_DIG_DBIAS_INIT_S = 15
const PMU_HP_ACTIVE_HP_REGULATOR_SLP_MEM_XPD_S = 16
const PMU_HP_ACTIVE_HP_REGULATOR_SLP_LOGIC_XPD_S = 17
const PMU_HP_ACTIVE_HP_REGULATOR_XPD_S = 18
const PMU_HP_ACTIVE_HP_REGULATOR_SLP_MEM_DBIAS_S = 19
const PMU_HP_ACTIVE_HP_REGULATOR_SLP_LOGIC_DBIAS_S = 23
const PMU_HP_ACTIVE_HP_REGULATOR_DBIAS_S = 27
const PMU_HP_ACTIVE_HP_REGULATOR_DRV_B_S = 8
const PMU_HP_ACTIVE_XPD_XTAL_S = 31
const PMU_HP_MODEM_VDD_SPI_PD_EN_S = 21
const PMU_HP_MODEM_HP_MEM_DSLP_S = 22
const PMU_HP_MODEM_PD_HP_MEM_PD_EN_S = 23
const PMU_HP_MODEM_PD_HP_WIFI_PD_EN_S = 27
const PMU_HP_MODEM_PD_HP_CPU_PD_EN_S = 29
const PMU_HP_MODEM_PD_HP_AON_PD_EN_S = 30
const PMU_HP_MODEM_PD_TOP_PD_EN_S = 31
const PMU_HP_MODEM_DIG_ICG_FUNC_EN_S = 0
const PMU_HP_MODEM_DIG_ICG_APB_EN_S = 0
const PMU_HP_MODEM_DIG_ICG_MODEM_CODE_S = 30
const PMU_HP_MODEM_UART_WAKEUP_EN_S = 24
const PMU_HP_MODEM_LP_PAD_HOLD_ALL_S = 25
const PMU_HP_MODEM_HP_PAD_HOLD_ALL_S = 26
const PMU_HP_MODEM_DIG_PAD_SLP_SEL_S = 27
const PMU_HP_MODEM_DIG_PAUSE_WDT_S = 28
const PMU_HP_MODEM_DIG_CPU_STALL_S = 29
const PMU_HP_MODEM_I2C_ISO_EN_S = 26
const PMU_HP_MODEM_I2C_RETENTION_S = 27
const PMU_HP_MODEM_XPD_BB_I2C_S = 28
const PMU_HP_MODEM_XPD_BBPLL_I2C_S = 29
const PMU_HP_MODEM_XPD_BBPLL_S = 30
const PMU_HP_MODEM_XPD_BIAS_S = 25
const PMU_HP_MODEM_DBG_ATTEN_S = 26
const PMU_HP_MODEM_PD_CUR_S = 30
const PMU_HP_MODEM_BIAS_SLEEP_S = 31
const PMU_HP_SLEEP2MODEM_BACKUP_MODEM_CLK_CODE_S = 4
const PMU_HP_MODEM_RETENTION_MODE_S = 10
const PMU_HP_SLEEP2MODEM_RETENTION_EN_S = 11
const PMU_HP_SLEEP2MODEM_BACKUP_CLK_SEL_S = 14
const PMU_HP_SLEEP2MODEM_BACKUP_MODE_S = 20
const PMU_HP_SLEEP2MODEM_BACKUP_EN_S = 29
const PMU_HP_MODEM_BACKUP_ICG_FUNC_EN_S = 0
const PMU_HP_MODEM_DIG_SYS_CLK_NO_DIV_S = 26
const PMU_HP_MODEM_ICG_SYS_CLOCK_EN_S = 27
const PMU_HP_MODEM_SYS_CLK_SLP_SEL_S = 28
const PMU_HP_MODEM_ICG_SLP_SEL_S = 29
const PMU_HP_MODEM_DIG_SYS_CLK_SEL_S = 30
const PMU_HP_MODEM_HP_REGULATOR_SLP_MEM_XPD_S = 16
const PMU_HP_MODEM_HP_REGULATOR_SLP_LOGIC_XPD_S = 17
const PMU_HP_MODEM_HP_REGULATOR_XPD_S = 18
const PMU_HP_MODEM_HP_REGULATOR_SLP_MEM_DBIAS_S = 19
const PMU_HP_MODEM_HP_REGULATOR_SLP_LOGIC_DBIAS_S = 23
const PMU_HP_MODEM_HP_REGULATOR_DBIAS_S = 27
const PMU_HP_MODEM_HP_REGULATOR_DRV_B_S = 8
const PMU_HP_MODEM_XPD_XTAL_S = 31
const PMU_HP_SLEEP_VDD_SPI_PD_EN_S = 21
const PMU_HP_SLEEP_HP_MEM_DSLP_S = 22
const PMU_HP_SLEEP_PD_HP_MEM_PD_EN_S = 23
const PMU_HP_SLEEP_PD_HP_WIFI_PD_EN_S = 27
const PMU_HP_SLEEP_PD_HP_CPU_PD_EN_S = 29
const PMU_HP_SLEEP_PD_HP_AON_PD_EN_S = 30
const PMU_HP_SLEEP_PD_TOP_PD_EN_S = 31
const PMU_HP_SLEEP_DIG_ICG_FUNC_EN_S = 0
const PMU_HP_SLEEP_DIG_ICG_APB_EN_S = 0
const PMU_HP_SLEEP_DIG_ICG_MODEM_CODE_S = 30
const PMU_HP_SLEEP_UART_WAKEUP_EN_S = 24
const PMU_HP_SLEEP_LP_PAD_HOLD_ALL_S = 25
const PMU_HP_SLEEP_HP_PAD_HOLD_ALL_S = 26
const PMU_HP_SLEEP_DIG_PAD_SLP_SEL_S = 27
const PMU_HP_SLEEP_DIG_PAUSE_WDT_S = 28
const PMU_HP_SLEEP_DIG_CPU_STALL_S = 29
const PMU_HP_SLEEP_I2C_ISO_EN_S = 26
const PMU_HP_SLEEP_I2C_RETENTION_S = 27
const PMU_HP_SLEEP_XPD_BB_I2C_S = 28
const PMU_HP_SLEEP_XPD_BBPLL_I2C_S = 29
const PMU_HP_SLEEP_XPD_BBPLL_S = 30
const PMU_HP_SLEEP_XPD_BIAS_S = 25
const PMU_HP_SLEEP_DBG_ATTEN_S = 26
const PMU_HP_SLEEP_PD_CUR_S = 30
const PMU_HP_SLEEP_BIAS_SLEEP_S = 31
const PMU_HP_MODEM2SLEEP_BACKUP_MODEM_CLK_CODE_S = 6
const PMU_HP_ACTIVE2SLEEP_BACKUP_MODEM_CLK_CODE_S = 8
const PMU_HP_SLEEP_RETENTION_MODE_S = 10
const PMU_HP_MODEM2SLEEP_RETENTION_EN_S = 12
const PMU_HP_ACTIVE2SLEEP_RETENTION_EN_S = 13
const PMU_HP_MODEM2SLEEP_BACKUP_CLK_SEL_S = 16
const PMU_HP_ACTIVE2SLEEP_BACKUP_CLK_SEL_S = 18
const PMU_HP_MODEM2SLEEP_BACKUP_MODE_S = 23
const PMU_HP_ACTIVE2SLEEP_BACKUP_MODE_S = 26
const PMU_HP_MODEM2SLEEP_BACKUP_EN_S = 30
const PMU_HP_ACTIVE2SLEEP_BACKUP_EN_S = 31
const PMU_HP_SLEEP_BACKUP_ICG_FUNC_EN_S = 0
const PMU_HP_SLEEP_DIG_SYS_CLK_NO_DIV_S = 26
const PMU_HP_SLEEP_ICG_SYS_CLOCK_EN_S = 27
const PMU_HP_SLEEP_SYS_CLK_SLP_SEL_S = 28
const PMU_HP_SLEEP_ICG_SLP_SEL_S = 29
const PMU_HP_SLEEP_DIG_SYS_CLK_SEL_S = 30
const PMU_HP_SLEEP_HP_REGULATOR_SLP_MEM_XPD_S = 16
const PMU_HP_SLEEP_HP_REGULATOR_SLP_LOGIC_XPD_S = 17
const PMU_HP_SLEEP_HP_REGULATOR_XPD_S = 18
const PMU_HP_SLEEP_HP_REGULATOR_SLP_MEM_DBIAS_S = 19
const PMU_HP_SLEEP_HP_REGULATOR_SLP_LOGIC_DBIAS_S = 23
const PMU_HP_SLEEP_HP_REGULATOR_DBIAS_S = 27
const PMU_HP_SLEEP_HP_REGULATOR_DRV_B_S = 8
const PMU_HP_SLEEP_XPD_XTAL_S = 31
const PMU_HP_SLEEP_LP_REGULATOR_SLP_XPD_S = 21
const PMU_HP_SLEEP_LP_REGULATOR_XPD_S = 22
const PMU_HP_SLEEP_LP_REGULATOR_SLP_DBIAS_S = 23
const PMU_HP_SLEEP_LP_REGULATOR_DBIAS_S = 27
const PMU_HP_SLEEP_LP_REGULATOR_DRV_B_S = 28
const PMU_HP_SLEEP_LP_DCDC_RESERVE_S = 0
const PMU_HP_SLEEP_LP_MEM_DSLP_S = 30
const PMU_HP_SLEEP_PD_LP_PERI_PD_EN_S = 31
const PMU_HP_SLEEP_XPD_XTAL32K_S = 28
const PMU_HP_SLEEP_XPD_RC32K_S = 29
const PMU_HP_SLEEP_XPD_FOSC_CLK_S = 30
const PMU_HP_SLEEP_PD_OSC_CLK_S = 31
const PMU_LP_SLEEP_LP_BIAS_RESERVE_S = 0
const PMU_LP_SLEEP_LP_REGULATOR_SLP_XPD_S = 21
const PMU_LP_SLEEP_LP_REGULATOR_XPD_S = 22
const PMU_LP_SLEEP_LP_REGULATOR_SLP_DBIAS_S = 23
const PMU_LP_SLEEP_LP_REGULATOR_DBIAS_S = 27
const PMU_LP_SLEEP_LP_REGULATOR_DRV_B_S = 28
const PMU_LP_SLEEP_XPD_XTAL_S = 31
const PMU_LP_SLEEP_LP_MEM_DSLP_S = 30
const PMU_LP_SLEEP_PD_LP_PERI_PD_EN_S = 31
const PMU_LP_SLEEP_XPD_XTAL32K_S = 28
const PMU_LP_SLEEP_XPD_RC32K_S = 29
const PMU_LP_SLEEP_XPD_FOSC_CLK_S = 30
const PMU_LP_SLEEP_PD_OSC_CLK_S = 31
const PMU_LP_SLEEP_XPD_BIAS_S = 25
const PMU_LP_SLEEP_DBG_ATTEN_S = 26
const PMU_LP_SLEEP_PD_CUR_S = 30
const PMU_LP_SLEEP_BIAS_SLEEP_S = 31
const PMU_TIE_LOW_GLOBAL_BBPLL_ICG_S = 0
const PMU_TIE_LOW_GLOBAL_XTAL_ICG_S = 1
const PMU_TIE_LOW_I2C_RETENTION_S = 2
const PMU_TIE_LOW_XPD_BB_I2C_S = 3
const PMU_TIE_LOW_XPD_BBPLL_I2C_S = 4
const PMU_TIE_LOW_XPD_BBPLL_S = 5
const PMU_TIE_LOW_XPD_XTAL_S = 6
const PMU_TIE_HIGH_GLOBAL_BBPLL_ICG_S = 25
const PMU_TIE_HIGH_GLOBAL_XTAL_ICG_S = 26
const PMU_TIE_HIGH_I2C_RETENTION_S = 27
const PMU_TIE_HIGH_XPD_BB_I2C_S = 28
const PMU_TIE_HIGH_XPD_BBPLL_I2C_S = 29
const PMU_TIE_HIGH_XPD_BBPLL_S = 30
const PMU_TIE_HIGH_XPD_XTAL_S = 31
const PMU_UPDATE_DIG_ICG_SWITCH_S = 28
const PMU_TIE_LOW_ICG_SLP_SEL_S = 29
const PMU_TIE_HIGH_ICG_SLP_SEL_S = 30
const PMU_UPDATE_DIG_SYS_CLK_SEL_S = 31
const PMU_UPDATE_DIG_ICG_FUNC_EN_S = 31
const PMU_UPDATE_DIG_ICG_APB_EN_S = 31
const PMU_UPDATE_DIG_ICG_MODEM_EN_S = 31
const PMU_TIE_LOW_LP_ROOTCLK_SEL_S = 30
const PMU_TIE_HIGH_LP_ROOTCLK_SEL_S = 31
const PMU_TIE_HIGH_LP_PAD_HOLD_ALL_S = 28
const PMU_TIE_LOW_LP_PAD_HOLD_ALL_S = 29
const PMU_TIE_HIGH_HP_PAD_HOLD_ALL_S = 30
const PMU_TIE_LOW_HP_PAD_HOLD_ALL_S = 31
const PMU_TIE_HIGH_I2C_ISO_EN_S = 30
const PMU_TIE_LOW_I2C_ISO_EN_S = 31
const PMU_DG_HP_POWERDOWN_TIMER_S = 5
const PMU_DG_HP_POWERUP_TIMER_S = 14
const PMU_DG_HP_WAIT_TIMER_S = 23
const PMU_DG_LP_POWERDOWN_TIMER_S = 9
const PMU_DG_LP_POWERUP_TIMER_S = 16
const PMU_DG_LP_WAIT_TIMER_S = 23
const PMU_FORCE_TOP_RESET_S = 0
const PMU_FORCE_TOP_ISO_S = 1
const PMU_FORCE_TOP_PU_S = 2
const PMU_FORCE_TOP_NO_RESET_S = 3
const PMU_FORCE_TOP_NO_ISO_S = 4
const PMU_FORCE_TOP_PD_S = 5
const PMU_PD_TOP_MASK_S = 6
const PMU_PD_TOP_PD_MASK_S = 27
const PMU_FORCE_HP_AON_RESET_S = 0
const PMU_FORCE_HP_AON_ISO_S = 1
const PMU_FORCE_HP_AON_PU_S = 2
const PMU_FORCE_HP_AON_NO_RESET_S = 3
const PMU_FORCE_HP_AON_NO_ISO_S = 4
const PMU_FORCE_HP_AON_PD_S = 5
const PMU_PD_HP_AON_MASK_S = 6
const PMU_PD_HP_AON_PD_MASK_S = 27
const PMU_FORCE_HP_CPU_RESET_S = 0
const PMU_FORCE_HP_CPU_ISO_S = 1
const PMU_FORCE_HP_CPU_PU_S = 2
const PMU_FORCE_HP_CPU_NO_RESET_S = 3
const PMU_FORCE_HP_CPU_NO_ISO_S = 4
const PMU_FORCE_HP_CPU_PD_S = 5
const PMU_PD_HP_CPU_MASK_S = 6
const PMU_PD_HP_CPU_PD_MASK_S = 27
const PMU_HP_PERI_RESERVE_S = 0
const PMU_FORCE_HP_WIFI_RESET_S = 0
const PMU_FORCE_HP_WIFI_ISO_S = 1
const PMU_FORCE_HP_WIFI_PU_S = 2
const PMU_FORCE_HP_WIFI_NO_RESET_S = 3
const PMU_FORCE_HP_WIFI_NO_ISO_S = 4
const PMU_FORCE_HP_WIFI_PD_S = 5
const PMU_PD_HP_WIFI_MASK_S = 6
const PMU_PD_HP_WIFI_PD_MASK_S = 27
const PMU_FORCE_LP_PERI_RESET_S = 0
const PMU_FORCE_LP_PERI_ISO_S = 1
const PMU_FORCE_LP_PERI_PU_S = 2
const PMU_FORCE_LP_PERI_NO_RESET_S = 3
const PMU_FORCE_LP_PERI_NO_ISO_S = 4
const PMU_FORCE_LP_PERI_PD_S = 5
const PMU_FORCE_HP_MEM_ISO_S = 0
const PMU_FORCE_HP_MEM_PD_S = 4
const PMU_FORCE_HP_MEM_NO_ISO_S = 24
const PMU_FORCE_HP_MEM_PU_S = 28
const PMU_PD_HP_MEM2_PD_MASK_S = 0
const PMU_PD_HP_MEM1_PD_MASK_S = 5
const PMU_PD_HP_MEM0_PD_MASK_S = 10
const PMU_PD_HP_MEM2_MASK_S = 17
const PMU_PD_HP_MEM1_MASK_S = 22
const PMU_PD_HP_MEM0_MASK_S = 27
const PMU_FORCE_HP_PAD_NO_ISO_ALL_S = 0
const PMU_FORCE_HP_PAD_ISO_ALL_S = 1
const PMU_VDD_SPI_PWR_WAIT_S = 18
const PMU_VDD_SPI_PWR_SW_S = 29
const PMU_VDD_SPI_PWR_SEL_SW_S = 31
const PMU_WAIT_XTL_STABLE_S = 0
const PMU_WAIT_PLL_STABLE_S = 16
const PMU_SLEEP_REQ_S = 31
const PMU_SLEEP_REJECT_ENA_S = 0
const PMU_SLP_REJECT_EN_S = 31
const PMU_WAKEUP_ENA_S = 0
const PMU_LP_MIN_SLP_VAL_S = 0
const PMU_HP_MIN_SLP_VAL_S = 8
const PMU_SLEEP_PRT_SEL_S = 16
const PMU_SLP_REJECT_CAUSE_CLR_S = 31
const PMU_MODEM_WAIT_TARGET_S = 0
const PMU_LP_ANA_WAIT_TARGET_S = 24
const PMU_SOC_WAKEUP_WAIT_S = 0
const PMU_SOC_WAKEUP_WAIT_CFG_S = 30
const PMU_ANA_WAIT_TARGET_S = 16
const PMU_WAKEUP_CAUSE_S = 0
const PMU_REJECT_CAUSE_S = 0
const PMU_I2C_POR_WAIT_TARGET_S = 0
const PMU_MODIFY_ICG_CNTL_WAIT_S = 0
const PMU_SWITCH_ICG_CNTL_WAIT_S = 8
const PMU_POR_DONE_S = 31
const PMU_PERIF_I2C_RSTB_S = 26
const PMU_XPD_PERIF_I2C_S = 27
const PMU_XPD_TXRF_I2C_S = 28
const PMU_XPD_RFRX_PBUS_S = 29
const PMU_XPD_CKGEN_I2C_S = 30
const PMU_XPD_PLL_I2C_S = 31
const PMU_BACKUP_SYS_CLK_NO_DIV_S = 31
const PMU_LP_CPU_EXC_INT_RAW_S = 27
const PMU_SDIO_IDLE_INT_RAW_S = 28
const PMU_SW_INT_RAW_S = 29
const PMU_SOC_SLEEP_REJECT_INT_RAW_S = 30
const PMU_SOC_WAKEUP_INT_RAW_S = 31
const PMU_LP_CPU_EXC_INT_ST_S = 27
const PMU_SDIO_IDLE_INT_ST_S = 28
const PMU_SW_INT_ST_S = 29
const PMU_SOC_SLEEP_REJECT_INT_ST_S = 30
const PMU_SOC_WAKEUP_INT_ST_S = 31
const PMU_LP_CPU_EXC_INT_ENA_S = 27
const PMU_SDIO_IDLE_INT_ENA_S = 28
const PMU_SW_INT_ENA_S = 29
const PMU_SOC_SLEEP_REJECT_INT_ENA_S = 30
const PMU_SOC_WAKEUP_INT_ENA_S = 31
const PMU_LP_CPU_EXC_INT_CLR_S = 27
const PMU_SDIO_IDLE_INT_CLR_S = 28
const PMU_SW_INT_CLR_S = 29
const PMU_SOC_SLEEP_REJECT_INT_CLR_S = 30
const PMU_SOC_WAKEUP_INT_CLR_S = 31
const PMU_LP_CPU_WAKEUP_INT_RAW_S = 20
const PMU_MODEM_SWITCH_ACTIVE_END_INT_RAW_S = 21
const PMU_SLEEP_SWITCH_ACTIVE_END_INT_RAW_S = 22
const PMU_SLEEP_SWITCH_MODEM_END_INT_RAW_S = 23
const PMU_MODEM_SWITCH_SLEEP_END_INT_RAW_S = 24
const PMU_ACTIVE_SWITCH_SLEEP_END_INT_RAW_S = 25
const PMU_MODEM_SWITCH_ACTIVE_START_INT_RAW_S = 26
const PMU_SLEEP_SWITCH_ACTIVE_START_INT_RAW_S = 27
const PMU_SLEEP_SWITCH_MODEM_START_INT_RAW_S = 28
const PMU_MODEM_SWITCH_SLEEP_START_INT_RAW_S = 29
const PMU_ACTIVE_SWITCH_SLEEP_START_INT_RAW_S = 30
const PMU_HP_SW_TRIGGER_INT_RAW_S = 31
const PMU_LP_CPU_WAKEUP_INT_ST_S = 20
const PMU_MODEM_SWITCH_ACTIVE_END_INT_ST_S = 21
const PMU_SLEEP_SWITCH_ACTIVE_END_INT_ST_S = 22
const PMU_SLEEP_SWITCH_MODEM_END_INT_ST_S = 23
const PMU_MODEM_SWITCH_SLEEP_END_INT_ST_S = 24
const PMU_ACTIVE_SWITCH_SLEEP_END_INT_ST_S = 25
const PMU_MODEM_SWITCH_ACTIVE_START_INT_ST_S = 26
const PMU_SLEEP_SWITCH_ACTIVE_START_INT_ST_S = 27
const PMU_SLEEP_SWITCH_MODEM_START_INT_ST_S = 28
const PMU_MODEM_SWITCH_SLEEP_START_INT_ST_S = 29
const PMU_ACTIVE_SWITCH_SLEEP_START_INT_ST_S = 30
const PMU_HP_SW_TRIGGER_INT_ST_S = 31
const PMU_LP_CPU_WAKEUP_INT_ENA_S = 20
const PMU_MODEM_SWITCH_ACTIVE_END_INT_ENA_S = 21
const PMU_SLEEP_SWITCH_ACTIVE_END_INT_ENA_S = 22
const PMU_SLEEP_SWITCH_MODEM_END_INT_ENA_S = 23
const PMU_MODEM_SWITCH_SLEEP_END_INT_ENA_S = 24
const PMU_ACTIVE_SWITCH_SLEEP_END_INT_ENA_S = 25
const PMU_MODEM_SWITCH_ACTIVE_START_INT_ENA_S = 26
const PMU_SLEEP_SWITCH_ACTIVE_START_INT_ENA_S = 27
const PMU_SLEEP_SWITCH_MODEM_START_INT_ENA_S = 28
const PMU_MODEM_SWITCH_SLEEP_START_INT_ENA_S = 29
const PMU_ACTIVE_SWITCH_SLEEP_START_INT_ENA_S = 30
const PMU_HP_SW_TRIGGER_INT_ENA_S = 31
const PMU_LP_CPU_WAKEUP_INT_CLR_S = 20
const PMU_MODEM_SWITCH_ACTIVE_END_INT_CLR_S = 21
const PMU_SLEEP_SWITCH_ACTIVE_END_INT_CLR_S = 22
const PMU_SLEEP_SWITCH_MODEM_END_INT_CLR_S = 23
const PMU_MODEM_SWITCH_SLEEP_END_INT_CLR_S = 24
const PMU_ACTIVE_SWITCH_SLEEP_END_INT_CLR_S = 25
const PMU_MODEM_SWITCH_ACTIVE_START_INT_CLR_S = 26
const PMU_SLEEP_SWITCH_ACTIVE_START_INT_CLR_S = 27
const PMU_SLEEP_SWITCH_MODEM_START_INT_CLR_S = 28
const PMU_MODEM_SWITCH_SLEEP_START_INT_CLR_S = 29
const PMU_ACTIVE_SWITCH_SLEEP_START_INT_CLR_S = 30
const PMU_HP_SW_TRIGGER_INT_CLR_S = 31
const PMU_LP_CPU_WAITI_RDY_S = 0
const PMU_LP_CPU_STALL_RDY_S = 1
const PMU_LP_CPU_FORCE_STALL_S = 18
const PMU_LP_CPU_SLP_WAITI_FLAG_EN_S = 19
const PMU_LP_CPU_SLP_STALL_FLAG_EN_S = 20
const PMU_LP_CPU_SLP_STALL_WAIT_S = 21
const PMU_LP_CPU_SLP_STALL_EN_S = 29
const PMU_LP_CPU_SLP_RESET_EN_S = 30
const PMU_LP_CPU_SLP_BYPASS_INTR_EN_S = 31
const PMU_LP_CPU_WAKEUP_EN_S = 0
const PMU_LP_CPU_SLEEP_REQ_S = 31
const PMU_LP_TRIGGER_HP_S = 30
const PMU_HP_TRIGGER_LP_S = 31
const PMU_DIG_REGULATOR_EN_CAL_S = 31
const PMU_MAIN_LAST_ST_STATE_S = 11
const PMU_MAIN_TAR_ST_STATE_S = 18
const PMU_MAIN_CUR_ST_STATE_S = 25
const PMU_BACKUP_ST_STATE_S = 13
const PMU_LP_PWR_ST_STATE_S = 18
const PMU_HP_PWR_ST_STATE_S = 23
const PMU_STABLE_XPD_BBPLL_STATE_S = 0
const PMU_STABLE_XPD_XTAL_STATE_S = 1
const PMU_SYS_CLK_SLP_SEL_STATE_S = 15
const PMU_SYS_CLK_SEL_STATE_S = 16
const PMU_SYS_CLK_NO_DIV_STATE_S = 18
const PMU_ICG_SYS_CLK_EN_STATE_S = 19
const PMU_ICG_MODEM_SWITCH_STATE_S = 20
const PMU_ICG_MODEM_CODE_STATE_S = 21
const PMU_ICG_SLP_SEL_STATE_S = 23
const PMU_ICG_GLOBAL_XTAL_STATE_S = 24
const PMU_ICG_GLOBAL_PLL_STATE_S = 25
const PMU_ANA_I2C_ISO_EN_STATE_S = 26
const PMU_ANA_I2C_RETENTION_STATE_S = 27
const PMU_ANA_XPD_BB_I2C_STATE_S = 28
const PMU_ANA_XPD_BBPLL_I2C_STATE_S = 29
const PMU_ANA_XPD_BBPLL_STATE_S = 30
const PMU_ANA_XPD_XTAL_STATE_S = 31
const PMU_ICG_FUNC_EN_STATE_S = 0
const PMU_ICG_APB_EN_STATE_S = 0
const PMU_STABLE_VDD_SPI_PWR_DRV_S = 31
const PMU_PMU_DATE_S = 0
const PMU_CLK_EN_S = 31
const IEEE802154_OPCODE = 0x000000FF
const IEEE802154_OPCODE_S = 0
const IEEE802154_MAC_INF3_ENABLE_S = 31
const IEEE802154_MAC_INF2_ENABLE_S = 30
const IEEE802154_MAC_INF1_ENABLE_S = 29
const IEEE802154_MAC_INF0_ENABLE_S = 28
const IEEE802154_RX_DONE_TRIGGER_IDLE_S = 27
const IEEE802154_FORCE_RX_ENB_S = 26
const IEEE802154_NO_RSS_TRK_ENB_S = 25
const IEEE802154_BIT_ORDER_S = 24
const IEEE802154_COEX_ARB_DELAY = 0x000000FF
const IEEE802154_COEX_ARB_DELAY_S = 16
const IEEE802154_FILTER_ENHANCE_S = 14
const IEEE802154_AUTOPEND_ENHANCE_S = 12
const IEEE802154_DIS_FRAME_VERSION_RSV_FILTER_S = 11
const IEEE802154_PROMISCUOUS_MODE_S = 7
const IEEE802154_PAN_COORDINATOR_S = 6
const IEEE802154_DIS_IFS_CONTROL_S = 5
const IEEE802154_HW_AUTO_ACK_RX_EN_S = 3
const HW_ENHANCE_ACK_TX_EN_S = 1
const IEEE802154_HW_AUTO_ACK_TX_EN_S = 0
const IEEE802154_MAC_INF0_SHORT_ADDR = 0x0000FFFF
const IEEE802154_MAC_INF0_SHORT_ADDR_S = 0
const IEEE802154_MAC_INF0_PAN_ID = 0x0000FFFF
const IEEE802154_MAC_INF0_PAN_ID_S = 0
const IEEE802154_MAC_INF0_EXTEND_ADDR0 = 0xFFFFFFFF
const IEEE802154_MAC_INF0_EXTEND_ADDR0_S = 0
const IEEE802154_MAC_INF0_EXTEND_ADDR1 = 0xFFFFFFFF
const IEEE802154_MAC_INF0_EXTEND_ADDR1_S = 0
const IEEE802154_MAC_INF1_SHORT_ADDR = 0x0000FFFF
const IEEE802154_MAC_INF1_SHORT_ADDR_S = 0
const IEEE802154_MAC_INF1_PAN_ID = 0x0000FFFF
const IEEE802154_MAC_INF1_PAN_ID_S = 0
const IEEE802154_MAC_INF1_EXTEND_ADDR0 = 0xFFFFFFFF
const IEEE802154_MAC_INF1_EXTEND_ADDR0_S = 0
const IEEE802154_MAC_INF1_EXTEND_ADDR1 = 0xFFFFFFFF
const IEEE802154_MAC_INF1_EXTEND_ADDR1_S = 0
const IEEE802154_MAC_INF2_SHORT_ADDR = 0x0000FFFF
const IEEE802154_MAC_INF2_SHORT_ADDR_S = 0
const IEEE802154_MAC_INF2_PAN_ID = 0x0000FFFF
const IEEE802154_MAC_INF2_PAN_ID_S = 0
const IEEE802154_MAC_INF2_EXTEND_ADDR0 = 0xFFFFFFFF
const IEEE802154_MAC_INF2_EXTEND_ADDR0_S = 0
const IEEE802154_MAC_INF2_EXTEND_ADDR1 = 0xFFFFFFFF
const IEEE802154_MAC_INF2_EXTEND_ADDR1_S = 0
const IEEE802154_MAC_INF3_SHORT_ADDR = 0x0000FFFF
const IEEE802154_MAC_INF3_SHORT_ADDR_S = 0
const IEEE802154_MAC_INF3_PAN_ID = 0x0000FFFF
const IEEE802154_MAC_INF3_PAN_ID_S = 0
const IEEE802154_MAC_INF3_EXTEND_ADDR0 = 0xFFFFFFFF
const IEEE802154_MAC_INF3_EXTEND_ADDR0_S = 0
const IEEE802154_MAC_INF3_EXTEND_ADDR1 = 0xFFFFFFFF
const IEEE802154_MAC_INF3_EXTEND_ADDR1_S = 0
const IEEE802154_HOP = 0x0000007F
const IEEE802154_HOP_S = 0
const IEEE802154_TX_POWER = 0x0000001F
const IEEE802154_TX_POWER_S = 0
const IEEE802154_ED_SCAN_WAIT_DLY = 0x0000000F
const IEEE802154_ED_SCAN_WAIT_DLY_S = 24
const IEEE802154_ED_SCAN_DURATION = 0x00FFFFFF
const IEEE802154_ED_SCAN_DURATION_S = 0
const IEEE802154_CCA_BUSY_S = 24
const IEEE802154_ED_RSS = 0x000000FF
const IEEE802154_ED_RSS_S = 16
const IEEE802154_CCA_MODE = 0x00000003
const IEEE802154_CCA_MODE_S = 14
const IEEE802154_DIS_ED_POWER_SEL_S = 13
const IEEE802154_ED_SAMPLE_MODE = 0x00000003
const IEEE802154_ED_SAMPLE_MODE_S = 11
const IEEE802154_CCA_ED_THRESHOLD = 0x000000FF
const IEEE802154_CCA_ED_THRESHOLD_S = 0
const IEEE802154_LIFS = 0x000003FF
const IEEE802154_LIFS_S = 16
const IEEE802154_SIFS = 0x000000FF
const IEEE802154_SIFS_S = 0
const IEEE802154_ACK_TIMEOUT = 0x0000FFFF
const IEEE802154_ACK_TIMEOUT_S = 0
const IEEE802154_EVENT_EN = 0x00001FFF
const IEEE802154_EVENT_EN_S = 0
const IEEE802154_EVENT_STATUS = 0x00001FFF
const IEEE802154_EVENT_STATUS_S = 0
const IEEE802154_RX_ABORT_INTR_CTRL = 0x7FFFFFFF
const IEEE802154_RX_ABORT_INTR_CTRL_S = 0
const IEEE802154_ACK_TX_ACK_TIMEOUT = 0x0000FFFF
const IEEE802154_ACK_TX_ACK_TIMEOUT_S = 16
const IEEE802154_ACK_FRAME_PENDING_EN_S = 0
const IEEE802154_CLOSE_RF_SEL_S = 8
const IEEE802154_COEX_ACK_PTI = 0x0000000F
const IEEE802154_COEX_ACK_PTI_S = 4
const IEEE802154_COEX_PTI = 0x0000000F
const IEEE802154_COEX_PTI_S = 0
const IEEE802154_TX_ABORT_INTERRUPT_CONTROL = 0x7FFFFFFF
const IEEE802154_TX_ABORT_INTERRUPT_CONTROL_S = 0
const IEEE802154_TX_ENH_ACK_GENERATE_DONE_NOTIFY = 0xFFFFFFFF
const IEEE802154_TX_ENH_ACK_GENERATE_DONE_NOTIFY_S = 0
const IEEE802154_SFD_MATCH_S = 21
const IEEE802154_PREAMBLE_MATCH_S = 20
const IEEE802154_RX_STATE = 0x00000007
const IEEE802154_RX_STATE_S = 16
const IEEE802154_RX_ABORT_STATUS = 0x0000001F
const IEEE802154_RX_ABORT_STATUS_S = 4
const IEEE802154_FILTER_FAIL_STATUS = 0x0000000F
const IEEE802154_FILTER_FAIL_STATUS_S = 0
const IEEE802154_TX_SEC_ERROR_CODE = 0x0000000F
const IEEE802154_TX_SEC_ERROR_CODE_S = 16
const IEEE802154_TX_ABORT_STATUS = 0x0000001F
const IEEE802154_TX_ABORT_STATUS_S = 4
const IEEE802154_TX_STATE = 0x0000000F
const IEEE802154_TX_STATE_S = 0
const IEEE802154_RF_CTRL_STATE = 0x0000000F
const IEEE802154_RF_CTRL_STATE_S = 16
const IEEE802154_ED_TRIGGER_TX_PROC_S = 11
const IEEE802154_ED_PROC_S = 10
const IEEE802154_RX_PROC_S = 9
const IEEE802154_TX_PROC_S = 8
const IEEE802154_TXRX_STATE = 0x0000000F
const IEEE802154_TXRX_STATE_S = 0
const IEEE802154_TX_CCM_SCHEDULE_STATUS = 0x7FFFFFFF
const IEEE802154_TX_CCM_SCHEDULE_STATUS_S = 0
const IEEE802154_RX_LENGTH = 0x0000007F
const IEEE802154_RX_LENGTH_S = 0
const IEEE802154_TIMER0_THRESHOLD = 0xFFFFFFFF
const IEEE802154_TIMER0_THRESHOLD_S = 0
const IEEE802154_TIMER0_VALUE = 0xFFFFFFFF
const IEEE802154_TIMER0_VALUE_S = 0
const IEEE802154_TIMER1_THRESHOLD = 0xFFFFFFFF
const IEEE802154_TIMER1_THRESHOLD_S = 0
const IEEE802154_TIMER1_VALUE = 0xFFFFFFFF
const IEEE802154_TIMER1_VALUE_S = 0
const IEEE802154_CLK_COUNT_MATCH_VAL = 0x0000FFFF
const IEEE802154_CLK_COUNT_MATCH_VAL_S = 0
const IEEE802154_CLK_625US_CNT = 0x0000FFFF
const IEEE802154_CLK_625US_CNT_S = 0
const IEEE802154_IFS_COUNTER_EN_S = 16
const IEEE802154_IFS_COUNTER = 0x000003FF
const IEEE802154_IFS_COUNTER_S = 0
const IEEE802154_SFD_WAIT_SYMBOL_NUM = 0x0000000F
const IEEE802154_SFD_WAIT_SYMBOL_NUM_S = 0
const IEEE802154_RX_PATH_DELAY = 0x0000003F
const IEEE802154_RX_PATH_DELAY_S = 16
const IEEE802154_TX_PATH_DELAY = 0x0000003F
const IEEE802154_TX_PATH_DELAY_S = 0
const IEEE802154_BB_CLK_FREQ_MINUS_1 = 0x0000001F
const IEEE802154_BB_CLK_FREQ_MINUS_1_S = 0
const IEEE802154_TXDMA_ADDR = 0xFFFFFFFF
const IEEE802154_TXDMA_ADDR_S = 0
const IEEE802154_TXDMA_FETCH_BYTE_CNT = 0x0000007F
const IEEE802154_TXDMA_FETCH_BYTE_CNT_S = 24
const IEEE802154_TXDMA_STATE = 0x0000001F
const IEEE802154_TXDMA_STATE_S = 16
const IEEE802154_TXDMA_FILL_ENTRY = 0x00000007
const IEEE802154_TXDMA_FILL_ENTRY_S = 4
const IEEE802154_TXDMA_WATER_LEVEL = 0x00000007
const IEEE802154_TXDMA_WATER_LEVEL_S = 0
const IEEE802154_TXDMA_ERR = 0x0000000F
const IEEE802154_TXDMA_ERR_S = 0
const IEEE802154_RXDMA_ADDR = 0xFFFFFFFF
const IEEE802154_RXDMA_ADDR_S = 0
const IEEE802154_RXDMA_APPEND_FREQ_OFFSET_S = 25
const IEEE802154_RXDMA_APPEND_LQI_OFFSET_S = 24
const IEEE802154_RXDMA_STATE = 0x0000001F
const IEEE802154_RXDMA_STATE_S = 16
const IEEE802154_RXDMA_WATER_LEVEL = 0x00000007
const IEEE802154_RXDMA_WATER_LEVEL_S = 0
const IEEE802154_RXDMA_ERR = 0x0000000F
const IEEE802154_RXDMA_ERR_S = 0
const IEEE802154_DMA_GCK_CFG_S = 0
const IEEE802154_DMA_DUMMY_DATA = 0xFFFFFFFF
const IEEE802154_PAON_DELAY = 0x000003FF
const IEEE802154_PAON_DELAY_S = 0
const IEEE802154_TXON_DELAY = 0x000003FF
const IEEE802154_TXON_DELAY_S = 0
const IEEE802154_TXEN_STOP_DLY = 0x0000003F
const IEEE802154_TXEN_STOP_DLY_S = 0
const IEEE802154_TXOFF_DELAY = 0x0000003F
const IEEE802154_TXOFF_DELAY_S = 0
const IEEE802154_RXON_DELAY = 0x000007FF
const IEEE802154_RXON_DELAY_S = 0
const IEEE802154_TXRX_SWITCH_DELAY = 0x000003FF
const IEEE802154_TXRX_SWITCH_DELAY_S = 0
const IEEE802154_CONT_RX_DELAY = 0x0000003F
const IEEE802154_CONT_RX_DELAY_S = 0
const IEEE802154_TX_DCDC_UP_S = 31
const IEEE802154_DCDC_CTRL_EN_S = 16
const IEEE802154_DCDC_DOWN_DELAY = 0x000000FF
const IEEE802154_DCDC_DOWN_DELAY_S = 8
const IEEE802154_DCDC_PRE_UP_DELAY = 0x000000FF
const IEEE802154_DCDC_PRE_UP_DELAY_S = 0
const IEEE802154_DEBUG_TRIGGER_DUMP_EN_S = 31
const IEEE802154_DEBUG_STATE_MATCH_DUMP_EN_S = 30
const IEEE802154_DEBUG_TRIGGER_PULSE_SELECT = 0x00000007
const IEEE802154_DEBUG_TRIGGER_PULSE_SELECT_S = 24
const IEEE802154_DEBUG_TRIGGER_STATE_MATCH_VALUE = 0x0000001F
const IEEE802154_DEBUG_TRIGGER_STATE_MATCH_VALUE_S = 16
const IEEE802154_DEBUG_SER_DEBUG_SEL = 0x0000000F
const IEEE802154_DEBUG_SER_DEBUG_SEL_S = 12
const IEEE802154_DEBUG_TRIGGER_STATE_SELECT = 0x0000000F
const IEEE802154_DEBUG_TRIGGER_STATE_SELECT_S = 8
const IEEE802154_DEBUG_SIGNAL_SEL = 0x00000007
const IEEE802154_DEBUG_SIGNAL_SEL_S = 0
const IEEE802154_SEC_PAYLOAD_OFFSET = 0x0000007F
const IEEE802154_SEC_PAYLOAD_OFFSET_S = 8
const IEEE802154_SEC_EN_S = 0
const IEEE802154_SEC_EXTEND_ADDRESS0 = 0xFFFFFFFF
const IEEE802154_SEC_EXTEND_ADDRESS0_S = 0
const IEEE802154_SEC_EXTEND_ADDRESS1 = 0xFFFFFFFF
const IEEE802154_SEC_EXTEND_ADDRESS1_S = 0
const IEEE802154_SEC_KEY0 = 0xFFFFFFFF
const IEEE802154_SEC_KEY0_S = 0
const IEEE802154_SEC_KEY1 = 0xFFFFFFFF
const IEEE802154_SEC_KEY1_S = 0
const IEEE802154_SEC_KEY2 = 0xFFFFFFFF
const IEEE802154_SEC_KEY2_S = 0
const IEEE802154_SEC_KEY3 = 0xFFFFFFFF
const IEEE802154_SEC_KEY3_S = 0
const IEEE802154_SFD_TIMEOUT_CNT = 0x0000FFFF
const IEEE802154_SFD_TIMEOUT_CNT_S = 0
const IEEE802154_CRC_ERROR_CNT = 0x0000FFFF
const IEEE802154_CRC_ERROR_CNT_S = 0
const IEEE802154_ED_ABORT_CNT = 0x0000FFFF
const IEEE802154_ED_ABORT_CNT_S = 0
const IEEE802154_CCA_FAIL_CNT = 0x0000FFFF
const IEEE802154_CCA_FAIL_CNT_S = 0
const IEEE802154_RX_FILTER_FAIL_CNT = 0x0000FFFF
const IEEE802154_RX_FILTER_FAIL_CNT_S = 0
const IEEE802154_NO_RSS_DETECT_CNT = 0x0000FFFF
const IEEE802154_NO_RSS_DETECT_CNT_S = 0
const IEEE802154_RX_ABORT_COEX_CNT = 0x0000FFFF
const IEEE802154_RX_ABORT_COEX_CNT_S = 0
const IEEE802154_RX_RESTART_CNT = 0x0000FFFF
const IEEE802154_RX_RESTART_CNT_S = 0
const IEEE802154_TX_ACK_ABORT_COEX_CNT = 0x0000FFFF
const IEEE802154_TX_ACK_ABORT_COEX_CNT_S = 0
const IEEE802154_ED_SCAN_COEX_CNT = 0x0000FFFF
const IEEE802154_ED_SCAN_COEX_CNT_S = 0
const IEEE802154_RX_ACK_ABORT_COEX_CNT = 0x0000FFFF
const IEEE802154_RX_ACK_ABORT_COEX_CNT_S = 0
const IEEE802154_RX_ACK_TIMEOUT_CNT = 0x0000FFFF
const IEEE802154_RX_ACK_TIMEOUT_CNT_S = 0
const IEEE802154_TX_BREAK_COEX_CNT = 0x0000FFFF
const IEEE802154_TX_BREAK_COEX_CNT_S = 0
const IEEE802154_TX_SECURITY_ERROR_CNT = 0x0000FFFF
const IEEE802154_TX_SECURITY_ERROR_CNT_S = 0
const IEEE802154_CCA_BUSY_CNT = 0x0000FFFF
const IEEE802154_CCA_BUSY_CNT_S = 0
const IEEE802154_SFD_TIMEOUT_CNT_CLEAR_S = 14
const IEEE802154_CRC_ERROR_CNT_CLEAR_S = 13
const IEEE802154_RX_FILTER_FAIL_CNT_CLEAR_S = 12
const IEEE802154_NO_RSS_DETECT_CNT_CLEAR_S = 11
const IEEE802154_RX_ABORT_COEX_CNT_CLEAR_S = 10
const IEEE802154_RX_ACK_ABORT_COEX_CNT_CLEAR_S = 9
const IEEE802154_RX_RESTART_CNT_CLEAR_S = 8
const IEEE802154_RX_ACK_TIMEOUT_CNT_CLEAR_S = 7
const IEEE802154_TX_ACK_ABORT_COEX_CNT_CLEAR_S = 6
const IEEE802154_TX_BREAK_COEX_CNT_CLEAR_S = 5
const IEEE802154_TX_SECURITY_ERROR_CNT_CLEAR_S = 4
const IEEE802154_ED_ABORT_CNT_CLEAR_S = 3
const IEEE802154_CCA_FAIL_CNT_CLEAR_S = 2
const IEEE802154_CCA_BUSY_CNT_CLEAR_S = 1
const IEEE802154_ED_SCAN_COEX_CNT_CLEAR_S = 0
const IEEE802154_MAC_DATE = 0xFFFFFFFF
const IEEE802154_MAC_DATE_S = 0
const IEEE802154_MAC_DATE_VERSION = 0x220622
const ETM_REG_BASE = 0x600A8800
const ETM_CH_OFFSET = 0x08
const ETM_EVENT_TIMER1_OVERFLOW = 58
const ETM_EVENT_TIMER0_OVERFLOW = 59
const ETM_TASK_ED_TRIG_TX = 64
const ETM_TASK_RX_START = 65
const ETM_TASK_TX_START = 68
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_ENA_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_ENA_S = 1
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_ENA_S = 2
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_ENA_S = 3
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_ENA_S = 4
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_ENA_S = 5
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_ENA_S = 6
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_ENA_S = 7
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_ENA_S = 8
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_ENA_S = 9
const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_ENA_S = 10
const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_ENA_S = 11
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_RAW_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_RAW_S = 1
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_RAW_S = 2
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_RAW_S = 3
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_RAW_S = 4
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_RAW_S = 5
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_RAW_S = 6
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_RAW_S = 7
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_RAW_S = 8
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_RAW_S = 9
const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_RAW_S = 10
const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_RAW_S = 11
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_RLS_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_RLS_S = 1
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_RLS_S = 2
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_RLS_S = 3
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_RLS_S = 4
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_RLS_S = 5
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_RLS_S = 6
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_RLS_S = 7
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_RLS_S = 8
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_RLS_S = 9
const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_RLS_S = 10
const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_RLS_S = 11
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_CLR_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_CLR_S = 1
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_CLR_S = 2
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_CLR_S = 3
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_CLR_S = 4
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_CLR_S = 5
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_CLR_S = 6
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_CLR_S = 7
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_CLR_S = 8
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_CLR_S = 9
const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_CLR_S = 10
const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_CLR_S = 11
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MIN_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MAX_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MIN_S = 0
const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MAX_S = 0
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MIN_S = 0
const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MAX_S = 0
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MIN_S = 0
const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MAX_S = 0
const ASSIST_DEBUG_CORE_0_AREA_PC_S = 0
const ASSIST_DEBUG_CORE_0_AREA_SP_S = 0
const ASSIST_DEBUG_CORE_0_SP_MIN_S = 0
const ASSIST_DEBUG_CORE_0_SP_MAX_S = 0
const ASSIST_DEBUG_CORE_0_SP_PC_S = 0
const ASSIST_DEBUG_CORE_0_RCD_RECORDEN_S = 0
const ASSIST_DEBUG_CORE_0_RCD_PDEBUGEN_S = 1
const ASSIST_DEBUG_CORE_0_RCD_PDEBUGPC_S = 0
const ASSIST_DEBUG_CORE_0_RCD_PDEBUGSP_S = 0
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_ADDR_0_S = 0
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_WR_0_S = 24
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_LOADSTORE_0_S = 25
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_ADDR_1_S = 0
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_WR_1_S = 24
const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_LOADSTORE_1_S = 25
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_ADDR_0_S = 0
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_WR_0_S = 24
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_BYTEEN_0_S = 25
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_PC_0_S = 0
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_ADDR_1_S = 0
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_WR_1_S = 24
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_BYTEEN_1_S = 25
const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_PC_1_S = 0
const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_LIMIT_CYCLE_0_S = 0
const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_LIMIT_CYCLE_1_S = 0
const ASSIST_DEBUG_CORE_0_LASTPC_BEFORE_EXC_S = 0
const ASSIST_DEBUG_CORE_0_DEBUG_MODE_S = 0
const ASSIST_DEBUG_CORE_0_DEBUG_MODULE_ACTIVE_S = 1
const ASSIST_DEBUG_CLK_EN_S = 0
const ASSIST_DEBUG_ASSIST_DEBUG_DATE_S = 0
const GPIO_EXT_SD0_IN_S = 0
const GPIO_EXT_SD0_PRESCALE_S = 8
const GPIO_EXT_SD1_IN_S = 0
const GPIO_EXT_SD1_PRESCALE_S = 8
const GPIO_EXT_SD2_IN_S = 0
const GPIO_EXT_SD2_PRESCALE_S = 8
const GPIO_EXT_SD3_IN_S = 0
const GPIO_EXT_SD3_PRESCALE_S = 8
const GPIO_EXT_SD_CLK_EN_S = 0
const GPIO_EXT_SD_FUNCTION_CLK_EN_S = 30
const GPIO_EXT_SD_SPI_SWAP_S = 31
const GPIO_EXT_FILTER_CH0_EN_S = 0
const GPIO_EXT_FILTER_CH0_INPUT_IO_NUM_S = 1
const GPIO_EXT_FILTER_CH0_WINDOW_THRES_S = 7
const GPIO_EXT_FILTER_CH0_WINDOW_WIDTH_S = 13
const GPIO_EXT_FILTER_CH1_EN_S = 0
const GPIO_EXT_FILTER_CH1_INPUT_IO_NUM_S = 1
const GPIO_EXT_FILTER_CH1_WINDOW_THRES_S = 7
const GPIO_EXT_FILTER_CH1_WINDOW_WIDTH_S = 13
const GPIO_EXT_FILTER_CH2_EN_S = 0
const GPIO_EXT_FILTER_CH2_INPUT_IO_NUM_S = 1
const GPIO_EXT_FILTER_CH2_WINDOW_THRES_S = 7
const GPIO_EXT_FILTER_CH2_WINDOW_WIDTH_S = 13
const GPIO_EXT_FILTER_CH3_EN_S = 0
const GPIO_EXT_FILTER_CH3_INPUT_IO_NUM_S = 1
const GPIO_EXT_FILTER_CH3_WINDOW_THRES_S = 7
const GPIO_EXT_FILTER_CH3_WINDOW_WIDTH_S = 13
const GPIO_EXT_FILTER_CH4_EN_S = 0
const GPIO_EXT_FILTER_CH4_INPUT_IO_NUM_S = 1
const GPIO_EXT_FILTER_CH4_WINDOW_THRES_S = 7
const GPIO_EXT_FILTER_CH4_WINDOW_WIDTH_S = 13
const GPIO_EXT_FILTER_CH5_EN_S = 0
const GPIO_EXT_FILTER_CH5_INPUT_IO_NUM_S = 1
const GPIO_EXT_FILTER_CH5_WINDOW_THRES_S = 7
const GPIO_EXT_FILTER_CH5_WINDOW_WIDTH_S = 13
const GPIO_EXT_FILTER_CH6_EN_S = 0
const GPIO_EXT_FILTER_CH6_INPUT_IO_NUM_S = 1
const GPIO_EXT_FILTER_CH6_WINDOW_THRES_S = 7
const GPIO_EXT_FILTER_CH6_WINDOW_WIDTH_S = 13
const GPIO_EXT_FILTER_CH7_EN_S = 0
const GPIO_EXT_FILTER_CH7_INPUT_IO_NUM_S = 1
const GPIO_EXT_FILTER_CH7_WINDOW_THRES_S = 7
const GPIO_EXT_FILTER_CH7_WINDOW_WIDTH_S = 13
const GPIO_EXT_ETM_CH0_EVENT_SEL_S = 0
const GPIO_EXT_ETM_CH0_EVENT_EN_S = 7
const GPIO_EXT_ETM_CH1_EVENT_SEL_S = 0
const GPIO_EXT_ETM_CH1_EVENT_EN_S = 7
const GPIO_EXT_ETM_CH2_EVENT_SEL_S = 0
const GPIO_EXT_ETM_CH2_EVENT_EN_S = 7
const GPIO_EXT_ETM_CH3_EVENT_SEL_S = 0
const GPIO_EXT_ETM_CH3_EVENT_EN_S = 7
const GPIO_EXT_ETM_CH4_EVENT_SEL_S = 0
const GPIO_EXT_ETM_CH4_EVENT_EN_S = 7
const GPIO_EXT_ETM_CH5_EVENT_SEL_S = 0
const GPIO_EXT_ETM_CH5_EVENT_EN_S = 7
const GPIO_EXT_ETM_CH6_EVENT_SEL_S = 0
const GPIO_EXT_ETM_CH6_EVENT_EN_S = 7
const GPIO_EXT_ETM_CH7_EVENT_SEL_S = 0
const GPIO_EXT_ETM_CH7_EVENT_EN_S = 7
const GPIO_EXT_ETM_TASK_GPIO0_EN_S = 0
const GPIO_EXT_ETM_TASK_GPIO0_SEL_S = 1
const GPIO_EXT_ETM_TASK_GPIO1_EN_S = 8
const GPIO_EXT_ETM_TASK_GPIO1_SEL_S = 9
const GPIO_EXT_ETM_TASK_GPIO2_EN_S = 16
const GPIO_EXT_ETM_TASK_GPIO2_SEL_S = 17
const GPIO_EXT_ETM_TASK_GPIO3_EN_S = 24
const GPIO_EXT_ETM_TASK_GPIO3_SEL_S = 25
const GPIO_EXT_ETM_TASK_GPIO4_EN_S = 0
const GPIO_EXT_ETM_TASK_GPIO4_SEL_S = 1
const GPIO_EXT_ETM_TASK_GPIO5_EN_S = 8
const GPIO_EXT_ETM_TASK_GPIO5_SEL_S = 9
const GPIO_EXT_ETM_TASK_GPIO6_EN_S = 16
const GPIO_EXT_ETM_TASK_GPIO6_SEL_S = 17
const GPIO_EXT_ETM_TASK_GPIO7_EN_S = 24
const GPIO_EXT_ETM_TASK_GPIO7_SEL_S = 25
const GPIO_EXT_ETM_TASK_GPIO8_EN_S = 0
const GPIO_EXT_ETM_TASK_GPIO8_SEL_S = 1
const GPIO_EXT_ETM_TASK_GPIO9_EN_S = 8
const GPIO_EXT_ETM_TASK_GPIO9_SEL_S = 9
const GPIO_EXT_ETM_TASK_GPIO10_EN_S = 16
const GPIO_EXT_ETM_TASK_GPIO10_SEL_S = 17
const GPIO_EXT_ETM_TASK_GPIO11_EN_S = 24
const GPIO_EXT_ETM_TASK_GPIO11_SEL_S = 25
const GPIO_EXT_ETM_TASK_GPIO12_EN_S = 0
const GPIO_EXT_ETM_TASK_GPIO12_SEL_S = 1
const GPIO_EXT_ETM_TASK_GPIO13_EN_S = 8
const GPIO_EXT_ETM_TASK_GPIO13_SEL_S = 9
const GPIO_EXT_ETM_TASK_GPIO14_EN_S = 16
const GPIO_EXT_ETM_TASK_GPIO14_SEL_S = 17
const GPIO_EXT_ETM_TASK_GPIO15_EN_S = 24
const GPIO_EXT_ETM_TASK_GPIO15_SEL_S = 25
const GPIO_EXT_ETM_TASK_GPIO16_EN_S = 0
const GPIO_EXT_ETM_TASK_GPIO16_SEL_S = 1
const GPIO_EXT_ETM_TASK_GPIO17_EN_S = 8
const GPIO_EXT_ETM_TASK_GPIO17_SEL_S = 9
const GPIO_EXT_ETM_TASK_GPIO18_EN_S = 16
const GPIO_EXT_ETM_TASK_GPIO18_SEL_S = 17
const GPIO_EXT_ETM_TASK_GPIO19_EN_S = 24
const GPIO_EXT_ETM_TASK_GPIO19_SEL_S = 25
const GPIO_EXT_ETM_TASK_GPIO20_EN_S = 0
const GPIO_EXT_ETM_TASK_GPIO20_SEL_S = 1
const GPIO_EXT_ETM_TASK_GPIO21_EN_S = 8
const GPIO_EXT_ETM_TASK_GPIO21_SEL_S = 9
const GPIO_EXT_ETM_TASK_GPIO22_EN_S = 16
const GPIO_EXT_ETM_TASK_GPIO22_SEL_S = 17
const GPIO_EXT_ETM_TASK_GPIO23_EN_S = 24
const GPIO_EXT_ETM_TASK_GPIO23_SEL_S = 25
const GPIO_EXT_ETM_TASK_GPIO24_EN_S = 0
const GPIO_EXT_ETM_TASK_GPIO24_SEL_S = 1
const GPIO_EXT_ETM_TASK_GPIO25_EN_S = 8
const GPIO_EXT_ETM_TASK_GPIO25_SEL_S = 9
const GPIO_EXT_ETM_TASK_GPIO26_EN_S = 16
const GPIO_EXT_ETM_TASK_GPIO26_SEL_S = 17
const GPIO_EXT_ETM_TASK_GPIO27_EN_S = 24
const GPIO_EXT_ETM_TASK_GPIO27_SEL_S = 25
const GPIO_EXT_ETM_TASK_GPIO28_EN_S = 0
const GPIO_EXT_ETM_TASK_GPIO28_SEL_S = 1
const GPIO_EXT_ETM_TASK_GPIO29_EN_S = 8
const GPIO_EXT_ETM_TASK_GPIO29_SEL_S = 9
const GPIO_EXT_ETM_TASK_GPIO30_EN_S = 16
const GPIO_EXT_ETM_TASK_GPIO30_SEL_S = 17
const GPIO_EXT_DATE_S = 0
const HP_SYSTEM_ENABLE_SPI_MANUAL_ENCRYPT_S = 0
const HP_SYSTEM_ENABLE_DOWNLOAD_DB_ENCRYPT_S = 1
const HP_SYSTEM_ENABLE_DOWNLOAD_G0CB_DECRYPT_S = 2
const HP_SYSTEM_ENABLE_DOWNLOAD_MANUAL_ENCRYPT_S = 3
const HP_SYSTEM_CACHE_USAGE_S = 0
const HP_SYSTEM_SRAM_USAGE_S = 8
const HP_SYSTEM_MAC_DUMP_ALLOC_S = 16
const HP_SYSTEM_SEC_DPA_LEVEL_S = 0
const HP_SYSTEM_SEC_DPA_CFG_SEL_S = 2
const HP_SYSTEM_CPU_PERI_TIMEOUT_THRES_S = 0
const HP_SYSTEM_CPU_PERI_TIMEOUT_INT_CLEAR_S = 16
const HP_SYSTEM_CPU_PERI_TIMEOUT_PROTECT_EN_S = 17
const HP_SYSTEM_CPU_PERI_TIMEOUT_ADDR_S = 0
const HP_SYSTEM_CPU_PERI_TIMEOUT_UID_S = 0
const HP_SYSTEM_HP_PERI_TIMEOUT_THRES_S = 0
const HP_SYSTEM_HP_PERI_TIMEOUT_INT_CLEAR_S = 16
const HP_SYSTEM_HP_PERI_TIMEOUT_PROTECT_EN_S = 17
const HP_SYSTEM_HP_PERI_TIMEOUT_ADDR_S = 0
const HP_SYSTEM_HP_PERI_TIMEOUT_UID_S = 0
const HP_SYSTEM_MODEM_PERI_TIMEOUT_THRES_S = 0
const HP_SYSTEM_MODEM_PERI_TIMEOUT_INT_CLEAR_S = 16
const HP_SYSTEM_MODEM_PERI_TIMEOUT_PROTECT_EN_S = 17
const HP_SYSTEM_MODEM_PERI_TIMEOUT_ADDR_S = 0
const HP_SYSTEM_MODEM_PERI_TIMEOUT_UID_S = 0
const HP_SYSTEM_DIS_SDIO_PROB_S = 0
const HP_SYSTEM_SDIO_WIN_ACCESS_EN_S = 1
const HP_SYSTEM_RETENTION_DISABLE_S = 0
const HP_SYSTEM_ROM_TABLE_LOCK_S = 0
const HP_SYSTEM_ROM_TABLE_S = 0
const HP_SYSTEM_CORE_DEBUG_RUNSTALL_ENABLE_S = 0
const HP_SYSTEM_HP_MEM_WPULSE_S = 0
const HP_SYSTEM_HP_MEM_WA_S = 3
const HP_SYSTEM_HP_MEM_RA_S = 6
const HP_SYSTEM_REDCY_ENA_S = 0
const HP_SYSTEM_REDCY_RESULT_S = 1
const HP_SYSTEM_REDCY_LOW_S = 0
const HP_SYSTEM_REDCY_HIGH_S = 0
const HP_SYSTEM_CLK_EN_S = 0
const HP_SYSTEM_DATE_S = 0
const XTS_AES_PLAIN = 0xFFFFFFFF
const XTS_AES_PLAIN_V = 0xFFFFFFFF
const XTS_AES_PLAIN_S = 0
const XTS_AES_LINESIZE = 0x00000003
const XTS_AES_LINESIZE_V = 0x3
const XTS_AES_LINESIZE_S = 0
const XTS_AES_DESTINATION_V = 0x1
const XTS_AES_DESTINATION_S = 0
const XTS_AES_PHYSICAL_ADDRESS = 0x03FFFFFF
const XTS_AES_PHYSICAL_ADDRESS_V = 0x3FFFFFF
const XTS_AES_PHYSICAL_ADDRESS_S = 0
const XTS_AES_TRIGGER_V = 0x1
const XTS_AES_TRIGGER_S = 0
const XTS_AES_RELEASE_V = 0x1
const XTS_AES_RELEASE_S = 0
const XTS_AES_DESTROY_V = 0x1
const XTS_AES_DESTROY_S = 0
const XTS_AES_STATE = 0x00000003
const XTS_AES_STATE_V = 0x3
const XTS_AES_STATE_S = 0
const XTS_AES_DATE = 0x3FFFFFFF
const XTS_AES_DATE_V = 0x3FFFFFFF
const XTS_AES_CRYPT_DPA_SELECT_REGISTER_V = 0x1
const XTS_AES_CRYPT_DPA_SELECT_REGISTER_S = 4
const XTS_AES_CRYPT_CALC_D_DPA_EN_V = 0x1
const XTS_AES_CRYPT_CALC_D_DPA_EN_S = 3
const XTS_AES_CRYPT_SECURITY_LEVEL = 0x00000007
const XTS_AES_CRYPT_SECURITY_LEVEL_V = 0x7
const XTS_AES_CRYPT_SECURITY_LEVEL_S = 0
const ECC_MULT_CALC_DONE_INT_RAW_S = 0
const ECC_MULT_CALC_DONE_INT_ST_S = 0
const ECC_MULT_CALC_DONE_INT_ENA_S = 0
const ECC_MULT_CALC_DONE_INT_CLR_S = 0
const ECC_MULT_START_S = 0
const ECC_MULT_RESET_S = 1
const ECC_MULT_KEY_LENGTH_S = 2
const ECC_MULT_SECURITY_MODE_S = 3
const ECC_MULT_CLK_EN_S = 4
const ECC_MULT_WORK_MODE_S = 5
const ECC_MULT_VERIFICATION_RESULT_S = 8
const ECC_MULT_MEM_CLOCK_GATE_FORCE_ON_S = 31
const ECC_MULT_DATE_S = 0
const ECC_MULT_K_MEM_SIZE_BYTES = 32
const ECC_MULT_PX_MEM_SIZE_BYTES = 32
const ECC_MULT_PY_MEM_SIZE_BYTES = 32
const SLP_OE_V = 1
const SLP_OE_S = 0
const SLP_SEL_V = 1
const SLP_SEL_S = 1
const SLP_PD_V = 1
const SLP_PD_S = 2
const SLP_PU_V = 1
const SLP_PU_S = 3
const SLP_IE_V = 1
const SLP_IE_S = 4
const SLP_DRV = 0x3
const SLP_DRV_V = 0x3
const SLP_DRV_S = 5
const FUN_PD_V = 1
const FUN_PD_S = 7
const FUN_PU_V = 1
const FUN_PU_S = 8
const FUN_IE_V = 1
const FUN_IE_S = 9
const FUN_DRV = 0x3
const FUN_DRV_V = 0x3
const FUN_DRV_S = 10
const MCU_SEL = 0x7
const MCU_SEL_V = 0x7
const MCU_SEL_S = 12
const FILTER_EN_V = 1
const FILTER_EN_S = 15
const PIN_FUNC_GPIO = 1
const SPI_HD_GPIO_NUM = 28
const SPI_WP_GPIO_NUM = 26
const SPI_CS0_GPIO_NUM = 24
const SPI_CLK_GPIO_NUM = 29
const SPI_D_GPIO_NUM = 30
const SPI_Q_GPIO_NUM = 25
const SD_CLK_GPIO_NUM = 19
const SD_CMD_GPIO_NUM = 18
const SD_DATA0_GPIO_NUM = 20
const SD_DATA1_GPIO_NUM = 21
const SD_DATA2_GPIO_NUM = 22
const SD_DATA3_GPIO_NUM = 23
const USB_INT_PHY0_DM_GPIO_NUM = 12
const USB_INT_PHY0_DP_GPIO_NUM = 13
const EXT_OSC_SLOW_GPIO_NUM = 0
const MAX_RTC_GPIO_NUM = 7
const MAX_PAD_GPIO_NUM = 30
const MAX_GPIO_NUM = 34
const DIG_IO_HOLD_BIT_SHIFT = 32
const CLK_OUT3 = 0x1f
const CLK_OUT3_S = 10
const CLK_OUT2 = 0x1f
const CLK_OUT2_S = 5
const CLK_OUT1 = 0x1f
const CLK_OUT1_S = 0
const FUNC_XTAL_32K_P_GPIO0 = 1
const FUNC_XTAL_32K_P_GPIO0_0 = 0
const FUNC_XTAL_32K_N_GPIO1 = 1
const FUNC_XTAL_32K_N_GPIO1_0 = 0
const FUNC_GPIO2_FSPIQ = 2
const FUNC_GPIO2_GPIO2 = 1
const FUNC_GPIO2_GPIO2_0 = 0
const FUNC_GPIO3_GPIO3 = 1
const FUNC_GPIO3_GPIO3_0 = 0
const FUNC_MTMS_FSPIHD = 2
const FUNC_MTMS_GPIO4 = 1
const FUNC_MTMS_MTMS = 0
const FUNC_MTDI_FSPIWP = 2
const FUNC_MTDI_GPIO5 = 1
const FUNC_MTDI_MTDI = 0
const FUNC_MTCK_FSPICLK = 2
const FUNC_MTCK_GPIO6 = 1
const FUNC_MTCK_MTCK = 0
const FUNC_MTDO_FSPID = 2
const FUNC_MTDO_GPIO7 = 1
const FUNC_MTDO_MTDO = 0
const FUNC_GPIO8_GPIO8 = 1
const FUNC_GPIO8_GPIO8_0 = 0
const FUNC_GPIO9_GPIO9 = 1
const FUNC_GPIO9_GPIO9_0 = 0
const FUNC_GPIO10_GPIO10 = 1
const FUNC_GPIO10_GPIO10_0 = 0
const FUNC_GPIO11_GPIO11 = 1
const FUNC_GPIO11_GPIO11_0 = 0
const FUNC_GPIO12_GPIO12 = 1
const FUNC_GPIO12_GPIO12_0 = 0
const FUNC_GPIO13_GPIO13 = 1
const FUNC_GPIO13_GPIO13_0 = 0
const FUNC_GPIO14_GPIO14 = 1
const FUNC_GPIO14_GPIO14_0 = 0
const FUNC_GPIO15_GPIO15 = 1
const FUNC_GPIO15_GPIO15_0 = 0
const FUNC_U0TXD_FSPICS0 = 2
const FUNC_U0TXD_GPIO16 = 1
const FUNC_U0TXD_U0TXD = 0
const FUNC_U0RXD_FSPICS1 = 2
const FUNC_U0RXD_GPIO17 = 1
const FUNC_U0RXD_U0RXD = 0
const FUNC_SDIO_CMD_FSPICS2 = 2
const FUNC_SDIO_CMD_GPIO18 = 1
const FUNC_SDIO_CMD_SDIO_CMD = 0
const FUNC_SDIO_CLK_FSPICS3 = 2
const FUNC_SDIO_CLK_GPIO19 = 1
const FUNC_SDIO_CLK_SDIO_CLK = 0
const FUNC_SDIO_DATA0_FSPICS4 = 2
const FUNC_SDIO_DATA0_GPIO20 = 1
const FUNC_SDIO_DATA0_SDIO_DATA0 = 0
const FUNC_SDIO_DATA1_FSPICS5 = 2
const FUNC_SDIO_DATA1_GPIO21 = 1
const FUNC_SDIO_DATA1_SDIO_DATA1 = 0
const FUNC_SDIO_DATA2_GPIO22 = 1
const FUNC_SDIO_DATA2_SDIO_DATA2 = 0
const FUNC_SDIO_DATA3_GPIO23 = 1
const FUNC_SDIO_DATA3_SDIO_DATA3 = 0
const FUNC_SPICS0_GPIO24 = 1
const FUNC_SPICS0_SPICS0 = 0
const FUNC_SPIQ_GPIO25 = 1
const FUNC_SPIQ_SPIQ = 0
const FUNC_SPIWP_GPIO26 = 1
const FUNC_SPIWP_SPIWP = 0
const FUNC_VDD_SPI_GPIO27 = 1
const FUNC_VDD_SPI_GPIO27_0 = 0
const FUNC_SPIHD_GPIO28 = 1
const FUNC_SPIHD_SPIHD = 0
const FUNC_SPICLK_GPIO29 = 1
const FUNC_SPICLK_SPICLK = 0
const FUNC_SPID_GPIO30 = 1
const FUNC_SPID_SPID = 0
const IO_MUX_CLK_OUT1_S = 0
const IO_MUX_CLK_OUT2_S = 5
const IO_MUX_CLK_OUT3_S = 10
const IO_MUX_MODEM_DIAG_EN_S = 0
const IO_MUX_REG_DATE_S = 0
const EXT_ADC_START_IDX = 0
const LEDC_LS_SIG_OUT0_IDX = 0
const LEDC_LS_SIG_OUT1_IDX = 1
const LEDC_LS_SIG_OUT2_IDX = 2
const LEDC_LS_SIG_OUT3_IDX = 3
const LEDC_LS_SIG_OUT4_IDX = 4
const LEDC_LS_SIG_OUT5_IDX = 5
const U0RXD_IN_IDX = 6
const U0TXD_OUT_IDX = 6
const U0CTS_IN_IDX = 7
const U0RTS_OUT_IDX = 7
const U0DSR_IN_IDX = 8
const U0DTR_OUT_IDX = 8
const U1RXD_IN_IDX = 9
const U1TXD_OUT_IDX = 9
const U1CTS_IN_IDX = 10
const U1RTS_OUT_IDX = 10
const U1DSR_IN_IDX = 11
const U1DTR_OUT_IDX = 11
const I2S_MCLK_IN_IDX = 12
const I2S_MCLK_OUT_IDX = 12
const I2SO_BCK_IN_IDX = 13
const I2SO_BCK_OUT_IDX = 13
const I2SO_WS_IN_IDX = 14
const I2SO_WS_OUT_IDX = 14
const I2SI_SD_IN_IDX = 15
const I2SO_SD_OUT_IDX = 15
const I2SI_BCK_IN_IDX = 16
const I2SI_BCK_OUT_IDX = 16
const I2SI_WS_IN_IDX = 17
const I2SI_WS_OUT_IDX = 17
const I2SO_SD1_OUT_IDX = 18
const USB_JTAG_TDO_BRIDGE_IDX = 19
const USB_JTAG_TRST_IDX = 19
const CPU_TESTBUS0_IDX = 20
const CPU_TESTBUS1_IDX = 21
const CPU_TESTBUS2_IDX = 22
const CPU_TESTBUS3_IDX = 23
const CPU_TESTBUS4_IDX = 24
const CPU_TESTBUS5_IDX = 25
const CPU_TESTBUS6_IDX = 26
const CPU_TESTBUS7_IDX = 27
const CPU_GPIO_IN0_IDX = 28
const CPU_GPIO_OUT0_IDX = 28
const CPU_GPIO_IN1_IDX = 29
const CPU_GPIO_OUT1_IDX = 29
const CPU_GPIO_IN2_IDX = 30
const CPU_GPIO_OUT2_IDX = 30
const CPU_GPIO_IN3_IDX = 31
const CPU_GPIO_OUT3_IDX = 31
const CPU_GPIO_IN4_IDX = 32
const CPU_GPIO_OUT4_IDX = 32
const CPU_GPIO_IN5_IDX = 33
const CPU_GPIO_OUT5_IDX = 33
const CPU_GPIO_IN6_IDX = 34
const CPU_GPIO_OUT6_IDX = 34
const CPU_GPIO_IN7_IDX = 35
const CPU_GPIO_OUT7_IDX = 35
const USB_JTAG_TCK_IDX = 36
const USB_JTAG_TMS_IDX = 37
const USB_JTAG_TDI_IDX = 38
const USB_JTAG_TDO_IDX = 39
const USB_EXTPHY_VP_IDX = 40
const USB_EXTPHY_OEN_IDX = 40
const USB_EXTPHY_VM_IDX = 41
const USB_EXTPHY_SPEED_IDX = 41
const USB_EXTPHY_RCV_IDX = 42
const USB_EXTPHY_VPO_IDX = 42
const USB_EXTPHY_VMO_IDX = 43
const USB_EXTPHY_SUSPND_IDX = 44
const I2CEXT0_SCL_IN_IDX = 45
const I2CEXT0_SCL_OUT_IDX = 45
const I2CEXT0_SDA_IN_IDX = 46
const I2CEXT0_SDA_OUT_IDX = 46
const PARL_RX_DATA0_IDX = 47
const PARL_TX_DATA0_IDX = 47
const PARL_RX_DATA1_IDX = 48
const PARL_TX_DATA1_IDX = 48
const PARL_RX_DATA2_IDX = 49
const PARL_TX_DATA2_IDX = 49
const PARL_RX_DATA3_IDX = 50
const PARL_TX_DATA3_IDX = 50
const PARL_RX_DATA4_IDX = 51
const PARL_TX_DATA4_IDX = 51
const PARL_RX_DATA5_IDX = 52
const PARL_TX_DATA5_IDX = 52
const PARL_RX_DATA6_IDX = 53
const PARL_TX_DATA6_IDX = 53
const PARL_RX_DATA7_IDX = 54
const PARL_TX_DATA7_IDX = 54
const PARL_RX_DATA8_IDX = 55
const PARL_TX_DATA8_IDX = 55
const PARL_RX_DATA9_IDX = 56
const PARL_TX_DATA9_IDX = 56
const PARL_RX_DATA10_IDX = 57
const PARL_TX_DATA10_IDX = 57
const PARL_RX_DATA11_IDX = 58
const PARL_TX_DATA11_IDX = 58
const PARL_RX_DATA12_IDX = 59
const PARL_TX_DATA12_IDX = 59
const PARL_RX_DATA13_IDX = 60
const PARL_TX_DATA13_IDX = 60
const PARL_RX_DATA14_IDX = 61
const PARL_TX_DATA14_IDX = 61
const PARL_RX_DATA15_IDX = 62
const PARL_TX_DATA15_IDX = 62
const FSPICLK_IN_IDX = 63
const FSPICLK_OUT_IDX = 63
const FSPIQ_IN_IDX = 64
const FSPIQ_OUT_IDX = 64
const FSPID_IN_IDX = 65
const FSPID_OUT_IDX = 65
const FSPIHD_IN_IDX = 66
const FSPIHD_OUT_IDX = 66
const FSPIWP_IN_IDX = 67
const FSPIWP_OUT_IDX = 67
const FSPICS0_IN_IDX = 68
const FSPICS0_OUT_IDX = 68
const PARL_RX_CLK_IN_IDX = 69
const SDIO_TOHOST_INT_OUT_IDX = 69
const PARL_TX_CLK_IN_IDX = 70
const PARL_TX_CLK_OUT_IDX = 70
const RMT_SIG_IN0_IDX = 71
const RMT_SIG_OUT0_IDX = 71
const MODEM_DIAG0_IDX = 71
const RMT_SIG_IN1_IDX = 72
const RMT_SIG_OUT1_IDX = 72
const MODEM_DIAG1_IDX = 72
const TWAI0_RX_IDX = 73
const TWAI0_TX_IDX = 73
const MODEM_DIAG2_IDX = 73
const TWAI0_BUS_OFF_ON_IDX = 74
const MODEM_DIAG3_IDX = 74
const TWAI0_CLKOUT_IDX = 75
const MODEM_DIAG4_IDX = 75
const TWAI0_STANDBY_IDX = 76
const MODEM_DIAG5_IDX = 76
const TWAI1_RX_IDX = 77
const TWAI1_TX_IDX = 77
const MODEM_DIAG6_IDX = 77
const TWAI1_BUS_OFF_ON_IDX = 78
const MODEM_DIAG7_IDX = 78
const TWAI1_CLKOUT_IDX = 79
const MODEM_DIAG8_IDX = 79
const TWAI1_STANDBY_IDX = 80
const MODEM_DIAG9_IDX = 80
const EXTERN_PRIORITY_I_IDX = 81
const EXTERN_PRIORITY_O_IDX = 81
const EXTERN_ACTIVE_I_IDX = 82
const EXTERN_ACTIVE_O_IDX = 82
const GPIO_SD0_OUT_IDX = 83
const GPIO_SD1_OUT_IDX = 84
const GPIO_SD2_OUT_IDX = 85
const GPIO_SD3_OUT_IDX = 86
const PWM0_SYNC0_IN_IDX = 87
const PWM0_OUT0A_IDX = 87
const MODEM_DIAG10_IDX = 87
const PWM0_SYNC1_IN_IDX = 88
const PWM0_OUT0B_IDX = 88
const MODEM_DIAG11_IDX = 88
const PWM0_SYNC2_IN_IDX = 89
const PWM0_OUT1A_IDX = 89
const MODEM_DIAG12_IDX = 89
const PWM0_F0_IN_IDX = 90
const PWM0_OUT1B_IDX = 90
const MODEM_DIAG13_IDX = 90
const PWM0_F1_IN_IDX = 91
const PWM0_OUT2A_IDX = 91
const MODEM_DIAG14_IDX = 91
const PWM0_F2_IN_IDX = 92
const PWM0_OUT2B_IDX = 92
const MODEM_DIAG15_IDX = 92
const PWM0_CAP0_IN_IDX = 93
const ANT_SEL0_IDX = 93
const PWM0_CAP1_IN_IDX = 94
const ANT_SEL1_IDX = 94
const PWM0_CAP2_IN_IDX = 95
const ANT_SEL2_IDX = 95
const ANT_SEL3_IDX = 96
const SIG_IN_FUNC_97_IDX = 97
const SIG_IN_FUNC97_IDX = 97
const SIG_IN_FUNC_98_IDX = 98
const SIG_IN_FUNC98_IDX = 98
const SIG_IN_FUNC_99_IDX = 99
const SIG_IN_FUNC99_IDX = 99
const SIG_IN_FUNC_100_IDX = 100
const SIG_IN_FUNC100_IDX = 100
const PCNT_SIG_CH0_IN0_IDX = 101
const FSPICS1_OUT_IDX = 101
const MODEM_DIAG16_IDX = 101
const PCNT_SIG_CH1_IN0_IDX = 102
const FSPICS2_OUT_IDX = 102
const MODEM_DIAG17_IDX = 102
const PCNT_CTRL_CH0_IN0_IDX = 103
const FSPICS3_OUT_IDX = 103
const MODEM_DIAG18_IDX = 103
const PCNT_CTRL_CH1_IN0_IDX = 104
const FSPICS4_OUT_IDX = 104
const MODEM_DIAG19_IDX = 104
const PCNT_SIG_CH0_IN1_IDX = 105
const FSPICS5_OUT_IDX = 105
const MODEM_DIAG20_IDX = 105
const PCNT_SIG_CH1_IN1_IDX = 106
const MODEM_DIAG21_IDX = 106
const PCNT_CTRL_CH0_IN1_IDX = 107
const MODEM_DIAG22_IDX = 107
const PCNT_CTRL_CH1_IN1_IDX = 108
const MODEM_DIAG23_IDX = 108
const PCNT_SIG_CH0_IN2_IDX = 109
const MODEM_DIAG24_IDX = 109
const PCNT_SIG_CH1_IN2_IDX = 110
const MODEM_DIAG25_IDX = 110
const PCNT_CTRL_CH0_IN2_IDX = 111
const MODEM_DIAG26_IDX = 111
const PCNT_CTRL_CH1_IN2_IDX = 112
const MODEM_DIAG27_IDX = 112
const PCNT_SIG_CH0_IN3_IDX = 113
const MODEM_DIAG28_IDX = 113
const PCNT_SIG_CH1_IN3_IDX = 114
const SPICLK_OUT_IDX = 114
const MODEM_DIAG29_IDX = 114
const PCNT_CTRL_CH0_IN3_IDX = 115
const SPICS0_OUT_IDX = 115
const MODEM_DIAG30_IDX = 115
const PCNT_CTRL_CH1_IN3_IDX = 116
const SPICS1_OUT_IDX = 116
const MODEM_DIAG31_IDX = 116
const GPIO_EVENT_MATRIX_IN0_IDX = 117
const GPIO_TASK_MATRIX_OUT0_IDX = 117
const GPIO_EVENT_MATRIX_IN1_IDX = 118
const GPIO_TASK_MATRIX_OUT1_IDX = 118
const GPIO_EVENT_MATRIX_IN2_IDX = 119
const GPIO_TASK_MATRIX_OUT2_IDX = 119
const GPIO_EVENT_MATRIX_IN3_IDX = 120
const GPIO_TASK_MATRIX_OUT3_IDX = 120
const SPIQ_IN_IDX = 121
const SPIQ_OUT_IDX = 121
const SPID_IN_IDX = 122
const SPID_OUT_IDX = 122
const SPIHD_IN_IDX = 123
const SPIHD_OUT_IDX = 123
const SPIWP_IN_IDX = 124
const SPIWP_OUT_IDX = 124
const CLK_OUT_OUT1_IDX = 125
const CLK_OUT_OUT2_IDX = 126
const CLK_OUT_OUT3_IDX = 127
const SIG_GPIO_OUT_IDX = 128
const GPIO_MAP_DATE_IDX = 0x2201120
const EXTMEM_L1_CACHE_SHUT_DBUS_V = 0x1
const EXTMEM_L1_CACHE_SHUT_DBUS_S = 1
const EXTMEM_L1_CACHE_SHUT_IBUS_V = 0x1
const EXTMEM_L1_CACHE_SHUT_IBUS_S = 0
const EXTMEM_L1_CACHE_WRAP_V = 0x1
const EXTMEM_L1_CACHE_WRAP_S = 4
const EXTMEM_L1_CACHE_TAG_MEM_FORCE_PU_V = 0x1
const EXTMEM_L1_CACHE_TAG_MEM_FORCE_PU_S = 18
const EXTMEM_L1_CACHE_TAG_MEM_FORCE_PD_V = 0x1
const EXTMEM_L1_CACHE_TAG_MEM_FORCE_PD_S = 17
const EXTMEM_L1_CACHE_TAG_MEM_FORCE_ON_V = 0x1
const EXTMEM_L1_CACHE_TAG_MEM_FORCE_ON_S = 16
const EXTMEM_L1_CACHE_DATA_MEM_FORCE_PU_V = 0x1
const EXTMEM_L1_CACHE_DATA_MEM_FORCE_PU_S = 18
const EXTMEM_L1_CACHE_DATA_MEM_FORCE_PD_V = 0x1
const EXTMEM_L1_CACHE_DATA_MEM_FORCE_PD_S = 17
const EXTMEM_L1_CACHE_DATA_MEM_FORCE_ON_V = 0x1
const EXTMEM_L1_CACHE_DATA_MEM_FORCE_ON_S = 16
const EXTMEM_L1_CACHE_FREEZE_DONE_V = 0x1
const EXTMEM_L1_CACHE_FREEZE_DONE_S = 18
const EXTMEM_L1_CACHE_FREEZE_MODE_V = 0x1
const EXTMEM_L1_CACHE_FREEZE_MODE_S = 17
const EXTMEM_L1_CACHE_FREEZE_EN_V = 0x1
const EXTMEM_L1_CACHE_FREEZE_EN_S = 16
const EXTMEM_L1_CACHE_DATA_MEM_WR_EN_V = 0x1
const EXTMEM_L1_CACHE_DATA_MEM_WR_EN_S = 17
const EXTMEM_L1_CACHE_DATA_MEM_RD_EN_V = 0x1
const EXTMEM_L1_CACHE_DATA_MEM_RD_EN_S = 16
const EXTMEM_L1_CACHE_TAG_MEM_WR_EN_V = 0x1
const EXTMEM_L1_CACHE_TAG_MEM_WR_EN_S = 17
const EXTMEM_L1_CACHE_TAG_MEM_RD_EN_V = 0x1
const EXTMEM_L1_CACHE_TAG_MEM_RD_EN_S = 16
const EXTMEM_L1_CACHE_PRELOCK_SCT1_EN_V = 0x1
const EXTMEM_L1_CACHE_PRELOCK_SCT1_EN_S = 1
const EXTMEM_L1_CACHE_PRELOCK_SCT0_EN_V = 0x1
const EXTMEM_L1_CACHE_PRELOCK_SCT0_EN_S = 0
const EXTMEM_L1_CACHE_PRELOCK_SCT0_ADDR = 0xFFFFFFFF
const EXTMEM_L1_CACHE_PRELOCK_SCT0_ADDR_V = 0xFFFFFFFF
const EXTMEM_L1_CACHE_PRELOCK_SCT0_ADDR_S = 0
const EXTMEM_L1_CACHE_PRELOCK_SCT1_ADDR = 0xFFFFFFFF
const EXTMEM_L1_CACHE_PRELOCK_SCT1_ADDR_V = 0xFFFFFFFF
const EXTMEM_L1_CACHE_PRELOCK_SCT1_ADDR_S = 0
const EXTMEM_L1_CACHE_PRELOCK_SCT1_SIZE = 0x00003FFF
const EXTMEM_L1_CACHE_PRELOCK_SCT1_SIZE_V = 0x3FFF
const EXTMEM_L1_CACHE_PRELOCK_SCT1_SIZE_S = 16
const EXTMEM_L1_CACHE_PRELOCK_SCT0_SIZE = 0x00003FFF
const EXTMEM_L1_CACHE_PRELOCK_SCT0_SIZE_V = 0x3FFF
const EXTMEM_L1_CACHE_PRELOCK_SCT0_SIZE_S = 0
const EXTMEM_L1_CACHE_LOCK_DONE_V = 0x1
const EXTMEM_L1_CACHE_LOCK_DONE_S = 2
const EXTMEM_L1_CACHE_UNLOCK_ENA_V = 0x1
const EXTMEM_L1_CACHE_UNLOCK_ENA_S = 1
const EXTMEM_L1_CACHE_LOCK_ENA_V = 0x1
const EXTMEM_L1_CACHE_LOCK_ENA_S = 0
const EXTMEM_L1_CACHE_LOCK_MAP = 0x0000003F
const EXTMEM_L1_CACHE_LOCK_MAP_V = 0x3F
const EXTMEM_L1_CACHE_LOCK_MAP_S = 0
const EXTMEM_L1_CACHE_LOCK_ADDR = 0xFFFFFFFF
const EXTMEM_L1_CACHE_LOCK_ADDR_V = 0xFFFFFFFF
const EXTMEM_L1_CACHE_LOCK_ADDR_S = 0
const EXTMEM_L1_CACHE_LOCK_SIZE = 0x0000FFFF
const EXTMEM_L1_CACHE_LOCK_SIZE_V = 0xFFFF
const EXTMEM_L1_CACHE_LOCK_SIZE_S = 0
const EXTMEM_L1_CACHE_SYNC_DONE_V = 0x1
const EXTMEM_L1_CACHE_SYNC_DONE_S = 4
const EXTMEM_L1_CACHE_WRITEBACK_INVALIDATE_ENA_V = 0x1
const EXTMEM_L1_CACHE_WRITEBACK_INVALIDATE_ENA_S = 3
const EXTMEM_L1_CACHE_WRITEBACK_ENA_V = 0x1
const EXTMEM_L1_CACHE_WRITEBACK_ENA_S = 2
const EXTMEM_L1_CACHE_CLEAN_ENA_V = 0x1
const EXTMEM_L1_CACHE_CLEAN_ENA_S = 1
const EXTMEM_L1_CACHE_INVALIDATE_ENA_V = 0x1
const EXTMEM_L1_CACHE_INVALIDATE_ENA_S = 0
const EXTMEM_L1_CACHE_SYNC_MAP = 0x0000003F
const EXTMEM_L1_CACHE_SYNC_MAP_V = 0x3F
const EXTMEM_L1_CACHE_SYNC_MAP_S = 0
const EXTMEM_L1_CACHE_SYNC_ADDR = 0xFFFFFFFF
const EXTMEM_L1_CACHE_SYNC_ADDR_V = 0xFFFFFFFF
const EXTMEM_L1_CACHE_SYNC_ADDR_S = 0
const EXTMEM_L1_CACHE_SYNC_SIZE = 0x00FFFFFF
const EXTMEM_L1_CACHE_SYNC_SIZE_V = 0xFFFFFF
const EXTMEM_L1_CACHE_SYNC_SIZE_S = 0
const EXTMEM_L1_CACHE_PRELOAD_RGID = 0x0000000F
const EXTMEM_L1_CACHE_PRELOAD_RGID_V = 0xF
const EXTMEM_L1_CACHE_PRELOAD_RGID_S = 3
const EXTMEM_L1_CACHE_PRELOAD_ORDER_V = 0x1
const EXTMEM_L1_CACHE_PRELOAD_ORDER_S = 2
const EXTMEM_L1_CACHE_PRELOAD_DONE_V = 0x1
const EXTMEM_L1_CACHE_PRELOAD_DONE_S = 1
const EXTMEM_L1_CACHE_PRELOAD_ENA_V = 0x1
const EXTMEM_L1_CACHE_PRELOAD_ENA_S = 0
const EXTMEM_L1_CACHE_PRELOAD_ADDR = 0xFFFFFFFF
const EXTMEM_L1_CACHE_PRELOAD_ADDR_V = 0xFFFFFFFF
const EXTMEM_L1_CACHE_PRELOAD_ADDR_S = 0
const EXTMEM_L1_CACHE_PRELOAD_SIZE = 0x00003FFF
const EXTMEM_L1_CACHE_PRELOAD_SIZE_V = 0x3FFF
const EXTMEM_L1_CACHE_PRELOAD_SIZE_S = 0
const EXTMEM_L1_CACHE_AUTOLOAD_SCT1_ENA_V = 0x1
const EXTMEM_L1_CACHE_AUTOLOAD_SCT1_ENA_S = 9
const EXTMEM_L1_CACHE_AUTOLOAD_SCT0_ENA_V = 0x1
const EXTMEM_L1_CACHE_AUTOLOAD_SCT0_ENA_S = 8
const EXTMEM_L1_CACHE_AUTOLOAD_TRIGGER_MODE = 0x00000003
const EXTMEM_L1_CACHE_AUTOLOAD_TRIGGER_MODE_V = 0x3
const EXTMEM_L1_CACHE_AUTOLOAD_TRIGGER_MODE_S = 3
const EXTMEM_L1_CACHE_AUTOLOAD_ORDER_V = 0x1
const EXTMEM_L1_CACHE_AUTOLOAD_ORDER_S = 2
const EXTMEM_L1_CACHE_AUTOLOAD_DONE_V = 0x1
const EXTMEM_L1_CACHE_AUTOLOAD_DONE_S = 1
const EXTMEM_L1_CACHE_AUTOLOAD_ENA_V = 0x1
const EXTMEM_L1_CACHE_AUTOLOAD_ENA_S = 0
const EXTMEM_L1_CACHE_AUTOLOAD_SCT0_ADDR = 0xFFFFFFFF
const EXTMEM_L1_CACHE_AUTOLOAD_SCT0_ADDR_V = 0xFFFFFFFF
const EXTMEM_L1_CACHE_AUTOLOAD_SCT0_ADDR_S = 0
const EXTMEM_L1_CACHE_AUTOLOAD_SCT0_SIZE = 0x0FFFFFFF
const EXTMEM_L1_CACHE_AUTOLOAD_SCT0_SIZE_V = 0xFFFFFFF
const EXTMEM_L1_CACHE_AUTOLOAD_SCT0_SIZE_S = 0
const EXTMEM_L1_CACHE_AUTOLOAD_SCT1_ADDR = 0xFFFFFFFF
const EXTMEM_L1_CACHE_AUTOLOAD_SCT1_ADDR_V = 0xFFFFFFFF
const EXTMEM_L1_CACHE_AUTOLOAD_SCT1_ADDR_S = 0
const EXTMEM_L1_CACHE_AUTOLOAD_SCT1_SIZE = 0x0FFFFFFF
const EXTMEM_L1_CACHE_AUTOLOAD_SCT1_SIZE_V = 0xFFFFFFF
const EXTMEM_L1_CACHE_AUTOLOAD_SCT1_SIZE_S = 0
const EXTMEM_L1_DBUS_OVF_INT_ENA_V = 0x1
const EXTMEM_L1_DBUS_OVF_INT_ENA_S = 5
const EXTMEM_L1_IBUS_OVF_INT_ENA_V = 0x1
const EXTMEM_L1_IBUS_OVF_INT_ENA_S = 4
const EXTMEM_L1_DBUS_OVF_INT_CLR_V = 0x1
const EXTMEM_L1_DBUS_OVF_INT_CLR_S = 5
const EXTMEM_L1_IBUS_OVF_INT_CLR_V = 0x1
const EXTMEM_L1_IBUS_OVF_INT_CLR_S = 4
const EXTMEM_L1_DBUS_OVF_INT_RAW_V = 0x1
const EXTMEM_L1_DBUS_OVF_INT_RAW_S = 5
const EXTMEM_L1_IBUS_OVF_INT_RAW_V = 0x1
const EXTMEM_L1_IBUS_OVF_INT_RAW_S = 4
const EXTMEM_L1_DBUS_OVF_INT_ST_V = 0x1
const EXTMEM_L1_DBUS_OVF_INT_ST_S = 5
const EXTMEM_L1_IBUS_OVF_INT_ST_V = 0x1
const EXTMEM_L1_IBUS_OVF_INT_ST_S = 4
const EXTMEM_L1_CACHE_FAIL_INT_ENA_V = 0x1
const EXTMEM_L1_CACHE_FAIL_INT_ENA_S = 4
const EXTMEM_L1_CACHE_FAIL_INT_CLR_V = 0x1
const EXTMEM_L1_CACHE_FAIL_INT_CLR_S = 4
const EXTMEM_L1_CACHE_FAIL_INT_RAW_V = 0x1
const EXTMEM_L1_CACHE_FAIL_INT_RAW_S = 4
const EXTMEM_L1_CACHE_FAIL_INT_ST_V = 0x1
const EXTMEM_L1_CACHE_FAIL_INT_ST_S = 4
const EXTMEM_L1_DBUS_CNT_CLR_V = 0x1
const EXTMEM_L1_DBUS_CNT_CLR_S = 21
const EXTMEM_L1_IBUS_CNT_CLR_V = 0x1
const EXTMEM_L1_IBUS_CNT_CLR_S = 20
const EXTMEM_L1_DBUS_CNT_ENA_V = 0x1
const EXTMEM_L1_DBUS_CNT_ENA_S = 5
const EXTMEM_L1_IBUS_CNT_ENA_V = 0x1
const EXTMEM_L1_IBUS_CNT_ENA_S = 4
const EXTMEM_L1_IBUS_HIT_CNT = 0xFFFFFFFF
const EXTMEM_L1_IBUS_HIT_CNT_V = 0xFFFFFFFF
const EXTMEM_L1_IBUS_HIT_CNT_S = 0
const EXTMEM_L1_IBUS_MISS_CNT = 0xFFFFFFFF
const EXTMEM_L1_IBUS_MISS_CNT_V = 0xFFFFFFFF
const EXTMEM_L1_IBUS_MISS_CNT_S = 0
const EXTMEM_L1_IBUS_CONFLICT_CNT = 0xFFFFFFFF
const EXTMEM_L1_IBUS_CONFLICT_CNT_V = 0xFFFFFFFF
const EXTMEM_L1_IBUS_CONFLICT_CNT_S = 0
const EXTMEM_L1_IBUS_NXTLVL_CNT = 0xFFFFFFFF
const EXTMEM_L1_IBUS_NXTLVL_CNT_V = 0xFFFFFFFF
const EXTMEM_L1_IBUS_NXTLVL_CNT_S = 0
const EXTMEM_L1_DBUS_HIT_CNT = 0xFFFFFFFF
const EXTMEM_L1_DBUS_HIT_CNT_V = 0xFFFFFFFF
const EXTMEM_L1_DBUS_HIT_CNT_S = 0
const EXTMEM_L1_DBUS_MISS_CNT = 0xFFFFFFFF
const EXTMEM_L1_DBUS_MISS_CNT_V = 0xFFFFFFFF
const EXTMEM_L1_DBUS_MISS_CNT_S = 0
const EXTMEM_L1_DBUS_CONFLICT_CNT = 0xFFFFFFFF
const EXTMEM_L1_DBUS_CONFLICT_CNT_V = 0xFFFFFFFF
const EXTMEM_L1_DBUS_CONFLICT_CNT_S = 0
const EXTMEM_L1_DBUS_NXTLVL_CNT = 0xFFFFFFFF
const EXTMEM_L1_DBUS_NXTLVL_CNT_V = 0xFFFFFFFF
const EXTMEM_L1_DBUS_NXTLVL_CNT_S = 0
const EXTMEM_L1_CACHE_FAIL_ATTR = 0x0000FFFF
const EXTMEM_L1_CACHE_FAIL_ATTR_V = 0xFFFF
const EXTMEM_L1_CACHE_FAIL_ATTR_S = 16
const EXTMEM_L1_CACHE_FAIL_ID = 0x0000FFFF
const EXTMEM_L1_CACHE_FAIL_ID_V = 0xFFFF
const EXTMEM_L1_CACHE_FAIL_ID_S = 0
const EXTMEM_L1_CACHE_FAIL_ADDR = 0xFFFFFFFF
const EXTMEM_L1_CACHE_FAIL_ADDR_V = 0xFFFFFFFF
const EXTMEM_L1_CACHE_FAIL_ADDR_S = 0
const EXTMEM_L1_CACHE_SYNC_ERR_INT_ENA_V = 0x1
const EXTMEM_L1_CACHE_SYNC_ERR_INT_ENA_S = 13
const EXTMEM_L1_CACHE_PLD_ERR_INT_ENA_V = 0x1
const EXTMEM_L1_CACHE_PLD_ERR_INT_ENA_S = 11
const EXTMEM_L1_CACHE_SYNC_DONE_INT_ENA_V = 0x1
const EXTMEM_L1_CACHE_SYNC_DONE_INT_ENA_S = 6
const EXTMEM_L1_CACHE_PLD_DONE_INT_ENA_V = 0x1
const EXTMEM_L1_CACHE_PLD_DONE_INT_ENA_S = 4
const EXTMEM_L1_CACHE_SYNC_ERR_INT_CLR_V = 0x1
const EXTMEM_L1_CACHE_SYNC_ERR_INT_CLR_S = 13
const EXTMEM_L1_CACHE_PLD_ERR_INT_CLR_V = 0x1
const EXTMEM_L1_CACHE_PLD_ERR_INT_CLR_S = 11
const EXTMEM_L1_CACHE_SYNC_DONE_INT_CLR_V = 0x1
const EXTMEM_L1_CACHE_SYNC_DONE_INT_CLR_S = 6
const EXTMEM_L1_CACHE_PLD_DONE_INT_CLR_V = 0x1
const EXTMEM_L1_CACHE_PLD_DONE_INT_CLR_S = 4
const EXTMEM_L1_CACHE_SYNC_ERR_INT_RAW_V = 0x1
const EXTMEM_L1_CACHE_SYNC_ERR_INT_RAW_S = 13
const EXTMEM_L1_CACHE_PLD_ERR_INT_RAW_V = 0x1
const EXTMEM_L1_CACHE_PLD_ERR_INT_RAW_S = 11
const EXTMEM_L1_CACHE_SYNC_DONE_INT_RAW_V = 0x1
const EXTMEM_L1_CACHE_SYNC_DONE_INT_RAW_S = 6
const EXTMEM_L1_CACHE_PLD_DONE_INT_RAW_V = 0x1
const EXTMEM_L1_CACHE_PLD_DONE_INT_RAW_S = 4
const EXTMEM_L1_CACHE_SYNC_ERR_INT_ST_V = 0x1
const EXTMEM_L1_CACHE_SYNC_ERR_INT_ST_S = 13
const EXTMEM_L1_CACHE_PLD_ERR_INT_ST_V = 0x1
const EXTMEM_L1_CACHE_PLD_ERR_INT_ST_S = 11
const EXTMEM_L1_CACHE_SYNC_DONE_INT_ST_V = 0x1
const EXTMEM_L1_CACHE_SYNC_DONE_INT_ST_S = 6
const EXTMEM_L1_CACHE_PLD_DONE_INT_ST_V = 0x1
const EXTMEM_L1_CACHE_PLD_DONE_INT_ST_S = 4
const EXTMEM_L1_CACHE_SYNC_ERR_CODE = 0x00000003
const EXTMEM_L1_CACHE_SYNC_ERR_CODE_V = 0x3
const EXTMEM_L1_CACHE_SYNC_ERR_CODE_S = 12
const EXTMEM_L1_CACHE_PLD_ERR_CODE = 0x00000003
const EXTMEM_L1_CACHE_PLD_ERR_CODE_V = 0x3
const EXTMEM_L1_CACHE_PLD_ERR_CODE_S = 8
const EXTMEM_L1_CACHE_SYNC_RST_V = 0x1
const EXTMEM_L1_CACHE_SYNC_RST_S = 4
const EXTMEM_L1_CACHE_PLD_RST_V = 0x1
const EXTMEM_L1_CACHE_PLD_RST_S = 4
const EXTMEM_L1_CACHE_ALD_BUF_CLR_V = 0x1
const EXTMEM_L1_CACHE_ALD_BUF_CLR_S = 4
const EXTMEM_L1_CACHE_UNALLOC_CLR_V = 0x1
const EXTMEM_L1_CACHE_UNALLOC_CLR_S = 4
const EXTMEM_L1_CACHE_MEM_OBJECT_V = 0x1
const EXTMEM_L1_CACHE_MEM_OBJECT_S = 10
const EXTMEM_L1_CACHE_TAG_OBJECT_V = 0x1
const EXTMEM_L1_CACHE_TAG_OBJECT_S = 4
const EXTMEM_L1_CACHE_WAY_OBJECT = 0x00000007
const EXTMEM_L1_CACHE_WAY_OBJECT_V = 0x7
const EXTMEM_L1_CACHE_WAY_OBJECT_S = 0
const EXTMEM_L1_CACHE_VADDR = 0xFFFFFFFF
const EXTMEM_L1_CACHE_VADDR_V = 0xFFFFFFFF
const EXTMEM_L1_CACHE_VADDR_S = 0
const EXTMEM_L1_CACHE_DEBUG_BUS = 0xFFFFFFFF
const EXTMEM_L1_CACHE_DEBUG_BUS_V = 0xFFFFFFFF
const EXTMEM_L1_CACHE_DEBUG_BUS_S = 0
const EXTMEM_DATE = 0x0FFFFFFF
const EXTMEM_DATE_V = 0xFFFFFFF
const EXTMEM_DATE_S = 0
const SOC_MMU_PAGE_SIZE = 0x10000
const SOC_IRAM0_CACHE_ADDRESS_LOW = 0x42000000
const SOC_MMU_ACCESS_FLASH = 0
const SOC_MMU_INVALID = 0
const SOC_MMU_VALID_VAL_MASK = 0x1ff
const SOC_MMU_MAX_PADDR_PAGE_NUM = 256
const SOC_MMU_ENTRY_NUM = 256
const SOC_MMU_DBUS_VADDR_BASE = 0x42000000
const SOC_MMU_IBUS_VADDR_BASE = 0x42000000
const SOC_MMU_LINEAR_ADDR_MASK = 0x7FFFFF
const CACHE_IROM_MMU_START = 0
const CACHE_DROM_MMU_MAX_END = 0x400
const ICACHE_MMU_SIZE = 0x200
const DCACHE_MMU_SIZE = 0x200
const MIN_ICACHE_SIZE = 16384
const MAX_ICACHE_SIZE = 16384
const MIN_ICACHE_WAYS = 8
const MAX_ICACHE_WAYS = 8
const MAX_CACHE_WAYS = 8
const MIN_CACHE_LINE_SIZE = 32
const TAG_SIZE = 4
const MIN_ICACHE_BANK_NUM = 1
const MAX_ICACHE_BANK_NUM = 1
const CACHE_MEMORY_BANK_NUM = 1
const CACHE_MEMORY_IBANK_SIZE = 0x4000
const ESP_ROM_ERR_INVALID_ARG = 1
const MMU_SET_ADDR_ALIGNED_ERROR = 2
const MMU_SET_PASE_SIZE_ERROR = 3
const MMU_SET_VADDR_OUT_RANGE = 4
const CACHE_OP_ICACHE_Y = 1
const CACHE_OP_ICACHE_N = 0
const GDMA_IN_DONE_CH0_INT_RAW_S = 0
const GDMA_IN_SUC_EOF_CH0_INT_RAW_S = 1
const GDMA_IN_ERR_EOF_CH0_INT_RAW_S = 2
const GDMA_IN_DSCR_ERR_CH0_INT_RAW_S = 3
const GDMA_IN_DSCR_EMPTY_CH0_INT_RAW_S = 4
const GDMA_INFIFO_OVF_CH0_INT_RAW_S = 5
const GDMA_INFIFO_UDF_CH0_INT_RAW_S = 6
const GDMA_IN_DONE_CH0_INT_ST_S = 0
const GDMA_IN_SUC_EOF_CH0_INT_ST_S = 1
const GDMA_IN_ERR_EOF_CH0_INT_ST_S = 2
const GDMA_IN_DSCR_ERR_CH0_INT_ST_S = 3
const GDMA_IN_DSCR_EMPTY_CH0_INT_ST_S = 4
const GDMA_INFIFO_OVF_CH0_INT_ST_S = 5
const GDMA_INFIFO_UDF_CH0_INT_ST_S = 6
const GDMA_IN_DONE_CH0_INT_ENA_S = 0
const GDMA_IN_SUC_EOF_CH0_INT_ENA_S = 1
const GDMA_IN_ERR_EOF_CH0_INT_ENA_S = 2
const GDMA_IN_DSCR_ERR_CH0_INT_ENA_S = 3
const GDMA_IN_DSCR_EMPTY_CH0_INT_ENA_S = 4
const GDMA_INFIFO_OVF_CH0_INT_ENA_S = 5
const GDMA_INFIFO_UDF_CH0_INT_ENA_S = 6
const GDMA_IN_DONE_CH0_INT_CLR_S = 0
const GDMA_IN_SUC_EOF_CH0_INT_CLR_S = 1
const GDMA_IN_ERR_EOF_CH0_INT_CLR_S = 2
const GDMA_IN_DSCR_ERR_CH0_INT_CLR_S = 3
const GDMA_IN_DSCR_EMPTY_CH0_INT_CLR_S = 4
const GDMA_INFIFO_OVF_CH0_INT_CLR_S = 5
const GDMA_INFIFO_UDF_CH0_INT_CLR_S = 6
const GDMA_IN_DONE_CH1_INT_RAW_S = 0
const GDMA_IN_SUC_EOF_CH1_INT_RAW_S = 1
const GDMA_IN_ERR_EOF_CH1_INT_RAW_S = 2
const GDMA_IN_DSCR_ERR_CH1_INT_RAW_S = 3
const GDMA_IN_DSCR_EMPTY_CH1_INT_RAW_S = 4
const GDMA_INFIFO_OVF_CH1_INT_RAW_S = 5
const GDMA_INFIFO_UDF_CH1_INT_RAW_S = 6
const GDMA_IN_DONE_CH1_INT_ST_S = 0
const GDMA_IN_SUC_EOF_CH1_INT_ST_S = 1
const GDMA_IN_ERR_EOF_CH1_INT_ST_S = 2
const GDMA_IN_DSCR_ERR_CH1_INT_ST_S = 3
const GDMA_IN_DSCR_EMPTY_CH1_INT_ST_S = 4
const GDMA_INFIFO_OVF_CH1_INT_ST_S = 5
const GDMA_INFIFO_UDF_CH1_INT_ST_S = 6
const GDMA_IN_DONE_CH1_INT_ENA_S = 0
const GDMA_IN_SUC_EOF_CH1_INT_ENA_S = 1
const GDMA_IN_ERR_EOF_CH1_INT_ENA_S = 2
const GDMA_IN_DSCR_ERR_CH1_INT_ENA_S = 3
const GDMA_IN_DSCR_EMPTY_CH1_INT_ENA_S = 4
const GDMA_INFIFO_OVF_CH1_INT_ENA_S = 5
const GDMA_INFIFO_UDF_CH1_INT_ENA_S = 6
const GDMA_IN_DONE_CH1_INT_CLR_S = 0
const GDMA_IN_SUC_EOF_CH1_INT_CLR_S = 1
const GDMA_IN_ERR_EOF_CH1_INT_CLR_S = 2
const GDMA_IN_DSCR_ERR_CH1_INT_CLR_S = 3
const GDMA_IN_DSCR_EMPTY_CH1_INT_CLR_S = 4
const GDMA_INFIFO_OVF_CH1_INT_CLR_S = 5
const GDMA_INFIFO_UDF_CH1_INT_CLR_S = 6
const GDMA_IN_DONE_CH2_INT_RAW_S = 0
const GDMA_IN_SUC_EOF_CH2_INT_RAW_S = 1
const GDMA_IN_ERR_EOF_CH2_INT_RAW_S = 2
const GDMA_IN_DSCR_ERR_CH2_INT_RAW_S = 3
const GDMA_IN_DSCR_EMPTY_CH2_INT_RAW_S = 4
const GDMA_INFIFO_OVF_CH2_INT_RAW_S = 5
const GDMA_INFIFO_UDF_CH2_INT_RAW_S = 6
const GDMA_IN_DONE_CH2_INT_ST_S = 0
const GDMA_IN_SUC_EOF_CH2_INT_ST_S = 1
const GDMA_IN_ERR_EOF_CH2_INT_ST_S = 2
const GDMA_IN_DSCR_ERR_CH2_INT_ST_S = 3
const GDMA_IN_DSCR_EMPTY_CH2_INT_ST_S = 4
const GDMA_INFIFO_OVF_CH2_INT_ST_S = 5
const GDMA_INFIFO_UDF_CH2_INT_ST_S = 6
const GDMA_IN_DONE_CH2_INT_ENA_S = 0
const GDMA_IN_SUC_EOF_CH2_INT_ENA_S = 1
const GDMA_IN_ERR_EOF_CH2_INT_ENA_S = 2
const GDMA_IN_DSCR_ERR_CH2_INT_ENA_S = 3
const GDMA_IN_DSCR_EMPTY_CH2_INT_ENA_S = 4
const GDMA_INFIFO_OVF_CH2_INT_ENA_S = 5
const GDMA_INFIFO_UDF_CH2_INT_ENA_S = 6
const GDMA_IN_DONE_CH2_INT_CLR_S = 0
const GDMA_IN_SUC_EOF_CH2_INT_CLR_S = 1
const GDMA_IN_ERR_EOF_CH2_INT_CLR_S = 2
const GDMA_IN_DSCR_ERR_CH2_INT_CLR_S = 3
const GDMA_IN_DSCR_EMPTY_CH2_INT_CLR_S = 4
const GDMA_INFIFO_OVF_CH2_INT_CLR_S = 5
const GDMA_INFIFO_UDF_CH2_INT_CLR_S = 6
const GDMA_OUT_DONE_CH0_INT_RAW_S = 0
const GDMA_OUT_EOF_CH0_INT_RAW_S = 1
const GDMA_OUT_DSCR_ERR_CH0_INT_RAW_S = 2
const GDMA_OUT_TOTAL_EOF_CH0_INT_RAW_S = 3
const GDMA_OUTFIFO_OVF_CH0_INT_RAW_S = 4
const GDMA_OUTFIFO_UDF_CH0_INT_RAW_S = 5
const GDMA_OUT_DONE_CH0_INT_ST_S = 0
const GDMA_OUT_EOF_CH0_INT_ST_S = 1
const GDMA_OUT_DSCR_ERR_CH0_INT_ST_S = 2
const GDMA_OUT_TOTAL_EOF_CH0_INT_ST_S = 3
const GDMA_OUTFIFO_OVF_CH0_INT_ST_S = 4
const GDMA_OUTFIFO_UDF_CH0_INT_ST_S = 5
const GDMA_OUT_DONE_CH0_INT_ENA_S = 0
const GDMA_OUT_EOF_CH0_INT_ENA_S = 1
const GDMA_OUT_DSCR_ERR_CH0_INT_ENA_S = 2
const GDMA_OUT_TOTAL_EOF_CH0_INT_ENA_S = 3
const GDMA_OUTFIFO_OVF_CH0_INT_ENA_S = 4
const GDMA_OUTFIFO_UDF_CH0_INT_ENA_S = 5
const GDMA_OUT_DONE_CH0_INT_CLR_S = 0
const GDMA_OUT_EOF_CH0_INT_CLR_S = 1
const GDMA_OUT_DSCR_ERR_CH0_INT_CLR_S = 2
const GDMA_OUT_TOTAL_EOF_CH0_INT_CLR_S = 3
const GDMA_OUTFIFO_OVF_CH0_INT_CLR_S = 4
const GDMA_OUTFIFO_UDF_CH0_INT_CLR_S = 5
const GDMA_OUT_DONE_CH1_INT_RAW_S = 0
const GDMA_OUT_EOF_CH1_INT_RAW_S = 1
const GDMA_OUT_DSCR_ERR_CH1_INT_RAW_S = 2
const GDMA_OUT_TOTAL_EOF_CH1_INT_RAW_S = 3
const GDMA_OUTFIFO_OVF_CH1_INT_RAW_S = 4
const GDMA_OUTFIFO_UDF_CH1_INT_RAW_S = 5
const GDMA_OUT_DONE_CH1_INT_ST_S = 0
const GDMA_OUT_EOF_CH1_INT_ST_S = 1
const GDMA_OUT_DSCR_ERR_CH1_INT_ST_S = 2
const GDMA_OUT_TOTAL_EOF_CH1_INT_ST_S = 3
const GDMA_OUTFIFO_OVF_CH1_INT_ST_S = 4
const GDMA_OUTFIFO_UDF_CH1_INT_ST_S = 5
const GDMA_OUT_DONE_CH1_INT_ENA_S = 0
const GDMA_OUT_EOF_CH1_INT_ENA_S = 1
const GDMA_OUT_DSCR_ERR_CH1_INT_ENA_S = 2
const GDMA_OUT_TOTAL_EOF_CH1_INT_ENA_S = 3
const GDMA_OUTFIFO_OVF_CH1_INT_ENA_S = 4
const GDMA_OUTFIFO_UDF_CH1_INT_ENA_S = 5
const GDMA_OUT_DONE_CH1_INT_CLR_S = 0
const GDMA_OUT_EOF_CH1_INT_CLR_S = 1
const GDMA_OUT_DSCR_ERR_CH1_INT_CLR_S = 2
const GDMA_OUT_TOTAL_EOF_CH1_INT_CLR_S = 3
const GDMA_OUTFIFO_OVF_CH1_INT_CLR_S = 4
const GDMA_OUTFIFO_UDF_CH1_INT_CLR_S = 5
const GDMA_OUT_DONE_CH2_INT_RAW_S = 0
const GDMA_OUT_EOF_CH2_INT_RAW_S = 1
const GDMA_OUT_DSCR_ERR_CH2_INT_RAW_S = 2
const GDMA_OUT_TOTAL_EOF_CH2_INT_RAW_S = 3
const GDMA_OUTFIFO_OVF_CH2_INT_RAW_S = 4
const GDMA_OUTFIFO_UDF_CH2_INT_RAW_S = 5
const GDMA_OUT_DONE_CH2_INT_ST_S = 0
const GDMA_OUT_EOF_CH2_INT_ST_S = 1
const GDMA_OUT_DSCR_ERR_CH2_INT_ST_S = 2
const GDMA_OUT_TOTAL_EOF_CH2_INT_ST_S = 3
const GDMA_OUTFIFO_OVF_CH2_INT_ST_S = 4
const GDMA_OUTFIFO_UDF_CH2_INT_ST_S = 5
const GDMA_OUT_DONE_CH2_INT_ENA_S = 0
const GDMA_OUT_EOF_CH2_INT_ENA_S = 1
const GDMA_OUT_DSCR_ERR_CH2_INT_ENA_S = 2
const GDMA_OUT_TOTAL_EOF_CH2_INT_ENA_S = 3
const GDMA_OUTFIFO_OVF_CH2_INT_ENA_S = 4
const GDMA_OUTFIFO_UDF_CH2_INT_ENA_S = 5
const GDMA_OUT_DONE_CH2_INT_CLR_S = 0
const GDMA_OUT_EOF_CH2_INT_CLR_S = 1
const GDMA_OUT_DSCR_ERR_CH2_INT_CLR_S = 2
const GDMA_OUT_TOTAL_EOF_CH2_INT_CLR_S = 3
const GDMA_OUTFIFO_OVF_CH2_INT_CLR_S = 4
const GDMA_OUTFIFO_UDF_CH2_INT_CLR_S = 5
const GDMA_AHB_TESTMODE_S = 0
const GDMA_AHB_TESTADDR_S = 4
const GDMA_AHBM_RST_INTER_S = 0
const GDMA_ARB_PRI_DIS_S = 2
const GDMA_CLK_EN_S = 3
const GDMA_DATE_S = 0
const GDMA_IN_RST_CH0_S = 0
const GDMA_IN_LOOP_TEST_CH0_S = 1
const GDMA_INDSCR_BURST_EN_CH0_S = 2
const GDMA_IN_DATA_BURST_EN_CH0_S = 3
const GDMA_MEM_TRANS_EN_CH0_S = 4
const GDMA_IN_ETM_EN_CH0_S = 5
const GDMA_IN_CHECK_OWNER_CH0_S = 12
const GDMA_INFIFO_FULL_CH0_S = 0
const GDMA_INFIFO_EMPTY_CH0_S = 1
const GDMA_INFIFO_CNT_CH0_S = 2
const GDMA_IN_REMAIN_UNDER_1B_CH0_S = 23
const GDMA_IN_REMAIN_UNDER_2B_CH0_S = 24
const GDMA_IN_REMAIN_UNDER_3B_CH0_S = 25
const GDMA_IN_REMAIN_UNDER_4B_CH0_S = 26
const GDMA_IN_BUF_HUNGRY_CH0_S = 27
const GDMA_INFIFO_RDATA_CH0_S = 0
const GDMA_INFIFO_POP_CH0_S = 12
const GDMA_INLINK_ADDR_CH0_S = 0
const GDMA_INLINK_AUTO_RET_CH0_S = 20
const GDMA_INLINK_STOP_CH0_S = 21
const GDMA_INLINK_START_CH0_S = 22
const GDMA_INLINK_RESTART_CH0_S = 23
const GDMA_INLINK_PARK_CH0_S = 24
const GDMA_INLINK_DSCR_ADDR_CH0_S = 0
const GDMA_IN_DSCR_STATE_CH0_S = 18
const GDMA_IN_STATE_CH0_S = 20
const GDMA_IN_SUC_EOF_DES_ADDR_CH0_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH0_S = 0
const GDMA_INLINK_DSCR_CH0_S = 0
const GDMA_INLINK_DSCR_BF0_CH0_S = 0
const GDMA_INLINK_DSCR_BF1_CH0_S = 0
const GDMA_RX_PRI_CH0_S = 0
const GDMA_PERI_IN_SEL_CH0_S = 0
const GDMA_OUT_RST_CH0_S = 0
const GDMA_OUT_LOOP_TEST_CH0_S = 1
const GDMA_OUT_AUTO_WRBACK_CH0_S = 2
const GDMA_OUT_EOF_MODE_CH0_S = 3
const GDMA_OUTDSCR_BURST_EN_CH0_S = 4
const GDMA_OUT_DATA_BURST_EN_CH0_S = 5
const GDMA_OUT_ETM_EN_CH0_S = 6
const GDMA_OUT_CHECK_OWNER_CH0_S = 12
const GDMA_OUTFIFO_FULL_CH0_S = 0
const GDMA_OUTFIFO_EMPTY_CH0_S = 1
const GDMA_OUTFIFO_CNT_CH0_S = 2
const GDMA_OUT_REMAIN_UNDER_1B_CH0_S = 23
const GDMA_OUT_REMAIN_UNDER_2B_CH0_S = 24
const GDMA_OUT_REMAIN_UNDER_3B_CH0_S = 25
const GDMA_OUT_REMAIN_UNDER_4B_CH0_S = 26
const GDMA_OUTFIFO_WDATA_CH0_S = 0
const GDMA_OUTFIFO_PUSH_CH0_S = 9
const GDMA_OUTLINK_ADDR_CH0_S = 0
const GDMA_OUTLINK_STOP_CH0_S = 20
const GDMA_OUTLINK_START_CH0_S = 21
const GDMA_OUTLINK_RESTART_CH0_S = 22
const GDMA_OUTLINK_PARK_CH0_S = 23
const GDMA_OUTLINK_DSCR_ADDR_CH0_S = 0
const GDMA_OUT_DSCR_STATE_CH0_S = 18
const GDMA_OUT_STATE_CH0_S = 20
const GDMA_OUT_EOF_DES_ADDR_CH0_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH0_S = 0
const GDMA_OUTLINK_DSCR_CH0_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH0_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH0_S = 0
const GDMA_TX_PRI_CH0_S = 0
const GDMA_PERI_OUT_SEL_CH0_S = 0
const GDMA_IN_RST_CH1_S = 0
const GDMA_IN_LOOP_TEST_CH1_S = 1
const GDMA_INDSCR_BURST_EN_CH1_S = 2
const GDMA_IN_DATA_BURST_EN_CH1_S = 3
const GDMA_MEM_TRANS_EN_CH1_S = 4
const GDMA_IN_ETM_EN_CH1_S = 5
const GDMA_IN_CHECK_OWNER_CH1_S = 12
const GDMA_INFIFO_FULL_CH1_S = 0
const GDMA_INFIFO_EMPTY_CH1_S = 1
const GDMA_INFIFO_CNT_CH1_S = 2
const GDMA_IN_REMAIN_UNDER_1B_CH1_S = 23
const GDMA_IN_REMAIN_UNDER_2B_CH1_S = 24
const GDMA_IN_REMAIN_UNDER_3B_CH1_S = 25
const GDMA_IN_REMAIN_UNDER_4B_CH1_S = 26
const GDMA_IN_BUF_HUNGRY_CH1_S = 27
const GDMA_INFIFO_RDATA_CH1_S = 0
const GDMA_INFIFO_POP_CH1_S = 12
const GDMA_INLINK_ADDR_CH1_S = 0
const GDMA_INLINK_AUTO_RET_CH1_S = 20
const GDMA_INLINK_STOP_CH1_S = 21
const GDMA_INLINK_START_CH1_S = 22
const GDMA_INLINK_RESTART_CH1_S = 23
const GDMA_INLINK_PARK_CH1_S = 24
const GDMA_INLINK_DSCR_ADDR_CH1_S = 0
const GDMA_IN_DSCR_STATE_CH1_S = 18
const GDMA_IN_STATE_CH1_S = 20
const GDMA_IN_SUC_EOF_DES_ADDR_CH1_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH1_S = 0
const GDMA_INLINK_DSCR_CH1_S = 0
const GDMA_INLINK_DSCR_BF0_CH1_S = 0
const GDMA_INLINK_DSCR_BF1_CH1_S = 0
const GDMA_RX_PRI_CH1_S = 0
const GDMA_PERI_IN_SEL_CH1_S = 0
const GDMA_OUT_RST_CH1_S = 0
const GDMA_OUT_LOOP_TEST_CH1_S = 1
const GDMA_OUT_AUTO_WRBACK_CH1_S = 2
const GDMA_OUT_EOF_MODE_CH1_S = 3
const GDMA_OUTDSCR_BURST_EN_CH1_S = 4
const GDMA_OUT_DATA_BURST_EN_CH1_S = 5
const GDMA_OUT_ETM_EN_CH1_S = 6
const GDMA_OUT_CHECK_OWNER_CH1_S = 12
const GDMA_OUTFIFO_FULL_CH1_S = 0
const GDMA_OUTFIFO_EMPTY_CH1_S = 1
const GDMA_OUTFIFO_CNT_CH1_S = 2
const GDMA_OUT_REMAIN_UNDER_1B_CH1_S = 23
const GDMA_OUT_REMAIN_UNDER_2B_CH1_S = 24
const GDMA_OUT_REMAIN_UNDER_3B_CH1_S = 25
const GDMA_OUT_REMAIN_UNDER_4B_CH1_S = 26
const GDMA_OUTFIFO_WDATA_CH1_S = 0
const GDMA_OUTFIFO_PUSH_CH1_S = 9
const GDMA_OUTLINK_ADDR_CH1_S = 0
const GDMA_OUTLINK_STOP_CH1_S = 20
const GDMA_OUTLINK_START_CH1_S = 21
const GDMA_OUTLINK_RESTART_CH1_S = 22
const GDMA_OUTLINK_PARK_CH1_S = 23
const GDMA_OUTLINK_DSCR_ADDR_CH1_S = 0
const GDMA_OUT_DSCR_STATE_CH1_S = 18
const GDMA_OUT_STATE_CH1_S = 20
const GDMA_OUT_EOF_DES_ADDR_CH1_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH1_S = 0
const GDMA_OUTLINK_DSCR_CH1_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH1_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH1_S = 0
const GDMA_TX_PRI_CH1_S = 0
const GDMA_PERI_OUT_SEL_CH1_S = 0
const GDMA_IN_RST_CH2_S = 0
const GDMA_IN_LOOP_TEST_CH2_S = 1
const GDMA_INDSCR_BURST_EN_CH2_S = 2
const GDMA_IN_DATA_BURST_EN_CH2_S = 3
const GDMA_MEM_TRANS_EN_CH2_S = 4
const GDMA_IN_ETM_EN_CH2_S = 5
const GDMA_IN_CHECK_OWNER_CH2_S = 12
const GDMA_INFIFO_FULL_CH2_S = 0
const GDMA_INFIFO_EMPTY_CH2_S = 1
const GDMA_INFIFO_CNT_CH2_S = 2
const GDMA_IN_REMAIN_UNDER_1B_CH2_S = 23
const GDMA_IN_REMAIN_UNDER_2B_CH2_S = 24
const GDMA_IN_REMAIN_UNDER_3B_CH2_S = 25
const GDMA_IN_REMAIN_UNDER_4B_CH2_S = 26
const GDMA_IN_BUF_HUNGRY_CH2_S = 27
const GDMA_INFIFO_RDATA_CH2_S = 0
const GDMA_INFIFO_POP_CH2_S = 12
const GDMA_INLINK_ADDR_CH2_S = 0
const GDMA_INLINK_AUTO_RET_CH2_S = 20
const GDMA_INLINK_STOP_CH2_S = 21
const GDMA_INLINK_START_CH2_S = 22
const GDMA_INLINK_RESTART_CH2_S = 23
const GDMA_INLINK_PARK_CH2_S = 24
const GDMA_INLINK_DSCR_ADDR_CH2_S = 0
const GDMA_IN_DSCR_STATE_CH2_S = 18
const GDMA_IN_STATE_CH2_S = 20
const GDMA_IN_SUC_EOF_DES_ADDR_CH2_S = 0
const GDMA_IN_ERR_EOF_DES_ADDR_CH2_S = 0
const GDMA_INLINK_DSCR_CH2_S = 0
const GDMA_INLINK_DSCR_BF0_CH2_S = 0
const GDMA_INLINK_DSCR_BF1_CH2_S = 0
const GDMA_RX_PRI_CH2_S = 0
const GDMA_PERI_IN_SEL_CH2_S = 0
const GDMA_OUT_RST_CH2_S = 0
const GDMA_OUT_LOOP_TEST_CH2_S = 1
const GDMA_OUT_AUTO_WRBACK_CH2_S = 2
const GDMA_OUT_EOF_MODE_CH2_S = 3
const GDMA_OUTDSCR_BURST_EN_CH2_S = 4
const GDMA_OUT_DATA_BURST_EN_CH2_S = 5
const GDMA_OUT_ETM_EN_CH2_S = 6
const GDMA_OUT_CHECK_OWNER_CH2_S = 12
const GDMA_OUTFIFO_FULL_CH2_S = 0
const GDMA_OUTFIFO_EMPTY_CH2_S = 1
const GDMA_OUTFIFO_CNT_CH2_S = 2
const GDMA_OUT_REMAIN_UNDER_1B_CH2_S = 23
const GDMA_OUT_REMAIN_UNDER_2B_CH2_S = 24
const GDMA_OUT_REMAIN_UNDER_3B_CH2_S = 25
const GDMA_OUT_REMAIN_UNDER_4B_CH2_S = 26
const GDMA_OUTFIFO_WDATA_CH2_S = 0
const GDMA_OUTFIFO_PUSH_CH2_S = 9
const GDMA_OUTLINK_ADDR_CH2_S = 0
const GDMA_OUTLINK_STOP_CH2_S = 20
const GDMA_OUTLINK_START_CH2_S = 21
const GDMA_OUTLINK_RESTART_CH2_S = 22
const GDMA_OUTLINK_PARK_CH2_S = 23
const GDMA_OUTLINK_DSCR_ADDR_CH2_S = 0
const GDMA_OUT_DSCR_STATE_CH2_S = 18
const GDMA_OUT_STATE_CH2_S = 20
const GDMA_OUT_EOF_DES_ADDR_CH2_S = 0
const GDMA_OUT_EOF_BFR_DES_ADDR_CH2_S = 0
const GDMA_OUTLINK_DSCR_CH2_S = 0
const GDMA_OUTLINK_DSCR_BF0_CH2_S = 0
const GDMA_OUTLINK_DSCR_BF1_CH2_S = 0
const GDMA_TX_PRI_CH2_S = 0
const GDMA_PERI_OUT_SEL_CH2_S = 0
const INTMTX_CORE0_WIFI_MAC_INTR_MAP_S = 0
const INTMTX_CORE0_WIFI_MAC_NMI_MAP_S = 0
const INTMTX_CORE0_WIFI_PWR_INTR_MAP_S = 0
const INTMTX_CORE0_WIFI_BB_INTR_MAP_S = 0
const INTMTX_CORE0_BT_MAC_INTR_MAP_S = 0
const INTMTX_CORE0_BT_BB_INTR_MAP_S = 0
const INTMTX_CORE0_BT_BB_NMI_MAP_S = 0
const INTMTX_CORE0_LP_TIMER_INTR_MAP_S = 0
const INTMTX_CORE0_COEX_INTR_MAP_S = 0
const INTMTX_CORE0_BLE_TIMER_INTR_MAP_S = 0
const INTMTX_CORE0_BLE_SEC_INTR_MAP_S = 0
const INTMTX_CORE0_I2C_MST_INTR_MAP_S = 0
const INTMTX_CORE0_ZB_MAC_INTR_MAP_S = 0
const INTMTX_CORE0_PMU_INTR_MAP_S = 0
const INTMTX_CORE0_EFUSE_INTR_MAP_S = 0
const INTMTX_CORE0_LP_RTC_TIMER_INTR_MAP_S = 0
const INTMTX_CORE0_LP_UART_INTR_MAP_S = 0
const INTMTX_CORE0_LP_I2C_INTR_MAP_S = 0
const INTMTX_CORE0_LP_WDT_INTR_MAP_S = 0
const INTMTX_CORE0_LP_PERI_TIMEOUT_INTR_MAP_S = 0
const INTMTX_CORE0_LP_APM_M0_INTR_MAP_S = 0
const INTMTX_CORE0_LP_APM_M1_INTR_MAP_S = 0
const INTMTX_CORE0_CPU_INTR_FROM_CPU_0_MAP_S = 0
const INTMTX_CORE0_CPU_INTR_FROM_CPU_1_MAP_S = 0
const INTMTX_CORE0_CPU_INTR_FROM_CPU_2_MAP_S = 0
const INTMTX_CORE0_CPU_INTR_FROM_CPU_3_MAP_S = 0
const INTMTX_CORE0_ASSIST_DEBUG_INTR_MAP_S = 0
const INTMTX_CORE0_TRACE_INTR_MAP_S = 0
const INTMTX_CORE0_CACHE_INTR_MAP_S = 0
const INTMTX_CORE0_CPU_PERI_TIMEOUT_INTR_MAP_S = 0
const INTMTX_CORE0_GPIO_INTERRUPT_PRO_MAP_S = 0
const INTMTX_CORE0_GPIO_INTERRUPT_PRO_NMI_MAP_S = 0
const INTMTX_CORE0_PAU_INTR_MAP_S = 0
const INTMTX_CORE0_HP_PERI_TIMEOUT_INTR_MAP_S = 0
const INTMTX_CORE0_MODEM_PERI_TIMEOUT_INTR_MAP_S = 0
const INTMTX_CORE0_HP_APM_M0_INTR_MAP_S = 0
const INTMTX_CORE0_HP_APM_M1_INTR_MAP_S = 0
const INTMTX_CORE0_HP_APM_M2_INTR_MAP_S = 0
const INTMTX_CORE0_HP_APM_M3_INTR_MAP_S = 0
const INTMTX_CORE0_LP_APM0_INTR_MAP_S = 0
const INTMTX_CORE0_MSPI_INTR_MAP_S = 0
const INTMTX_CORE0_I2S_INTR_MAP_S = 0
const INTMTX_CORE0_UHCI0_INTR_MAP_S = 0
const INTMTX_CORE0_UART0_INTR_MAP_S = 0
const INTMTX_CORE0_UART1_INTR_MAP_S = 0
const INTMTX_CORE0_LEDC_INTR_MAP_S = 0
const INTMTX_CORE0_CAN0_INTR_MAP_S = 0
const INTMTX_CORE0_CAN1_INTR_MAP_S = 0
const INTMTX_CORE0_USB_INTR_MAP_S = 0
const INTMTX_CORE0_RMT_INTR_MAP_S = 0
const INTMTX_CORE0_I2C_EXT0_INTR_MAP_S = 0
const INTMTX_CORE0_TG0_T0_INTR_MAP_S = 0
const INTMTX_CORE0_TG0_T1_INTR_MAP_S = 0
const INTMTX_CORE0_TG0_WDT_INTR_MAP_S = 0
const INTMTX_CORE0_TG1_T0_INTR_MAP_S = 0
const INTMTX_CORE0_TG1_T1_INTR_MAP_S = 0
const INTMTX_CORE0_TG1_WDT_INTR_MAP_S = 0
const INTMTX_CORE0_SYSTIMER_TARGET0_INTR_MAP_S = 0
const INTMTX_CORE0_SYSTIMER_TARGET1_INTR_MAP_S = 0
const INTMTX_CORE0_SYSTIMER_TARGET2_INTR_MAP_S = 0
const INTMTX_CORE0_APB_ADC_INTR_MAP_S = 0
const INTMTX_CORE0_PWM_INTR_MAP_S = 0
const INTMTX_CORE0_PCNT_INTR_MAP_S = 0
const INTMTX_CORE0_PARL_IO_INTR_MAP_S = 0
const INTMTX_CORE0_SLC0_INTR_MAP_S = 0
const INTMTX_CORE0_SLC1_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_IN_CH0_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_IN_CH1_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_IN_CH2_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_OUT_CH0_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_OUT_CH1_INTR_MAP_S = 0
const INTMTX_CORE0_DMA_OUT_CH2_INTR_MAP_S = 0
const INTMTX_CORE0_GPSPI2_INTR_MAP_S = 0
const INTMTX_CORE0_AES_INTR_MAP_S = 0
const INTMTX_CORE0_SHA_INTR_MAP_S = 0
const INTMTX_CORE0_RSA_INTR_MAP_S = 0
const INTMTX_CORE0_ECC_INTR_MAP_S = 0
const INTMTX_CORE0_INT_STATUS_0_S = 0
const INTMTX_CORE0_INT_STATUS_1_S = 0
const INTMTX_CORE0_INT_STATUS_2_S = 0
const INTMTX_CORE0_REG_CLK_EN_S = 0
const INTMTX_CORE0_INTERRUPT_REG_DATE_S = 0
const PLIC_CPU_MXINT_ENABLE = 0xFFFFFFFF
const PLIC_CPU_MXINT_ENABLE_V = 0xFFFFFFFF
const PLIC_CPU_MXINT_ENABLE_S = 0
const PLIC_CPU_MXINT_TYPE = 0xFFFFFFFF
const PLIC_CPU_MXINT_TYPE_V = 0xFFFFFFFF
const PLIC_CPU_MXINT_TYPE_S = 0
const PLIC_CPU_MXINT_CLEAR = 0xFFFFFFFF
const PLIC_CPU_MXINT_CLEAR_V = 0xFFFFFFFF
const PLIC_CPU_MXINT_CLEAR_S = 0
const PLIC_CPU_EIP_STATUS = 0xFFFFFFFF
const PLIC_CPU_EIP_STATUS_V = 0xFFFFFFFF
const PLIC_CPU_EIP_STATUS_S = 0
const PLIC_CPU_MXINT0_PRI = 0x0000000F
const PLIC_CPU_MXINT0_PRI_V = 0xF
const PLIC_CPU_MXINT0_PRI_S = 0
const PLIC_CPU_MXINT1_PRI = 0x0000000F
const PLIC_CPU_MXINT1_PRI_V = 0xF
const PLIC_CPU_MXINT1_PRI_S = 0
const PLIC_CPU_MXINT2_PRI = 0x0000000F
const PLIC_CPU_MXINT2_PRI_V = 0xF
const PLIC_CPU_MXINT2_PRI_S = 0
const PLIC_CPU_MXINT3_PRI = 0x0000000F
const PLIC_CPU_MXINT3_PRI_V = 0xF
const PLIC_CPU_MXINT3_PRI_S = 0
const PLIC_CPU_MXINT4_PRI = 0x0000000F
const PLIC_CPU_MXINT4_PRI_V = 0xF
const PLIC_CPU_MXINT4_PRI_S = 0
const PLIC_CPU_MXINT5_PRI = 0x0000000F
const PLIC_CPU_MXINT5_PRI_V = 0xF
const PLIC_CPU_MXINT5_PRI_S = 0
const PLIC_CPU_MXINT6_PRI = 0x0000000F
const PLIC_CPU_MXINT6_PRI_V = 0xF
const PLIC_CPU_MXINT6_PRI_S = 0
const PLIC_CPU_MXINT7_PRI = 0x0000000F
const PLIC_CPU_MXINT7_PRI_V = 0xF
const PLIC_CPU_MXINT7_PRI_S = 0
const PLIC_CPU_MXINT8_PRI = 0x0000000F
const PLIC_CPU_MXINT8_PRI_V = 0xF
const PLIC_CPU_MXINT8_PRI_S = 0
const PLIC_CPU_MXINT9_PRI = 0x0000000F
const PLIC_CPU_MXINT9_PRI_V = 0xF
const PLIC_CPU_MXINT9_PRI_S = 0
const PLIC_CPU_MXINT10_PRI = 0x0000000F
const PLIC_CPU_MXINT10_PRI_V = 0xF
const PLIC_CPU_MXINT10_PRI_S = 0
const PLIC_CPU_MXINT11_PRI = 0x0000000F
const PLIC_CPU_MXINT11_PRI_V = 0xF
const PLIC_CPU_MXINT11_PRI_S = 0
const PLIC_CPU_MXINT12_PRI = 0x0000000F
const PLIC_CPU_MXINT12_PRI_V = 0xF
const PLIC_CPU_MXINT12_PRI_S = 0
const PLIC_CPU_MXINT13_PRI = 0x0000000F
const PLIC_CPU_MXINT13_PRI_V = 0xF
const PLIC_CPU_MXINT13_PRI_S = 0
const PLIC_CPU_MXINT14_PRI = 0x0000000F
const PLIC_CPU_MXINT14_PRI_V = 0xF
const PLIC_CPU_MXINT14_PRI_S = 0
const PLIC_CPU_MXINT15_PRI = 0x0000000F
const PLIC_CPU_MXINT15_PRI_V = 0xF
const PLIC_CPU_MXINT15_PRI_S = 0
const PLIC_CPU_MXINT16_PRI = 0x0000000F
const PLIC_CPU_MXINT16_PRI_V = 0xF
const PLIC_CPU_MXINT16_PRI_S = 0
const PLIC_CPU_MXINT17_PRI = 0x0000000F
const PLIC_CPU_MXINT17_PRI_V = 0xF
const PLIC_CPU_MXINT17_PRI_S = 0
const PLIC_CPU_MXINT18_PRI = 0x0000000F
const PLIC_CPU_MXINT18_PRI_V = 0xF
const PLIC_CPU_MXINT18_PRI_S = 0
const PLIC_CPU_MXINT19_PRI = 0x0000000F
const PLIC_CPU_MXINT19_PRI_V = 0xF
const PLIC_CPU_MXINT19_PRI_S = 0
const PLIC_CPU_MXINT20_PRI = 0x0000000F
const PLIC_CPU_MXINT20_PRI_V = 0xF
const PLIC_CPU_MXINT20_PRI_S = 0
const PLIC_CPU_MXINT21_PRI = 0x0000000F
const PLIC_CPU_MXINT21_PRI_V = 0xF
const PLIC_CPU_MXINT21_PRI_S = 0
const PLIC_CPU_MXINT22_PRI = 0x0000000F
const PLIC_CPU_MXINT22_PRI_V = 0xF
const PLIC_CPU_MXINT22_PRI_S = 0
const PLIC_CPU_MXINT23_PRI = 0x0000000F
const PLIC_CPU_MXINT23_PRI_V = 0xF
const PLIC_CPU_MXINT23_PRI_S = 0
const PLIC_CPU_MXINT24_PRI = 0x0000000F
const PLIC_CPU_MXINT24_PRI_V = 0xF
const PLIC_CPU_MXINT24_PRI_S = 0
const PLIC_CPU_MXINT25_PRI = 0x0000000F
const PLIC_CPU_MXINT25_PRI_V = 0xF
const PLIC_CPU_MXINT25_PRI_S = 0
const PLIC_CPU_MXINT26_PRI = 0x0000000F
const PLIC_CPU_MXINT26_PRI_V = 0xF
const PLIC_CPU_MXINT26_PRI_S = 0
const PLIC_CPU_MXINT27_PRI = 0x0000000F
const PLIC_CPU_MXINT27_PRI_V = 0xF
const PLIC_CPU_MXINT27_PRI_S = 0
const PLIC_CPU_MXINT28_PRI = 0x0000000F
const PLIC_CPU_MXINT28_PRI_V = 0xF
const PLIC_CPU_MXINT28_PRI_S = 0
const PLIC_CPU_MXINT29_PRI = 0x0000000F
const PLIC_CPU_MXINT29_PRI_V = 0xF
const PLIC_CPU_MXINT29_PRI_S = 0
const PLIC_CPU_MXINT30_PRI = 0x0000000F
const PLIC_CPU_MXINT30_PRI_V = 0xF
const PLIC_CPU_MXINT30_PRI_S = 0
const PLIC_CPU_MXINT31_PRI = 0x0000000F
const PLIC_CPU_MXINT31_PRI_V = 0xF
const PLIC_CPU_MXINT31_PRI_S = 0
const PLIC_CPU_MXINT_THRESH = 0x000000FF
const PLIC_CPU_MXINT_THRESH_V = 0xFF
const PLIC_CPU_MXINT_THRESH_S = 0
const PLIC_CPU_MXINT_CLAIM = 0xFFFFFFFF
const PLIC_CPU_MXINT_CLAIM_V = 0xFFFFFFFF
const PLIC_CPU_MXINT_CLAIM_S = 0
const PLIC_CPU_UXINT_ENABLE = 0xFFFFFFFF
const PLIC_CPU_UXINT_ENABLE_V = 0xFFFFFFFF
const PLIC_CPU_UXINT_ENABLE_S = 0
const PLIC_CPU_UXINT_TYPE = 0xFFFFFFFF
const PLIC_CPU_UXINT_TYPE_V = 0xFFFFFFFF
const PLIC_CPU_UXINT_TYPE_S = 0
const PLIC_CPU_UXINT_CLEAR = 0xFFFFFFFF
const PLIC_CPU_UXINT_CLEAR_V = 0xFFFFFFFF
const PLIC_CPU_UXINT_CLEAR_S = 0
const PLIC_CPU_UXINT0_PRI = 0x0000000F
const PLIC_CPU_UXINT0_PRI_V = 0xF
const PLIC_CPU_UXINT0_PRI_S = 0
const PLIC_CPU_UXINT1_PRI = 0x0000000F
const PLIC_CPU_UXINT1_PRI_V = 0xF
const PLIC_CPU_UXINT1_PRI_S = 0
const PLIC_CPU_UXINT2_PRI = 0x0000000F
const PLIC_CPU_UXINT2_PRI_V = 0xF
const PLIC_CPU_UXINT2_PRI_S = 0
const PLIC_CPU_UXINT3_PRI = 0x0000000F
const PLIC_CPU_UXINT3_PRI_V = 0xF
const PLIC_CPU_UXINT3_PRI_S = 0
const PLIC_CPU_UXINT4_PRI = 0x0000000F
const PLIC_CPU_UXINT4_PRI_V = 0xF
const PLIC_CPU_UXINT4_PRI_S = 0
const PLIC_CPU_UXINT5_PRI = 0x0000000F
const PLIC_CPU_UXINT5_PRI_V = 0xF
const PLIC_CPU_UXINT5_PRI_S = 0
const PLIC_CPU_UXINT6_PRI = 0x0000000F
const PLIC_CPU_UXINT6_PRI_V = 0xF
const PLIC_CPU_UXINT6_PRI_S = 0
const PLIC_CPU_UXINT7_PRI = 0x0000000F
const PLIC_CPU_UXINT7_PRI_V = 0xF
const PLIC_CPU_UXINT7_PRI_S = 0
const PLIC_CPU_UXINT8_PRI = 0x0000000F
const PLIC_CPU_UXINT8_PRI_V = 0xF
const PLIC_CPU_UXINT8_PRI_S = 0
const PLIC_CPU_UXINT9_PRI = 0x0000000F
const PLIC_CPU_UXINT9_PRI_V = 0xF
const PLIC_CPU_UXINT9_PRI_S = 0
const PLIC_CPU_UXINT10_PRI = 0x0000000F
const PLIC_CPU_UXINT10_PRI_V = 0xF
const PLIC_CPU_UXINT10_PRI_S = 0
const PLIC_CPU_UXINT11_PRI = 0x0000000F
const PLIC_CPU_UXINT11_PRI_V = 0xF
const PLIC_CPU_UXINT11_PRI_S = 0
const PLIC_CPU_UXINT12_PRI = 0x0000000F
const PLIC_CPU_UXINT12_PRI_V = 0xF
const PLIC_CPU_UXINT12_PRI_S = 0
const PLIC_CPU_UXINT13_PRI = 0x0000000F
const PLIC_CPU_UXINT13_PRI_V = 0xF
const PLIC_CPU_UXINT13_PRI_S = 0
const PLIC_CPU_UXINT14_PRI = 0x0000000F
const PLIC_CPU_UXINT14_PRI_V = 0xF
const PLIC_CPU_UXINT14_PRI_S = 0
const PLIC_CPU_UXINT15_PRI = 0x0000000F
const PLIC_CPU_UXINT15_PRI_V = 0xF
const PLIC_CPU_UXINT15_PRI_S = 0
const PLIC_CPU_UXINT16_PRI = 0x0000000F
const PLIC_CPU_UXINT16_PRI_V = 0xF
const PLIC_CPU_UXINT16_PRI_S = 0
const PLIC_CPU_UXINT17_PRI = 0x0000000F
const PLIC_CPU_UXINT17_PRI_V = 0xF
const PLIC_CPU_UXINT17_PRI_S = 0
const PLIC_CPU_UXINT18_PRI = 0x0000000F
const PLIC_CPU_UXINT18_PRI_V = 0xF
const PLIC_CPU_UXINT18_PRI_S = 0
const PLIC_CPU_UXINT19_PRI = 0x0000000F
const PLIC_CPU_UXINT19_PRI_V = 0xF
const PLIC_CPU_UXINT19_PRI_S = 0
const PLIC_CPU_UXINT20_PRI = 0x0000000F
const PLIC_CPU_UXINT20_PRI_V = 0xF
const PLIC_CPU_UXINT20_PRI_S = 0
const PLIC_CPU_UXINT21_PRI = 0x0000000F
const PLIC_CPU_UXINT21_PRI_V = 0xF
const PLIC_CPU_UXINT21_PRI_S = 0
const PLIC_CPU_UXINT22_PRI = 0x0000000F
const PLIC_CPU_UXINT22_PRI_V = 0xF
const PLIC_CPU_UXINT22_PRI_S = 0
const PLIC_CPU_UXINT23_PRI = 0x0000000F
const PLIC_CPU_UXINT23_PRI_V = 0xF
const PLIC_CPU_UXINT23_PRI_S = 0
const PLIC_CPU_UXINT24_PRI = 0x0000000F
const PLIC_CPU_UXINT24_PRI_V = 0xF
const PLIC_CPU_UXINT24_PRI_S = 0
const PLIC_CPU_UXINT25_PRI = 0x0000000F
const PLIC_CPU_UXINT25_PRI_V = 0xF
const PLIC_CPU_UXINT25_PRI_S = 0
const PLIC_CPU_UXINT26_PRI = 0x0000000F
const PLIC_CPU_UXINT26_PRI_V = 0xF
const PLIC_CPU_UXINT26_PRI_S = 0
const PLIC_CPU_UXINT27_PRI = 0x0000000F
const PLIC_CPU_UXINT27_PRI_V = 0xF
const PLIC_CPU_UXINT27_PRI_S = 0
const PLIC_CPU_UXINT28_PRI = 0x0000000F
const PLIC_CPU_UXINT28_PRI_V = 0xF
const PLIC_CPU_UXINT28_PRI_S = 0
const PLIC_CPU_UXINT29_PRI = 0x0000000F
const PLIC_CPU_UXINT29_PRI_V = 0xF
const PLIC_CPU_UXINT29_PRI_S = 0
const PLIC_CPU_UXINT30_PRI = 0x0000000F
const PLIC_CPU_UXINT30_PRI_V = 0xF
const PLIC_CPU_UXINT30_PRI_S = 0
const PLIC_CPU_UXINT31_PRI = 0x0000000F
const PLIC_CPU_UXINT31_PRI_V = 0xF
const PLIC_CPU_UXINT31_PRI_S = 0
const PLIC_CPU_UXINT_THRESH = 0x000000FF
const PLIC_CPU_UXINT_THRESH_V = 0xFF
const PLIC_CPU_UXINT_THRESH_S = 0
const PLIC_CPU_UXINT_CLAIM = 0xFFFFFFFF
const PLIC_CPU_UXINT_CLAIM_V = 0xFFFFFFFF
const PLIC_CPU_UXINT_CLAIM_S = 0
const USB_SERIAL_JTAG_RDWR_BYTE_S = 0
const USB_SERIAL_JTAG_WR_DONE_S = 0
const USB_SERIAL_JTAG_SERIAL_IN_EP_DATA_FREE_S = 1
const USB_SERIAL_JTAG_SERIAL_OUT_EP_DATA_AVAIL_S = 2
const USB_SERIAL_JTAG_JTAG_IN_FLUSH_INT_RAW_S = 0
const USB_SERIAL_JTAG_SOF_INT_RAW_S = 1
const USB_SERIAL_JTAG_SERIAL_OUT_RECV_PKT_INT_RAW_S = 2
const USB_SERIAL_JTAG_SERIAL_IN_EMPTY_INT_RAW_S = 3
const USB_SERIAL_JTAG_PID_ERR_INT_RAW_S = 4
const USB_SERIAL_JTAG_CRC5_ERR_INT_RAW_S = 5
const USB_SERIAL_JTAG_CRC16_ERR_INT_RAW_S = 6
const USB_SERIAL_JTAG_STUFF_ERR_INT_RAW_S = 7
const USB_SERIAL_JTAG_IN_TOKEN_REC_IN_EP1_INT_RAW_S = 8
const USB_SERIAL_JTAG_USB_BUS_RESET_INT_RAW_S = 9
const USB_SERIAL_JTAG_OUT_EP1_ZERO_PAYLOAD_INT_RAW_S = 10
const USB_SERIAL_JTAG_OUT_EP2_ZERO_PAYLOAD_INT_RAW_S = 11
const USB_SERIAL_JTAG_RTS_CHG_INT_RAW_S = 12
const USB_SERIAL_JTAG_DTR_CHG_INT_RAW_S = 13
const USB_SERIAL_JTAG_GET_LINE_CODE_INT_RAW_S = 14
const USB_SERIAL_JTAG_SET_LINE_CODE_INT_RAW_S = 15
const USB_SERIAL_JTAG_JTAG_IN_FLUSH_INT_ST_S = 0
const USB_SERIAL_JTAG_SOF_INT_ST_S = 1
const USB_SERIAL_JTAG_SERIAL_OUT_RECV_PKT_INT_ST_S = 2
const USB_SERIAL_JTAG_SERIAL_IN_EMPTY_INT_ST_S = 3
const USB_SERIAL_JTAG_PID_ERR_INT_ST_S = 4
const USB_SERIAL_JTAG_CRC5_ERR_INT_ST_S = 5
const USB_SERIAL_JTAG_CRC16_ERR_INT_ST_S = 6
const USB_SERIAL_JTAG_STUFF_ERR_INT_ST_S = 7
const USB_SERIAL_JTAG_IN_TOKEN_REC_IN_EP1_INT_ST_S = 8
const USB_SERIAL_JTAG_USB_BUS_RESET_INT_ST_S = 9
const USB_SERIAL_JTAG_OUT_EP1_ZERO_PAYLOAD_INT_ST_S = 10
const USB_SERIAL_JTAG_OUT_EP2_ZERO_PAYLOAD_INT_ST_S = 11
const USB_SERIAL_JTAG_RTS_CHG_INT_ST_S = 12
const USB_SERIAL_JTAG_DTR_CHG_INT_ST_S = 13
const USB_SERIAL_JTAG_GET_LINE_CODE_INT_ST_S = 14
const USB_SERIAL_JTAG_SET_LINE_CODE_INT_ST_S = 15
const USB_SERIAL_JTAG_JTAG_IN_FLUSH_INT_ENA_S = 0
const USB_SERIAL_JTAG_SOF_INT_ENA_S = 1
const USB_SERIAL_JTAG_SERIAL_OUT_RECV_PKT_INT_ENA_S = 2
const USB_SERIAL_JTAG_SERIAL_IN_EMPTY_INT_ENA_S = 3
const USB_SERIAL_JTAG_PID_ERR_INT_ENA_S = 4
const USB_SERIAL_JTAG_CRC5_ERR_INT_ENA_S = 5
const USB_SERIAL_JTAG_CRC16_ERR_INT_ENA_S = 6
const USB_SERIAL_JTAG_STUFF_ERR_INT_ENA_S = 7
const USB_SERIAL_JTAG_IN_TOKEN_REC_IN_EP1_INT_ENA_S = 8
const USB_SERIAL_JTAG_USB_BUS_RESET_INT_ENA_S = 9
const USB_SERIAL_JTAG_OUT_EP1_ZERO_PAYLOAD_INT_ENA_S = 10
const USB_SERIAL_JTAG_OUT_EP2_ZERO_PAYLOAD_INT_ENA_S = 11
const USB_SERIAL_JTAG_RTS_CHG_INT_ENA_S = 12
const USB_SERIAL_JTAG_DTR_CHG_INT_ENA_S = 13
const USB_SERIAL_JTAG_GET_LINE_CODE_INT_ENA_S = 14
const USB_SERIAL_JTAG_SET_LINE_CODE_INT_ENA_S = 15
const USB_SERIAL_JTAG_JTAG_IN_FLUSH_INT_CLR_S = 0
const USB_SERIAL_JTAG_SOF_INT_CLR_S = 1
const USB_SERIAL_JTAG_SERIAL_OUT_RECV_PKT_INT_CLR_S = 2
const USB_SERIAL_JTAG_SERIAL_IN_EMPTY_INT_CLR_S = 3
const USB_SERIAL_JTAG_PID_ERR_INT_CLR_S = 4
const USB_SERIAL_JTAG_CRC5_ERR_INT_CLR_S = 5
const USB_SERIAL_JTAG_CRC16_ERR_INT_CLR_S = 6
const USB_SERIAL_JTAG_STUFF_ERR_INT_CLR_S = 7
const USB_SERIAL_JTAG_IN_TOKEN_REC_IN_EP1_INT_CLR_S = 8
const USB_SERIAL_JTAG_USB_BUS_RESET_INT_CLR_S = 9
const USB_SERIAL_JTAG_OUT_EP1_ZERO_PAYLOAD_INT_CLR_S = 10
const USB_SERIAL_JTAG_OUT_EP2_ZERO_PAYLOAD_INT_CLR_S = 11
const USB_SERIAL_JTAG_RTS_CHG_INT_CLR_S = 12
const USB_SERIAL_JTAG_DTR_CHG_INT_CLR_S = 13
const USB_SERIAL_JTAG_GET_LINE_CODE_INT_CLR_S = 14
const USB_SERIAL_JTAG_SET_LINE_CODE_INT_CLR_S = 15
const USB_SERIAL_JTAG_PHY_SEL_S = 0
const USB_SERIAL_JTAG_EXCHG_PINS_OVERRIDE_S = 1
const USB_SERIAL_JTAG_EXCHG_PINS_S = 2
const USB_SERIAL_JTAG_VREFH_S = 3
const USB_SERIAL_JTAG_VREFL_S = 5
const USB_SERIAL_JTAG_VREF_OVERRIDE_S = 7
const USB_SERIAL_JTAG_PAD_PULL_OVERRIDE_S = 8
const USB_SERIAL_JTAG_DP_PULLUP_S = 9
const USB_SERIAL_JTAG_DP_PULLDOWN_S = 10
const USB_SERIAL_JTAG_DM_PULLUP_S = 11
const USB_SERIAL_JTAG_DM_PULLDOWN_S = 12
const USB_SERIAL_JTAG_PULLUP_VALUE_S = 13
const USB_SERIAL_JTAG_USB_PAD_ENABLE_S = 14
const USB_SERIAL_JTAG_USB_JTAG_BRIDGE_EN_S = 15
const USB_SERIAL_JTAG_TEST_ENABLE_S = 0
const USB_SERIAL_JTAG_TEST_USB_OE_S = 1
const USB_SERIAL_JTAG_TEST_TX_DP_S = 2
const USB_SERIAL_JTAG_TEST_TX_DM_S = 3
const USB_SERIAL_JTAG_TEST_RX_RCV_S = 4
const USB_SERIAL_JTAG_TEST_RX_DP_S = 5
const USB_SERIAL_JTAG_TEST_RX_DM_S = 6
const USB_SERIAL_JTAG_IN_FIFO_CNT_S = 0
const USB_SERIAL_JTAG_IN_FIFO_EMPTY_S = 2
const USB_SERIAL_JTAG_IN_FIFO_FULL_S = 3
const USB_SERIAL_JTAG_OUT_FIFO_CNT_S = 4
const USB_SERIAL_JTAG_OUT_FIFO_EMPTY_S = 6
const USB_SERIAL_JTAG_OUT_FIFO_FULL_S = 7
const USB_SERIAL_JTAG_IN_FIFO_RESET_S = 8
const USB_SERIAL_JTAG_OUT_FIFO_RESET_S = 9
const USB_SERIAL_JTAG_SOF_FRAME_INDEX_S = 0
const USB_SERIAL_JTAG_IN_EP0_STATE_S = 0
const USB_SERIAL_JTAG_IN_EP0_WR_ADDR_S = 2
const USB_SERIAL_JTAG_IN_EP0_RD_ADDR_S = 9
const USB_SERIAL_JTAG_IN_EP1_STATE_S = 0
const USB_SERIAL_JTAG_IN_EP1_WR_ADDR_S = 2
const USB_SERIAL_JTAG_IN_EP1_RD_ADDR_S = 9
const USB_SERIAL_JTAG_IN_EP2_STATE_S = 0
const USB_SERIAL_JTAG_IN_EP2_WR_ADDR_S = 2
const USB_SERIAL_JTAG_IN_EP2_RD_ADDR_S = 9
const USB_SERIAL_JTAG_IN_EP3_STATE_S = 0
const USB_SERIAL_JTAG_IN_EP3_WR_ADDR_S = 2
const USB_SERIAL_JTAG_IN_EP3_RD_ADDR_S = 9
const USB_SERIAL_JTAG_OUT_EP0_STATE_S = 0
const USB_SERIAL_JTAG_OUT_EP0_WR_ADDR_S = 2
const USB_SERIAL_JTAG_OUT_EP0_RD_ADDR_S = 9
const USB_SERIAL_JTAG_OUT_EP1_STATE_S = 0
const USB_SERIAL_JTAG_OUT_EP1_WR_ADDR_S = 2
const USB_SERIAL_JTAG_OUT_EP1_RD_ADDR_S = 9
const USB_SERIAL_JTAG_OUT_EP1_REC_DATA_CNT_S = 16
const USB_SERIAL_JTAG_OUT_EP2_STATE_S = 0
const USB_SERIAL_JTAG_OUT_EP2_WR_ADDR_S = 2
const USB_SERIAL_JTAG_OUT_EP2_RD_ADDR_S = 9
const USB_SERIAL_JTAG_CLK_EN_S = 0
const USB_SERIAL_JTAG_USB_MEM_PD_S = 0
const USB_SERIAL_JTAG_USB_MEM_CLK_EN_S = 1
const USB_SERIAL_JTAG_RTS_S = 0
const USB_SERIAL_JTAG_DTR_S = 1
const USB_SERIAL_JTAG_USB_UART_CHIP_RST_DIS_S = 2
const USB_SERIAL_JTAG_DW_DTE_RATE_S = 0
const USB_SERIAL_JTAG_BCHAR_FORMAT_S = 0
const USB_SERIAL_JTAG_BPARITY_TYPE_S = 8
const USB_SERIAL_JTAG_BDATA_BITS_S = 16
const USB_SERIAL_JTAG_GET_DW_DTE_RATE_S = 0
const USB_SERIAL_JTAG_GET_BDATA_BITS_S = 0
const USB_SERIAL_JTAG_GET_BPARITY_TYPE_S = 8
const USB_SERIAL_JTAG_GET_BCHAR_FORMAT_S = 16
const USB_SERIAL_JTAG_CONFIG_UPDATE_S = 0
const USB_SERIAL_JTAG_SERIAL_IN_AFIFO_RESET_WR_S = 0
const USB_SERIAL_JTAG_SERIAL_IN_AFIFO_RESET_RD_S = 1
const USB_SERIAL_JTAG_SERIAL_OUT_AFIFO_RESET_WR_S = 2
const USB_SERIAL_JTAG_SERIAL_OUT_AFIFO_RESET_RD_S = 3
const USB_SERIAL_JTAG_SERIAL_OUT_AFIFO_REMPTY_S = 4
const USB_SERIAL_JTAG_SERIAL_IN_AFIFO_WFULL_S = 5
const USB_SERIAL_JTAG_USB_BUS_RESET_ST_S = 0
const USB_SERIAL_JTAG_DATE_S = 0
const LP_TIMER_MAIN_TIMER_TAR_LOW0_S = 0
const LP_TIMER_MAIN_TIMER_TAR_HIGH0_S = 0
const LP_TIMER_MAIN_TIMER_TAR_EN0_S = 31
const LP_TIMER_MAIN_TIMER_TAR_LOW1_S = 0
const LP_TIMER_MAIN_TIMER_TAR_HIGH1_S = 0
const LP_TIMER_MAIN_TIMER_TAR_EN1_S = 31
const LP_TIMER_MAIN_TIMER_UPDATE_S = 28
const LP_TIMER_MAIN_TIMER_XTAL_OFF_S = 29
const LP_TIMER_MAIN_TIMER_SYS_STALL_S = 30
const LP_TIMER_MAIN_TIMER_SYS_RST_S = 31
const LP_TIMER_MAIN_TIMER_BUF0_LOW_S = 0
const LP_TIMER_MAIN_TIMER_BUF0_HIGH_S = 0
const LP_TIMER_MAIN_TIMER_BUF1_LOW_S = 0
const LP_TIMER_MAIN_TIMER_BUF1_HIGH_S = 0
const LP_TIMER_MAIN_TIMER_ALARM_LOAD_S = 31
const LP_TIMER_OVERFLOW_RAW_S = 30
const LP_TIMER_SOC_WAKEUP_INT_RAW_S = 31
const LP_TIMER_OVERFLOW_ST_S = 30
const LP_TIMER_SOC_WAKEUP_INT_ST_S = 31
const LP_TIMER_OVERFLOW_ENA_S = 30
const LP_TIMER_SOC_WAKEUP_INT_ENA_S = 31
const LP_TIMER_OVERFLOW_CLR_S = 30
const LP_TIMER_SOC_WAKEUP_INT_CLR_S = 31
const LP_TIMER_MAIN_TIMER_OVERFLOW_LP_INT_RAW_S = 30
const LP_TIMER_MAIN_TIMER_LP_INT_RAW_S = 31
const LP_TIMER_MAIN_TIMER_OVERFLOW_LP_INT_ST_S = 30
const LP_TIMER_MAIN_TIMER_LP_INT_ST_S = 31
const LP_TIMER_MAIN_TIMER_OVERFLOW_LP_INT_ENA_S = 30
const LP_TIMER_MAIN_TIMER_LP_INT_ENA_S = 31
const LP_TIMER_MAIN_TIMER_OVERFLOW_LP_INT_CLR_S = 30
const LP_TIMER_MAIN_TIMER_LP_INT_CLR_S = 31
const LP_TIMER_DATE_S = 0
const LP_TIMER_CLK_EN_S = 31
const EFUSE_WRITE_OP_CODE = 0x5a5a
const EFUSE_READ_OP_CODE = 0x5aa5
const EFUSE_PGM_DATA_0_S = 0
const EFUSE_PGM_DATA_1_S = 0
const EFUSE_PGM_DATA_2_S = 0
const EFUSE_PGM_DATA_3_S = 0
const EFUSE_PGM_DATA_4_S = 0
const EFUSE_PGM_DATA_5_S = 0
const EFUSE_PGM_DATA_6_S = 0
const EFUSE_PGM_DATA_7_S = 0
const EFUSE_PGM_RS_DATA_0_S = 0
const EFUSE_PGM_RS_DATA_1_S = 0
const EFUSE_PGM_RS_DATA_2_S = 0
const EFUSE_WR_DIS_S = 0
const EFUSE_RD_DIS_S = 0
const EFUSE_SWAP_UART_SDIO_EN_S = 7
const EFUSE_DIS_ICACHE_S = 8
const EFUSE_DIS_USB_JTAG_S = 9
const EFUSE_DIS_DOWNLOAD_ICACHE_S = 10
const EFUSE_DIS_USB_SERIAL_JTAG_S = 11
const EFUSE_DIS_FORCE_DOWNLOAD_S = 12
const EFUSE_SPI_DOWNLOAD_MSPI_DIS_S = 13
const EFUSE_DIS_TWAI_S = 14
const EFUSE_JTAG_SEL_ENABLE_S = 15
const EFUSE_SOFT_DIS_JTAG_S = 16
const EFUSE_DIS_PAD_JTAG_S = 19
const EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_S = 20
const EFUSE_USB_DREFH_S = 21
const EFUSE_USB_DREFL_S = 23
const EFUSE_USB_EXCHG_PINS_S = 25
const EFUSE_VDD_SPI_AS_GPIO_S = 26
const EFUSE_RPT4_RESERVED0_2_S = 27
const EFUSE_RPT4_RESERVED0_1_S = 29
const EFUSE_RPT4_RESERVED0_0_S = 30
const EFUSE_RPT4_RESERVED1_0_S = 0
const EFUSE_WDT_DELAY_SEL_S = 16
const EFUSE_SPI_BOOT_CRYPT_CNT_S = 18
const EFUSE_SECURE_BOOT_KEY_REVOKE0_S = 21
const EFUSE_SECURE_BOOT_KEY_REVOKE1_S = 22
const EFUSE_SECURE_BOOT_KEY_REVOKE2_S = 23
const EFUSE_KEY_PURPOSE_0_S = 24
const EFUSE_KEY_PURPOSE_1_S = 28
const EFUSE_KEY_PURPOSE_2_S = 0
const EFUSE_KEY_PURPOSE_3_S = 4
const EFUSE_KEY_PURPOSE_4_S = 8
const EFUSE_KEY_PURPOSE_5_S = 12
const EFUSE_SEC_DPA_LEVEL_S = 16
const EFUSE_CRYPT_DPA_ENABLE_S = 18
const EFUSE_RPT4_RESERVED2_1_S = 19
const EFUSE_SECURE_BOOT_EN_S = 20
const EFUSE_SECURE_BOOT_AGGRESSIVE_REVOKE_S = 21
const EFUSE_RPT4_RESERVED2_0_S = 22
const EFUSE_FLASH_TPUW_S = 28
const EFUSE_DIS_DOWNLOAD_MODE_S = 0
const EFUSE_DIS_DIRECT_BOOT_S = 1
const EFUSE_DIS_USB_SERIAL_JTAG_ROM_PRINT_S = 2
const EFUSE_RPT4_RESERVED3_5_S = 3
const EFUSE_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE_S = 4
const EFUSE_ENABLE_SECURITY_DOWNLOAD_S = 5
const EFUSE_UART_PRINT_CONTROL_S = 6
const EFUSE_RPT4_RESERVED3_4_S = 8
const EFUSE_RPT4_RESERVED3_3_S = 9
const EFUSE_RPT4_RESERVED3_2_S = 10
const EFUSE_RPT4_RESERVED3_1_S = 12
const EFUSE_FORCE_SEND_RESUME_S = 13
const EFUSE_SECURE_VERSION_S = 14
const EFUSE_SECURE_BOOT_DISABLE_FAST_WAKE_S = 30
const EFUSE_RPT4_RESERVED3_0_S = 31
const EFUSE_DISABLE_WAFER_VERSION_MAJOR_S = 0
const EFUSE_DISABLE_BLK_VERSION_MAJOR_S = 1
const EFUSE_RESERVED_0_162_S = 2
const EFUSE_RPT4_RESERVED4_0_S = 24
const EFUSE_MAC_0_S = 0
const EFUSE_MAC_1_S = 0
const EFUSE_MAC_EXT_S = 16
const EFUSE_ACTIVE_HP_DBIAS_S = 0
const EFUSE_ACTIVE_LP_DBIAS_S = 5
const EFUSE_LSLP_HP_DBG_S = 10
const EFUSE_LSLP_HP_DBIAS_S = 12
const EFUSE_DSLP_LP_DBG_S = 16
const EFUSE_DSLP_LP_DBIAS_S = 19
const EFUSE_DBIAS_VOL_GAP_S = 23
const EFUSE_SPI_PAD_CONF_1_S = 28
const EFUSE_SPI_PAD_CONF_2_S = 0
const EFUSE_WAFER_VERSION_MINOR_S = 18
const EFUSE_WAFER_VERSION_MAJOR_S = 22
const EFUSE_PKG_VERSION_S = 24
const EFUSE_BLK_VERSION_MINOR_S = 27
const EFUSE_BLK_VERSION_MAJOR_S = 30
const EFUSE_FLASH_CAP_S = 0
const EFUSE_FLASH_TEMP_S = 3
const EFUSE_FLASH_VENDOR_S = 5
const EFUSE_RESERVED_1_136_S = 8
const EFUSE_SYS_DATA_PART0_2_S = 0
const EFUSE_OPTIONAL_UNIQUE_ID_S = 0
const EFUSE_OPTIONAL_UNIQUE_ID_1_S = 0
const EFUSE_OPTIONAL_UNIQUE_ID_2_S = 0
const EFUSE_OPTIONAL_UNIQUE_ID_3_S = 0
const EFUSE_TEMP_CALIB_S = 0
const EFUSE_OCODE_S = 9
const EFUSE_ADC1_INIT_CODE_ATTEN0_S = 17
const EFUSE_ADC1_INIT_CODE_ATTEN1_S = 27
const EFUSE_ADC1_INIT_CODE_ATTEN1_1_S = 0
const EFUSE_ADC1_INIT_CODE_ATTEN2_S = 5
const EFUSE_ADC1_INIT_CODE_ATTEN3_S = 15
const EFUSE_ADC1_CAL_VOL_ATTEN0_S = 25
const EFUSE_ADC1_CAL_VOL_ATTEN0_1_S = 0
const EFUSE_ADC1_CAL_VOL_ATTEN1_S = 3
const EFUSE_ADC1_CAL_VOL_ATTEN2_S = 13
const EFUSE_ADC1_CAL_VOL_ATTEN3_S = 23
const EFUSE_ADC1_CAL_VOL_ATTEN3_1_S = 0
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH0_S = 1
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH1_S = 5
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH2_S = 9
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH3_S = 13
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH4_S = 17
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH5_S = 21
const EFUSE_ADC1_INIT_CODE_ATTEN0_CH6_S = 25
const EFUSE_RESERVED_2_253_S = 29
const EFUSE_USR_DATA0_S = 0
const EFUSE_USR_DATA1_S = 0
const EFUSE_USR_DATA2_S = 0
const EFUSE_USR_DATA3_S = 0
const EFUSE_USR_DATA4_S = 0
const EFUSE_USR_DATA5_S = 0
const EFUSE_RESERVED_3_192_S = 0
const EFUSE_CUSTOM_MAC_S = 8
const EFUSE_CUSTOM_MAC_1_S = 0
const EFUSE_RESERVED_3_248_S = 24
const EFUSE_KEY0_DATA0_S = 0
const EFUSE_KEY0_DATA1_S = 0
const EFUSE_KEY0_DATA2_S = 0
const EFUSE_KEY0_DATA3_S = 0
const EFUSE_KEY0_DATA4_S = 0
const EFUSE_KEY0_DATA5_S = 0
const EFUSE_KEY0_DATA6_S = 0
const EFUSE_KEY0_DATA7_S = 0
const EFUSE_KEY1_DATA0_S = 0
const EFUSE_KEY1_DATA1_S = 0
const EFUSE_KEY1_DATA2_S = 0
const EFUSE_KEY1_DATA3_S = 0
const EFUSE_KEY1_DATA4_S = 0
const EFUSE_KEY1_DATA5_S = 0
const EFUSE_KEY1_DATA6_S = 0
const EFUSE_KEY1_DATA7_S = 0
const EFUSE_KEY2_DATA0_S = 0
const EFUSE_KEY2_DATA1_S = 0
const EFUSE_KEY2_DATA2_S = 0
const EFUSE_KEY2_DATA3_S = 0
const EFUSE_KEY2_DATA4_S = 0
const EFUSE_KEY2_DATA5_S = 0
const EFUSE_KEY2_DATA6_S = 0
const EFUSE_KEY2_DATA7_S = 0
const EFUSE_KEY3_DATA0_S = 0
const EFUSE_KEY3_DATA1_S = 0
const EFUSE_KEY3_DATA2_S = 0
const EFUSE_KEY3_DATA3_S = 0
const EFUSE_KEY3_DATA4_S = 0
const EFUSE_KEY3_DATA5_S = 0
const EFUSE_KEY3_DATA6_S = 0
const EFUSE_KEY3_DATA7_S = 0
const EFUSE_KEY4_DATA0_S = 0
const EFUSE_KEY4_DATA1_S = 0
const EFUSE_KEY4_DATA2_S = 0
const EFUSE_KEY4_DATA3_S = 0
const EFUSE_KEY4_DATA4_S = 0
const EFUSE_KEY4_DATA5_S = 0
const EFUSE_KEY4_DATA6_S = 0
const EFUSE_KEY4_DATA7_S = 0
const EFUSE_KEY5_DATA0_S = 0
const EFUSE_KEY5_DATA1_S = 0
const EFUSE_KEY5_DATA2_S = 0
const EFUSE_KEY5_DATA3_S = 0
const EFUSE_KEY5_DATA4_S = 0
const EFUSE_KEY5_DATA5_S = 0
const EFUSE_KEY5_DATA6_S = 0
const EFUSE_KEY5_DATA7_S = 0
const EFUSE_SYS_DATA_PART2_0_S = 0
const EFUSE_SYS_DATA_PART2_1_S = 0
const EFUSE_SYS_DATA_PART2_2_S = 0
const EFUSE_SYS_DATA_PART2_3_S = 0
const EFUSE_SYS_DATA_PART2_4_S = 0
const EFUSE_SYS_DATA_PART2_5_S = 0
const EFUSE_SYS_DATA_PART2_6_S = 0
const EFUSE_SYS_DATA_PART2_7_S = 0
const EFUSE_RD_DIS_ERR_S = 0
const EFUSE_SWAP_UART_SDIO_EN_ERR_S = 7
const EFUSE_DIS_ICACHE_ERR_S = 8
const EFUSE_DIS_USB_JTAG_ERR_S = 9
const EFUSE_DIS_DOWNLOAD_ICACHE_ERR_S = 10
const EFUSE_DIS_USB_SERIAL_JTAG_ERR_S = 11
const EFUSE_DIS_FORCE_DOWNLOAD_ERR_S = 12
const EFUSE_SPI_DOWNLOAD_MSPI_DIS_ERR_S = 13
const EFUSE_DIS_TWAI_ERR_S = 14
const EFUSE_JTAG_SEL_ENABLE_ERR_S = 15
const EFUSE_SOFT_DIS_JTAG_ERR_S = 16
const EFUSE_DIS_PAD_JTAG_ERR_S = 19
const EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_ERR_S = 20
const EFUSE_USB_DREFH_ERR_S = 21
const EFUSE_USB_DREFL_ERR_S = 23
const EFUSE_USB_EXCHG_PINS_ERR_S = 25
const EFUSE_VDD_SPI_AS_GPIO_ERR_S = 26
const EFUSE_RPT4_RESERVED0_ERR_2_S = 27
const EFUSE_RPT4_RESERVED0_ERR_1_S = 29
const EFUSE_RPT4_RESERVED0_ERR_0_S = 30
const EFUSE_RPT4_RESERVED1_ERR_0_S = 0
const EFUSE_WDT_DELAY_SEL_ERR_S = 16
const EFUSE_SPI_BOOT_CRYPT_CNT_ERR_S = 18
const EFUSE_SECURE_BOOT_KEY_REVOKE0_ERR_S = 21
const EFUSE_SECURE_BOOT_KEY_REVOKE1_ERR_S = 22
const EFUSE_SECURE_BOOT_KEY_REVOKE2_ERR_S = 23
const EFUSE_KEY_PURPOSE_0_ERR_S = 24
const EFUSE_KEY_PURPOSE_1_ERR_S = 28
const EFUSE_KEY_PURPOSE_2_ERR_S = 0
const EFUSE_KEY_PURPOSE_3_ERR_S = 4
const EFUSE_KEY_PURPOSE_4_ERR_S = 8
const EFUSE_KEY_PURPOSE_5_ERR_S = 12
const EFUSE_SEC_DPA_LEVEL_ERR_S = 16
const EFUSE_RPT4_RESERVED2_ERR_1_S = 18
const EFUSE_CRYPT_DPA_ENABLE_ERR_S = 19
const EFUSE_SECURE_BOOT_EN_ERR_S = 20
const EFUSE_SECURE_BOOT_AGGRESSIVE_REVOKE_ERR_S = 21
const EFUSE_RPT4_RESERVED2_ERR_0_S = 22
const EFUSE_FLASH_TPUW_ERR_S = 28
const EFUSE_DIS_DOWNLOAD_MODE_ERR_S = 0
const EFUSE_DIS_DIRECT_BOOT_ERR_S = 1
const EFUSE_USB_PRINT_ERR_S = 2
const EFUSE_RPT4_RESERVED3_ERR_5_S = 3
const EFUSE_DIS_USB_SERIAL_JTAG_DOWNLOAD_MODE_ERR_S = 4
const EFUSE_ENABLE_SECURITY_DOWNLOAD_ERR_S = 5
const EFUSE_UART_PRINT_CONTROL_ERR_S = 6
const EFUSE_RPT4_RESERVED3_ERR_4_S = 8
const EFUSE_RPT4_RESERVED3_ERR_3_S = 9
const EFUSE_RPT4_RESERVED3_ERR_2_S = 10
const EFUSE_RPT4_RESERVED3_ERR_1_S = 12
const EFUSE_FORCE_SEND_RESUME_ERR_S = 13
const EFUSE_SECURE_VERSION_ERR_S = 14
const EFUSE_RPT4_RESERVED3_ERR_0_S = 30
const EFUSE_RPT4_RESERVED4_ERR_1_S = 0
const EFUSE_RPT4_RESERVED4_ERR_0_S = 24
const EFUSE_MAC_SPI_8M_ERR_NUM_S = 0
const EFUSE_MAC_SPI_8M_FAIL_S = 3
const EFUSE_SYS_PART1_NUM_S = 4
const EFUSE_SYS_PART1_FAIL_S = 7
const EFUSE_USR_DATA_ERR_NUM_S = 8
const EFUSE_USR_DATA_FAIL_S = 11
const EFUSE_KEY0_ERR_NUM_S = 12
const EFUSE_KEY0_FAIL_S = 15
const EFUSE_KEY1_ERR_NUM_S = 16
const EFUSE_KEY1_FAIL_S = 19
const EFUSE_KEY2_ERR_NUM_S = 20
const EFUSE_KEY2_FAIL_S = 23
const EFUSE_KEY3_ERR_NUM_S = 24
const EFUSE_KEY3_FAIL_S = 27
const EFUSE_KEY4_ERR_NUM_S = 28
const EFUSE_KEY4_FAIL_S = 31
const EFUSE_KEY5_ERR_NUM_S = 0
const EFUSE_KEY5_FAIL_S = 3
const EFUSE_SYS_PART2_ERR_NUM_S = 4
const EFUSE_SYS_PART2_FAIL_S = 7
const EFUSE_MEM_FORCE_PD_S = 0
const EFUSE_MEM_CLK_FORCE_ON_S = 1
const EFUSE_MEM_FORCE_PU_S = 2
const EFUSE_CLK_EN_S = 16
const EFUSE_OP_CODE_S = 0
const EFUSE_STATE_S = 0
const EFUSE_OTP_LOAD_SW_S = 4
const EFUSE_OTP_VDDQ_C_SYNC2_S = 5
const EFUSE_OTP_STROBE_SW_S = 6
const EFUSE_OTP_CSB_SW_S = 7
const EFUSE_OTP_PGENB_SW_S = 8
const EFUSE_OTP_VDDQ_IS_SW_S = 9
const EFUSE_BLK0_VALID_BIT_CNT_S = 10
const EFUSE_READ_CMD_S = 0
const EFUSE_PGM_CMD_S = 1
const EFUSE_BLK_NUM_S = 2
const EFUSE_READ_DONE_INT_RAW_S = 0
const EFUSE_PGM_DONE_INT_RAW_S = 1
const EFUSE_READ_DONE_INT_ST_S = 0
const EFUSE_PGM_DONE_INT_ST_S = 1
const EFUSE_READ_DONE_INT_ENA_S = 0
const EFUSE_PGM_DONE_INT_ENA_S = 1
const EFUSE_READ_DONE_INT_CLR_S = 0
const EFUSE_PGM_DONE_INT_CLR_S = 1
const EFUSE_DAC_CLK_DIV_S = 0
const EFUSE_DAC_CLK_PAD_SEL_S = 8
const EFUSE_DAC_NUM_S = 9
const EFUSE_OE_CLR_S = 17
const EFUSE_THR_A_S = 0
const EFUSE_TRD_S = 8
const EFUSE_TSUR_A_S = 16
const EFUSE_READ_INIT_NUM_S = 24
const EFUSE_TSUP_A_S = 0
const EFUSE_PWR_ON_NUM_S = 8
const EFUSE_THP_A_S = 24
const EFUSE_PWR_OFF_NUM_S = 0
const EFUSE_TPGM_S = 16
const EFUSE_BYPASS_RS_CORRECTION_S = 0
const EFUSE_BYPASS_RS_BLK_NUM_S = 1
const EFUSE_UPDATE_S = 12
const EFUSE_TPGM_INACTIVE_S = 13
const EFUSE_DATE_S = 0
const EFUSE_SPICONFIG_SPI_DEFAULTS = 0
const EFUSE_SPICONFIG_HSPI_DEFAULTS = 1
const EFUSE_SPICONFIG_RET_SPICLK_MASK = 0x3f
const EFUSE_SPICONFIG_RET_SPICLK_SHIFT = 0
const EFUSE_SPICONFIG_RET_SPIQ_MASK = 0x3f
const EFUSE_SPICONFIG_RET_SPIQ_SHIFT = 6
const EFUSE_SPICONFIG_RET_SPID_MASK = 0x3f
const EFUSE_SPICONFIG_RET_SPID_SHIFT = 12
const EFUSE_SPICONFIG_RET_SPICS0_MASK = 0x3f
const EFUSE_SPICONFIG_RET_SPICS0_SHIFT = 18
const EFUSE_SPICONFIG_RET_SPIHD_MASK = 0x3f
const EFUSE_SPICONFIG_RET_SPIHD_SHIFT = 24
const RSA_M_MEM_SIZE_BYTES = 16
const RSA_Z_MEM_SIZE_BYTES = 16
const RSA_Y_MEM_SIZE_BYTES = 16
const RSA_X_MEM_SIZE_BYTES = 16
const RSA_M_PRIME_S = 0
const RSA_MODE_S = 0
const RSA_QUERY_CLEAN_S = 0
const RSA_SET_START_MODEXP_S = 0
const RSA_SET_START_MODMULT_S = 0
const RSA_SET_START_MULT_S = 0
const RSA_QUERY_IDLE_S = 0
const RSA_CLEAR_INTERRUPT_S = 0
const RSA_CONSTANT_TIME_S = 0
const RSA_SEARCH_ENABLE_S = 0
const RSA_SEARCH_POS_S = 0
const RSA_INT_ENA_S = 0
const RSA_DATE_S = 0
const PAU_FLOW_ERR_S = 0
const PAU_START_S = 3
const PAU_TO_MEM_S = 4
const PAU_LINK_SEL_S = 5
const PAU_START_MAC_S = 7
const PAU_TO_MEM_MAC_S = 8
const PAU_SEL_MAC_S = 9
const PAU_CLK_EN_S = 0
const PAU_ETM_START_0_S = 0
const PAU_ETM_START_1_S = 1
const PAU_ETM_START_2_S = 2
const PAU_ETM_START_3_S = 3
const PAU_LINK_ADDR_0_S = 0
const PAU_LINK_ADDR_1_S = 0
const PAU_LINK_ADDR_2_S = 0
const PAU_LINK_ADDR_3_S = 0
const PAU_LINK_ADDR_MAC_S = 0
const PAU_CURRENT_LINK_ADDR_S = 0
const PAU_BACKUP_ADDR_S = 0
const PAU_MEM_ADDR_S = 0
const PAU_READ_INTERVAL_S = 0
const PAU_LINK_TOUT_THRES_S = 7
const PAU_BURST_LIMIT_S = 17
const PAU_BACKUP_TOUT_THRES_S = 22
const PAU_LINK_BASE_ADDR_S = 0
const PAU_RET_INV_CFG_S = 0
const PAU_DONE_INT_ENA_S = 0
const PAU_ERROR_INT_ENA_S = 1
const PAU_DONE_INT_RAW_S = 0
const PAU_ERROR_INT_RAW_S = 1
const PAU_DONE_INT_CLR_S = 0
const PAU_ERROR_INT_CLR_S = 1
const PAU_DONE_INT_ST_S = 0
const PAU_ERROR_INT_ST_S = 1
const PAU_DATE_S = 0
const AES_KEY_0_S = 0
const AES_KEY_1_S = 0
const AES_KEY_2_S = 0
const AES_KEY_3_S = 0
const AES_KEY_4_S = 0
const AES_KEY_5_S = 0
const AES_KEY_6_S = 0
const AES_KEY_7_S = 0
const AES_TEXT_IN_0_S = 0
const AES_TEXT_IN_1_S = 0
const AES_TEXT_IN_2_S = 0
const AES_TEXT_IN_3_S = 0
const AES_TEXT_OUT_0_S = 0
const AES_TEXT_OUT_1_S = 0
const AES_TEXT_OUT_2_S = 0
const AES_TEXT_OUT_3_S = 0
const AES_MODE_S = 0
const AES_ENDIAN_S = 0
const AES_TRIGGER_S = 0
const AES_STATE_S = 0
const AES_IV_MEM_SIZE_BYTES = 16
const AES_H_MEM_SIZE_BYTES = 16
const AES_J0_MEM_SIZE_BYTES = 16
const AES_T0_MEM_SIZE_BYTES = 16
const AES_DMA_ENABLE_S = 0
const AES_BLOCK_MODE_S = 0
const AES_BLOCK_NUM_S = 0
const AES_INC_SEL_S = 0
const AES_AAD_BLOCK_NUM_S = 0
const AES_REMAINDER_BIT_NUM_S = 0
const AES_CONTINUE_S = 0
const AES_INT_CLEAR_S = 0
const AES_INT_ENA_S = 0
const AES_DATE_S = 0
const AES_DMA_EXIT_S = 0
const DS_Y_MEM_SIZE_BYTES = 512
const DS_M_MEM_SIZE_BYTES = 512
const DS_RB_MEM_SIZE_BYTES = 512
const DS_BOX_MEM_SIZE_BYTES = 48
const DS_IV_MEM_SIZE_BYTES = 16
const DS_X_MEM_SIZE_BYTES = 512
const DS_Z_MEM_SIZE_BYTES = 512
const DS_SET_START_S = 0
const DS_SET_CONTINUE_S = 0
const DS_SET_FINISH_S = 0
const DS_QUERY_BUSY_S = 0
const DS_QUERY_KEY_WRONG_S = 0
const DS_MD_ERROR_S = 0
const DS_PADDING_BAD_S = 1
const DS_DATE_S = 0
const HMAC_SET_START_S = 0
const HMAC_PURPOSE_SET_S = 0
const HMAC_KEY_SET_S = 0
const HMAC_SET_PARA_END_S = 0
const HMAC_SET_TEXT_ONE_S = 0
const HMAC_SET_TEXT_ING_S = 0
const HMAC_SET_TEXT_END_S = 0
const HMAC_SET_RESULT_END_S = 0
const HMAC_SET_INVALIDATE_JTAG_S = 0
const HMAC_SET_INVALIDATE_DS_S = 0
const HMAC_QUREY_CHECK_S = 0
const HMAC_BUSY_STATE_S = 0
const HMAC_WR_MESSAGE_MEM_SIZE_BYTES = 64
const HMAC_RD_RESULT_MEM_SIZE_BYTES = 32
const HMAC_SET_TEXT_PAD_S = 0
const HMAC_SET_ONE_BLOCK_S = 0
const HMAC_SOFT_JTAG_CTRL_S = 0
const HMAC_WR_JTAG_S = 0
const HMAC_DATE_S = 0
const SHA_MODE_S = 0
const SHA_T_STRING_S = 0
const SHA_T_LENGTH_S = 0
const SHA_DMA_BLOCK_NUM_S = 0
const SHA_START_S = 1
const SHA_CONTINUE_S = 1
const SHA_BUSY_STATE_S = 0
const SHA_DMA_START_S = 0
const SHA_DMA_CONTINUE_S = 0
const SHA_CLEAR_INTERRUPT_S = 0
const SHA_INTERRUPT_ENA_S = 0
const SHA_DATE_S = 0
const SHA_H_MEM_SIZE_BYTES = 64
const SHA_M_MEM_SIZE_BYTES = 64
const TEE_M0_MODE_S = 0
const TEE_M1_MODE_S = 0
const TEE_M2_MODE_S = 0
const TEE_M3_MODE_S = 0
const TEE_M4_MODE_S = 0
const TEE_M5_MODE_S = 0
const TEE_M6_MODE_S = 0
const TEE_M7_MODE_S = 0
const TEE_M8_MODE_S = 0
const TEE_M9_MODE_S = 0
const TEE_M10_MODE_S = 0
const TEE_M11_MODE_S = 0
const TEE_M12_MODE_S = 0
const TEE_M13_MODE_S = 0
const TEE_M14_MODE_S = 0
const TEE_M15_MODE_S = 0
const TEE_M16_MODE_S = 0
const TEE_M17_MODE_S = 0
const TEE_M18_MODE_S = 0
const TEE_M19_MODE_S = 0
const TEE_M20_MODE_S = 0
const TEE_M21_MODE_S = 0
const TEE_M22_MODE_S = 0
const TEE_M23_MODE_S = 0
const TEE_M24_MODE_S = 0
const TEE_M25_MODE_S = 0
const TEE_M26_MODE_S = 0
const TEE_M27_MODE_S = 0
const TEE_M28_MODE_S = 0
const TEE_M29_MODE_S = 0
const TEE_M30_MODE_S = 0
const TEE_M31_MODE_S = 0
const TEE_CLK_EN_S = 0
const TEE_DATE_S = 0
const LP_TEE_M0_MODE_S = 0
const LP_TEE_CLK_EN_S = 0
const LP_TEE_FORCE_ACC_HPMEM_EN_S = 0
const LP_TEE_DATE_S = 0
const LP_APM0_REGION_FILTER_EN_S = 0
const LP_APM0_REGION0_ADDR_START_S = 0
const LP_APM0_REGION0_ADDR_END_S = 0
const LP_APM0_REGION0_R0_PMS_X_S = 0
const LP_APM0_REGION0_R0_PMS_W_S = 1
const LP_APM0_REGION0_R0_PMS_R_S = 2
const LP_APM0_REGION0_R1_PMS_X_S = 4
const LP_APM0_REGION0_R1_PMS_W_S = 5
const LP_APM0_REGION0_R1_PMS_R_S = 6
const LP_APM0_REGION0_R2_PMS_X_S = 8
const LP_APM0_REGION0_R2_PMS_W_S = 9
const LP_APM0_REGION0_R2_PMS_R_S = 10
const LP_APM0_REGION1_ADDR_START_S = 0
const LP_APM0_REGION1_ADDR_END_S = 0
const LP_APM0_REGION1_R0_PMS_X_S = 0
const LP_APM0_REGION1_R0_PMS_W_S = 1
const LP_APM0_REGION1_R0_PMS_R_S = 2
const LP_APM0_REGION1_R1_PMS_X_S = 4
const LP_APM0_REGION1_R1_PMS_W_S = 5
const LP_APM0_REGION1_R1_PMS_R_S = 6
const LP_APM0_REGION1_R2_PMS_X_S = 8
const LP_APM0_REGION1_R2_PMS_W_S = 9
const LP_APM0_REGION1_R2_PMS_R_S = 10
const LP_APM0_REGION2_ADDR_START_S = 0
const LP_APM0_REGION2_ADDR_END_S = 0
const LP_APM0_REGION2_R0_PMS_X_S = 0
const LP_APM0_REGION2_R0_PMS_W_S = 1
const LP_APM0_REGION2_R0_PMS_R_S = 2
const LP_APM0_REGION2_R1_PMS_X_S = 4
const LP_APM0_REGION2_R1_PMS_W_S = 5
const LP_APM0_REGION2_R1_PMS_R_S = 6
const LP_APM0_REGION2_R2_PMS_X_S = 8
const LP_APM0_REGION2_R2_PMS_W_S = 9
const LP_APM0_REGION2_R2_PMS_R_S = 10
const LP_APM0_REGION3_ADDR_START_S = 0
const LP_APM0_REGION3_ADDR_END_S = 0
const LP_APM0_REGION3_R0_PMS_X_S = 0
const LP_APM0_REGION3_R0_PMS_W_S = 1
const LP_APM0_REGION3_R0_PMS_R_S = 2
const LP_APM0_REGION3_R1_PMS_X_S = 4
const LP_APM0_REGION3_R1_PMS_W_S = 5
const LP_APM0_REGION3_R1_PMS_R_S = 6
const LP_APM0_REGION3_R2_PMS_X_S = 8
const LP_APM0_REGION3_R2_PMS_W_S = 9
const LP_APM0_REGION3_R2_PMS_R_S = 10
const LP_APM0_M0_PMS_FUNC_EN_S = 0
const LP_APM0_M0_EXCEPTION_STATUS_S = 0
const LP_APM0_M0_REGION_STATUS_CLR_S = 0
const LP_APM0_M0_EXCEPTION_REGION_S = 0
const LP_APM0_M0_EXCEPTION_MODE_S = 16
const LP_APM0_M0_EXCEPTION_ID_S = 18
const LP_APM0_M0_EXCEPTION_ADDR_S = 0
const LP_APM0_M0_APM_INT_EN_S = 0
const LP_APM0_CLK_EN_S = 0
const LP_APM0_DATE_S = 0
const HP_APM_REGION_FILTER_EN_S = 0
const HP_APM_REGION0_ADDR_START_S = 0
const HP_APM_REGION0_ADDR_END_S = 0
const HP_APM_REGION0_R0_PMS_X_S = 0
const HP_APM_REGION0_R0_PMS_W_S = 1
const HP_APM_REGION0_R0_PMS_R_S = 2
const HP_APM_REGION0_R1_PMS_X_S = 4
const HP_APM_REGION0_R1_PMS_W_S = 5
const HP_APM_REGION0_R1_PMS_R_S = 6
const HP_APM_REGION0_R2_PMS_X_S = 8
const HP_APM_REGION0_R2_PMS_W_S = 9
const HP_APM_REGION0_R2_PMS_R_S = 10
const HP_APM_REGION1_ADDR_START_S = 0
const HP_APM_REGION1_ADDR_END_S = 0
const HP_APM_REGION1_R0_PMS_X_S = 0
const HP_APM_REGION1_R0_PMS_W_S = 1
const HP_APM_REGION1_R0_PMS_R_S = 2
const HP_APM_REGION1_R1_PMS_X_S = 4
const HP_APM_REGION1_R1_PMS_W_S = 5
const HP_APM_REGION1_R1_PMS_R_S = 6
const HP_APM_REGION1_R2_PMS_X_S = 8
const HP_APM_REGION1_R2_PMS_W_S = 9
const HP_APM_REGION1_R2_PMS_R_S = 10
const HP_APM_REGION2_ADDR_START_S = 0
const HP_APM_REGION2_ADDR_END_S = 0
const HP_APM_REGION2_R0_PMS_X_S = 0
const HP_APM_REGION2_R0_PMS_W_S = 1
const HP_APM_REGION2_R0_PMS_R_S = 2
const HP_APM_REGION2_R1_PMS_X_S = 4
const HP_APM_REGION2_R1_PMS_W_S = 5
const HP_APM_REGION2_R1_PMS_R_S = 6
const HP_APM_REGION2_R2_PMS_X_S = 8
const HP_APM_REGION2_R2_PMS_W_S = 9
const HP_APM_REGION2_R2_PMS_R_S = 10
const HP_APM_REGION3_ADDR_START_S = 0
const HP_APM_REGION3_ADDR_END_S = 0
const HP_APM_REGION3_R0_PMS_X_S = 0
const HP_APM_REGION3_R0_PMS_W_S = 1
const HP_APM_REGION3_R0_PMS_R_S = 2
const HP_APM_REGION3_R1_PMS_X_S = 4
const HP_APM_REGION3_R1_PMS_W_S = 5
const HP_APM_REGION3_R1_PMS_R_S = 6
const HP_APM_REGION3_R2_PMS_X_S = 8
const HP_APM_REGION3_R2_PMS_W_S = 9
const HP_APM_REGION3_R2_PMS_R_S = 10
const HP_APM_REGION4_ADDR_START_S = 0
const HP_APM_REGION4_ADDR_END_S = 0
const HP_APM_REGION4_R0_PMS_X_S = 0
const HP_APM_REGION4_R0_PMS_W_S = 1
const HP_APM_REGION4_R0_PMS_R_S = 2
const HP_APM_REGION4_R1_PMS_X_S = 4
const HP_APM_REGION4_R1_PMS_W_S = 5
const HP_APM_REGION4_R1_PMS_R_S = 6
const HP_APM_REGION4_R2_PMS_X_S = 8
const HP_APM_REGION4_R2_PMS_W_S = 9
const HP_APM_REGION4_R2_PMS_R_S = 10
const HP_APM_REGION5_ADDR_START_S = 0
const HP_APM_REGION5_ADDR_END_S = 0
const HP_APM_REGION5_R0_PMS_X_S = 0
const HP_APM_REGION5_R0_PMS_W_S = 1
const HP_APM_REGION5_R0_PMS_R_S = 2
const HP_APM_REGION5_R1_PMS_X_S = 4
const HP_APM_REGION5_R1_PMS_W_S = 5
const HP_APM_REGION5_R1_PMS_R_S = 6
const HP_APM_REGION5_R2_PMS_X_S = 8
const HP_APM_REGION5_R2_PMS_W_S = 9
const HP_APM_REGION5_R2_PMS_R_S = 10
const HP_APM_REGION6_ADDR_START_S = 0
const HP_APM_REGION6_ADDR_END_S = 0
const HP_APM_REGION6_R0_PMS_X_S = 0
const HP_APM_REGION6_R0_PMS_W_S = 1
const HP_APM_REGION6_R0_PMS_R_S = 2
const HP_APM_REGION6_R1_PMS_X_S = 4
const HP_APM_REGION6_R1_PMS_W_S = 5
const HP_APM_REGION6_R1_PMS_R_S = 6
const HP_APM_REGION6_R2_PMS_X_S = 8
const HP_APM_REGION6_R2_PMS_W_S = 9
const HP_APM_REGION6_R2_PMS_R_S = 10
const HP_APM_REGION7_ADDR_START_S = 0
const HP_APM_REGION7_ADDR_END_S = 0
const HP_APM_REGION7_R0_PMS_X_S = 0
const HP_APM_REGION7_R0_PMS_W_S = 1
const HP_APM_REGION7_R0_PMS_R_S = 2
const HP_APM_REGION7_R1_PMS_X_S = 4
const HP_APM_REGION7_R1_PMS_W_S = 5
const HP_APM_REGION7_R1_PMS_R_S = 6
const HP_APM_REGION7_R2_PMS_X_S = 8
const HP_APM_REGION7_R2_PMS_W_S = 9
const HP_APM_REGION7_R2_PMS_R_S = 10
const HP_APM_REGION8_ADDR_START_S = 0
const HP_APM_REGION8_ADDR_END_S = 0
const HP_APM_REGION8_R0_PMS_X_S = 0
const HP_APM_REGION8_R0_PMS_W_S = 1
const HP_APM_REGION8_R0_PMS_R_S = 2
const HP_APM_REGION8_R1_PMS_X_S = 4
const HP_APM_REGION8_R1_PMS_W_S = 5
const HP_APM_REGION8_R1_PMS_R_S = 6
const HP_APM_REGION8_R2_PMS_X_S = 8
const HP_APM_REGION8_R2_PMS_W_S = 9
const HP_APM_REGION8_R2_PMS_R_S = 10
const HP_APM_REGION9_ADDR_START_S = 0
const HP_APM_REGION9_ADDR_END_S = 0
const HP_APM_REGION9_R0_PMS_X_S = 0
const HP_APM_REGION9_R0_PMS_W_S = 1
const HP_APM_REGION9_R0_PMS_R_S = 2
const HP_APM_REGION9_R1_PMS_X_S = 4
const HP_APM_REGION9_R1_PMS_W_S = 5
const HP_APM_REGION9_R1_PMS_R_S = 6
const HP_APM_REGION9_R2_PMS_X_S = 8
const HP_APM_REGION9_R2_PMS_W_S = 9
const HP_APM_REGION9_R2_PMS_R_S = 10
const HP_APM_REGION10_ADDR_START_S = 0
const HP_APM_REGION10_ADDR_END_S = 0
const HP_APM_REGION10_R0_PMS_X_S = 0
const HP_APM_REGION10_R0_PMS_W_S = 1
const HP_APM_REGION10_R0_PMS_R_S = 2
const HP_APM_REGION10_R1_PMS_X_S = 4
const HP_APM_REGION10_R1_PMS_W_S = 5
const HP_APM_REGION10_R1_PMS_R_S = 6
const HP_APM_REGION10_R2_PMS_X_S = 8
const HP_APM_REGION10_R2_PMS_W_S = 9
const HP_APM_REGION10_R2_PMS_R_S = 10
const HP_APM_REGION11_ADDR_START_S = 0
const HP_APM_REGION11_ADDR_END_S = 0
const HP_APM_REGION11_R0_PMS_X_S = 0
const HP_APM_REGION11_R0_PMS_W_S = 1
const HP_APM_REGION11_R0_PMS_R_S = 2
const HP_APM_REGION11_R1_PMS_X_S = 4
const HP_APM_REGION11_R1_PMS_W_S = 5
const HP_APM_REGION11_R1_PMS_R_S = 6
const HP_APM_REGION11_R2_PMS_X_S = 8
const HP_APM_REGION11_R2_PMS_W_S = 9
const HP_APM_REGION11_R2_PMS_R_S = 10
const HP_APM_REGION12_ADDR_START_S = 0
const HP_APM_REGION12_ADDR_END_S = 0
const HP_APM_REGION12_R0_PMS_X_S = 0
const HP_APM_REGION12_R0_PMS_W_S = 1
const HP_APM_REGION12_R0_PMS_R_S = 2
const HP_APM_REGION12_R1_PMS_X_S = 4
const HP_APM_REGION12_R1_PMS_W_S = 5
const HP_APM_REGION12_R1_PMS_R_S = 6
const HP_APM_REGION12_R2_PMS_X_S = 8
const HP_APM_REGION12_R2_PMS_W_S = 9
const HP_APM_REGION12_R2_PMS_R_S = 10
const HP_APM_REGION13_ADDR_START_S = 0
const HP_APM_REGION13_ADDR_END_S = 0
const HP_APM_REGION13_R0_PMS_X_S = 0
const HP_APM_REGION13_R0_PMS_W_S = 1
const HP_APM_REGION13_R0_PMS_R_S = 2
const HP_APM_REGION13_R1_PMS_X_S = 4
const HP_APM_REGION13_R1_PMS_W_S = 5
const HP_APM_REGION13_R1_PMS_R_S = 6
const HP_APM_REGION13_R2_PMS_X_S = 8
const HP_APM_REGION13_R2_PMS_W_S = 9
const HP_APM_REGION13_R2_PMS_R_S = 10
const HP_APM_REGION14_ADDR_START_S = 0
const HP_APM_REGION14_ADDR_END_S = 0
const HP_APM_REGION14_R0_PMS_X_S = 0
const HP_APM_REGION14_R0_PMS_W_S = 1
const HP_APM_REGION14_R0_PMS_R_S = 2
const HP_APM_REGION14_R1_PMS_X_S = 4
const HP_APM_REGION14_R1_PMS_W_S = 5
const HP_APM_REGION14_R1_PMS_R_S = 6
const HP_APM_REGION14_R2_PMS_X_S = 8
const HP_APM_REGION14_R2_PMS_W_S = 9
const HP_APM_REGION14_R2_PMS_R_S = 10
const HP_APM_REGION15_ADDR_START_S = 0
const HP_APM_REGION15_ADDR_END_S = 0
const HP_APM_REGION15_R0_PMS_X_S = 0
const HP_APM_REGION15_R0_PMS_W_S = 1
const HP_APM_REGION15_R0_PMS_R_S = 2
const HP_APM_REGION15_R1_PMS_X_S = 4
const HP_APM_REGION15_R1_PMS_W_S = 5
const HP_APM_REGION15_R1_PMS_R_S = 6
const HP_APM_REGION15_R2_PMS_X_S = 8
const HP_APM_REGION15_R2_PMS_W_S = 9
const HP_APM_REGION15_R2_PMS_R_S = 10
const HP_APM_M0_PMS_FUNC_EN_S = 0
const HP_APM_M1_PMS_FUNC_EN_S = 1
const HP_APM_M2_PMS_FUNC_EN_S = 2
const HP_APM_M3_PMS_FUNC_EN_S = 3
const HP_APM_M0_EXCEPTION_STATUS_S = 0
const HP_APM_M0_REGION_STATUS_CLR_S = 0
const HP_APM_M0_EXCEPTION_REGION_S = 0
const HP_APM_M0_EXCEPTION_MODE_S = 16
const HP_APM_M0_EXCEPTION_ID_S = 18
const HP_APM_M0_EXCEPTION_ADDR_S = 0
const HP_APM_M1_EXCEPTION_STATUS_S = 0
const HP_APM_M1_REGION_STATUS_CLR_S = 0
const HP_APM_M1_EXCEPTION_REGION_S = 0
const HP_APM_M1_EXCEPTION_MODE_S = 16
const HP_APM_M1_EXCEPTION_ID_S = 18
const HP_APM_M1_EXCEPTION_ADDR_S = 0
const HP_APM_M2_EXCEPTION_STATUS_S = 0
const HP_APM_M2_REGION_STATUS_CLR_S = 0
const HP_APM_M2_EXCEPTION_REGION_S = 0
const HP_APM_M2_EXCEPTION_MODE_S = 16
const HP_APM_M2_EXCEPTION_ID_S = 18
const HP_APM_M2_EXCEPTION_ADDR_S = 0
const HP_APM_M3_EXCEPTION_STATUS_S = 0
const HP_APM_M3_REGION_STATUS_CLR_S = 0
const HP_APM_M3_EXCEPTION_REGION_S = 0
const HP_APM_M3_EXCEPTION_MODE_S = 16
const HP_APM_M3_EXCEPTION_ID_S = 18
const HP_APM_M3_EXCEPTION_ADDR_S = 0
const HP_APM_M0_APM_INT_EN_S = 0
const HP_APM_M1_APM_INT_EN_S = 1
const HP_APM_M2_APM_INT_EN_S = 2
const HP_APM_M3_APM_INT_EN_S = 3
const HP_APM_CLK_EN_S = 0
const HP_APM_DATE_S = 0
const LP_APM_REGION_FILTER_EN_S = 0
const LP_APM_REGION0_ADDR_START_S = 0
const LP_APM_REGION0_ADDR_END_S = 0
const LP_APM_REGION0_R0_PMS_X_S = 0
const LP_APM_REGION0_R0_PMS_W_S = 1
const LP_APM_REGION0_R0_PMS_R_S = 2
const LP_APM_REGION0_R1_PMS_X_S = 4
const LP_APM_REGION0_R1_PMS_W_S = 5
const LP_APM_REGION0_R1_PMS_R_S = 6
const LP_APM_REGION0_R2_PMS_X_S = 8
const LP_APM_REGION0_R2_PMS_W_S = 9
const LP_APM_REGION0_R2_PMS_R_S = 10
const LP_APM_REGION1_ADDR_START_S = 0
const LP_APM_REGION1_ADDR_END_S = 0
const LP_APM_REGION1_R0_PMS_X_S = 0
const LP_APM_REGION1_R0_PMS_W_S = 1
const LP_APM_REGION1_R0_PMS_R_S = 2
const LP_APM_REGION1_R1_PMS_X_S = 4
const LP_APM_REGION1_R1_PMS_W_S = 5
const LP_APM_REGION1_R1_PMS_R_S = 6
const LP_APM_REGION1_R2_PMS_X_S = 8
const LP_APM_REGION1_R2_PMS_W_S = 9
const LP_APM_REGION1_R2_PMS_R_S = 10
const LP_APM_REGION2_ADDR_START_S = 0
const LP_APM_REGION2_ADDR_END_S = 0
const LP_APM_REGION2_R0_PMS_X_S = 0
const LP_APM_REGION2_R0_PMS_W_S = 1
const LP_APM_REGION2_R0_PMS_R_S = 2
const LP_APM_REGION2_R1_PMS_X_S = 4
const LP_APM_REGION2_R1_PMS_W_S = 5
const LP_APM_REGION2_R1_PMS_R_S = 6
const LP_APM_REGION2_R2_PMS_X_S = 8
const LP_APM_REGION2_R2_PMS_W_S = 9
const LP_APM_REGION2_R2_PMS_R_S = 10
const LP_APM_REGION3_ADDR_START_S = 0
const LP_APM_REGION3_ADDR_END_S = 0
const LP_APM_REGION3_R0_PMS_X_S = 0
const LP_APM_REGION3_R0_PMS_W_S = 1
const LP_APM_REGION3_R0_PMS_R_S = 2
const LP_APM_REGION3_R1_PMS_X_S = 4
const LP_APM_REGION3_R1_PMS_W_S = 5
const LP_APM_REGION3_R1_PMS_R_S = 6
const LP_APM_REGION3_R2_PMS_X_S = 8
const LP_APM_REGION3_R2_PMS_W_S = 9
const LP_APM_REGION3_R2_PMS_R_S = 10
const LP_APM_M0_PMS_FUNC_EN_S = 0
const LP_APM_M1_PMS_FUNC_EN_S = 1
const LP_APM_M0_EXCEPTION_STATUS_S = 0
const LP_APM_M0_REGION_STATUS_CLR_S = 0
const LP_APM_M0_EXCEPTION_REGION_S = 0
const LP_APM_M0_EXCEPTION_MODE_S = 16
const LP_APM_M0_EXCEPTION_ID_S = 18
const LP_APM_M0_EXCEPTION_ADDR_S = 0
const LP_APM_M1_EXCEPTION_STATUS_S = 0
const LP_APM_M1_REGION_STATUS_CLR_S = 0
const LP_APM_M1_EXCEPTION_REGION_S = 0
const LP_APM_M1_EXCEPTION_MODE_S = 16
const LP_APM_M1_EXCEPTION_ID_S = 18
const LP_APM_M1_EXCEPTION_ADDR_S = 0
const LP_APM_M0_APM_INT_EN_S = 0
const LP_APM_M1_APM_INT_EN_S = 1
const LP_APM_CLK_EN_S = 0
const LP_APM_DATE_S = 0
const LEDC_TIMER_SEL_CH0_S = 0
const LEDC_SIG_OUT_EN_CH0_S = 2
const LEDC_IDLE_LV_CH0_S = 3
const LEDC_PARA_UP_CH0_S = 4
const LEDC_OVF_NUM_CH0_S = 5
const LEDC_OVF_CNT_EN_CH0_S = 15
const LEDC_OVF_CNT_RESET_CH0_S = 16
const LEDC_HPOINT_CH0_S = 0
const LEDC_DUTY_CH0_S = 0
const LEDC_DUTY_START_CH0_S = 31
const LEDC_DUTY_CH0_R_S = 0
const LEDC_TIMER_SEL_CH1_S = 0
const LEDC_SIG_OUT_EN_CH1_S = 2
const LEDC_IDLE_LV_CH1_S = 3
const LEDC_PARA_UP_CH1_S = 4
const LEDC_OVF_NUM_CH1_S = 5
const LEDC_OVF_CNT_EN_CH1_S = 15
const LEDC_OVF_CNT_RESET_CH1_S = 16
const LEDC_HPOINT_CH1_S = 0
const LEDC_DUTY_CH1_S = 0
const LEDC_DUTY_START_CH1_S = 31
const LEDC_DUTY_CH1_R_S = 0
const LEDC_TIMER_SEL_CH2_S = 0
const LEDC_SIG_OUT_EN_CH2_S = 2
const LEDC_IDLE_LV_CH2_S = 3
const LEDC_PARA_UP_CH2_S = 4
const LEDC_OVF_NUM_CH2_S = 5
const LEDC_OVF_CNT_EN_CH2_S = 15
const LEDC_OVF_CNT_RESET_CH2_S = 16
const LEDC_HPOINT_CH2_S = 0
const LEDC_DUTY_CH2_S = 0
const LEDC_DUTY_START_CH2_S = 31
const LEDC_DUTY_CH2_R_S = 0
const LEDC_TIMER_SEL_CH3_S = 0
const LEDC_SIG_OUT_EN_CH3_S = 2
const LEDC_IDLE_LV_CH3_S = 3
const LEDC_PARA_UP_CH3_S = 4
const LEDC_OVF_NUM_CH3_S = 5
const LEDC_OVF_CNT_EN_CH3_S = 15
const LEDC_OVF_CNT_RESET_CH3_S = 16
const LEDC_HPOINT_CH3_S = 0
const LEDC_DUTY_CH3_S = 0
const LEDC_DUTY_START_CH3_S = 31
const LEDC_DUTY_CH3_R_S = 0
const LEDC_TIMER_SEL_CH4_S = 0
const LEDC_SIG_OUT_EN_CH4_S = 2
const LEDC_IDLE_LV_CH4_S = 3
const LEDC_PARA_UP_CH4_S = 4
const LEDC_OVF_NUM_CH4_S = 5
const LEDC_OVF_CNT_EN_CH4_S = 15
const LEDC_OVF_CNT_RESET_CH4_S = 16
const LEDC_HPOINT_CH4_S = 0
const LEDC_DUTY_CH4_S = 0
const LEDC_DUTY_START_CH4_S = 31
const LEDC_DUTY_CH4_R_S = 0
const LEDC_TIMER_SEL_CH5_S = 0
const LEDC_SIG_OUT_EN_CH5_S = 2
const LEDC_IDLE_LV_CH5_S = 3
const LEDC_PARA_UP_CH5_S = 4
const LEDC_OVF_NUM_CH5_S = 5
const LEDC_OVF_CNT_EN_CH5_S = 15
const LEDC_OVF_CNT_RESET_CH5_S = 16
const LEDC_HPOINT_CH5_S = 0
const LEDC_DUTY_CH5_S = 0
const LEDC_DUTY_START_CH5_S = 31
const LEDC_DUTY_CH5_R_S = 0
const LEDC_TIMER0_DUTY_RES_S = 0
const LEDC_CLK_DIV_TIMER0_S = 5
const LEDC_TIMER0_PAUSE_S = 23
const LEDC_TIMER0_RST_S = 24
const LEDC_TICK_SEL_TIMER0_S = 25
const LEDC_TIMER0_PARA_UP_S = 26
const LEDC_TIMER0_CNT_S = 0
const LEDC_TIMER1_DUTY_RES_S = 0
const LEDC_CLK_DIV_TIMER1_S = 5
const LEDC_TIMER1_PAUSE_S = 23
const LEDC_TIMER1_RST_S = 24
const LEDC_TICK_SEL_TIMER1_S = 25
const LEDC_TIMER1_PARA_UP_S = 26
const LEDC_TIMER1_CNT_S = 0
const LEDC_TIMER2_DUTY_RES_S = 0
const LEDC_CLK_DIV_TIMER2_S = 5
const LEDC_TIMER2_PAUSE_S = 23
const LEDC_TIMER2_RST_S = 24
const LEDC_TICK_SEL_TIMER2_S = 25
const LEDC_TIMER2_PARA_UP_S = 26
const LEDC_TIMER2_CNT_S = 0
const LEDC_TIMER3_DUTY_RES_S = 0
const LEDC_CLK_DIV_TIMER3_S = 5
const LEDC_TIMER3_PAUSE_S = 23
const LEDC_TIMER3_RST_S = 24
const LEDC_TICK_SEL_TIMER3_S = 25
const LEDC_TIMER3_PARA_UP_S = 26
const LEDC_TIMER3_CNT_S = 0
const LEDC_TIMER0_OVF_INT_RAW_S = 0
const LEDC_TIMER1_OVF_INT_RAW_S = 1
const LEDC_TIMER2_OVF_INT_RAW_S = 2
const LEDC_TIMER3_OVF_INT_RAW_S = 3
const LEDC_DUTY_CHNG_END_CH0_INT_RAW_S = 4
const LEDC_DUTY_CHNG_END_CH1_INT_RAW_S = 5
const LEDC_DUTY_CHNG_END_CH2_INT_RAW_S = 6
const LEDC_DUTY_CHNG_END_CH3_INT_RAW_S = 7
const LEDC_DUTY_CHNG_END_CH4_INT_RAW_S = 8
const LEDC_DUTY_CHNG_END_CH5_INT_RAW_S = 9
const LEDC_OVF_CNT_CH0_INT_RAW_S = 12
const LEDC_OVF_CNT_CH1_INT_RAW_S = 13
const LEDC_OVF_CNT_CH2_INT_RAW_S = 14
const LEDC_OVF_CNT_CH3_INT_RAW_S = 15
const LEDC_OVF_CNT_CH4_INT_RAW_S = 16
const LEDC_OVF_CNT_CH5_INT_RAW_S = 17
const LEDC_TIMER0_OVF_INT_ST_S = 0
const LEDC_TIMER1_OVF_INT_ST_S = 1
const LEDC_TIMER2_OVF_INT_ST_S = 2
const LEDC_TIMER3_OVF_INT_ST_S = 3
const LEDC_DUTY_CHNG_END_CH0_INT_ST_S = 4
const LEDC_DUTY_CHNG_END_CH1_INT_ST_S = 5
const LEDC_DUTY_CHNG_END_CH2_INT_ST_S = 6
const LEDC_DUTY_CHNG_END_CH3_INT_ST_S = 7
const LEDC_DUTY_CHNG_END_CH4_INT_ST_S = 8
const LEDC_DUTY_CHNG_END_CH5_INT_ST_S = 9
const LEDC_OVF_CNT_CH0_INT_ST_S = 12
const LEDC_OVF_CNT_CH1_INT_ST_S = 13
const LEDC_OVF_CNT_CH2_INT_ST_S = 14
const LEDC_OVF_CNT_CH3_INT_ST_S = 15
const LEDC_OVF_CNT_CH4_INT_ST_S = 16
const LEDC_OVF_CNT_CH5_INT_ST_S = 17
const LEDC_TIMER0_OVF_INT_ENA_S = 0
const LEDC_TIMER1_OVF_INT_ENA_S = 1
const LEDC_TIMER2_OVF_INT_ENA_S = 2
const LEDC_TIMER3_OVF_INT_ENA_S = 3
const LEDC_DUTY_CHNG_END_CH0_INT_ENA_S = 4
const LEDC_DUTY_CHNG_END_CH1_INT_ENA_S = 5
const LEDC_DUTY_CHNG_END_CH2_INT_ENA_S = 6
const LEDC_DUTY_CHNG_END_CH3_INT_ENA_S = 7
const LEDC_DUTY_CHNG_END_CH4_INT_ENA_S = 8
const LEDC_DUTY_CHNG_END_CH5_INT_ENA_S = 9
const LEDC_OVF_CNT_CH0_INT_ENA_S = 12
const LEDC_OVF_CNT_CH1_INT_ENA_S = 13
const LEDC_OVF_CNT_CH2_INT_ENA_S = 14
const LEDC_OVF_CNT_CH3_INT_ENA_S = 15
const LEDC_OVF_CNT_CH4_INT_ENA_S = 16
const LEDC_OVF_CNT_CH5_INT_ENA_S = 17
const LEDC_TIMER0_OVF_INT_CLR_S = 0
const LEDC_TIMER1_OVF_INT_CLR_S = 1
const LEDC_TIMER2_OVF_INT_CLR_S = 2
const LEDC_TIMER3_OVF_INT_CLR_S = 3
const LEDC_DUTY_CHNG_END_CH0_INT_CLR_S = 4
const LEDC_DUTY_CHNG_END_CH1_INT_CLR_S = 5
const LEDC_DUTY_CHNG_END_CH2_INT_CLR_S = 6
const LEDC_DUTY_CHNG_END_CH3_INT_CLR_S = 7
const LEDC_DUTY_CHNG_END_CH4_INT_CLR_S = 8
const LEDC_DUTY_CHNG_END_CH5_INT_CLR_S = 9
const LEDC_OVF_CNT_CH0_INT_CLR_S = 12
const LEDC_OVF_CNT_CH1_INT_CLR_S = 13
const LEDC_OVF_CNT_CH2_INT_CLR_S = 14
const LEDC_OVF_CNT_CH3_INT_CLR_S = 15
const LEDC_OVF_CNT_CH4_INT_CLR_S = 16
const LEDC_OVF_CNT_CH5_INT_CLR_S = 17
const LEDC_CH0_GAMMA_DUTY_INC_S = 0
const LEDC_CH0_GAMMA_DUTY_CYCLE_S = 1
const LEDC_CH0_GAMMA_SCALE_S = 11
const LEDC_CH0_GAMMA_DUTY_NUM_S = 21
const LEDC_CH0_GAMMA_WR_ADDR_S = 0
const LEDC_CH0_GAMMA_RD_ADDR_S = 0
const LEDC_CH0_GAMMA_RD_DATA_S = 0
const LEDC_CH1_GAMMA_DUTY_INC_S = 0
const LEDC_CH1_GAMMA_DUTY_CYCLE_S = 1
const LEDC_CH1_GAMMA_SCALE_S = 11
const LEDC_CH1_GAMMA_DUTY_NUM_S = 21
const LEDC_CH1_GAMMA_WR_ADDR_S = 0
const LEDC_CH1_GAMMA_RD_ADDR_S = 0
const LEDC_CH1_GAMMA_RD_DATA_S = 0
const LEDC_CH2_GAMMA_DUTY_INC_S = 0
const LEDC_CH2_GAMMA_DUTY_CYCLE_S = 1
const LEDC_CH2_GAMMA_SCALE_S = 11
const LEDC_CH2_GAMMA_DUTY_NUM_S = 21
const LEDC_CH2_GAMMA_WR_ADDR_S = 0
const LEDC_CH2_GAMMA_RD_ADDR_S = 0
const LEDC_CH2_GAMMA_RD_DATA_S = 0
const LEDC_CH3_GAMMA_DUTY_INC_S = 0
const LEDC_CH3_GAMMA_DUTY_CYCLE_S = 1
const LEDC_CH3_GAMMA_SCALE_S = 11
const LEDC_CH3_GAMMA_DUTY_NUM_S = 21
const LEDC_CH3_GAMMA_WR_ADDR_S = 0
const LEDC_CH3_GAMMA_RD_ADDR_S = 0
const LEDC_CH3_GAMMA_RD_DATA_S = 0
const LEDC_CH4_GAMMA_DUTY_INC_S = 0
const LEDC_CH4_GAMMA_DUTY_CYCLE_S = 1
const LEDC_CH4_GAMMA_SCALE_S = 11
const LEDC_CH4_GAMMA_DUTY_NUM_S = 21
const LEDC_CH4_GAMMA_WR_ADDR_S = 0
const LEDC_CH4_GAMMA_RD_ADDR_S = 0
const LEDC_CH4_GAMMA_RD_DATA_S = 0
const LEDC_CH5_GAMMA_DUTY_INC_S = 0
const LEDC_CH5_GAMMA_DUTY_CYCLE_S = 1
const LEDC_CH5_GAMMA_SCALE_S = 11
const LEDC_CH5_GAMMA_DUTY_NUM_S = 21
const LEDC_CH5_GAMMA_WR_ADDR_S = 0
const LEDC_CH5_GAMMA_RD_ADDR_S = 0
const LEDC_CH5_GAMMA_RD_DATA_S = 0
const LEDC_CH0_GAMMA_ENTRY_NUM_S = 0
const LEDC_CH0_GAMMA_PAUSE_S = 5
const LEDC_CH0_GAMMA_RESUME_S = 6
const LEDC_CH1_GAMMA_ENTRY_NUM_S = 0
const LEDC_CH1_GAMMA_PAUSE_S = 5
const LEDC_CH1_GAMMA_RESUME_S = 6
const LEDC_CH2_GAMMA_ENTRY_NUM_S = 0
const LEDC_CH2_GAMMA_PAUSE_S = 5
const LEDC_CH2_GAMMA_RESUME_S = 6
const LEDC_CH3_GAMMA_ENTRY_NUM_S = 0
const LEDC_CH3_GAMMA_PAUSE_S = 5
const LEDC_CH3_GAMMA_RESUME_S = 6
const LEDC_CH4_GAMMA_ENTRY_NUM_S = 0
const LEDC_CH4_GAMMA_PAUSE_S = 5
const LEDC_CH4_GAMMA_RESUME_S = 6
const LEDC_CH5_GAMMA_ENTRY_NUM_S = 0
const LEDC_CH5_GAMMA_PAUSE_S = 5
const LEDC_CH5_GAMMA_RESUME_S = 6
const LEDC_EVT_DUTY_CHNG_END_CH0_EN_S = 0
const LEDC_EVT_DUTY_CHNG_END_CH1_EN_S = 1
const LEDC_EVT_DUTY_CHNG_END_CH2_EN_S = 2
const LEDC_EVT_DUTY_CHNG_END_CH3_EN_S = 3
const LEDC_EVT_DUTY_CHNG_END_CH4_EN_S = 4
const LEDC_EVT_DUTY_CHNG_END_CH5_EN_S = 5
const LEDC_EVT_OVF_CNT_PLS_CH0_EN_S = 8
const LEDC_EVT_OVF_CNT_PLS_CH1_EN_S = 9
const LEDC_EVT_OVF_CNT_PLS_CH2_EN_S = 10
const LEDC_EVT_OVF_CNT_PLS_CH3_EN_S = 11
const LEDC_EVT_OVF_CNT_PLS_CH4_EN_S = 12
const LEDC_EVT_OVF_CNT_PLS_CH5_EN_S = 13
const LEDC_EVT_TIME_OVF_TIMER0_EN_S = 16
const LEDC_EVT_TIME_OVF_TIMER1_EN_S = 17
const LEDC_EVT_TIME_OVF_TIMER2_EN_S = 18
const LEDC_EVT_TIME_OVF_TIMER3_EN_S = 19
const LEDC_EVT_TIME0_CMP_EN_S = 20
const LEDC_EVT_TIME1_CMP_EN_S = 21
const LEDC_EVT_TIME2_CMP_EN_S = 22
const LEDC_EVT_TIME3_CMP_EN_S = 23
const LEDC_TASK_DUTY_SCALE_UPDATE_CH0_EN_S = 24
const LEDC_TASK_DUTY_SCALE_UPDATE_CH1_EN_S = 25
const LEDC_TASK_DUTY_SCALE_UPDATE_CH2_EN_S = 26
const LEDC_TASK_DUTY_SCALE_UPDATE_CH3_EN_S = 27
const LEDC_TASK_DUTY_SCALE_UPDATE_CH4_EN_S = 28
const LEDC_TASK_DUTY_SCALE_UPDATE_CH5_EN_S = 29
const LEDC_TASK_TIMER0_RES_UPDATE_EN_S = 0
const LEDC_TASK_TIMER1_RES_UPDATE_EN_S = 1
const LEDC_TASK_TIMER2_RES_UPDATE_EN_S = 2
const LEDC_TASK_TIMER3_RES_UPDATE_EN_S = 3
const LEDC_TASK_TIMER0_CAP_EN_S = 4
const LEDC_TASK_TIMER1_CAP_EN_S = 5
const LEDC_TASK_TIMER2_CAP_EN_S = 6
const LEDC_TASK_TIMER3_CAP_EN_S = 7
const LEDC_TASK_SIG_OUT_DIS_CH0_EN_S = 8
const LEDC_TASK_SIG_OUT_DIS_CH1_EN_S = 9
const LEDC_TASK_SIG_OUT_DIS_CH2_EN_S = 10
const LEDC_TASK_SIG_OUT_DIS_CH3_EN_S = 11
const LEDC_TASK_SIG_OUT_DIS_CH4_EN_S = 12
const LEDC_TASK_SIG_OUT_DIS_CH5_EN_S = 13
const LEDC_TASK_OVF_CNT_RST_CH0_EN_S = 16
const LEDC_TASK_OVF_CNT_RST_CH1_EN_S = 17
const LEDC_TASK_OVF_CNT_RST_CH2_EN_S = 18
const LEDC_TASK_OVF_CNT_RST_CH3_EN_S = 19
const LEDC_TASK_OVF_CNT_RST_CH4_EN_S = 20
const LEDC_TASK_OVF_CNT_RST_CH5_EN_S = 21
const LEDC_TASK_TIMER0_RST_EN_S = 24
const LEDC_TASK_TIMER1_RST_EN_S = 25
const LEDC_TASK_TIMER2_RST_EN_S = 26
const LEDC_TASK_TIMER3_RST_EN_S = 27
const LEDC_TASK_TIMER0_PAUSE_RESUME_EN_S = 28
const LEDC_TASK_TIMER1_PAUSE_RESUME_EN_S = 29
const LEDC_TASK_TIMER2_PAUSE_RESUME_EN_S = 30
const LEDC_TASK_TIMER3_PAUSE_RESUME_EN_S = 31
const LEDC_TASK_GAMMA_RESTART_CH0_EN_S = 0
const LEDC_TASK_GAMMA_RESTART_CH1_EN_S = 1
const LEDC_TASK_GAMMA_RESTART_CH2_EN_S = 2
const LEDC_TASK_GAMMA_RESTART_CH3_EN_S = 3
const LEDC_TASK_GAMMA_RESTART_CH4_EN_S = 4
const LEDC_TASK_GAMMA_RESTART_CH5_EN_S = 5
const LEDC_TASK_GAMMA_PAUSE_CH0_EN_S = 8
const LEDC_TASK_GAMMA_PAUSE_CH1_EN_S = 9
const LEDC_TASK_GAMMA_PAUSE_CH2_EN_S = 10
const LEDC_TASK_GAMMA_PAUSE_CH3_EN_S = 11
const LEDC_TASK_GAMMA_PAUSE_CH4_EN_S = 12
const LEDC_TASK_GAMMA_PAUSE_CH5_EN_S = 13
const LEDC_TASK_GAMMA_RESUME_CH0_EN_S = 16
const LEDC_TASK_GAMMA_RESUME_CH1_EN_S = 17
const LEDC_TASK_GAMMA_RESUME_CH2_EN_S = 18
const LEDC_TASK_GAMMA_RESUME_CH3_EN_S = 19
const LEDC_TASK_GAMMA_RESUME_CH4_EN_S = 20
const LEDC_TASK_GAMMA_RESUME_CH5_EN_S = 21
const LEDC_TIMER0_CMP_S = 0
const LEDC_TIMER1_CMP_S = 0
const LEDC_TIMER2_CMP_S = 0
const LEDC_TIMER3_CMP_S = 0
const LEDC_TIMER0_CNT_CAP_S = 0
const LEDC_TIMER1_CNT_CAP_S = 0
const LEDC_TIMER2_CNT_CAP_S = 0
const LEDC_TIMER3_CNT_CAP_S = 0
const LEDC_APB_CLK_SEL_S = 0
const LEDC_GAMMA_RAM_CLK_EN_CH0_S = 2
const LEDC_GAMMA_RAM_CLK_EN_CH1_S = 3
const LEDC_GAMMA_RAM_CLK_EN_CH2_S = 4
const LEDC_GAMMA_RAM_CLK_EN_CH3_S = 5
const LEDC_GAMMA_RAM_CLK_EN_CH4_S = 6
const LEDC_GAMMA_RAM_CLK_EN_CH5_S = 7
const LEDC_CLK_EN_S = 31
const LEDC_LEDC_DATE_S = 0
const SDIO_SLC0_TX_RST_S = 0
const SDIO_SLC0_RX_RST_S = 1
const SDIO_SLC_AHBM_FIFO_RST_S = 2
const SDIO_SLC_AHBM_RST_S = 3
const SDIO_SLC0_TX_LOOP_TEST_S = 4
const SDIO_SLC0_RX_LOOP_TEST_S = 5
const SDIO_SLC0_RX_AUTO_WRBACK_S = 6
const SDIO_SLC0_RX_NO_RESTART_CLR_S = 7
const SDIO_SLC0_RXDSCR_BURST_EN_S = 8
const SDIO_SLC0_RXDATA_BURST_EN_S = 9
const SDIO_SLC0_RXLINK_AUTO_RET_S = 10
const SDIO_SLC0_TXLINK_AUTO_RET_S = 11
const SDIO_SLC0_TXDSCR_BURST_EN_S = 12
const SDIO_SLC0_TXDATA_BURST_EN_S = 13
const SDIO_SLC0_TOKEN_AUTO_CLR_S = 14
const SDIO_SLC0_TOKEN_SEL_S = 15
const SDIO_SLC1_TX_RST_S = 16
const SDIO_SLC1_RX_RST_S = 17
const SDIO_SLC0_WR_RETRY_MASK_EN_S = 18
const SDIO_SLC1_WR_RETRY_MASK_EN_S = 19
const SDIO_SLC1_TX_LOOP_TEST_S = 20
const SDIO_SLC1_RX_LOOP_TEST_S = 21
const SDIO_SLC1_RX_AUTO_WRBACK_S = 22
const SDIO_SLC1_RX_NO_RESTART_CLR_S = 23
const SDIO_SLC1_RXDSCR_BURST_EN_S = 24
const SDIO_SLC1_RXDATA_BURST_EN_S = 25
const SDIO_SLC1_RXLINK_AUTO_RET_S = 26
const SDIO_SLC1_TXLINK_AUTO_RET_S = 27
const SDIO_SLC1_TXDSCR_BURST_EN_S = 28
const SDIO_SLC1_TXDATA_BURST_EN_S = 29
const SDIO_SLC1_TOKEN_AUTO_CLR_S = 30
const SDIO_SLC1_TOKEN_SEL_S = 31
const SDIO_SLC_FRHOST_BIT0_INT_RAW_S = 0
const SDIO_SLC_FRHOST_BIT1_INT_RAW_S = 1
const SDIO_SLC_FRHOST_BIT2_INT_RAW_S = 2
const SDIO_SLC_FRHOST_BIT3_INT_RAW_S = 3
const SDIO_SLC_FRHOST_BIT4_INT_RAW_S = 4
const SDIO_SLC_FRHOST_BIT5_INT_RAW_S = 5
const SDIO_SLC_FRHOST_BIT6_INT_RAW_S = 6
const SDIO_SLC_FRHOST_BIT7_INT_RAW_S = 7
const SDIO_SLC0_RX_START_INT_RAW_S = 8
const SDIO_SLC0_TX_START_INT_RAW_S = 9
const SDIO_SLC0_RX_UDF_INT_RAW_S = 10
const SDIO_SLC0_TX_OVF_INT_RAW_S = 11
const SDIO_SLC0_TOKEN0_1TO0_INT_RAW_S = 12
const SDIO_SLC0_TOKEN1_1TO0_INT_RAW_S = 13
const SDIO_SLC0_TX_DONE_INT_RAW_S = 14
const SDIO_SLC0_TX_SUC_EOF_INT_RAW_S = 15
const SDIO_SLC0_RX_DONE_INT_RAW_S = 16
const SDIO_SLC0_RX_EOF_INT_RAW_S = 17
const SDIO_SLC0_TOHOST_INT_RAW_S = 18
const SDIO_SLC0_TX_DSCR_ERR_INT_RAW_S = 19
const SDIO_SLC0_RX_DSCR_ERR_INT_RAW_S = 20
const SDIO_SLC0_TX_DSCR_EMPTY_INT_RAW_S = 21
const SDIO_SLC0_HOST_RD_ACK_INT_RAW_S = 22
const SDIO_SLC0_WR_RETRY_DONE_INT_RAW_S = 23
const SDIO_SLC0_TX_ERR_EOF_INT_RAW_S = 24
const SDIO_CMD_DTC_INT_RAW_S = 25
const SDIO_SLC0_RX_QUICK_EOF_INT_RAW_S = 26
const SDIO_SLC0_HOST_POP_EOF_ERR_INT_RAW_S = 27
const SDIO_HDA_RECV_DONE_INT_RAW_S = 28
const SDIO_SLC_FRHOST_BIT0_INT_ST_S = 0
const SDIO_SLC_FRHOST_BIT1_INT_ST_S = 1
const SDIO_SLC_FRHOST_BIT2_INT_ST_S = 2
const SDIO_SLC_FRHOST_BIT3_INT_ST_S = 3
const SDIO_SLC_FRHOST_BIT4_INT_ST_S = 4
const SDIO_SLC_FRHOST_BIT5_INT_ST_S = 5
const SDIO_SLC_FRHOST_BIT6_INT_ST_S = 6
const SDIO_SLC_FRHOST_BIT7_INT_ST_S = 7
const SDIO_SLC0_RX_START_INT_ST_S = 8
const SDIO_SLC0_TX_START_INT_ST_S = 9
const SDIO_SLC0_RX_UDF_INT_ST_S = 10
const SDIO_SLC0_TX_OVF_INT_ST_S = 11
const SDIO_SLC0_TOKEN0_1TO0_INT_ST_S = 12
const SDIO_SLC0_TOKEN1_1TO0_INT_ST_S = 13
const SDIO_SLC0_TX_DONE_INT_ST_S = 14
const SDIO_SLC0_TX_SUC_EOF_INT_ST_S = 15
const SDIO_SLC0_RX_DONE_INT_ST_S = 16
const SDIO_SLC0_RX_EOF_INT_ST_S = 17
const SDIO_SLC0_TOHOST_INT_ST_S = 18
const SDIO_SLC0_TX_DSCR_ERR_INT_ST_S = 19
const SDIO_SLC0_RX_DSCR_ERR_INT_ST_S = 20
const SDIO_SLC0_TX_DSCR_EMPTY_INT_ST_S = 21
const SDIO_SLC0_HOST_RD_ACK_INT_ST_S = 22
const SDIO_SLC0_WR_RETRY_DONE_INT_ST_S = 23
const SDIO_SLC0_TX_ERR_EOF_INT_ST_S = 24
const SDIO_CMD_DTC_INT_ST_S = 25
const SDIO_SLC0_RX_QUICK_EOF_INT_ST_S = 26
const SDIO_SLC0_HOST_POP_EOF_ERR_INT_ST_S = 27
const SDIO_HDA_RECV_DONE_INT_ST_S = 28
const SDIO_SLC_FRHOST_BIT0_INT_ENA_S = 0
const SDIO_SLC_FRHOST_BIT1_INT_ENA_S = 1
const SDIO_SLC_FRHOST_BIT2_INT_ENA_S = 2
const SDIO_SLC_FRHOST_BIT3_INT_ENA_S = 3
const SDIO_SLC_FRHOST_BIT4_INT_ENA_S = 4
const SDIO_SLC_FRHOST_BIT5_INT_ENA_S = 5
const SDIO_SLC_FRHOST_BIT6_INT_ENA_S = 6
const SDIO_SLC_FRHOST_BIT7_INT_ENA_S = 7
const SDIO_SLC0_RX_START_INT_ENA_S = 8
const SDIO_SLC0_TX_START_INT_ENA_S = 9
const SDIO_SLC0_RX_UDF_INT_ENA_S = 10
const SDIO_SLC0_TX_OVF_INT_ENA_S = 11
const SDIO_SLC0_TOKEN0_1TO0_INT_ENA_S = 12
const SDIO_SLC0_TOKEN1_1TO0_INT_ENA_S = 13
const SDIO_SLC0_TX_DONE_INT_ENA_S = 14
const SDIO_SLC0_TX_SUC_EOF_INT_ENA_S = 15
const SDIO_SLC0_RX_DONE_INT_ENA_S = 16
const SDIO_SLC0_RX_EOF_INT_ENA_S = 17
const SDIO_SLC0_TOHOST_INT_ENA_S = 18
const SDIO_SLC0_TX_DSCR_ERR_INT_ENA_S = 19
const SDIO_SLC0_RX_DSCR_ERR_INT_ENA_S = 20
const SDIO_SLC0_TX_DSCR_EMPTY_INT_ENA_S = 21
const SDIO_SLC0_HOST_RD_ACK_INT_ENA_S = 22
const SDIO_SLC0_WR_RETRY_DONE_INT_ENA_S = 23
const SDIO_SLC0_TX_ERR_EOF_INT_ENA_S = 24
const SDIO_CMD_DTC_INT_ENA_S = 25
const SDIO_SLC0_RX_QUICK_EOF_INT_ENA_S = 26
const SDIO_SLC0_HOST_POP_EOF_ERR_INT_ENA_S = 27
const SDIO_HDA_RECV_DONE_INT_ENA_S = 28
const SDIO_SLC_FRHOST_BIT0_INT_CLR_S = 0
const SDIO_SLC_FRHOST_BIT1_INT_CLR_S = 1
const SDIO_SLC_FRHOST_BIT2_INT_CLR_S = 2
const SDIO_SLC_FRHOST_BIT3_INT_CLR_S = 3
const SDIO_SLC_FRHOST_BIT4_INT_CLR_S = 4
const SDIO_SLC_FRHOST_BIT5_INT_CLR_S = 5
const SDIO_SLC_FRHOST_BIT6_INT_CLR_S = 6
const SDIO_SLC_FRHOST_BIT7_INT_CLR_S = 7
const SDIO_SLC0_RX_START_INT_CLR_S = 8
const SDIO_SLC0_TX_START_INT_CLR_S = 9
const SDIO_SLC0_RX_UDF_INT_CLR_S = 10
const SDIO_SLC0_TX_OVF_INT_CLR_S = 11
const SDIO_SLC0_TOKEN0_1TO0_INT_CLR_S = 12
const SDIO_SLC0_TOKEN1_1TO0_INT_CLR_S = 13
const SDIO_SLC0_TX_DONE_INT_CLR_S = 14
const SDIO_SLC0_TX_SUC_EOF_INT_CLR_S = 15
const SDIO_SLC0_RX_DONE_INT_CLR_S = 16
const SDIO_SLC0_RX_EOF_INT_CLR_S = 17
const SDIO_SLC0_TOHOST_INT_CLR_S = 18
const SDIO_SLC0_TX_DSCR_ERR_INT_CLR_S = 19
const SDIO_SLC0_RX_DSCR_ERR_INT_CLR_S = 20
const SDIO_SLC0_TX_DSCR_EMPTY_INT_CLR_S = 21
const SDIO_SLC0_HOST_RD_ACK_INT_CLR_S = 22
const SDIO_SLC0_WR_RETRY_DONE_INT_CLR_S = 23
const SDIO_SLC0_TX_ERR_EOF_INT_CLR_S = 24
const SDIO_CMD_DTC_INT_CLR_S = 25
const SDIO_SLC0_RX_QUICK_EOF_INT_CLR_S = 26
const SDIO_SLC0_HOST_POP_EOF_ERR_INT_CLR_S = 27
const SDIO_HDA_RECV_DONE_INT_CLR_S = 28
const SDIO_SLC_FRHOST_BIT8_INT_RAW_S = 0
const SDIO_SLC_FRHOST_BIT9_INT_RAW_S = 1
const SDIO_SLC_FRHOST_BIT10_INT_RAW_S = 2
const SDIO_SLC_FRHOST_BIT11_INT_RAW_S = 3
const SDIO_SLC_FRHOST_BIT12_INT_RAW_S = 4
const SDIO_SLC_FRHOST_BIT13_INT_RAW_S = 5
const SDIO_SLC_FRHOST_BIT14_INT_RAW_S = 6
const SDIO_SLC_FRHOST_BIT15_INT_RAW_S = 7
const SDIO_SLC1_RX_START_INT_RAW_S = 8
const SDIO_SLC1_TX_START_INT_RAW_S = 9
const SDIO_SLC1_RX_UDF_INT_RAW_S = 10
const SDIO_SLC1_TX_OVF_INT_RAW_S = 11
const SDIO_SLC1_TOKEN0_1TO0_INT_RAW_S = 12
const SDIO_SLC1_TOKEN1_1TO0_INT_RAW_S = 13
const SDIO_SLC1_TX_DONE_INT_RAW_S = 14
const SDIO_SLC1_TX_SUC_EOF_INT_RAW_S = 15
const SDIO_SLC1_RX_DONE_INT_RAW_S = 16
const SDIO_SLC1_RX_EOF_INT_RAW_S = 17
const SDIO_SLC1_TOHOST_INT_RAW_S = 18
const SDIO_SLC1_TX_DSCR_ERR_INT_RAW_S = 19
const SDIO_SLC1_RX_DSCR_ERR_INT_RAW_S = 20
const SDIO_SLC1_TX_DSCR_EMPTY_INT_RAW_S = 21
const SDIO_SLC1_HOST_RD_ACK_INT_RAW_S = 22
const SDIO_SLC1_WR_RETRY_DONE_INT_RAW_S = 23
const SDIO_SLC1_TX_ERR_EOF_INT_RAW_S = 24
const SDIO_SLC_FRHOST_BIT8_INT_ST_S = 0
const SDIO_SLC_FRHOST_BIT9_INT_ST_S = 1
const SDIO_SLC_FRHOST_BIT10_INT_ST_S = 2
const SDIO_SLC_FRHOST_BIT11_INT_ST_S = 3
const SDIO_SLC_FRHOST_BIT12_INT_ST_S = 4
const SDIO_SLC_FRHOST_BIT13_INT_ST_S = 5
const SDIO_SLC_FRHOST_BIT14_INT_ST_S = 6
const SDIO_SLC_FRHOST_BIT15_INT_ST_S = 7
const SDIO_SLC1_RX_START_INT_ST_S = 8
const SDIO_SLC1_TX_START_INT_ST_S = 9
const SDIO_SLC1_RX_UDF_INT_ST_S = 10
const SDIO_SLC1_TX_OVF_INT_ST_S = 11
const SDIO_SLC1_TOKEN0_1TO0_INT_ST_S = 12
const SDIO_SLC1_TOKEN1_1TO0_INT_ST_S = 13
const SDIO_SLC1_TX_DONE_INT_ST_S = 14
const SDIO_SLC1_TX_SUC_EOF_INT_ST_S = 15
const SDIO_SLC1_RX_DONE_INT_ST_S = 16
const SDIO_SLC1_RX_EOF_INT_ST_S = 17
const SDIO_SLC1_TOHOST_INT_ST_S = 18
const SDIO_SLC1_TX_DSCR_ERR_INT_ST_S = 19
const SDIO_SLC1_RX_DSCR_ERR_INT_ST_S = 20
const SDIO_SLC1_TX_DSCR_EMPTY_INT_ST_S = 21
const SDIO_SLC1_HOST_RD_ACK_INT_ST_S = 22
const SDIO_SLC1_WR_RETRY_DONE_INT_ST_S = 23
const SDIO_SLC1_TX_ERR_EOF_INT_ST_S = 24
const SDIO_SLC_FRHOST_BIT8_INT_ENA_S = 0
const SDIO_SLC_FRHOST_BIT9_INT_ENA_S = 1
const SDIO_SLC_FRHOST_BIT10_INT_ENA_S = 2
const SDIO_SLC_FRHOST_BIT11_INT_ENA_S = 3
const SDIO_SLC_FRHOST_BIT12_INT_ENA_S = 4
const SDIO_SLC_FRHOST_BIT13_INT_ENA_S = 5
const SDIO_SLC_FRHOST_BIT14_INT_ENA_S = 6
const SDIO_SLC_FRHOST_BIT15_INT_ENA_S = 7
const SDIO_SLC1_RX_START_INT_ENA_S = 8
const SDIO_SLC1_TX_START_INT_ENA_S = 9
const SDIO_SLC1_RX_UDF_INT_ENA_S = 10
const SDIO_SLC1_TX_OVF_INT_ENA_S = 11
const SDIO_SLC1_TOKEN0_1TO0_INT_ENA_S = 12
const SDIO_SLC1_TOKEN1_1TO0_INT_ENA_S = 13
const SDIO_SLC1_TX_DONE_INT_ENA_S = 14
const SDIO_SLC1_TX_SUC_EOF_INT_ENA_S = 15
const SDIO_SLC1_RX_DONE_INT_ENA_S = 16
const SDIO_SLC1_RX_EOF_INT_ENA_S = 17
const SDIO_SLC1_TOHOST_INT_ENA_S = 18
const SDIO_SLC1_TX_DSCR_ERR_INT_ENA_S = 19
const SDIO_SLC1_RX_DSCR_ERR_INT_ENA_S = 20
const SDIO_SLC1_TX_DSCR_EMPTY_INT_ENA_S = 21
const SDIO_SLC1_HOST_RD_ACK_INT_ENA_S = 22
const SDIO_SLC1_WR_RETRY_DONE_INT_ENA_S = 23
const SDIO_SLC1_TX_ERR_EOF_INT_ENA_S = 24
const SDIO_SLC_FRHOST_BIT8_INT_CLR_S = 0
const SDIO_SLC_FRHOST_BIT9_INT_CLR_S = 1
const SDIO_SLC_FRHOST_BIT10_INT_CLR_S = 2
const SDIO_SLC_FRHOST_BIT11_INT_CLR_S = 3
const SDIO_SLC_FRHOST_BIT12_INT_CLR_S = 4
const SDIO_SLC_FRHOST_BIT13_INT_CLR_S = 5
const SDIO_SLC_FRHOST_BIT14_INT_CLR_S = 6
const SDIO_SLC_FRHOST_BIT15_INT_CLR_S = 7
const SDIO_SLC1_RX_START_INT_CLR_S = 8
const SDIO_SLC1_TX_START_INT_CLR_S = 9
const SDIO_SLC1_RX_UDF_INT_CLR_S = 10
const SDIO_SLC1_TX_OVF_INT_CLR_S = 11
const SDIO_SLC1_TOKEN0_1TO0_INT_CLR_S = 12
const SDIO_SLC1_TOKEN1_1TO0_INT_CLR_S = 13
const SDIO_SLC1_TX_DONE_INT_CLR_S = 14
const SDIO_SLC1_TX_SUC_EOF_INT_CLR_S = 15
const SDIO_SLC1_RX_DONE_INT_CLR_S = 16
const SDIO_SLC1_RX_EOF_INT_CLR_S = 17
const SDIO_SLC1_TOHOST_INT_CLR_S = 18
const SDIO_SLC1_TX_DSCR_ERR_INT_CLR_S = 19
const SDIO_SLC1_RX_DSCR_ERR_INT_CLR_S = 20
const SDIO_SLC1_TX_DSCR_EMPTY_INT_CLR_S = 21
const SDIO_SLC1_HOST_RD_ACK_INT_CLR_S = 22
const SDIO_SLC1_WR_RETRY_DONE_INT_CLR_S = 23
const SDIO_SLC1_TX_ERR_EOF_INT_CLR_S = 24
const SDIO_SLC0_RX_FULL_S = 0
const SDIO_SLC0_RX_EMPTY_S = 1
const SDIO_SLC0_RX_BUF_LEN_S = 2
const SDIO_SLC1_RX_FULL_S = 16
const SDIO_SLC1_RX_EMPTY_S = 17
const SDIO_SLC1_RX_BUF_LEN_S = 18
const SDIO_SLC0_RXFIFO_WDATA_S = 0
const SDIO_SLC0_RXFIFO_PUSH_S = 16
const SDIO_SLC1_RXFIFO_WDATA_S = 0
const SDIO_SLC1_RXFIFO_PUSH_S = 16
const SDIO_SLC0_TX_FULL_S = 0
const SDIO_SLC0_TX_EMPTY_S = 1
const SDIO_SLC1_TX_FULL_S = 16
const SDIO_SLC1_TX_EMPTY_S = 17
const SDIO_SLC0_TXFIFO_RDATA_S = 0
const SDIO_SLC0_TXFIFO_POP_S = 16
const SDIO_SLC1_TXFIFO_RDATA_S = 0
const SDIO_SLC1_TXFIFO_POP_S = 16
const SDIO_SLC0_RXLINK_STOP_S = 28
const SDIO_SLC0_RXLINK_START_S = 29
const SDIO_SLC0_RXLINK_RESTART_S = 30
const SDIO_SLC0_RXLINK_PARK_S = 31
const SDIO_SLC0_RXLINK_ADDR_S = 0
const SDIO_SLC0_TXLINK_STOP_S = 28
const SDIO_SLC0_TXLINK_START_S = 29
const SDIO_SLC0_TXLINK_RESTART_S = 30
const SDIO_SLC0_TXLINK_PARK_S = 31
const SDIO_SLC0_TXLINK_ADDR_S = 0
const SDIO_SLC1_BT_PACKET_S = 20
const SDIO_SLC1_RXLINK_STOP_S = 28
const SDIO_SLC1_RXLINK_START_S = 29
const SDIO_SLC1_RXLINK_RESTART_S = 30
const SDIO_SLC1_RXLINK_PARK_S = 31
const SDIO_SLC1_RXLINK_ADDR_S = 0
const SDIO_SLC1_TXLINK_STOP_S = 28
const SDIO_SLC1_TXLINK_START_S = 29
const SDIO_SLC1_TXLINK_RESTART_S = 30
const SDIO_SLC1_TXLINK_PARK_S = 31
const SDIO_SLC1_TXLINK_ADDR_S = 0
const SDIO_SLC0_TOHOST_INTVEC_S = 0
const SDIO_SLC1_TOHOST_INTVEC_S = 16
const SDIO_SLC0_TOKEN0_WDATA_S = 0
const SDIO_SLC0_TOKEN0_WR_S = 12
const SDIO_SLC0_TOKEN0_INC_S = 13
const SDIO_SLC0_TOKEN0_INC_MORE_S = 14
const SDIO_SLC0_TOKEN0_S = 16
const SDIO_SLC0_TOKEN1_WDATA_S = 0
const SDIO_SLC0_TOKEN1_WR_S = 12
const SDIO_SLC0_TOKEN1_INC_S = 13
const SDIO_SLC0_TOKEN1_INC_MORE_S = 14
const SDIO_SLC0_TOKEN1_S = 16
const SDIO_SLC1_TOKEN0_WDATA_S = 0
const SDIO_SLC1_TOKEN0_WR_S = 12
const SDIO_SLC1_TOKEN0_INC_S = 13
const SDIO_SLC1_TOKEN0_INC_MORE_S = 14
const SDIO_SLC1_TOKEN0_S = 16
const SDIO_SLC1_TOKEN1_WDATA_S = 0
const SDIO_SLC1_TOKEN1_WR_S = 12
const SDIO_SLC1_TOKEN1_INC_S = 13
const SDIO_SLC1_TOKEN1_INC_MORE_S = 14
const SDIO_SLC1_TOKEN1_S = 16
const SDIO_SLC0_CHECK_OWNER_S = 0
const SDIO_SLC0_TX_CHECK_SUM_EN_S = 1
const SDIO_SLC0_RX_CHECK_SUM_EN_S = 2
const SDIO_SDIO_CMD_HOLD_EN_S = 3
const SDIO_SLC0_LEN_AUTO_CLR_S = 4
const SDIO_SLC0_TX_STITCH_EN_S = 5
const SDIO_SLC0_RX_STITCH_EN_S = 6
const SDIO_SLC1_CHECK_OWNER_S = 16
const SDIO_SLC1_TX_CHECK_SUM_EN_S = 17
const SDIO_SLC1_RX_CHECK_SUM_EN_S = 18
const SDIO_HOST_INT_LEVEL_SEL_S = 19
const SDIO_SLC1_TX_STITCH_EN_S = 20
const SDIO_SLC1_RX_STITCH_EN_S = 21
const SDIO_SDIO_CLK_EN_S = 22
const SDIO_SLC0_STATE0_S = 0
const SDIO_SLC0_STATE1_S = 0
const SDIO_SLC1_STATE0_S = 0
const SDIO_SLC1_STATE1_S = 0
const SDIO_SLC_TXEOF_ENA_S = 0
const SDIO_SLC_FIFO_MAP_ENA_S = 8
const SDIO_SLC0_TX_DUMMY_MODE_S = 12
const SDIO_SLC_HDA_MAP_128K_S = 13
const SDIO_SLC1_TX_DUMMY_MODE_S = 14
const SDIO_SLC_TX_PUSH_IDLE_NUM_S = 16
const SDIO_SLC0_TO_EOF_DES_ADDR_S = 0
const SDIO_SLC0_TX_SUC_EOF_DES_ADDR_S = 0
const SDIO_SLC0_TO_EOF_BFR_DES_ADDR_S = 0
const SDIO_SLC1_TO_EOF_DES_ADDR_S = 0
const SDIO_SLC1_TX_SUC_EOF_DES_ADDR_S = 0
const SDIO_SLC1_TO_EOF_BFR_DES_ADDR_S = 0
const SDIO_SLC_AHB_TESTMODE_S = 0
const SDIO_SLC_AHB_TESTADDR_S = 4
const SDIO_CMD_ST_S = 0
const SDIO_FUNC_ST_S = 4
const SDIO_SDIO_WAKEUP_S = 8
const SDIO_BUS_ST_S = 12
const SDIO_FUNC1_ACC_STATE_S = 16
const SDIO_FUNC2_ACC_STATE_S = 24
const SDIO_SLC0_TOKEN_NO_REPLACE_S = 0
const SDIO_SLC0_INFOR_NO_REPLACE_S = 1
const SDIO_SLC0_RX_FILL_MODE_S = 2
const SDIO_SLC0_RX_EOF_MODE_S = 3
const SDIO_SLC0_RX_FILL_EN_S = 4
const SDIO_SLC0_RD_RETRY_THRESHOLD_S = 5
const SDIO_SLC1_TOKEN_NO_REPLACE_S = 16
const SDIO_SLC1_INFOR_NO_REPLACE_S = 17
const SDIO_SLC1_RX_FILL_MODE_S = 18
const SDIO_SLC1_RX_EOF_MODE_S = 19
const SDIO_SLC1_RX_FILL_EN_S = 20
const SDIO_SLC1_RD_RETRY_THRESHOLD_S = 21
const SDIO_SLC0_TXLINK_DSCR_S = 0
const SDIO_SLC0_TXLINK_DSCR_BF0_S = 0
const SDIO_SLC0_TXLINK_DSCR_BF1_S = 0
const SDIO_SLC0_RXLINK_DSCR_S = 0
const SDIO_SLC0_RXLINK_DSCR_BF0_S = 0
const SDIO_SLC0_RXLINK_DSCR_BF1_S = 0
const SDIO_SLC1_TXLINK_DSCR_S = 0
const SDIO_SLC1_TXLINK_DSCR_BF0_S = 0
const SDIO_SLC1_TXLINK_DSCR_BF1_S = 0
const SDIO_SLC1_RXLINK_DSCR_S = 0
const SDIO_SLC1_RXLINK_DSCR_BF0_S = 0
const SDIO_SLC1_RXLINK_DSCR_BF1_S = 0
const SDIO_SLC0_TX_ERR_EOF_DES_ADDR_S = 0
const SDIO_SLC1_TX_ERR_EOF_DES_ADDR_S = 0
const SDIO_SLC0_TOKEN_S = 0
const SDIO_SLC1_TOKEN_S = 16
const SDIO_SLC_WR_RETRY_THRESHOLD_S = 0
const SDIO_CMD_CONTENT0_S = 0
const SDIO_CMD_CONTENT1_S = 0
const SDIO_SLC0_LEN_WDATA_S = 0
const SDIO_SLC0_LEN_WR_S = 20
const SDIO_SLC0_LEN_INC_S = 21
const SDIO_SLC0_LEN_INC_MORE_S = 22
const SDIO_SLC0_RX_PACKET_LOAD_EN_S = 23
const SDIO_SLC0_TX_PACKET_LOAD_EN_S = 24
const SDIO_SLC0_RX_GET_USED_DSCR_S = 25
const SDIO_SLC0_TX_GET_USED_DSCR_S = 26
const SDIO_SLC0_RX_NEW_PKT_IND_S = 27
const SDIO_SLC0_TX_NEW_PKT_IND_S = 28
const SDIO_SLC0_RX_PACKET_LOAD_EN_ST_S = 29
const SDIO_SLC0_TX_PACKET_LOAD_EN_ST_S = 30
const SDIO_SLC0_LEN_S = 0
const SDIO_SLC0_TX_PKT_H_DSCR_ADDR_S = 0
const SDIO_SLC0_TX_PKT_E_DSCR_ADDR_S = 0
const SDIO_SLC0_RX_PKT_H_DSCR_ADDR_S = 0
const SDIO_SLC0_RX_PKT_E_DSCR_ADDR_S = 0
const SDIO_SLC0_TX_PKT_START_DSCR_ADDR_S = 0
const SDIO_SLC0_TX_PKT_END_DSCR_ADDR_S = 0
const SDIO_SLC0_RX_PKT_START_DSCR_ADDR_S = 0
const SDIO_SLC0_RX_PKT_END_DSCR_ADDR_S = 0
const SDIO_SLC0_SEQ_POSITION_S = 0
const SDIO_SLC1_SEQ_POSITION_S = 8
const SDIO_SLC0_RX_DSCR_REC_LIM_S = 0
const SDIO_DAT0_CRC_ERR_CNT_S = 0
const SDIO_DAT1_CRC_ERR_CNT_S = 8
const SDIO_DAT2_CRC_ERR_CNT_S = 16
const SDIO_DAT3_CRC_ERR_CNT_S = 24
const SDIO_CMD_CRC_ERR_CNT_S = 0
const SDIO_ERR_CNT_CLR_S = 31
const SDIO_SLC0_EOF_START_DES_ADDR_S = 0
const SDIO_SLC0_RX_PUSH_DSCR_ADDR_S = 0
const SDIO_SLC0_RX_DONE_DSCR_ADDR_S = 0
const SDIO_SLC0_SUB_PAC_START_DSCR_ADDR_S = 0
const SDIO_SLC0_RX_DSCR_CNT_LAT_S = 0
const SDIO_SLC0_RX_GET_EOF_OCC_S = 16
const SDIO_SLC0_LEN_LIM_S = 0
const SDIO_SLC_FRHOST_BIT0_INT_ST1_S = 0
const SDIO_SLC_FRHOST_BIT1_INT_ST1_S = 1
const SDIO_SLC_FRHOST_BIT2_INT_ST1_S = 2
const SDIO_SLC_FRHOST_BIT3_INT_ST1_S = 3
const SDIO_SLC_FRHOST_BIT4_INT_ST1_S = 4
const SDIO_SLC_FRHOST_BIT5_INT_ST1_S = 5
const SDIO_SLC_FRHOST_BIT6_INT_ST1_S = 6
const SDIO_SLC_FRHOST_BIT7_INT_ST1_S = 7
const SDIO_SLC0_RX_START_INT_ST1_S = 8
const SDIO_SLC0_TX_START_INT_ST1_S = 9
const SDIO_SLC0_RX_UDF_INT_ST1_S = 10
const SDIO_SLC0_TX_OVF_INT_ST1_S = 11
const SDIO_SLC0_TOKEN0_1TO0_INT_ST1_S = 12
const SDIO_SLC0_TOKEN1_1TO0_INT_ST1_S = 13
const SDIO_SLC0_TX_DONE_INT_ST1_S = 14
const SDIO_SLC0_TX_SUC_EOF_INT_ST1_S = 15
const SDIO_SLC0_RX_DONE_INT_ST1_S = 16
const SDIO_SLC0_RX_EOF_INT_ST1_S = 17
const SDIO_SLC0_TOHOST_INT_ST1_S = 18
const SDIO_SLC0_TX_DSCR_ERR_INT_ST1_S = 19
const SDIO_SLC0_RX_DSCR_ERR_INT_ST1_S = 20
const SDIO_SLC0_TX_DSCR_EMPTY_INT_ST1_S = 21
const SDIO_SLC0_HOST_RD_ACK_INT_ST1_S = 22
const SDIO_SLC0_WR_RETRY_DONE_INT_ST1_S = 23
const SDIO_SLC0_TX_ERR_EOF_INT_ST1_S = 24
const SDIO_CMD_DTC_INT_ST1_S = 25
const SDIO_SLC0_RX_QUICK_EOF_INT_ST1_S = 26
const SDIO_SLC0_HOST_POP_EOF_ERR_INT_ST1_S = 27
const SDIO_HDA_RECV_DONE_INT_ST1_S = 28
const SDIO_SLC_FRHOST_BIT0_INT_ENA1_S = 0
const SDIO_SLC_FRHOST_BIT1_INT_ENA1_S = 1
const SDIO_SLC_FRHOST_BIT2_INT_ENA1_S = 2
const SDIO_SLC_FRHOST_BIT3_INT_ENA1_S = 3
const SDIO_SLC_FRHOST_BIT4_INT_ENA1_S = 4
const SDIO_SLC_FRHOST_BIT5_INT_ENA1_S = 5
const SDIO_SLC_FRHOST_BIT6_INT_ENA1_S = 6
const SDIO_SLC_FRHOST_BIT7_INT_ENA1_S = 7
const SDIO_SLC0_RX_START_INT_ENA1_S = 8
const SDIO_SLC0_TX_START_INT_ENA1_S = 9
const SDIO_SLC0_RX_UDF_INT_ENA1_S = 10
const SDIO_SLC0_TX_OVF_INT_ENA1_S = 11
const SDIO_SLC0_TOKEN0_1TO0_INT_ENA1_S = 12
const SDIO_SLC0_TOKEN1_1TO0_INT_ENA1_S = 13
const SDIO_SLC0_TX_DONE_INT_ENA1_S = 14
const SDIO_SLC0_TX_SUC_EOF_INT_ENA1_S = 15
const SDIO_SLC0_RX_DONE_INT_ENA1_S = 16
const SDIO_SLC0_RX_EOF_INT_ENA1_S = 17
const SDIO_SLC0_TOHOST_INT_ENA1_S = 18
const SDIO_SLC0_TX_DSCR_ERR_INT_ENA1_S = 19
const SDIO_SLC0_RX_DSCR_ERR_INT_ENA1_S = 20
const SDIO_SLC0_TX_DSCR_EMPTY_INT_ENA1_S = 21
const SDIO_SLC0_HOST_RD_ACK_INT_ENA1_S = 22
const SDIO_SLC0_WR_RETRY_DONE_INT_ENA1_S = 23
const SDIO_SLC0_TX_ERR_EOF_INT_ENA1_S = 24
const SDIO_CMD_DTC_INT_ENA1_S = 25
const SDIO_SLC0_RX_QUICK_EOF_INT_ENA1_S = 26
const SDIO_SLC0_HOST_POP_EOF_ERR_INT_ENA1_S = 27
const SDIO_HDA_RECV_DONE_INT_ENA1_S = 28
const SDIO_SLC_FRHOST_BIT8_INT_ST1_S = 0
const SDIO_SLC_FRHOST_BIT9_INT_ST1_S = 1
const SDIO_SLC_FRHOST_BIT10_INT_ST1_S = 2
const SDIO_SLC_FRHOST_BIT11_INT_ST1_S = 3
const SDIO_SLC_FRHOST_BIT12_INT_ST1_S = 4
const SDIO_SLC_FRHOST_BIT13_INT_ST1_S = 5
const SDIO_SLC_FRHOST_BIT14_INT_ST1_S = 6
const SDIO_SLC_FRHOST_BIT15_INT_ST1_S = 7
const SDIO_SLC1_RX_START_INT_ST1_S = 8
const SDIO_SLC1_TX_START_INT_ST1_S = 9
const SDIO_SLC1_RX_UDF_INT_ST1_S = 10
const SDIO_SLC1_TX_OVF_INT_ST1_S = 11
const SDIO_SLC1_TOKEN0_1TO0_INT_ST1_S = 12
const SDIO_SLC1_TOKEN1_1TO0_INT_ST1_S = 13
const SDIO_SLC1_TX_DONE_INT_ST1_S = 14
const SDIO_SLC1_TX_SUC_EOF_INT_ST1_S = 15
const SDIO_SLC1_RX_DONE_INT_ST1_S = 16
const SDIO_SLC1_RX_EOF_INT_ST1_S = 17
const SDIO_SLC1_TOHOST_INT_ST1_S = 18
const SDIO_SLC1_TX_DSCR_ERR_INT_ST1_S = 19
const SDIO_SLC1_RX_DSCR_ERR_INT_ST1_S = 20
const SDIO_SLC1_TX_DSCR_EMPTY_INT_ST1_S = 21
const SDIO_SLC1_HOST_RD_ACK_INT_ST1_S = 22
const SDIO_SLC1_WR_RETRY_DONE_INT_ST1_S = 23
const SDIO_SLC1_TX_ERR_EOF_INT_ST1_S = 24
const SDIO_SLC_FRHOST_BIT8_INT_ENA1_S = 0
const SDIO_SLC_FRHOST_BIT9_INT_ENA1_S = 1
const SDIO_SLC_FRHOST_BIT10_INT_ENA1_S = 2
const SDIO_SLC_FRHOST_BIT11_INT_ENA1_S = 3
const SDIO_SLC_FRHOST_BIT12_INT_ENA1_S = 4
const SDIO_SLC_FRHOST_BIT13_INT_ENA1_S = 5
const SDIO_SLC_FRHOST_BIT14_INT_ENA1_S = 6
const SDIO_SLC_FRHOST_BIT15_INT_ENA1_S = 7
const SDIO_SLC1_RX_START_INT_ENA1_S = 8
const SDIO_SLC1_TX_START_INT_ENA1_S = 9
const SDIO_SLC1_RX_UDF_INT_ENA1_S = 10
const SDIO_SLC1_TX_OVF_INT_ENA1_S = 11
const SDIO_SLC1_TOKEN0_1TO0_INT_ENA1_S = 12
const SDIO_SLC1_TOKEN1_1TO0_INT_ENA1_S = 13
const SDIO_SLC1_TX_DONE_INT_ENA1_S = 14
const SDIO_SLC1_TX_SUC_EOF_INT_ENA1_S = 15
const SDIO_SLC1_RX_DONE_INT_ENA1_S = 16
const SDIO_SLC1_RX_EOF_INT_ENA1_S = 17
const SDIO_SLC1_TOHOST_INT_ENA1_S = 18
const SDIO_SLC1_TX_DSCR_ERR_INT_ENA1_S = 19
const SDIO_SLC1_RX_DSCR_ERR_INT_ENA1_S = 20
const SDIO_SLC1_TX_DSCR_EMPTY_INT_ENA1_S = 21
const SDIO_SLC1_HOST_RD_ACK_INT_ENA1_S = 22
const SDIO_SLC1_WR_RETRY_DONE_INT_ENA1_S = 23
const SDIO_SLC1_TX_ERR_EOF_INT_ENA1_S = 24
const SDIO_SDIO_SLC0_TX_SHAREMEM_START_ADDR_S = 0
const SDIO_SDIO_SLC0_TX_SHAREMEM_END_ADDR_S = 0
const SDIO_SDIO_SLC0_RX_SHAREMEM_START_ADDR_S = 0
const SDIO_SDIO_SLC0_RX_SHAREMEM_END_ADDR_S = 0
const SDIO_SDIO_SLC1_TX_SHAREMEM_START_ADDR_S = 0
const SDIO_SDIO_SLC1_TX_SHAREMEM_END_ADDR_S = 0
const SDIO_SDIO_SLC1_RX_SHAREMEM_START_ADDR_S = 0
const SDIO_SDIO_SLC1_RX_SHAREMEM_END_ADDR_S = 0
const SDIO_SDIO_HDA_TX_SHAREMEM_START_ADDR_S = 0
const SDIO_SDIO_HDA_RX_SHAREMEM_START_ADDR_S = 0
const SDIO_SLC0_TXDATA_BURST_LEN_S = 0
const SDIO_SLC0_RXDATA_BURST_LEN_S = 1
const SDIO_SLC1_TXDATA_BURST_LEN_S = 2
const SDIO_SLC1_RXDATA_BURST_LEN_S = 3
const SDIO_SLC_DATE_S = 0
const SDIO_SLC_ID_S = 0
const SLCHOST_SLC_FUNC2_INT_S = 24
const SLCHOST_SLC_FUNC2_INT_EN_S = 0
const SLCHOST_SLC_FUNC1_MDSTAT_S = 0
const SLCHOST_GPIO_SDIO_INT0_S = 0
const SLCHOST_GPIO_SDIO_INT1_S = 0
const SLCHOST_GPIO_SDIO_IN0_S = 0
const SLCHOST_GPIO_SDIO_IN1_S = 0
const SLCHOST_SLC0_TOKEN0_S = 0
const SLCHOST_SLC0_RX_PF_VALID_S = 12
const SLCHOST_HOSTSLCHOST_SLC0_TOKEN1_S = 16
const SLCHOST_SLC0_RX_PF_EOF_S = 28
const SLCHOST_SLC0_PF_DATA_S = 0
const SLCHOST_SLC1_PF_DATA_S = 0
const SLCHOST_SLC0_TOHOST_BIT0_INT_RAW_S = 0
const SLCHOST_SLC0_TOHOST_BIT1_INT_RAW_S = 1
const SLCHOST_SLC0_TOHOST_BIT2_INT_RAW_S = 2
const SLCHOST_SLC0_TOHOST_BIT3_INT_RAW_S = 3
const SLCHOST_SLC0_TOHOST_BIT4_INT_RAW_S = 4
const SLCHOST_SLC0_TOHOST_BIT5_INT_RAW_S = 5
const SLCHOST_SLC0_TOHOST_BIT6_INT_RAW_S = 6
const SLCHOST_SLC0_TOHOST_BIT7_INT_RAW_S = 7
const SLCHOST_SLC0_TOKEN0_1TO0_INT_RAW_S = 8
const SLCHOST_SLC0_TOKEN1_1TO0_INT_RAW_S = 9
const SLCHOST_SLC0_TOKEN0_0TO1_INT_RAW_S = 10
const SLCHOST_SLC0_TOKEN1_0TO1_INT_RAW_S = 11
const SLCHOST_SLC0HOST_RX_SOF_INT_RAW_S = 12
const SLCHOST_SLC0HOST_RX_EOF_INT_RAW_S = 13
const SLCHOST_SLC0HOST_RX_START_INT_RAW_S = 14
const SLCHOST_SLC0HOST_TX_START_INT_RAW_S = 15
const SLCHOST_SLC0_RX_UDF_INT_RAW_S = 16
const SLCHOST_SLC0_TX_OVF_INT_RAW_S = 17
const SLCHOST_SLC0_RX_PF_VALID_INT_RAW_S = 18
const SLCHOST_SLC0_EXT_BIT0_INT_RAW_S = 19
const SLCHOST_SLC0_EXT_BIT1_INT_RAW_S = 20
const SLCHOST_SLC0_EXT_BIT2_INT_RAW_S = 21
const SLCHOST_SLC0_EXT_BIT3_INT_RAW_S = 22
const SLCHOST_SLC0_RX_NEW_PACKET_INT_RAW_S = 23
const SLCHOST_SLC0_HOST_RD_RETRY_INT_RAW_S = 24
const SLCHOST_GPIO_SDIO_INT_RAW_S = 25
const SLCHOST_SLC1_TOHOST_BIT0_INT_RAW_S = 0
const SLCHOST_SLC1_TOHOST_BIT1_INT_RAW_S = 1
const SLCHOST_SLC1_TOHOST_BIT2_INT_RAW_S = 2
const SLCHOST_SLC1_TOHOST_BIT3_INT_RAW_S = 3
const SLCHOST_SLC1_TOHOST_BIT4_INT_RAW_S = 4
const SLCHOST_SLC1_TOHOST_BIT5_INT_RAW_S = 5
const SLCHOST_SLC1_TOHOST_BIT6_INT_RAW_S = 6
const SLCHOST_SLC1_TOHOST_BIT7_INT_RAW_S = 7
const SLCHOST_SLC1_TOKEN0_1TO0_INT_RAW_S = 8
const SLCHOST_SLC1_TOKEN1_1TO0_INT_RAW_S = 9
const SLCHOST_SLC1_TOKEN0_0TO1_INT_RAW_S = 10
const SLCHOST_SLC1_TOKEN1_0TO1_INT_RAW_S = 11
const SLCHOST_SLC1HOST_RX_SOF_INT_RAW_S = 12
const SLCHOST_SLC1HOST_RX_EOF_INT_RAW_S = 13
const SLCHOST_SLC1HOST_RX_START_INT_RAW_S = 14
const SLCHOST_SLC1HOST_TX_START_INT_RAW_S = 15
const SLCHOST_SLC1_RX_UDF_INT_RAW_S = 16
const SLCHOST_SLC1_TX_OVF_INT_RAW_S = 17
const SLCHOST_SLC1_RX_PF_VALID_INT_RAW_S = 18
const SLCHOST_SLC1_EXT_BIT0_INT_RAW_S = 19
const SLCHOST_SLC1_EXT_BIT1_INT_RAW_S = 20
const SLCHOST_SLC1_EXT_BIT2_INT_RAW_S = 21
const SLCHOST_SLC1_EXT_BIT3_INT_RAW_S = 22
const SLCHOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW_S = 23
const SLCHOST_SLC1_HOST_RD_RETRY_INT_RAW_S = 24
const SLCHOST_SLC1_BT_RX_NEW_PACKET_INT_RAW_S = 25
const SLCHOST_SLC0_TOHOST_BIT0_INT_ST_S = 0
const SLCHOST_SLC0_TOHOST_BIT1_INT_ST_S = 1
const SLCHOST_SLC0_TOHOST_BIT2_INT_ST_S = 2
const SLCHOST_SLC0_TOHOST_BIT3_INT_ST_S = 3
const SLCHOST_SLC0_TOHOST_BIT4_INT_ST_S = 4
const SLCHOST_SLC0_TOHOST_BIT5_INT_ST_S = 5
const SLCHOST_SLC0_TOHOST_BIT6_INT_ST_S = 6
const SLCHOST_SLC0_TOHOST_BIT7_INT_ST_S = 7
const SLCHOST_SLC0_TOKEN0_1TO0_INT_ST_S = 8
const SLCHOST_SLC0_TOKEN1_1TO0_INT_ST_S = 9
const SLCHOST_SLC0_TOKEN0_0TO1_INT_ST_S = 10
const SLCHOST_SLC0_TOKEN1_0TO1_INT_ST_S = 11
const SLCHOST_SLC0HOST_RX_SOF_INT_ST_S = 12
const SLCHOST_SLC0HOST_RX_EOF_INT_ST_S = 13
const SLCHOST_SLC0HOST_RX_START_INT_ST_S = 14
const SLCHOST_SLC0HOST_TX_START_INT_ST_S = 15
const SLCHOST_SLC0_RX_UDF_INT_ST_S = 16
const SLCHOST_SLC0_TX_OVF_INT_ST_S = 17
const SLCHOST_SLC0_RX_PF_VALID_INT_ST_S = 18
const SLCHOST_SLC0_EXT_BIT0_INT_ST_S = 19
const SLCHOST_SLC0_EXT_BIT1_INT_ST_S = 20
const SLCHOST_SLC0_EXT_BIT2_INT_ST_S = 21
const SLCHOST_SLC0_EXT_BIT3_INT_ST_S = 22
const SLCHOST_SLC0_RX_NEW_PACKET_INT_ST_S = 23
const SLCHOST_SLC0_HOST_RD_RETRY_INT_ST_S = 24
const SLCHOST_GPIO_SDIO_INT_ST_S = 25
const SLCHOST_SLC1_TOHOST_BIT0_INT_ST_S = 0
const SLCHOST_SLC1_TOHOST_BIT1_INT_ST_S = 1
const SLCHOST_SLC1_TOHOST_BIT2_INT_ST_S = 2
const SLCHOST_SLC1_TOHOST_BIT3_INT_ST_S = 3
const SLCHOST_SLC1_TOHOST_BIT4_INT_ST_S = 4
const SLCHOST_SLC1_TOHOST_BIT5_INT_ST_S = 5
const SLCHOST_SLC1_TOHOST_BIT6_INT_ST_S = 6
const SLCHOST_SLC1_TOHOST_BIT7_INT_ST_S = 7
const SLCHOST_SLC1_TOKEN0_1TO0_INT_ST_S = 8
const SLCHOST_SLC1_TOKEN1_1TO0_INT_ST_S = 9
const SLCHOST_SLC1_TOKEN0_0TO1_INT_ST_S = 10
const SLCHOST_SLC1_TOKEN1_0TO1_INT_ST_S = 11
const SLCHOST_SLC1HOST_RX_SOF_INT_ST_S = 12
const SLCHOST_SLC1HOST_RX_EOF_INT_ST_S = 13
const SLCHOST_SLC1HOST_RX_START_INT_ST_S = 14
const SLCHOST_SLC1HOST_TX_START_INT_ST_S = 15
const SLCHOST_SLC1_RX_UDF_INT_ST_S = 16
const SLCHOST_SLC1_TX_OVF_INT_ST_S = 17
const SLCHOST_SLC1_RX_PF_VALID_INT_ST_S = 18
const SLCHOST_SLC1_EXT_BIT0_INT_ST_S = 19
const SLCHOST_SLC1_EXT_BIT1_INT_ST_S = 20
const SLCHOST_SLC1_EXT_BIT2_INT_ST_S = 21
const SLCHOST_SLC1_EXT_BIT3_INT_ST_S = 22
const SLCHOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST_S = 23
const SLCHOST_SLC1_HOST_RD_RETRY_INT_ST_S = 24
const SLCHOST_SLC1_BT_RX_NEW_PACKET_INT_ST_S = 25
const SLCHOST_HOSTSLCHOST_SLC0_LEN_S = 0
const SLCHOST_HOSTSLCHOST_SLC0_LEN_CHECK_S = 20
const SLCHOST_SLCHOST_STATE0_S = 0
const SLCHOST_SLCHOST_STATE1_S = 8
const SLCHOST_SLCHOST_STATE2_S = 16
const SLCHOST_SLCHOST_STATE3_S = 24
const SLCHOST_SLCHOST_STATE4_S = 0
const SLCHOST_SLCHOST_STATE5_S = 8
const SLCHOST_SLCHOST_STATE6_S = 16
const SLCHOST_SLCHOST_STATE7_S = 24
const SLCHOST_SLCHOST_CONF0_S = 0
const SLCHOST_SLCHOST_CONF1_S = 8
const SLCHOST_SLCHOST_CONF2_S = 16
const SLCHOST_SLCHOST_CONF3_S = 24
const SLCHOST_SLCHOST_CONF4_S = 0
const SLCHOST_SLCHOST_CONF5_S = 8
const SLCHOST_SLCHOST_CONF6_S = 16
const SLCHOST_SLCHOST_CONF7_S = 24
const SLCHOST_SLCHOST_CONF8_S = 0
const SLCHOST_SLCHOST_CONF9_S = 8
const SLCHOST_SLCHOST_CONF10_S = 16
const SLCHOST_SLCHOST_CONF11_S = 24
const SLCHOST_SLCHOST_CONF12_S = 0
const SLCHOST_SLCHOST_CONF13_S = 8
const SLCHOST_SLCHOST_CONF14_S = 16
const SLCHOST_SLCHOST_CONF15_S = 24
const SLCHOST_SLCHOST_CONF16_S = 0
const SLCHOST_SLCHOST_CONF17_S = 8
const SLCHOST_SLCHOST_CONF18_S = 16
const SLCHOST_SLCHOST_CONF19_S = 24
const SLCHOST_SLCHOST_CONF20_S = 0
const SLCHOST_SLCHOST_CONF21_S = 8
const SLCHOST_SLCHOST_CONF22_S = 16
const SLCHOST_SLCHOST_CONF23_S = 24
const SLCHOST_SLCHOST_WIN_CMD_S = 0
const SLCHOST_SLCHOST_CONF24_S = 0
const SLCHOST_SLCHOST_CONF25_S = 8
const SLCHOST_SLCHOST_CONF26_S = 16
const SLCHOST_SLCHOST_CONF27_S = 24
const SLCHOST_SLCHOST_CONF28_S = 0
const SLCHOST_SLCHOST_CONF29_S = 8
const SLCHOST_SLCHOST_CONF30_S = 16
const SLCHOST_SLCHOST_CONF31_S = 24
const SLCHOST_HOSTSLCHOST_SLC0_LEN0_S = 0
const SLCHOST_HOSTSLCHOST_SLC0_LEN0_CHECK_S = 20
const SLCHOST_HOSTSLCHOST_SLC0_LEN1_S = 0
const SLCHOST_HOSTSLCHOST_SLC0_LEN1_CHECK_S = 20
const SLCHOST_HOSTSLCHOST_SLC0_LEN2_S = 0
const SLCHOST_HOSTSLCHOST_SLC0_LEN2_CHECK_S = 20
const SLCHOST_SLCHOST_CONF32_S = 0
const SLCHOST_SLCHOST_CONF33_S = 8
const SLCHOST_SLCHOST_CONF34_S = 16
const SLCHOST_SLCHOST_CONF35_S = 24
const SLCHOST_SLCHOST_CONF36_S = 0
const SLCHOST_SLCHOST_CONF37_S = 8
const SLCHOST_SLCHOST_CONF38_S = 16
const SLCHOST_SLCHOST_CONF39_S = 24
const SLCHOST_SLCHOST_CONF40_S = 0
const SLCHOST_SLCHOST_CONF41_S = 8
const SLCHOST_SLCHOST_CONF42_S = 16
const SLCHOST_SLCHOST_CONF43_S = 24
const SLCHOST_SLCHOST_CONF44_S = 0
const SLCHOST_SLCHOST_CONF45_S = 8
const SLCHOST_SLCHOST_CONF46_S = 16
const SLCHOST_SLCHOST_CONF47_S = 24
const SLCHOST_SLCHOST_CONF48_S = 0
const SLCHOST_SLCHOST_CONF49_S = 8
const SLCHOST_SLCHOST_CONF50_S = 16
const SLCHOST_SLCHOST_CONF51_S = 24
const SLCHOST_SLCHOST_CONF52_S = 0
const SLCHOST_SLCHOST_CONF53_S = 8
const SLCHOST_SLCHOST_CONF54_S = 16
const SLCHOST_SLCHOST_CONF55_S = 24
const SLCHOST_SLCHOST_CONF56_S = 0
const SLCHOST_SLCHOST_CONF57_S = 8
const SLCHOST_SLCHOST_CONF58_S = 16
const SLCHOST_SLCHOST_CONF59_S = 24
const SLCHOST_SLCHOST_CONF60_S = 0
const SLCHOST_SLCHOST_CONF61_S = 8
const SLCHOST_SLCHOST_CONF62_S = 16
const SLCHOST_SLCHOST_CONF63_S = 24
const SLCHOST_SLCHOST_CHECK_SUM0_S = 0
const SLCHOST_SLCHOST_CHECK_SUM1_S = 0
const SLCHOST_SLC1_TOKEN0_S = 0
const SLCHOST_SLC1_RX_PF_VALID_S = 12
const SLCHOST_HOSTSLCHOST_SLC1_TOKEN1_S = 16
const SLCHOST_SLC1_RX_PF_EOF_S = 28
const SLCHOST_SLC0HOST_TOKEN0_WD_S = 0
const SLCHOST_SLC0HOST_TOKEN1_WD_S = 16
const SLCHOST_SLC1HOST_TOKEN0_WD_S = 0
const SLCHOST_SLC1HOST_TOKEN1_WD_S = 16
const SLCHOST_SLC0HOST_TOKEN0_DEC_S = 0
const SLCHOST_SLC0HOST_TOKEN1_DEC_S = 1
const SLCHOST_SLC0HOST_TOKEN0_WR_S = 2
const SLCHOST_SLC0HOST_TOKEN1_WR_S = 3
const SLCHOST_SLC1HOST_TOKEN0_DEC_S = 4
const SLCHOST_SLC1HOST_TOKEN1_DEC_S = 5
const SLCHOST_SLC1HOST_TOKEN0_WR_S = 6
const SLCHOST_SLC1HOST_TOKEN1_WR_S = 7
const SLCHOST_SLC0HOST_LEN_WR_S = 8
const SLCHOST_SLC0_TOHOST_BIT0_INT_CLR_S = 0
const SLCHOST_SLC0_TOHOST_BIT1_INT_CLR_S = 1
const SLCHOST_SLC0_TOHOST_BIT2_INT_CLR_S = 2
const SLCHOST_SLC0_TOHOST_BIT3_INT_CLR_S = 3
const SLCHOST_SLC0_TOHOST_BIT4_INT_CLR_S = 4
const SLCHOST_SLC0_TOHOST_BIT5_INT_CLR_S = 5
const SLCHOST_SLC0_TOHOST_BIT6_INT_CLR_S = 6
const SLCHOST_SLC0_TOHOST_BIT7_INT_CLR_S = 7
const SLCHOST_SLC0_TOKEN0_1TO0_INT_CLR_S = 8
const SLCHOST_SLC0_TOKEN1_1TO0_INT_CLR_S = 9
const SLCHOST_SLC0_TOKEN0_0TO1_INT_CLR_S = 10
const SLCHOST_SLC0_TOKEN1_0TO1_INT_CLR_S = 11
const SLCHOST_SLC0HOST_RX_SOF_INT_CLR_S = 12
const SLCHOST_SLC0HOST_RX_EOF_INT_CLR_S = 13
const SLCHOST_SLC0HOST_RX_START_INT_CLR_S = 14
const SLCHOST_SLC0HOST_TX_START_INT_CLR_S = 15
const SLCHOST_SLC0_RX_UDF_INT_CLR_S = 16
const SLCHOST_SLC0_TX_OVF_INT_CLR_S = 17
const SLCHOST_SLC0_RX_PF_VALID_INT_CLR_S = 18
const SLCHOST_SLC0_EXT_BIT0_INT_CLR_S = 19
const SLCHOST_SLC0_EXT_BIT1_INT_CLR_S = 20
const SLCHOST_SLC0_EXT_BIT2_INT_CLR_S = 21
const SLCHOST_SLC0_EXT_BIT3_INT_CLR_S = 22
const SLCHOST_SLC0_RX_NEW_PACKET_INT_CLR_S = 23
const SLCHOST_SLC0_HOST_RD_RETRY_INT_CLR_S = 24
const SLCHOST_GPIO_SDIO_INT_CLR_S = 25
const SLCHOST_SLC1_TOHOST_BIT0_INT_CLR_S = 0
const SLCHOST_SLC1_TOHOST_BIT1_INT_CLR_S = 1
const SLCHOST_SLC1_TOHOST_BIT2_INT_CLR_S = 2
const SLCHOST_SLC1_TOHOST_BIT3_INT_CLR_S = 3
const SLCHOST_SLC1_TOHOST_BIT4_INT_CLR_S = 4
const SLCHOST_SLC1_TOHOST_BIT5_INT_CLR_S = 5
const SLCHOST_SLC1_TOHOST_BIT6_INT_CLR_S = 6
const SLCHOST_SLC1_TOHOST_BIT7_INT_CLR_S = 7
const SLCHOST_SLC1_TOKEN0_1TO0_INT_CLR_S = 8
const SLCHOST_SLC1_TOKEN1_1TO0_INT_CLR_S = 9
const SLCHOST_SLC1_TOKEN0_0TO1_INT_CLR_S = 10
const SLCHOST_SLC1_TOKEN1_0TO1_INT_CLR_S = 11
const SLCHOST_SLC1HOST_RX_SOF_INT_CLR_S = 12
const SLCHOST_SLC1HOST_RX_EOF_INT_CLR_S = 13
const SLCHOST_SLC1HOST_RX_START_INT_CLR_S = 14
const SLCHOST_SLC1HOST_TX_START_INT_CLR_S = 15
const SLCHOST_SLC1_RX_UDF_INT_CLR_S = 16
const SLCHOST_SLC1_TX_OVF_INT_CLR_S = 17
const SLCHOST_SLC1_RX_PF_VALID_INT_CLR_S = 18
const SLCHOST_SLC1_EXT_BIT0_INT_CLR_S = 19
const SLCHOST_SLC1_EXT_BIT1_INT_CLR_S = 20
const SLCHOST_SLC1_EXT_BIT2_INT_CLR_S = 21
const SLCHOST_SLC1_EXT_BIT3_INT_CLR_S = 22
const SLCHOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR_S = 23
const SLCHOST_SLC1_HOST_RD_RETRY_INT_CLR_S = 24
const SLCHOST_SLC1_BT_RX_NEW_PACKET_INT_CLR_S = 25
const SLCHOST_FN1_SLC0_TOHOST_BIT0_INT_ENA_S = 0
const SLCHOST_FN1_SLC0_TOHOST_BIT1_INT_ENA_S = 1
const SLCHOST_FN1_SLC0_TOHOST_BIT2_INT_ENA_S = 2
const SLCHOST_FN1_SLC0_TOHOST_BIT3_INT_ENA_S = 3
const SLCHOST_FN1_SLC0_TOHOST_BIT4_INT_ENA_S = 4
const SLCHOST_FN1_SLC0_TOHOST_BIT5_INT_ENA_S = 5
const SLCHOST_FN1_SLC0_TOHOST_BIT6_INT_ENA_S = 6
const SLCHOST_FN1_SLC0_TOHOST_BIT7_INT_ENA_S = 7
const SLCHOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA_S = 8
const SLCHOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA_S = 9
const SLCHOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA_S = 10
const SLCHOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA_S = 11
const SLCHOST_FN1_SLC0HOST_RX_SOF_INT_ENA_S = 12
const SLCHOST_FN1_SLC0HOST_RX_EOF_INT_ENA_S = 13
const SLCHOST_FN1_SLC0HOST_RX_START_INT_ENA_S = 14
const SLCHOST_FN1_SLC0HOST_TX_START_INT_ENA_S = 15
const SLCHOST_FN1_SLC0_RX_UDF_INT_ENA_S = 16
const SLCHOST_FN1_SLC0_TX_OVF_INT_ENA_S = 17
const SLCHOST_FN1_SLC0_RX_PF_VALID_INT_ENA_S = 18
const SLCHOST_FN1_SLC0_EXT_BIT0_INT_ENA_S = 19
const SLCHOST_FN1_SLC0_EXT_BIT1_INT_ENA_S = 20
const SLCHOST_FN1_SLC0_EXT_BIT2_INT_ENA_S = 21
const SLCHOST_FN1_SLC0_EXT_BIT3_INT_ENA_S = 22
const SLCHOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA_S = 23
const SLCHOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA_S = 24
const SLCHOST_FN1_GPIO_SDIO_INT_ENA_S = 25
const SLCHOST_FN1_SLC1_TOHOST_BIT0_INT_ENA_S = 0
const SLCHOST_FN1_SLC1_TOHOST_BIT1_INT_ENA_S = 1
const SLCHOST_FN1_SLC1_TOHOST_BIT2_INT_ENA_S = 2
const SLCHOST_FN1_SLC1_TOHOST_BIT3_INT_ENA_S = 3
const SLCHOST_FN1_SLC1_TOHOST_BIT4_INT_ENA_S = 4
const SLCHOST_FN1_SLC1_TOHOST_BIT5_INT_ENA_S = 5
const SLCHOST_FN1_SLC1_TOHOST_BIT6_INT_ENA_S = 6
const SLCHOST_FN1_SLC1_TOHOST_BIT7_INT_ENA_S = 7
const SLCHOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA_S = 8
const SLCHOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA_S = 9
const SLCHOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA_S = 10
const SLCHOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA_S = 11
const SLCHOST_FN1_SLC1HOST_RX_SOF_INT_ENA_S = 12
const SLCHOST_FN1_SLC1HOST_RX_EOF_INT_ENA_S = 13
const SLCHOST_FN1_SLC1HOST_RX_START_INT_ENA_S = 14
const SLCHOST_FN1_SLC1HOST_TX_START_INT_ENA_S = 15
const SLCHOST_FN1_SLC1_RX_UDF_INT_ENA_S = 16
const SLCHOST_FN1_SLC1_TX_OVF_INT_ENA_S = 17
const SLCHOST_FN1_SLC1_RX_PF_VALID_INT_ENA_S = 18
const SLCHOST_FN1_SLC1_EXT_BIT0_INT_ENA_S = 19
const SLCHOST_FN1_SLC1_EXT_BIT1_INT_ENA_S = 20
const SLCHOST_FN1_SLC1_EXT_BIT2_INT_ENA_S = 21
const SLCHOST_FN1_SLC1_EXT_BIT3_INT_ENA_S = 22
const SLCHOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_S = 23
const SLCHOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA_S = 24
const SLCHOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA_S = 25
const SLCHOST_FN2_SLC0_TOHOST_BIT0_INT_ENA_S = 0
const SLCHOST_FN2_SLC0_TOHOST_BIT1_INT_ENA_S = 1
const SLCHOST_FN2_SLC0_TOHOST_BIT2_INT_ENA_S = 2
const SLCHOST_FN2_SLC0_TOHOST_BIT3_INT_ENA_S = 3
const SLCHOST_FN2_SLC0_TOHOST_BIT4_INT_ENA_S = 4
const SLCHOST_FN2_SLC0_TOHOST_BIT5_INT_ENA_S = 5
const SLCHOST_FN2_SLC0_TOHOST_BIT6_INT_ENA_S = 6
const SLCHOST_FN2_SLC0_TOHOST_BIT7_INT_ENA_S = 7
const SLCHOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA_S = 8
const SLCHOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA_S = 9
const SLCHOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA_S = 10
const SLCHOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA_S = 11
const SLCHOST_FN2_SLC0HOST_RX_SOF_INT_ENA_S = 12
const SLCHOST_FN2_SLC0HOST_RX_EOF_INT_ENA_S = 13
const SLCHOST_FN2_SLC0HOST_RX_START_INT_ENA_S = 14
const SLCHOST_FN2_SLC0HOST_TX_START_INT_ENA_S = 15
const SLCHOST_FN2_SLC0_RX_UDF_INT_ENA_S = 16
const SLCHOST_FN2_SLC0_TX_OVF_INT_ENA_S = 17
const SLCHOST_FN2_SLC0_RX_PF_VALID_INT_ENA_S = 18
const SLCHOST_FN2_SLC0_EXT_BIT0_INT_ENA_S = 19
const SLCHOST_FN2_SLC0_EXT_BIT1_INT_ENA_S = 20
const SLCHOST_FN2_SLC0_EXT_BIT2_INT_ENA_S = 21
const SLCHOST_FN2_SLC0_EXT_BIT3_INT_ENA_S = 22
const SLCHOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA_S = 23
const SLCHOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA_S = 24
const SLCHOST_FN2_GPIO_SDIO_INT_ENA_S = 25
const SLCHOST_FN2_SLC1_TOHOST_BIT0_INT_ENA_S = 0
const SLCHOST_FN2_SLC1_TOHOST_BIT1_INT_ENA_S = 1
const SLCHOST_FN2_SLC1_TOHOST_BIT2_INT_ENA_S = 2
const SLCHOST_FN2_SLC1_TOHOST_BIT3_INT_ENA_S = 3
const SLCHOST_FN2_SLC1_TOHOST_BIT4_INT_ENA_S = 4
const SLCHOST_FN2_SLC1_TOHOST_BIT5_INT_ENA_S = 5
const SLCHOST_FN2_SLC1_TOHOST_BIT6_INT_ENA_S = 6
const SLCHOST_FN2_SLC1_TOHOST_BIT7_INT_ENA_S = 7
const SLCHOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA_S = 8
const SLCHOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA_S = 9
const SLCHOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA_S = 10
const SLCHOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA_S = 11
const SLCHOST_FN2_SLC1HOST_RX_SOF_INT_ENA_S = 12
const SLCHOST_FN2_SLC1HOST_RX_EOF_INT_ENA_S = 13
const SLCHOST_FN2_SLC1HOST_RX_START_INT_ENA_S = 14
const SLCHOST_FN2_SLC1HOST_TX_START_INT_ENA_S = 15
const SLCHOST_FN2_SLC1_RX_UDF_INT_ENA_S = 16
const SLCHOST_FN2_SLC1_TX_OVF_INT_ENA_S = 17
const SLCHOST_FN2_SLC1_RX_PF_VALID_INT_ENA_S = 18
const SLCHOST_FN2_SLC1_EXT_BIT0_INT_ENA_S = 19
const SLCHOST_FN2_SLC1_EXT_BIT1_INT_ENA_S = 20
const SLCHOST_FN2_SLC1_EXT_BIT2_INT_ENA_S = 21
const SLCHOST_FN2_SLC1_EXT_BIT3_INT_ENA_S = 22
const SLCHOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_S = 23
const SLCHOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA_S = 24
const SLCHOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA_S = 25
const SLCHOST_SLC0_TOHOST_BIT0_INT_ENA_S = 0
const SLCHOST_SLC0_TOHOST_BIT1_INT_ENA_S = 1
const SLCHOST_SLC0_TOHOST_BIT2_INT_ENA_S = 2
const SLCHOST_SLC0_TOHOST_BIT3_INT_ENA_S = 3
const SLCHOST_SLC0_TOHOST_BIT4_INT_ENA_S = 4
const SLCHOST_SLC0_TOHOST_BIT5_INT_ENA_S = 5
const SLCHOST_SLC0_TOHOST_BIT6_INT_ENA_S = 6
const SLCHOST_SLC0_TOHOST_BIT7_INT_ENA_S = 7
const SLCHOST_SLC0_TOKEN0_1TO0_INT_ENA_S = 8
const SLCHOST_SLC0_TOKEN1_1TO0_INT_ENA_S = 9
const SLCHOST_SLC0_TOKEN0_0TO1_INT_ENA_S = 10
const SLCHOST_SLC0_TOKEN1_0TO1_INT_ENA_S = 11
const SLCHOST_SLC0HOST_RX_SOF_INT_ENA_S = 12
const SLCHOST_SLC0HOST_RX_EOF_INT_ENA_S = 13
const SLCHOST_SLC0HOST_RX_START_INT_ENA_S = 14
const SLCHOST_SLC0HOST_TX_START_INT_ENA_S = 15
const SLCHOST_SLC0_RX_UDF_INT_ENA_S = 16
const SLCHOST_SLC0_TX_OVF_INT_ENA_S = 17
const SLCHOST_SLC0_RX_PF_VALID_INT_ENA_S = 18
const SLCHOST_SLC0_EXT_BIT0_INT_ENA_S = 19
const SLCHOST_SLC0_EXT_BIT1_INT_ENA_S = 20
const SLCHOST_SLC0_EXT_BIT2_INT_ENA_S = 21
const SLCHOST_SLC0_EXT_BIT3_INT_ENA_S = 22
const SLCHOST_SLC0_RX_NEW_PACKET_INT_ENA_S = 23
const SLCHOST_SLC0_HOST_RD_RETRY_INT_ENA_S = 24
const SLCHOST_GPIO_SDIO_INT_ENA_S = 25
const SLCHOST_SLC1_TOHOST_BIT0_INT_ENA_S = 0
const SLCHOST_SLC1_TOHOST_BIT1_INT_ENA_S = 1
const SLCHOST_SLC1_TOHOST_BIT2_INT_ENA_S = 2
const SLCHOST_SLC1_TOHOST_BIT3_INT_ENA_S = 3
const SLCHOST_SLC1_TOHOST_BIT4_INT_ENA_S = 4
const SLCHOST_SLC1_TOHOST_BIT5_INT_ENA_S = 5
const SLCHOST_SLC1_TOHOST_BIT6_INT_ENA_S = 6
const SLCHOST_SLC1_TOHOST_BIT7_INT_ENA_S = 7
const SLCHOST_SLC1_TOKEN0_1TO0_INT_ENA_S = 8
const SLCHOST_SLC1_TOKEN1_1TO0_INT_ENA_S = 9
const SLCHOST_SLC1_TOKEN0_0TO1_INT_ENA_S = 10
const SLCHOST_SLC1_TOKEN1_0TO1_INT_ENA_S = 11
const SLCHOST_SLC1HOST_RX_SOF_INT_ENA_S = 12
const SLCHOST_SLC1HOST_RX_EOF_INT_ENA_S = 13
const SLCHOST_SLC1HOST_RX_START_INT_ENA_S = 14
const SLCHOST_SLC1HOST_TX_START_INT_ENA_S = 15
const SLCHOST_SLC1_RX_UDF_INT_ENA_S = 16
const SLCHOST_SLC1_TX_OVF_INT_ENA_S = 17
const SLCHOST_SLC1_RX_PF_VALID_INT_ENA_S = 18
const SLCHOST_SLC1_EXT_BIT0_INT_ENA_S = 19
const SLCHOST_SLC1_EXT_BIT1_INT_ENA_S = 20
const SLCHOST_SLC1_EXT_BIT2_INT_ENA_S = 21
const SLCHOST_SLC1_EXT_BIT3_INT_ENA_S = 22
const SLCHOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_S = 23
const SLCHOST_SLC1_HOST_RD_RETRY_INT_ENA_S = 24
const SLCHOST_SLC1_BT_RX_NEW_PACKET_INT_ENA_S = 25
const SLCHOST_SLC0HOST_RX_INFOR_S = 0
const SLCHOST_SLC1HOST_RX_INFOR_S = 0
const SLCHOST_SLC0HOST_LEN_WD_S = 0
const SLCHOST_SLC_APBWIN_WDATA_S = 0
const SLCHOST_SLC_APBWIN_ADDR_S = 0
const SLCHOST_SLC_APBWIN_WR_S = 28
const SLCHOST_SLC_APBWIN_START_S = 29
const SLCHOST_SLC_APBWIN_RDATA_S = 0
const SLCHOST_SLCHOST_SLC0_BIT7_CLRADDR_S = 0
const SLCHOST_SLCHOST_SLC0_BIT6_CLRADDR_S = 9
const SLCHOST_SLCHOST_SLC1_BIT7_CLRADDR_S = 0
const SLCHOST_SLCHOST_SLC1_BIT6_CLRADDR_S = 9
const SLCHOST_SLC0_TOHOST_BIT0_INT_ENA1_S = 0
const SLCHOST_SLC0_TOHOST_BIT1_INT_ENA1_S = 1
const SLCHOST_SLC0_TOHOST_BIT2_INT_ENA1_S = 2
const SLCHOST_SLC0_TOHOST_BIT3_INT_ENA1_S = 3
const SLCHOST_SLC0_TOHOST_BIT4_INT_ENA1_S = 4
const SLCHOST_SLC0_TOHOST_BIT5_INT_ENA1_S = 5
const SLCHOST_SLC0_TOHOST_BIT6_INT_ENA1_S = 6
const SLCHOST_SLC0_TOHOST_BIT7_INT_ENA1_S = 7
const SLCHOST_SLC0_TOKEN0_1TO0_INT_ENA1_S = 8
const SLCHOST_SLC0_TOKEN1_1TO0_INT_ENA1_S = 9
const SLCHOST_SLC0_TOKEN0_0TO1_INT_ENA1_S = 10
const SLCHOST_SLC0_TOKEN1_0TO1_INT_ENA1_S = 11
const SLCHOST_SLC0HOST_RX_SOF_INT_ENA1_S = 12
const SLCHOST_SLC0HOST_RX_EOF_INT_ENA1_S = 13
const SLCHOST_SLC0HOST_RX_START_INT_ENA1_S = 14
const SLCHOST_SLC0HOST_TX_START_INT_ENA1_S = 15
const SLCHOST_SLC0_RX_UDF_INT_ENA1_S = 16
const SLCHOST_SLC0_TX_OVF_INT_ENA1_S = 17
const SLCHOST_SLC0_RX_PF_VALID_INT_ENA1_S = 18
const SLCHOST_SLC0_EXT_BIT0_INT_ENA1_S = 19
const SLCHOST_SLC0_EXT_BIT1_INT_ENA1_S = 20
const SLCHOST_SLC0_EXT_BIT2_INT_ENA1_S = 21
const SLCHOST_SLC0_EXT_BIT3_INT_ENA1_S = 22
const SLCHOST_SLC0_RX_NEW_PACKET_INT_ENA1_S = 23
const SLCHOST_SLC0_HOST_RD_RETRY_INT_ENA1_S = 24
const SLCHOST_GPIO_SDIO_INT_ENA1_S = 25
const SLCHOST_SLC1_TOHOST_BIT0_INT_ENA1_S = 0
const SLCHOST_SLC1_TOHOST_BIT1_INT_ENA1_S = 1
const SLCHOST_SLC1_TOHOST_BIT2_INT_ENA1_S = 2
const SLCHOST_SLC1_TOHOST_BIT3_INT_ENA1_S = 3
const SLCHOST_SLC1_TOHOST_BIT4_INT_ENA1_S = 4
const SLCHOST_SLC1_TOHOST_BIT5_INT_ENA1_S = 5
const SLCHOST_SLC1_TOHOST_BIT6_INT_ENA1_S = 6
const SLCHOST_SLC1_TOHOST_BIT7_INT_ENA1_S = 7
const SLCHOST_SLC1_TOKEN0_1TO0_INT_ENA1_S = 8
const SLCHOST_SLC1_TOKEN1_1TO0_INT_ENA1_S = 9
const SLCHOST_SLC1_TOKEN0_0TO1_INT_ENA1_S = 10
const SLCHOST_SLC1_TOKEN1_0TO1_INT_ENA1_S = 11
const SLCHOST_SLC1HOST_RX_SOF_INT_ENA1_S = 12
const SLCHOST_SLC1HOST_RX_EOF_INT_ENA1_S = 13
const SLCHOST_SLC1HOST_RX_START_INT_ENA1_S = 14
const SLCHOST_SLC1HOST_TX_START_INT_ENA1_S = 15
const SLCHOST_SLC1_RX_UDF_INT_ENA1_S = 16
const SLCHOST_SLC1_TX_OVF_INT_ENA1_S = 17
const SLCHOST_SLC1_RX_PF_VALID_INT_ENA1_S = 18
const SLCHOST_SLC1_EXT_BIT0_INT_ENA1_S = 19
const SLCHOST_SLC1_EXT_BIT1_INT_ENA1_S = 20
const SLCHOST_SLC1_EXT_BIT2_INT_ENA1_S = 21
const SLCHOST_SLC1_EXT_BIT3_INT_ENA1_S = 22
const SLCHOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1_S = 23
const SLCHOST_SLC1_HOST_RD_RETRY_INT_ENA1_S = 24
const SLCHOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1_S = 25
const SLCHOST_SLCHOST_DATE_S = 0
const SLCHOST_SLCHOST_ID_S = 0
const SLCHOST_FRC_SDIO11_S = 0
const SLCHOST_FRC_SDIO20_S = 5
const SLCHOST_FRC_NEG_SAMP_S = 10
const SLCHOST_FRC_POS_SAMP_S = 15
const SLCHOST_FRC_QUICK_IN_S = 20
const SLCHOST_SDIO20_INT_DELAY_S = 25
const SLCHOST_SDIO_PAD_PULLUP_S = 26
const SLCHOST_HSPEED_CON_EN_S = 27
const SLCHOST_SDIO20_MODE_S = 0
const SLCHOST_SDIO_NEG_SAMP_S = 5
const SLCHOST_SDIO_QUICK_IN_S = 10
const SLCHOST_DLL_ON_SW_S = 15
const SLCHOST_DLL_ON_S = 16
const SLCHOST_CLK_MODE_SW_S = 17
const SLCHOST_CLK_MODE_S = 18
const SPI_MEM_FLASH_READ_V = 0x1
const SPI_MEM_FLASH_READ_S = 31
const SPI_MEM_FLASH_WREN_V = 0x1
const SPI_MEM_FLASH_WREN_S = 30
const SPI_MEM_FLASH_WRDI_V = 0x1
const SPI_MEM_FLASH_WRDI_S = 29
const SPI_MEM_FLASH_RDID_V = 0x1
const SPI_MEM_FLASH_RDID_S = 28
const SPI_MEM_FLASH_RDSR_V = 0x1
const SPI_MEM_FLASH_RDSR_S = 27
const SPI_MEM_FLASH_WRSR_V = 0x1
const SPI_MEM_FLASH_WRSR_S = 26
const SPI_MEM_FLASH_PP_V = 0x1
const SPI_MEM_FLASH_PP_S = 25
const SPI_MEM_FLASH_SE_V = 0x1
const SPI_MEM_FLASH_SE_S = 24
const SPI_MEM_FLASH_BE_V = 0x1
const SPI_MEM_FLASH_BE_S = 23
const SPI_MEM_FLASH_CE_V = 0x1
const SPI_MEM_FLASH_CE_S = 22
const SPI_MEM_FLASH_DP_V = 0x1
const SPI_MEM_FLASH_DP_S = 21
const SPI_MEM_FLASH_RES_V = 0x1
const SPI_MEM_FLASH_RES_S = 20
const SPI_MEM_FLASH_HPM_V = 0x1
const SPI_MEM_FLASH_HPM_S = 19
const SPI_MEM_USR_V = 0x1
const SPI_MEM_USR_S = 18
const SPI_MEM_FLASH_PE_V = 0x1
const SPI_MEM_FLASH_PE_S = 17
const SPI_MEM_SLV_ST = 0x0000000F
const SPI_MEM_SLV_ST_V = 0xF
const SPI_MEM_SLV_ST_S = 4
const SPI_MEM_MST_ST = 0x0000000F
const SPI_MEM_MST_ST_V = 0xF
const SPI_MEM_MST_ST_S = 0
const SPI_MEM_USR_ADDR_VALUE = 0xFFFFFFFF
const SPI_MEM_USR_ADDR_VALUE_V = 0xFFFFFFFF
const SPI_MEM_USR_ADDR_VALUE_S = 0
const SPI_MEM_DATA_IE_ALWAYS_ON_V = 0x1
const SPI_MEM_DATA_IE_ALWAYS_ON_S = 31
const SPI_MEM_DQS_IE_ALWAYS_ON_V = 0x1
const SPI_MEM_DQS_IE_ALWAYS_ON_S = 30
const SPI_MEM_FREAD_QIO_V = 0x1
const SPI_MEM_FREAD_QIO_S = 24
const SPI_MEM_FREAD_DIO_V = 0x1
const SPI_MEM_FREAD_DIO_S = 23
const SPI_MEM_WRSR_2B_V = 0x1
const SPI_MEM_WRSR_2B_S = 22
const SPI_MEM_WP_REG_V = 0x1
const SPI_MEM_WP_REG_S = 21
const SPI_MEM_FREAD_QUAD_V = 0x1
const SPI_MEM_FREAD_QUAD_S = 20
const SPI_MEM_D_POL_V = 0x1
const SPI_MEM_D_POL_S = 19
const SPI_MEM_Q_POL_V = 0x1
const SPI_MEM_Q_POL_S = 18
const SPI_MEM_RESANDRES_V = 0x1
const SPI_MEM_RESANDRES_S = 15
const SPI_MEM_FREAD_DUAL_V = 0x1
const SPI_MEM_FREAD_DUAL_S = 14
const SPI_MEM_FASTRD_MODE_V = 0x1
const SPI_MEM_FASTRD_MODE_S = 13
const SPI_MEM_TX_CRC_EN_V = 0x1
const SPI_MEM_TX_CRC_EN_S = 11
const SPI_MEM_FCS_CRC_EN_V = 0x1
const SPI_MEM_FCS_CRC_EN_S = 10
const SPI_MEM_FCMD_OCT_V = 0x1
const SPI_MEM_FCMD_OCT_S = 9
const SPI_MEM_FCMD_QUAD_V = 0x1
const SPI_MEM_FCMD_QUAD_S = 8
const SPI_MEM_FADDR_OCT_V = 0x1
const SPI_MEM_FADDR_OCT_S = 6
const SPI_MEM_FDIN_OCT_V = 0x1
const SPI_MEM_FDIN_OCT_S = 5
const SPI_MEM_FDOUT_OCT_V = 0x1
const SPI_MEM_FDOUT_OCT_S = 4
const SPI_MEM_FDUMMY_WOUT_V = 0x1
const SPI_MEM_FDUMMY_WOUT_S = 3
const SPI_MEM_FDUMMY_RIN_V = 0x1
const SPI_MEM_FDUMMY_RIN_S = 2
const SPI_MEM_WDUMMY_ALWAYS_OUT_V = 0x1
const SPI_MEM_WDUMMY_ALWAYS_OUT_S = 1
const SPI_MEM_WDUMMY_DQS_ALWAYS_OUT_V = 0x1
const SPI_MEM_WDUMMY_DQS_ALWAYS_OUT_S = 0
const SPI_MEM_TXFIFO_RST_V = 0x1
const SPI_MEM_TXFIFO_RST_S = 31
const SPI_MEM_RXFIFO_RST_V = 0x1
const SPI_MEM_RXFIFO_RST_S = 30
const SPI_MEM_FAST_WRITE_EN_V = 0x1
const SPI_MEM_FAST_WRITE_EN_S = 29
const SPI_MEM_DUAL_RAM_EN_V = 0x1
const SPI_MEM_DUAL_RAM_EN_S = 28
const SPI_MEM_RAM0_EN_V = 0x1
const SPI_MEM_RAM0_EN_S = 27
const SPI_MEM_AW_SPLICE_EN_V = 0x1
const SPI_MEM_AW_SPLICE_EN_S = 26
const SPI_MEM_AR_SPLICE_EN_V = 0x1
const SPI_MEM_AR_SPLICE_EN_S = 25
const SPI_MEM_RRESP_ECC_ERR_EN_V = 0x1
const SPI_MEM_RRESP_ECC_ERR_EN_S = 24
const SPI_MEM_AXI_RDATA_BACK_FAST_V = 0x1
const SPI_MEM_AXI_RDATA_BACK_FAST_S = 23
const SPI_MEM_AW_SIZE0_1_SUPPORT_EN_V = 0x1
const SPI_MEM_AW_SIZE0_1_SUPPORT_EN_S = 22
const SPI_MEM_AR_SIZE0_1_SUPPORT_EN_V = 0x1
const SPI_MEM_AR_SIZE0_1_SUPPORT_EN_S = 21
const SPI_MEM_CS_HOLD_DLY_RES = 0x000003FF
const SPI_MEM_CS_HOLD_DLY_RES_V = 0x3FF
const SPI_MEM_CS_HOLD_DLY_RES_S = 2
const SPI_MEM_CLK_MODE = 0x00000003
const SPI_MEM_CLK_MODE_V = 0x3
const SPI_MEM_CLK_MODE_S = 0
const SPI_MEM_SYNC_RESET_V = 0x1
const SPI_MEM_SYNC_RESET_S = 31
const SPI_MEM_CS_HOLD_DELAY = 0x0000003F
const SPI_MEM_CS_HOLD_DELAY_V = 0x3F
const SPI_MEM_CS_HOLD_DELAY_S = 25
const SPI_MEM_SPLIT_TRANS_EN_V = 0x1
const SPI_MEM_SPLIT_TRANS_EN_S = 24
const SPI_MEM_ECC_16TO18_BYTE_EN_V = 0x1
const SPI_MEM_ECC_16TO18_BYTE_EN_S = 14
const SPI_MEM_ECC_SKIP_PAGE_CORNER_V = 0x1
const SPI_MEM_ECC_SKIP_PAGE_CORNER_S = 13
const SPI_MEM_ECC_CS_HOLD_TIME = 0x00000007
const SPI_MEM_ECC_CS_HOLD_TIME_V = 0x7
const SPI_MEM_ECC_CS_HOLD_TIME_S = 10
const SPI_MEM_CS_HOLD_TIME = 0x0000001F
const SPI_MEM_CS_HOLD_TIME_V = 0x1F
const SPI_MEM_CS_HOLD_TIME_S = 5
const SPI_MEM_CS_SETUP_TIME = 0x0000001F
const SPI_MEM_CS_SETUP_TIME_V = 0x1F
const SPI_MEM_CS_SETUP_TIME_S = 0
const SPI_MEM_CLK_EQU_SYSCLK_V = 0x1
const SPI_MEM_CLK_EQU_SYSCLK_S = 31
const SPI_MEM_CLKCNT_N = 0x000000FF
const SPI_MEM_CLKCNT_N_V = 0xFF
const SPI_MEM_CLKCNT_N_S = 16
const SPI_MEM_CLKCNT_H = 0x000000FF
const SPI_MEM_CLKCNT_H_V = 0xFF
const SPI_MEM_CLKCNT_H_S = 8
const SPI_MEM_CLKCNT_L = 0x000000FF
const SPI_MEM_CLKCNT_L_V = 0xFF
const SPI_MEM_CLKCNT_L_S = 0
const SPI_MEM_USR_COMMAND_V = 0x1
const SPI_MEM_USR_COMMAND_S = 31
const SPI_MEM_USR_ADDR_V = 0x1
const SPI_MEM_USR_ADDR_S = 30
const SPI_MEM_USR_DUMMY_V = 0x1
const SPI_MEM_USR_DUMMY_S = 29
const SPI_MEM_USR_MISO_V = 0x1
const SPI_MEM_USR_MISO_S = 28
const SPI_MEM_USR_MOSI_V = 0x1
const SPI_MEM_USR_MOSI_S = 27
const SPI_MEM_USR_DUMMY_IDLE_V = 0x1
const SPI_MEM_USR_DUMMY_IDLE_S = 26
const SPI_MEM_USR_MOSI_HIGHPART_V = 0x1
const SPI_MEM_USR_MOSI_HIGHPART_S = 25
const SPI_MEM_USR_MISO_HIGHPART_V = 0x1
const SPI_MEM_USR_MISO_HIGHPART_S = 24
const SPI_MEM_FWRITE_QIO_V = 0x1
const SPI_MEM_FWRITE_QIO_S = 15
const SPI_MEM_FWRITE_DIO_V = 0x1
const SPI_MEM_FWRITE_DIO_S = 14
const SPI_MEM_FWRITE_QUAD_V = 0x1
const SPI_MEM_FWRITE_QUAD_S = 13
const SPI_MEM_FWRITE_DUAL_V = 0x1
const SPI_MEM_FWRITE_DUAL_S = 12
const SPI_MEM_CK_OUT_EDGE_V = 0x1
const SPI_MEM_CK_OUT_EDGE_S = 9
const SPI_MEM_CS_SETUP_V = 0x1
const SPI_MEM_CS_SETUP_S = 7
const SPI_MEM_CS_HOLD_V = 0x1
const SPI_MEM_CS_HOLD_S = 6
const SPI_MEM_USR_ADDR_BITLEN = 0x0000003F
const SPI_MEM_USR_ADDR_BITLEN_V = 0x3F
const SPI_MEM_USR_ADDR_BITLEN_S = 26
const SPI_MEM_USR_DBYTELEN = 0x00000007
const SPI_MEM_USR_DBYTELEN_V = 0x7
const SPI_MEM_USR_DBYTELEN_S = 6
const SPI_MEM_USR_DUMMY_CYCLELEN = 0x0000003F
const SPI_MEM_USR_DUMMY_CYCLELEN_V = 0x3F
const SPI_MEM_USR_DUMMY_CYCLELEN_S = 0
const SPI_MEM_USR_COMMAND_BITLEN = 0x0000000F
const SPI_MEM_USR_COMMAND_BITLEN_V = 0xF
const SPI_MEM_USR_COMMAND_BITLEN_S = 28
const SPI_MEM_USR_COMMAND_VALUE = 0x0000FFFF
const SPI_MEM_USR_COMMAND_VALUE_V = 0xFFFF
const SPI_MEM_USR_COMMAND_VALUE_S = 0
const SPI_MEM_USR_MOSI_DBITLEN = 0x000003FF
const SPI_MEM_USR_MOSI_DBITLEN_V = 0x3FF
const SPI_MEM_USR_MOSI_DBITLEN_S = 0
const SPI_MEM_USR_MISO_DBITLEN = 0x000003FF
const SPI_MEM_USR_MISO_DBITLEN_V = 0x3FF
const SPI_MEM_USR_MISO_DBITLEN_S = 0
const SPI_MEM_WB_MODE = 0x000000FF
const SPI_MEM_WB_MODE_V = 0xFF
const SPI_MEM_WB_MODE_S = 16
const SPI_MEM_STATUS = 0x0000FFFF
const SPI_MEM_STATUS_V = 0xFFFF
const SPI_MEM_STATUS_S = 0
const SPI_MEM_CS_KEEP_ACTIVE_V = 0x1
const SPI_MEM_CS_KEEP_ACTIVE_S = 10
const SPI_MEM_CK_IDLE_EDGE_V = 0x1
const SPI_MEM_CK_IDLE_EDGE_S = 9
const SPI_MEM_SSUB_PIN_V = 0x1
const SPI_MEM_SSUB_PIN_S = 8
const SPI_MEM_FSUB_PIN_V = 0x1
const SPI_MEM_FSUB_PIN_S = 7
const SPI_MEM_CS1_DIS_V = 0x1
const SPI_MEM_CS1_DIS_S = 1
const SPI_MEM_CS0_DIS_V = 0x1
const SPI_MEM_CS0_DIS_S = 0
const SPI_MEM_TX_CRC_DATA = 0xFFFFFFFF
const SPI_MEM_TX_CRC_DATA_V = 0xFFFFFFFF
const SPI_MEM_TX_CRC_DATA_S = 0
const SPI_MEM_CLOSE_AXI_INF_EN_V = 0x1
const SPI_MEM_CLOSE_AXI_INF_EN_S = 31
const SPI_MEM_SAME_AW_AR_ADDR_CHK_EN_V = 0x1
const SPI_MEM_SAME_AW_AR_ADDR_CHK_EN_S = 30
const SPI_MEM_FADDR_QUAD_V = 0x1
const SPI_MEM_FADDR_QUAD_S = 8
const SPI_MEM_FDOUT_QUAD_V = 0x1
const SPI_MEM_FDOUT_QUAD_S = 7
const SPI_MEM_FDIN_QUAD_V = 0x1
const SPI_MEM_FDIN_QUAD_S = 6
const SPI_MEM_FADDR_DUAL_V = 0x1
const SPI_MEM_FADDR_DUAL_S = 5
const SPI_MEM_FDOUT_DUAL_V = 0x1
const SPI_MEM_FDOUT_DUAL_S = 4
const SPI_MEM_FDIN_DUAL_V = 0x1
const SPI_MEM_FDIN_DUAL_S = 3
const SPI_MEM_CACHE_FLASH_USR_CMD_V = 0x1
const SPI_MEM_CACHE_FLASH_USR_CMD_S = 2
const SPI_MEM_CACHE_USR_ADDR_4BYTE_V = 0x1
const SPI_MEM_CACHE_USR_ADDR_4BYTE_S = 1
const SPI_MEM_AXI_REQ_EN_V = 0x1
const SPI_MEM_AXI_REQ_EN_S = 0
const SPI_MEM_SRAM_WDUMMY_CYCLELEN = 0x0000003F
const SPI_MEM_SRAM_WDUMMY_CYCLELEN_V = 0x3F
const SPI_MEM_SRAM_WDUMMY_CYCLELEN_S = 22
const SPI_MEM_SRAM_OCT_V = 0x1
const SPI_MEM_SRAM_OCT_S = 21
const SPI_MEM_CACHE_SRAM_USR_WCMD_V = 0x1
const SPI_MEM_CACHE_SRAM_USR_WCMD_S = 20
const SPI_MEM_SRAM_ADDR_BITLEN = 0x0000003F
const SPI_MEM_SRAM_ADDR_BITLEN_V = 0x3F
const SPI_MEM_SRAM_ADDR_BITLEN_S = 14
const SPI_MEM_SRAM_RDUMMY_CYCLELEN = 0x0000003F
const SPI_MEM_SRAM_RDUMMY_CYCLELEN_V = 0x3F
const SPI_MEM_SRAM_RDUMMY_CYCLELEN_S = 6
const SPI_MEM_CACHE_SRAM_USR_RCMD_V = 0x1
const SPI_MEM_CACHE_SRAM_USR_RCMD_S = 5
const SPI_MEM_USR_RD_SRAM_DUMMY_V = 0x1
const SPI_MEM_USR_RD_SRAM_DUMMY_S = 4
const SPI_MEM_USR_WR_SRAM_DUMMY_V = 0x1
const SPI_MEM_USR_WR_SRAM_DUMMY_S = 3
const SPI_MEM_USR_SRAM_QIO_V = 0x1
const SPI_MEM_USR_SRAM_QIO_S = 2
const SPI_MEM_USR_SRAM_DIO_V = 0x1
const SPI_MEM_USR_SRAM_DIO_S = 1
const SPI_MEM_CACHE_USR_SADDR_4BYTE_V = 0x1
const SPI_MEM_CACHE_USR_SADDR_4BYTE_S = 0
const SPI_MEM_SMEM_DATA_IE_ALWAYS_ON_V = 0x1
const SPI_MEM_SMEM_DATA_IE_ALWAYS_ON_S = 31
const SPI_MEM_SMEM_DQS_IE_ALWAYS_ON_V = 0x1
const SPI_MEM_SMEM_DQS_IE_ALWAYS_ON_S = 30
const SPI_MEM_SMEM_WDUMMY_ALWAYS_OUT_V = 0x1
const SPI_MEM_SMEM_WDUMMY_ALWAYS_OUT_S = 25
const SPI_MEM_SMEM_WDUMMY_DQS_ALWAYS_OUT_V = 0x1
const SPI_MEM_SMEM_WDUMMY_DQS_ALWAYS_OUT_S = 24
const SPI_MEM_SDUMMY_WOUT_V = 0x1
const SPI_MEM_SDUMMY_WOUT_S = 23
const SPI_MEM_SDUMMY_RIN_V = 0x1
const SPI_MEM_SDUMMY_RIN_S = 22
const SPI_MEM_SCMD_OCT_V = 0x1
const SPI_MEM_SCMD_OCT_S = 21
const SPI_MEM_SADDR_OCT_V = 0x1
const SPI_MEM_SADDR_OCT_S = 20
const SPI_MEM_SDOUT_OCT_V = 0x1
const SPI_MEM_SDOUT_OCT_S = 19
const SPI_MEM_SDIN_OCT_V = 0x1
const SPI_MEM_SDIN_OCT_S = 18
const SPI_MEM_SCMD_QUAD_V = 0x1
const SPI_MEM_SCMD_QUAD_S = 17
const SPI_MEM_SADDR_QUAD_V = 0x1
const SPI_MEM_SADDR_QUAD_S = 16
const SPI_MEM_SDOUT_QUAD_V = 0x1
const SPI_MEM_SDOUT_QUAD_S = 15
const SPI_MEM_SDIN_QUAD_V = 0x1
const SPI_MEM_SDIN_QUAD_S = 14
const SPI_MEM_SADDR_DUAL_V = 0x1
const SPI_MEM_SADDR_DUAL_S = 12
const SPI_MEM_SDOUT_DUAL_V = 0x1
const SPI_MEM_SDOUT_DUAL_S = 11
const SPI_MEM_SDIN_DUAL_V = 0x1
const SPI_MEM_SDIN_DUAL_S = 10
const SPI_MEM_SWB_MODE = 0x000000FF
const SPI_MEM_SWB_MODE_V = 0xFF
const SPI_MEM_SWB_MODE_S = 2
const SPI_MEM_SCLK_MODE = 0x00000003
const SPI_MEM_SCLK_MODE_V = 0x3
const SPI_MEM_SCLK_MODE_S = 0
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_BITLEN = 0x0000000F
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_BITLEN_V = 0xF
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_BITLEN_S = 28
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_VALUE = 0x0000FFFF
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_VALUE_V = 0xFFFF
const SPI_MEM_CACHE_SRAM_USR_RD_CMD_VALUE_S = 0
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_BITLEN = 0x0000000F
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_BITLEN_V = 0xF
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_BITLEN_S = 28
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_VALUE = 0x0000FFFF
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_VALUE_V = 0xFFFF
const SPI_MEM_CACHE_SRAM_USR_WR_CMD_VALUE_S = 0
const SPI_MEM_SCLK_EQU_SYSCLK_V = 0x1
const SPI_MEM_SCLK_EQU_SYSCLK_S = 31
const SPI_MEM_SCLKCNT_N = 0x000000FF
const SPI_MEM_SCLKCNT_N_V = 0xFF
const SPI_MEM_SCLKCNT_N_S = 16
const SPI_MEM_SCLKCNT_H = 0x000000FF
const SPI_MEM_SCLKCNT_H_V = 0xFF
const SPI_MEM_SCLKCNT_H_S = 8
const SPI_MEM_SCLKCNT_L = 0x000000FF
const SPI_MEM_SCLKCNT_L_V = 0xFF
const SPI_MEM_SCLKCNT_L_S = 0
const SPI_MEM_LOCK_DELAY_TIME = 0x0000001F
const SPI_MEM_LOCK_DELAY_TIME_V = 0x1F
const SPI_MEM_LOCK_DELAY_TIME_S = 7
const SPI_MEM_BUF0 = 0xFFFFFFFF
const SPI_MEM_BUF0_V = 0xFFFFFFFF
const SPI_MEM_BUF0_S = 0
const SPI_MEM_BUF1 = 0xFFFFFFFF
const SPI_MEM_BUF1_V = 0xFFFFFFFF
const SPI_MEM_BUF1_S = 0
const SPI_MEM_BUF2 = 0xFFFFFFFF
const SPI_MEM_BUF2_V = 0xFFFFFFFF
const SPI_MEM_BUF2_S = 0
const SPI_MEM_BUF3 = 0xFFFFFFFF
const SPI_MEM_BUF3_V = 0xFFFFFFFF
const SPI_MEM_BUF3_S = 0
const SPI_MEM_BUF4 = 0xFFFFFFFF
const SPI_MEM_BUF4_V = 0xFFFFFFFF
const SPI_MEM_BUF4_S = 0
const SPI_MEM_BUF5 = 0xFFFFFFFF
const SPI_MEM_BUF5_V = 0xFFFFFFFF
const SPI_MEM_BUF5_S = 0
const SPI_MEM_BUF6 = 0xFFFFFFFF
const SPI_MEM_BUF6_V = 0xFFFFFFFF
const SPI_MEM_BUF6_S = 0
const SPI_MEM_BUF7 = 0xFFFFFFFF
const SPI_MEM_BUF7_V = 0xFFFFFFFF
const SPI_MEM_BUF7_S = 0
const SPI_MEM_BUF8 = 0xFFFFFFFF
const SPI_MEM_BUF8_V = 0xFFFFFFFF
const SPI_MEM_BUF8_S = 0
const SPI_MEM_BUF9 = 0xFFFFFFFF
const SPI_MEM_BUF9_V = 0xFFFFFFFF
const SPI_MEM_BUF9_S = 0
const SPI_MEM_BUF10 = 0xFFFFFFFF
const SPI_MEM_BUF10_V = 0xFFFFFFFF
const SPI_MEM_BUF10_S = 0
const SPI_MEM_BUF11 = 0xFFFFFFFF
const SPI_MEM_BUF11_V = 0xFFFFFFFF
const SPI_MEM_BUF11_S = 0
const SPI_MEM_BUF12 = 0xFFFFFFFF
const SPI_MEM_BUF12_V = 0xFFFFFFFF
const SPI_MEM_BUF12_S = 0
const SPI_MEM_BUF13 = 0xFFFFFFFF
const SPI_MEM_BUF13_V = 0xFFFFFFFF
const SPI_MEM_BUF13_S = 0
const SPI_MEM_BUF14 = 0xFFFFFFFF
const SPI_MEM_BUF14_V = 0xFFFFFFFF
const SPI_MEM_BUF14_S = 0
const SPI_MEM_BUF15 = 0xFFFFFFFF
const SPI_MEM_BUF15_V = 0xFFFFFFFF
const SPI_MEM_BUF15_S = 0
const SPI_MEM_WAITI_CMD = 0x0000FFFF
const SPI_MEM_WAITI_CMD_V = 0xFFFF
const SPI_MEM_WAITI_CMD_S = 16
const SPI_MEM_WAITI_DUMMY_CYCLELEN = 0x0000003F
const SPI_MEM_WAITI_DUMMY_CYCLELEN_V = 0x3F
const SPI_MEM_WAITI_DUMMY_CYCLELEN_S = 10
const SPI_MEM_WAITI_CMD_2B_V = 0x1
const SPI_MEM_WAITI_CMD_2B_S = 9
const SPI_MEM_WAITI_ADDR_CYCLELEN = 0x00000003
const SPI_MEM_WAITI_ADDR_CYCLELEN_V = 0x3
const SPI_MEM_WAITI_ADDR_CYCLELEN_S = 3
const SPI_MEM_WAITI_ADDR_EN_V = 0x1
const SPI_MEM_WAITI_ADDR_EN_S = 2
const SPI_MEM_WAITI_DUMMY_V = 0x1
const SPI_MEM_WAITI_DUMMY_S = 1
const SPI_MEM_WAITI_EN_V = 0x1
const SPI_MEM_WAITI_EN_S = 0
const SPI_MEM_SUS_TIMEOUT_CNT = 0x0000007F
const SPI_MEM_SUS_TIMEOUT_CNT_V = 0x7F
const SPI_MEM_SUS_TIMEOUT_CNT_S = 25
const SPI_MEM_PES_END_EN_V = 0x1
const SPI_MEM_PES_END_EN_S = 24
const SPI_MEM_PER_END_EN_V = 0x1
const SPI_MEM_PER_END_EN_S = 23
const SPI_MEM_FMEM_RD_SUS_2B_V = 0x1
const SPI_MEM_FMEM_RD_SUS_2B_S = 22
const SPI_MEM_PESR_END_MSK = 0x0000FFFF
const SPI_MEM_PESR_END_MSK_V = 0xFFFF
const SPI_MEM_PESR_END_MSK_S = 6
const SPI_MEM_FLASH_PES_EN_V = 0x1
const SPI_MEM_FLASH_PES_EN_S = 5
const SPI_MEM_PES_PER_EN_V = 0x1
const SPI_MEM_PES_PER_EN_S = 4
const SPI_MEM_FLASH_PES_WAIT_EN_V = 0x1
const SPI_MEM_FLASH_PES_WAIT_EN_S = 3
const SPI_MEM_FLASH_PER_WAIT_EN_V = 0x1
const SPI_MEM_FLASH_PER_WAIT_EN_S = 2
const SPI_MEM_FLASH_PES_V = 0x1
const SPI_MEM_FLASH_PES_S = 1
const SPI_MEM_FLASH_PER_V = 0x1
const SPI_MEM_FLASH_PER_S = 0
const SPI_MEM_WAIT_PESR_COMMAND = 0x0000FFFF
const SPI_MEM_WAIT_PESR_COMMAND_V = 0xFFFF
const SPI_MEM_WAIT_PESR_COMMAND_S = 16
const SPI_MEM_FLASH_PES_COMMAND = 0x0000FFFF
const SPI_MEM_FLASH_PES_COMMAND_V = 0xFFFF
const SPI_MEM_FLASH_PES_COMMAND_S = 0
const SPI_MEM_FLASH_PER_COMMAND = 0x0000FFFF
const SPI_MEM_FLASH_PER_COMMAND_V = 0xFFFF
const SPI_MEM_FLASH_PER_COMMAND_S = 16
const SPI_MEM_FLASH_PESR_CMD_2B_V = 0x1
const SPI_MEM_FLASH_PESR_CMD_2B_S = 15
const SPI_MEM_SPI0_LOCK_EN_V = 0x1
const SPI_MEM_SPI0_LOCK_EN_S = 7
const SPI_MEM_FLASH_PES_DLY_128_V = 0x1
const SPI_MEM_FLASH_PES_DLY_128_S = 6
const SPI_MEM_FLASH_PER_DLY_128_V = 0x1
const SPI_MEM_FLASH_PER_DLY_128_S = 5
const SPI_MEM_FLASH_DP_DLY_128_V = 0x1
const SPI_MEM_FLASH_DP_DLY_128_S = 4
const SPI_MEM_FLASH_RES_DLY_128_V = 0x1
const SPI_MEM_FLASH_RES_DLY_128_S = 3
const SPI_MEM_FLASH_HPM_DLY_128_V = 0x1
const SPI_MEM_FLASH_HPM_DLY_128_S = 2
const SPI_MEM_WAIT_PESR_CMD_2B_V = 0x1
const SPI_MEM_WAIT_PESR_CMD_2B_S = 1
const SPI_MEM_FLASH_SUS_V = 0x1
const SPI_MEM_FLASH_SUS_S = 0
const SPI_MEM_BROWN_OUT_INT_ENA_V = 0x1
const SPI_MEM_BROWN_OUT_INT_ENA_S = 10
const SPI_MEM_AXI_WADDR_ERR_INT__ENA_V = 0x1
const SPI_MEM_AXI_WADDR_ERR_INT__ENA_S = 9
const SPI_MEM_AXI_WR_FLASH_ERR_INT_ENA_V = 0x1
const SPI_MEM_AXI_WR_FLASH_ERR_INT_ENA_S = 8
const SPI_MEM_AXI_RADDR_ERR_INT_ENA_V = 0x1
const SPI_MEM_AXI_RADDR_ERR_INT_ENA_S = 7
const SPI_MEM_PMS_REJECT_INT_ENA_V = 0x1
const SPI_MEM_PMS_REJECT_INT_ENA_S = 6
const SPI_MEM_ECC_ERR_INT_ENA_V = 0x1
const SPI_MEM_ECC_ERR_INT_ENA_S = 5
const SPI_MEM_MST_ST_END_INT_ENA_V = 0x1
const SPI_MEM_MST_ST_END_INT_ENA_S = 4
const SPI_MEM_SLV_ST_END_INT_ENA_V = 0x1
const SPI_MEM_SLV_ST_END_INT_ENA_S = 3
const SPI_MEM_WPE_END_INT_ENA_V = 0x1
const SPI_MEM_WPE_END_INT_ENA_S = 2
const SPI_MEM_PES_END_INT_ENA_V = 0x1
const SPI_MEM_PES_END_INT_ENA_S = 1
const SPI_MEM_PER_END_INT_ENA_V = 0x1
const SPI_MEM_PER_END_INT_ENA_S = 0
const SPI_MEM_BROWN_OUT_INT_CLR_V = 0x1
const SPI_MEM_BROWN_OUT_INT_CLR_S = 10
const SPI_MEM_AXI_WADDR_ERR_INT_CLR_V = 0x1
const SPI_MEM_AXI_WADDR_ERR_INT_CLR_S = 9
const SPI_MEM_AXI_WR_FLASH_ERR_INT_CLR_V = 0x1
const SPI_MEM_AXI_WR_FLASH_ERR_INT_CLR_S = 8
const SPI_MEM_AXI_RADDR_ERR_INT_CLR_V = 0x1
const SPI_MEM_AXI_RADDR_ERR_INT_CLR_S = 7
const SPI_MEM_PMS_REJECT_INT_CLR_V = 0x1
const SPI_MEM_PMS_REJECT_INT_CLR_S = 6
const SPI_MEM_ECC_ERR_INT_CLR_V = 0x1
const SPI_MEM_ECC_ERR_INT_CLR_S = 5
const SPI_MEM_MST_ST_END_INT_CLR_V = 0x1
const SPI_MEM_MST_ST_END_INT_CLR_S = 4
const SPI_MEM_SLV_ST_END_INT_CLR_V = 0x1
const SPI_MEM_SLV_ST_END_INT_CLR_S = 3
const SPI_MEM_WPE_END_INT_CLR_V = 0x1
const SPI_MEM_WPE_END_INT_CLR_S = 2
const SPI_MEM_PES_END_INT_CLR_V = 0x1
const SPI_MEM_PES_END_INT_CLR_S = 1
const SPI_MEM_PER_END_INT_CLR_V = 0x1
const SPI_MEM_PER_END_INT_CLR_S = 0
const SPI_MEM_BROWN_OUT_INT_RAW_V = 0x1
const SPI_MEM_BROWN_OUT_INT_RAW_S = 10
const SPI_MEM_AXI_WADDR_ERR_INT_RAW_V = 0x1
const SPI_MEM_AXI_WADDR_ERR_INT_RAW_S = 9
const SPI_MEM_AXI_WR_FLASH_ERR_INT_RAW_V = 0x1
const SPI_MEM_AXI_WR_FLASH_ERR_INT_RAW_S = 8
const SPI_MEM_AXI_RADDR_ERR_INT_RAW_V = 0x1
const SPI_MEM_AXI_RADDR_ERR_INT_RAW_S = 7
const SPI_MEM_PMS_REJECT_INT_RAW_V = 0x1
const SPI_MEM_PMS_REJECT_INT_RAW_S = 6
const SPI_MEM_ECC_ERR_INT_RAW_V = 0x1
const SPI_MEM_ECC_ERR_INT_RAW_S = 5
const SPI_MEM_MST_ST_END_INT_RAW_V = 0x1
const SPI_MEM_MST_ST_END_INT_RAW_S = 4
const SPI_MEM_SLV_ST_END_INT_RAW_V = 0x1
const SPI_MEM_SLV_ST_END_INT_RAW_S = 3
const SPI_MEM_WPE_END_INT_RAW_V = 0x1
const SPI_MEM_WPE_END_INT_RAW_S = 2
const SPI_MEM_PES_END_INT_RAW_V = 0x1
const SPI_MEM_PES_END_INT_RAW_S = 1
const SPI_MEM_PER_END_INT_RAW_V = 0x1
const SPI_MEM_PER_END_INT_RAW_S = 0
const SPI_MEM_BROWN_OUT_INT_ST_V = 0x1
const SPI_MEM_BROWN_OUT_INT_ST_S = 10
const SPI_MEM_AXI_WADDR_ERR_INT_ST_V = 0x1
const SPI_MEM_AXI_WADDR_ERR_INT_ST_S = 9
const SPI_MEM_AXI_WR_FLASH_ERR_INT_ST_V = 0x1
const SPI_MEM_AXI_WR_FLASH_ERR_INT_ST_S = 8
const SPI_MEM_AXI_RADDR_ERR_INT_ST_V = 0x1
const SPI_MEM_AXI_RADDR_ERR_INT_ST_S = 7
const SPI_MEM_PMS_REJECT_INT_ST_V = 0x1
const SPI_MEM_PMS_REJECT_INT_ST_S = 6
const SPI_MEM_ECC_ERR_INT_ST_V = 0x1
const SPI_MEM_ECC_ERR_INT_ST_S = 5
const SPI_MEM_MST_ST_END_INT_ST_V = 0x1
const SPI_MEM_MST_ST_END_INT_ST_S = 4
const SPI_MEM_SLV_ST_END_INT_ST_V = 0x1
const SPI_MEM_SLV_ST_END_INT_ST_S = 3
const SPI_MEM_WPE_END_INT_ST_V = 0x1
const SPI_MEM_WPE_END_INT_ST_S = 2
const SPI_MEM_PES_END_INT_ST_V = 0x1
const SPI_MEM_PES_END_INT_ST_S = 1
const SPI_MEM_PER_END_INT_ST_V = 0x1
const SPI_MEM_PER_END_INT_ST_S = 0
const SPI_MEM_FMEM_HYPERBUS_CA_V = 0x1
const SPI_MEM_FMEM_HYPERBUS_CA_S = 30
const SPI_MEM_FMEM_OCTA_RAM_ADDR_V = 0x1
const SPI_MEM_FMEM_OCTA_RAM_ADDR_S = 29
const SPI_MEM_FMEM_CLK_DIFF_INV_V = 0x1
const SPI_MEM_FMEM_CLK_DIFF_INV_S = 28
const SPI_MEM_FMEM_HYPERBUS_DUMMY_2X_V = 0x1
const SPI_MEM_FMEM_HYPERBUS_DUMMY_2X_S = 27
const SPI_MEM_FMEM_DQS_CA_IN_V = 0x1
const SPI_MEM_FMEM_DQS_CA_IN_S = 26
const SPI_MEM_FMEM_CLK_DIFF_EN_V = 0x1
const SPI_MEM_FMEM_CLK_DIFF_EN_S = 24
const SPI_MEM_FMEM_DDR_DQS_LOOP_V = 0x1
const SPI_MEM_FMEM_DDR_DQS_LOOP_S = 21
const SPI_MEM_FMEM_USR_DDR_DQS_THD = 0x0000007F
const SPI_MEM_FMEM_USR_DDR_DQS_THD_V = 0x7F
const SPI_MEM_FMEM_USR_DDR_DQS_THD_S = 14
const SPI_MEM_FMEM_RX_DDR_MSK_EN_V = 0x1
const SPI_MEM_FMEM_RX_DDR_MSK_EN_S = 13
const SPI_MEM_FMEM_TX_DDR_MSK_EN_V = 0x1
const SPI_MEM_FMEM_TX_DDR_MSK_EN_S = 12
const SPI_MEM_FMEM_OUTMINBYTELEN = 0x0000007F
const SPI_MEM_FMEM_OUTMINBYTELEN_V = 0x7F
const SPI_MEM_FMEM_OUTMINBYTELEN_S = 5
const SPI_MEM_FMEM_DDR_CMD_DIS_V = 0x1
const SPI_MEM_FMEM_DDR_CMD_DIS_S = 4
const SPI_MEM_FMEM_DDR_WDAT_SWP_V = 0x1
const SPI_MEM_FMEM_DDR_WDAT_SWP_S = 3
const SPI_MEM_FMEM_DDR_RDAT_SWP_V = 0x1
const SPI_MEM_FMEM_DDR_RDAT_SWP_S = 2
const SPI_MEM_FMEM_VAR_DUMMY_V = 0x1
const SPI_MEM_FMEM_VAR_DUMMY_S = 1
const SPI_MEM_FMEM_DDR_EN_V = 0x1
const SPI_MEM_FMEM_DDR_EN_S = 0
const SPI_MEM_SMEM_HYPERBUS_CA_V = 0x1
const SPI_MEM_SMEM_HYPERBUS_CA_S = 30
const SPI_MEM_SMEM_OCTA_RAM_ADDR_V = 0x1
const SPI_MEM_SMEM_OCTA_RAM_ADDR_S = 29
const SPI_MEM_SMEM_CLK_DIFF_INV_V = 0x1
const SPI_MEM_SMEM_CLK_DIFF_INV_S = 28
const SPI_MEM_SMEM_HYPERBUS_DUMMY_2X_V = 0x1
const SPI_MEM_SMEM_HYPERBUS_DUMMY_2X_S = 27
const SPI_MEM_SMEM_DQS_CA_IN_V = 0x1
const SPI_MEM_SMEM_DQS_CA_IN_S = 26
const SPI_MEM_SMEM_CLK_DIFF_EN_V = 0x1
const SPI_MEM_SMEM_CLK_DIFF_EN_S = 24
const SPI_MEM_SMEM_DDR_DQS_LOOP_V = 0x1
const SPI_MEM_SMEM_DDR_DQS_LOOP_S = 21
const SPI_MEM_SMEM_USR_DDR_DQS_THD = 0x0000007F
const SPI_MEM_SMEM_USR_DDR_DQS_THD_V = 0x7F
const SPI_MEM_SMEM_USR_DDR_DQS_THD_S = 14
const SPI_MEM_SMEM_RX_DDR_MSK_EN_V = 0x1
const SPI_MEM_SMEM_RX_DDR_MSK_EN_S = 13
const SPI_MEM_SMEM_TX_DDR_MSK_EN_V = 0x1
const SPI_MEM_SMEM_TX_DDR_MSK_EN_S = 12
const SPI_MEM_SMEM_OUTMINBYTELEN = 0x0000007F
const SPI_MEM_SMEM_OUTMINBYTELEN_V = 0x7F
const SPI_MEM_SMEM_OUTMINBYTELEN_S = 5
const SPI_MEM_SMEM_DDR_CMD_DIS_V = 0x1
const SPI_MEM_SMEM_DDR_CMD_DIS_S = 4
const SPI_MEM_SMEM_DDR_WDAT_SWP_V = 0x1
const SPI_MEM_SMEM_DDR_WDAT_SWP_S = 3
const SPI_MEM_SMEM_DDR_RDAT_SWP_V = 0x1
const SPI_MEM_SMEM_DDR_RDAT_SWP_S = 2
const SPI_MEM_SMEM_VAR_DUMMY_V = 0x1
const SPI_MEM_SMEM_VAR_DUMMY_S = 1
const SPI_MEM_SMEM_DDR_EN_V = 0x1
const SPI_MEM_SMEM_DDR_EN_S = 0
const SPI_MEM_FMEM_PMS0_ECC_V = 0x1
const SPI_MEM_FMEM_PMS0_ECC_S = 2
const SPI_MEM_FMEM_PMS0_WR_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS0_WR_ATTR_S = 1
const SPI_MEM_FMEM_PMS0_RD_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS0_RD_ATTR_S = 0
const SPI_MEM_FMEM_PMS1_ECC_V = 0x1
const SPI_MEM_FMEM_PMS1_ECC_S = 2
const SPI_MEM_FMEM_PMS1_WR_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS1_WR_ATTR_S = 1
const SPI_MEM_FMEM_PMS1_RD_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS1_RD_ATTR_S = 0
const SPI_MEM_FMEM_PMS2_ECC_V = 0x1
const SPI_MEM_FMEM_PMS2_ECC_S = 2
const SPI_MEM_FMEM_PMS2_WR_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS2_WR_ATTR_S = 1
const SPI_MEM_FMEM_PMS2_RD_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS2_RD_ATTR_S = 0
const SPI_MEM_FMEM_PMS3_ECC_V = 0x1
const SPI_MEM_FMEM_PMS3_ECC_S = 2
const SPI_MEM_FMEM_PMS3_WR_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS3_WR_ATTR_S = 1
const SPI_MEM_FMEM_PMS3_RD_ATTR_V = 0x1
const SPI_MEM_FMEM_PMS3_RD_ATTR_S = 0
const SPI_MEM_FMEM_PMS0_ADDR_S = 0x03FFFFFF
const SPI_MEM_FMEM_PMS0_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_FMEM_PMS0_ADDR_S_S = 0
const SPI_MEM_FMEM_PMS1_ADDR_S = 0x03FFFFFF
const SPI_MEM_FMEM_PMS1_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_FMEM_PMS1_ADDR_S_S = 0
const SPI_MEM_FMEM_PMS2_ADDR_S = 0x03FFFFFF
const SPI_MEM_FMEM_PMS2_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_FMEM_PMS2_ADDR_S_S = 0
const SPI_MEM_FMEM_PMS3_ADDR_S = 0x03FFFFFF
const SPI_MEM_FMEM_PMS3_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_FMEM_PMS3_ADDR_S_S = 0
const SPI_MEM_FMEM_PMS0_SIZE = 0x00003FFF
const SPI_MEM_FMEM_PMS0_SIZE_V = 0x3FFF
const SPI_MEM_FMEM_PMS0_SIZE_S = 0
const SPI_MEM_FMEM_PMS1_SIZE = 0x00003FFF
const SPI_MEM_FMEM_PMS1_SIZE_V = 0x3FFF
const SPI_MEM_FMEM_PMS1_SIZE_S = 0
const SPI_MEM_FMEM_PMS2_SIZE = 0x00003FFF
const SPI_MEM_FMEM_PMS2_SIZE_V = 0x3FFF
const SPI_MEM_FMEM_PMS2_SIZE_S = 0
const SPI_MEM_FMEM_PMS3_SIZE = 0x00003FFF
const SPI_MEM_FMEM_PMS3_SIZE_V = 0x3FFF
const SPI_MEM_FMEM_PMS3_SIZE_S = 0
const SPI_MEM_SMEM_PMS0_ECC_V = 0x1
const SPI_MEM_SMEM_PMS0_ECC_S = 2
const SPI_MEM_SMEM_PMS0_WR_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS0_WR_ATTR_S = 1
const SPI_MEM_SMEM_PMS0_RD_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS0_RD_ATTR_S = 0
const SPI_MEM_SMEM_PMS1_ECC_V = 0x1
const SPI_MEM_SMEM_PMS1_ECC_S = 2
const SPI_MEM_SMEM_PMS1_WR_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS1_WR_ATTR_S = 1
const SPI_MEM_SMEM_PMS1_RD_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS1_RD_ATTR_S = 0
const SPI_MEM_SMEM_PMS2_ECC_V = 0x1
const SPI_MEM_SMEM_PMS2_ECC_S = 2
const SPI_MEM_SMEM_PMS2_WR_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS2_WR_ATTR_S = 1
const SPI_MEM_SMEM_PMS2_RD_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS2_RD_ATTR_S = 0
const SPI_MEM_SMEM_PMS3_ECC_V = 0x1
const SPI_MEM_SMEM_PMS3_ECC_S = 2
const SPI_MEM_SMEM_PMS3_WR_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS3_WR_ATTR_S = 1
const SPI_MEM_SMEM_PMS3_RD_ATTR_V = 0x1
const SPI_MEM_SMEM_PMS3_RD_ATTR_S = 0
const SPI_MEM_SMEM_PMS0_ADDR_S = 0x03FFFFFF
const SPI_MEM_SMEM_PMS0_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_SMEM_PMS0_ADDR_S_S = 0
const SPI_MEM_SMEM_PMS1_ADDR_S = 0x03FFFFFF
const SPI_MEM_SMEM_PMS1_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_SMEM_PMS1_ADDR_S_S = 0
const SPI_MEM_SMEM_PMS2_ADDR_S = 0x03FFFFFF
const SPI_MEM_SMEM_PMS2_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_SMEM_PMS2_ADDR_S_S = 0
const SPI_MEM_SMEM_PMS3_ADDR_S = 0x03FFFFFF
const SPI_MEM_SMEM_PMS3_ADDR_S_V = 0x3FFFFFF
const SPI_MEM_SMEM_PMS3_ADDR_S_S = 0
const SPI_MEM_SMEM_PMS0_SIZE = 0x00003FFF
const SPI_MEM_SMEM_PMS0_SIZE_V = 0x3FFF
const SPI_MEM_SMEM_PMS0_SIZE_S = 0
const SPI_MEM_SMEM_PMS1_SIZE = 0x00003FFF
const SPI_MEM_SMEM_PMS1_SIZE_V = 0x3FFF
const SPI_MEM_SMEM_PMS1_SIZE_S = 0
const SPI_MEM_SMEM_PMS2_SIZE = 0x00003FFF
const SPI_MEM_SMEM_PMS2_SIZE_V = 0x3FFF
const SPI_MEM_SMEM_PMS2_SIZE_S = 0
const SPI_MEM_SMEM_PMS3_SIZE = 0x00003FFF
const SPI_MEM_SMEM_PMS3_SIZE_V = 0x3FFF
const SPI_MEM_SMEM_PMS3_SIZE_S = 0
const SPI_MEM_PMS_IVD_V = 0x1
const SPI_MEM_PMS_IVD_S = 31
const SPI_MEM_PMS_MULTI_HIT_V = 0x1
const SPI_MEM_PMS_MULTI_HIT_S = 30
const SPI_MEM_PMS_ST_V = 0x1
const SPI_MEM_PMS_ST_S = 29
const SPI_MEM_PMS_LD_V = 0x1
const SPI_MEM_PMS_LD_S = 28
const SPI_MEM_PM_EN_V = 0x1
const SPI_MEM_PM_EN_S = 26
const SPI_MEM_REJECT_ADDR = 0x03FFFFFF
const SPI_MEM_REJECT_ADDR_V = 0x3FFFFFF
const SPI_MEM_REJECT_ADDR_S = 0
const SPI_MEM_ECC_ERR_BITS = 0x0000007F
const SPI_MEM_ECC_ERR_BITS_V = 0x7F
const SPI_MEM_ECC_ERR_BITS_S = 25
const SPI_MEM_ECC_CONTINUE_RECORD_ERR_EN_V = 0x1
const SPI_MEM_ECC_CONTINUE_RECORD_ERR_EN_S = 24
const SPI_MEM_USR_ECC_ADDR_EN_V = 0x1
const SPI_MEM_USR_ECC_ADDR_EN_S = 21
const SPI_MEM_FMEM_ECC_ADDR_EN_V = 0x1
const SPI_MEM_FMEM_ECC_ADDR_EN_S = 20
const SPI_MEM_FMEM_PAGE_SIZE = 0x00000003
const SPI_MEM_FMEM_PAGE_SIZE_V = 0x3
const SPI_MEM_FMEM_PAGE_SIZE_S = 18
const SPI_MEM_FMEM_ECC_ERR_INT_EN_V = 0x1
const SPI_MEM_FMEM_ECC_ERR_INT_EN_S = 17
const SPI_MEM_FMEM_ECC_ERR_INT_NUM = 0x0000003F
const SPI_MEM_FMEM_ECC_ERR_INT_NUM_V = 0x3F
const SPI_MEM_FMEM_ECC_ERR_INT_NUM_S = 11
const SPI_MEM_ECC_ERR_CNT = 0x0000003F
const SPI_MEM_ECC_ERR_CNT_V = 0x3F
const SPI_MEM_ECC_ERR_CNT_S = 26
const SPI_MEM_ECC_ERR_ADDR = 0x03FFFFFF
const SPI_MEM_ECC_ERR_ADDR_V = 0x3FFFFFF
const SPI_MEM_ECC_ERR_ADDR_S = 0
const SPI_MEM_ALL_AXI_TRANS_AFIFO_EMPTY_V = 0x1
const SPI_MEM_ALL_AXI_TRANS_AFIFO_EMPTY_S = 31
const SPI_MEM_WBLEN_AFIFO_REMPTY_V = 0x1
const SPI_MEM_WBLEN_AFIFO_REMPTY_S = 30
const SPI_MEM_WDATA_AFIFO_REMPTY_V = 0x1
const SPI_MEM_WDATA_AFIFO_REMPTY_S = 29
const SPI_MEM_RADDR_AFIFO_REMPTY_V = 0x1
const SPI_MEM_RADDR_AFIFO_REMPTY_S = 28
const SPI_MEM_RDATA_AFIFO_REMPTY_V = 0x1
const SPI_MEM_RDATA_AFIFO_REMPTY_S = 27
const SPI_MEM_ALL_FIFO_EMPTY_V = 0x1
const SPI_MEM_ALL_FIFO_EMPTY_S = 26
const SPI_MEM_AXI_ERR_ADDR = 0x03FFFFFF
const SPI_MEM_AXI_ERR_ADDR_V = 0x3FFFFFF
const SPI_MEM_AXI_ERR_ADDR_S = 0
const SPI_MEM_SMEM_ECC_ADDR_EN_V = 0x1
const SPI_MEM_SMEM_ECC_ADDR_EN_S = 20
const SPI_MEM_SMEM_PAGE_SIZE = 0x00000003
const SPI_MEM_SMEM_PAGE_SIZE_V = 0x3
const SPI_MEM_SMEM_PAGE_SIZE_S = 18
const SPI_MEM_SMEM_ECC_ERR_INT_EN_V = 0x1
const SPI_MEM_SMEM_ECC_ERR_INT_EN_S = 17
const SPI_MEM_TIMING_CALI_UPDATE_V = 0x1
const SPI_MEM_TIMING_CALI_UPDATE_S = 6
const SPI_MEM_DLL_TIMING_CALI_V = 0x1
const SPI_MEM_DLL_TIMING_CALI_S = 5
const SPI_MEM_EXTRA_DUMMY_CYCLELEN = 0x00000007
const SPI_MEM_EXTRA_DUMMY_CYCLELEN_V = 0x7
const SPI_MEM_EXTRA_DUMMY_CYCLELEN_S = 2
const SPI_MEM_TIMING_CALI_V = 0x1
const SPI_MEM_TIMING_CALI_S = 1
const SPI_MEM_TIMING_CLK_ENA_V = 0x1
const SPI_MEM_TIMING_CLK_ENA_S = 0
const SPI_MEM_DINS_MODE = 0x00000007
const SPI_MEM_DINS_MODE_V = 0x7
const SPI_MEM_DINS_MODE_S = 24
const SPI_MEM_DIN7_MODE = 0x00000007
const SPI_MEM_DIN7_MODE_V = 0x7
const SPI_MEM_DIN7_MODE_S = 21
const SPI_MEM_DIN6_MODE = 0x00000007
const SPI_MEM_DIN6_MODE_V = 0x7
const SPI_MEM_DIN6_MODE_S = 18
const SPI_MEM_DIN5_MODE = 0x00000007
const SPI_MEM_DIN5_MODE_V = 0x7
const SPI_MEM_DIN5_MODE_S = 15
const SPI_MEM_DIN4_MODE = 0x00000007
const SPI_MEM_DIN4_MODE_V = 0x7
const SPI_MEM_DIN4_MODE_S = 12
const SPI_MEM_DIN3_MODE = 0x00000007
const SPI_MEM_DIN3_MODE_V = 0x7
const SPI_MEM_DIN3_MODE_S = 9
const SPI_MEM_DIN2_MODE = 0x00000007
const SPI_MEM_DIN2_MODE_V = 0x7
const SPI_MEM_DIN2_MODE_S = 6
const SPI_MEM_DIN1_MODE = 0x00000007
const SPI_MEM_DIN1_MODE_V = 0x7
const SPI_MEM_DIN1_MODE_S = 3
const SPI_MEM_DIN0_MODE = 0x00000007
const SPI_MEM_DIN0_MODE_V = 0x7
const SPI_MEM_DIN0_MODE_S = 0
const SPI_MEM_DINS_NUM = 0x00000003
const SPI_MEM_DINS_NUM_V = 0x3
const SPI_MEM_DINS_NUM_S = 16
const SPI_MEM_DIN7_NUM = 0x00000003
const SPI_MEM_DIN7_NUM_V = 0x3
const SPI_MEM_DIN7_NUM_S = 14
const SPI_MEM_DIN6_NUM = 0x00000003
const SPI_MEM_DIN6_NUM_V = 0x3
const SPI_MEM_DIN6_NUM_S = 12
const SPI_MEM_DIN5_NUM = 0x00000003
const SPI_MEM_DIN5_NUM_V = 0x3
const SPI_MEM_DIN5_NUM_S = 10
const SPI_MEM_DIN4_NUM = 0x00000003
const SPI_MEM_DIN4_NUM_V = 0x3
const SPI_MEM_DIN4_NUM_S = 8
const SPI_MEM_DIN3_NUM = 0x00000003
const SPI_MEM_DIN3_NUM_V = 0x3
const SPI_MEM_DIN3_NUM_S = 6
const SPI_MEM_DIN2_NUM = 0x00000003
const SPI_MEM_DIN2_NUM_V = 0x3
const SPI_MEM_DIN2_NUM_S = 4
const SPI_MEM_DIN1_NUM = 0x00000003
const SPI_MEM_DIN1_NUM_V = 0x3
const SPI_MEM_DIN1_NUM_S = 2
const SPI_MEM_DIN0_NUM = 0x00000003
const SPI_MEM_DIN0_NUM_V = 0x3
const SPI_MEM_DIN0_NUM_S = 0
const SPI_MEM_DOUTS_MODE_V = 0x1
const SPI_MEM_DOUTS_MODE_S = 8
const SPI_MEM_DOUT7_MODE_V = 0x1
const SPI_MEM_DOUT7_MODE_S = 7
const SPI_MEM_DOUT6_MODE_V = 0x1
const SPI_MEM_DOUT6_MODE_S = 6
const SPI_MEM_DOUT5_MODE_V = 0x1
const SPI_MEM_DOUT5_MODE_S = 5
const SPI_MEM_DOUT4_MODE_V = 0x1
const SPI_MEM_DOUT4_MODE_S = 4
const SPI_MEM_DOUT3_MODE_V = 0x1
const SPI_MEM_DOUT3_MODE_S = 3
const SPI_MEM_DOUT2_MODE_V = 0x1
const SPI_MEM_DOUT2_MODE_S = 2
const SPI_MEM_DOUT1_MODE_V = 0x1
const SPI_MEM_DOUT1_MODE_S = 1
const SPI_MEM_DOUT0_MODE_V = 0x1
const SPI_MEM_DOUT0_MODE_S = 0
const SPI_MEM_SMEM_DLL_TIMING_CALI_V = 0x1
const SPI_MEM_SMEM_DLL_TIMING_CALI_S = 5
const SPI_MEM_SMEM_EXTRA_DUMMY_CYCLELEN = 0x00000007
const SPI_MEM_SMEM_EXTRA_DUMMY_CYCLELEN_V = 0x7
const SPI_MEM_SMEM_EXTRA_DUMMY_CYCLELEN_S = 2
const SPI_MEM_SMEM_TIMING_CALI_V = 0x1
const SPI_MEM_SMEM_TIMING_CALI_S = 1
const SPI_MEM_SMEM_TIMING_CLK_ENA_V = 0x1
const SPI_MEM_SMEM_TIMING_CLK_ENA_S = 0
const SPI_MEM_SMEM_DINS_MODE = 0x00000007
const SPI_MEM_SMEM_DINS_MODE_V = 0x7
const SPI_MEM_SMEM_DINS_MODE_S = 24
const SPI_MEM_SMEM_DIN7_MODE = 0x00000007
const SPI_MEM_SMEM_DIN7_MODE_V = 0x7
const SPI_MEM_SMEM_DIN7_MODE_S = 21
const SPI_MEM_SMEM_DIN6_MODE = 0x00000007
const SPI_MEM_SMEM_DIN6_MODE_V = 0x7
const SPI_MEM_SMEM_DIN6_MODE_S = 18
const SPI_MEM_SMEM_DIN5_MODE = 0x00000007
const SPI_MEM_SMEM_DIN5_MODE_V = 0x7
const SPI_MEM_SMEM_DIN5_MODE_S = 15
const SPI_MEM_SMEM_DIN4_MODE = 0x00000007
const SPI_MEM_SMEM_DIN4_MODE_V = 0x7
const SPI_MEM_SMEM_DIN4_MODE_S = 12
const SPI_MEM_SMEM_DIN3_MODE = 0x00000007
const SPI_MEM_SMEM_DIN3_MODE_V = 0x7
const SPI_MEM_SMEM_DIN3_MODE_S = 9
const SPI_MEM_SMEM_DIN2_MODE = 0x00000007
const SPI_MEM_SMEM_DIN2_MODE_V = 0x7
const SPI_MEM_SMEM_DIN2_MODE_S = 6
const SPI_MEM_SMEM_DIN1_MODE = 0x00000007
const SPI_MEM_SMEM_DIN1_MODE_V = 0x7
const SPI_MEM_SMEM_DIN1_MODE_S = 3
const SPI_MEM_SMEM_DIN0_MODE = 0x00000007
const SPI_MEM_SMEM_DIN0_MODE_V = 0x7
const SPI_MEM_SMEM_DIN0_MODE_S = 0
const SPI_MEM_SMEM_DINS_NUM = 0x00000003
const SPI_MEM_SMEM_DINS_NUM_V = 0x3
const SPI_MEM_SMEM_DINS_NUM_S = 16
const SPI_MEM_SMEM_DIN7_NUM = 0x00000003
const SPI_MEM_SMEM_DIN7_NUM_V = 0x3
const SPI_MEM_SMEM_DIN7_NUM_S = 14
const SPI_MEM_SMEM_DIN6_NUM = 0x00000003
const SPI_MEM_SMEM_DIN6_NUM_V = 0x3
const SPI_MEM_SMEM_DIN6_NUM_S = 12
const SPI_MEM_SMEM_DIN5_NUM = 0x00000003
const SPI_MEM_SMEM_DIN5_NUM_V = 0x3
const SPI_MEM_SMEM_DIN5_NUM_S = 10
const SPI_MEM_SMEM_DIN4_NUM = 0x00000003
const SPI_MEM_SMEM_DIN4_NUM_V = 0x3
const SPI_MEM_SMEM_DIN4_NUM_S = 8
const SPI_MEM_SMEM_DIN3_NUM = 0x00000003
const SPI_MEM_SMEM_DIN3_NUM_V = 0x3
const SPI_MEM_SMEM_DIN3_NUM_S = 6
const SPI_MEM_SMEM_DIN2_NUM = 0x00000003
const SPI_MEM_SMEM_DIN2_NUM_V = 0x3
const SPI_MEM_SMEM_DIN2_NUM_S = 4
const SPI_MEM_SMEM_DIN1_NUM = 0x00000003
const SPI_MEM_SMEM_DIN1_NUM_V = 0x3
const SPI_MEM_SMEM_DIN1_NUM_S = 2
const SPI_MEM_SMEM_DIN0_NUM = 0x00000003
const SPI_MEM_SMEM_DIN0_NUM_V = 0x3
const SPI_MEM_SMEM_DIN0_NUM_S = 0
const SPI_MEM_SMEM_DOUTS_MODE_V = 0x1
const SPI_MEM_SMEM_DOUTS_MODE_S = 8
const SPI_MEM_SMEM_DOUT7_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT7_MODE_S = 7
const SPI_MEM_SMEM_DOUT6_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT6_MODE_S = 6
const SPI_MEM_SMEM_DOUT5_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT5_MODE_S = 5
const SPI_MEM_SMEM_DOUT4_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT4_MODE_S = 4
const SPI_MEM_SMEM_DOUT3_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT3_MODE_S = 3
const SPI_MEM_SMEM_DOUT2_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT2_MODE_S = 2
const SPI_MEM_SMEM_DOUT1_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT1_MODE_S = 1
const SPI_MEM_SMEM_DOUT0_MODE_V = 0x1
const SPI_MEM_SMEM_DOUT0_MODE_S = 0
const SPI_MEM_SMEM_SPLIT_TRANS_EN_V = 0x1
const SPI_MEM_SMEM_SPLIT_TRANS_EN_S = 31
const SPI_MEM_SMEM_CS_HOLD_DELAY = 0x0000003F
const SPI_MEM_SMEM_CS_HOLD_DELAY_V = 0x3F
const SPI_MEM_SMEM_CS_HOLD_DELAY_S = 25
const SPI_MEM_SMEM_ECC_16TO18_BYTE_EN_V = 0x1
const SPI_MEM_SMEM_ECC_16TO18_BYTE_EN_S = 16
const SPI_MEM_SMEM_ECC_SKIP_PAGE_CORNER_V = 0x1
const SPI_MEM_SMEM_ECC_SKIP_PAGE_CORNER_S = 15
const SPI_MEM_SMEM_ECC_CS_HOLD_TIME = 0x00000007
const SPI_MEM_SMEM_ECC_CS_HOLD_TIME_V = 0x7
const SPI_MEM_SMEM_ECC_CS_HOLD_TIME_S = 12
const SPI_MEM_SMEM_CS_HOLD_TIME = 0x0000001F
const SPI_MEM_SMEM_CS_HOLD_TIME_V = 0x1F
const SPI_MEM_SMEM_CS_HOLD_TIME_S = 7
const SPI_MEM_SMEM_CS_SETUP_TIME = 0x0000001F
const SPI_MEM_SMEM_CS_SETUP_TIME_V = 0x1F
const SPI_MEM_SMEM_CS_SETUP_TIME_S = 2
const SPI_MEM_SMEM_CS_HOLD_V = 0x1
const SPI_MEM_SMEM_CS_HOLD_S = 1
const SPI_MEM_SMEM_CS_SETUP_V = 0x1
const SPI_MEM_SMEM_CS_SETUP_S = 0
const SPI_MEM_CLK_EN_V = 0x1
const SPI_MEM_CLK_EN_S = 0
const SPI_MEM_MMU_ITEM_CONTENT = 0xFFFFFFFF
const SPI_MEM_MMU_ITEM_CONTENT_V = 0xFFFFFFFF
const SPI_MEM_MMU_ITEM_CONTENT_S = 0
const SPI_MEM_MMU_ITEM_INDEX = 0xFFFFFFFF
const SPI_MEM_MMU_ITEM_INDEX_V = 0xFFFFFFFF
const SPI_MEM_MMU_ITEM_INDEX_S = 0
const SPI_MEM_RDN_RESULT_V = 0x1
const SPI_MEM_RDN_RESULT_S = 31
const SPI_MEM_RDN_ENA_V = 0x1
const SPI_MEM_RDN_ENA_S = 30
const SPI_MEM_AUX_CTRL = 0x00003FFF
const SPI_MEM_AUX_CTRL_V = 0x3FFF
const SPI_MEM_AUX_CTRL_S = 16
const SPI_MEM_MMU_PAGE_SIZE = 0x00000003
const SPI_MEM_MMU_PAGE_SIZE_V = 0x3
const SPI_MEM_MMU_PAGE_SIZE_S = 3
const SPI_MEM_MMU_MEM_FORCE_PU_V = 0x1
const SPI_MEM_MMU_MEM_FORCE_PU_S = 2
const SPI_MEM_MMU_MEM_FORCE_PD_V = 0x1
const SPI_MEM_MMU_MEM_FORCE_PD_S = 1
const SPI_MEM_MMU_MEM_FORCE_ON_V = 0x1
const SPI_MEM_MMU_MEM_FORCE_ON_S = 0
const SPI_MEM_REGISTERRND_ECO_HIGH = 0xFFFFFFFF
const SPI_MEM_REGISTERRND_ECO_HIGH_V = 0xFFFFFFFF
const SPI_MEM_REGISTERRND_ECO_HIGH_S = 0
const SPI_MEM_REGISTERRND_ECO_LOW = 0xFFFFFFFF
const SPI_MEM_REGISTERRND_ECO_LOW_V = 0xFFFFFFFF
const SPI_MEM_REGISTERRND_ECO_LOW_S = 0
const SPI_MEM_DATE = 0x0FFFFFFF
const SPI_MEM_DATE_V = 0xFFFFFFF
const SPI_MEM_DATE_S = 0
const UART_RXFIFO_RD_BYTE_S = 0
const UART_RXFIFO_FULL_INT_RAW_S = 0
const UART_TXFIFO_EMPTY_INT_RAW_S = 1
const UART_PARITY_ERR_INT_RAW_S = 2
const UART_FRM_ERR_INT_RAW_S = 3
const UART_RXFIFO_OVF_INT_RAW_S = 4
const UART_DSR_CHG_INT_RAW_S = 5
const UART_CTS_CHG_INT_RAW_S = 6
const UART_BRK_DET_INT_RAW_S = 7
const UART_RXFIFO_TOUT_INT_RAW_S = 8
const UART_SW_XON_INT_RAW_S = 9
const UART_SW_XOFF_INT_RAW_S = 10
const UART_GLITCH_DET_INT_RAW_S = 11
const UART_TX_BRK_DONE_INT_RAW_S = 12
const UART_TX_BRK_IDLE_DONE_INT_RAW_S = 13
const UART_TX_DONE_INT_RAW_S = 14
const UART_RS485_PARITY_ERR_INT_RAW_S = 15
const UART_RS485_FRM_ERR_INT_RAW_S = 16
const UART_RS485_CLASH_INT_RAW_S = 17
const UART_AT_CMD_CHAR_DET_INT_RAW_S = 18
const UART_WAKEUP_INT_RAW_S = 19
const UART_RXFIFO_FULL_INT_ST_S = 0
const UART_TXFIFO_EMPTY_INT_ST_S = 1
const UART_PARITY_ERR_INT_ST_S = 2
const UART_FRM_ERR_INT_ST_S = 3
const UART_RXFIFO_OVF_INT_ST_S = 4
const UART_DSR_CHG_INT_ST_S = 5
const UART_CTS_CHG_INT_ST_S = 6
const UART_BRK_DET_INT_ST_S = 7
const UART_RXFIFO_TOUT_INT_ST_S = 8
const UART_SW_XON_INT_ST_S = 9
const UART_SW_XOFF_INT_ST_S = 10
const UART_GLITCH_DET_INT_ST_S = 11
const UART_TX_BRK_DONE_INT_ST_S = 12
const UART_TX_BRK_IDLE_DONE_INT_ST_S = 13
const UART_TX_DONE_INT_ST_S = 14
const UART_RS485_PARITY_ERR_INT_ST_S = 15
const UART_RS485_FRM_ERR_INT_ST_S = 16
const UART_RS485_CLASH_INT_ST_S = 17
const UART_AT_CMD_CHAR_DET_INT_ST_S = 18
const UART_WAKEUP_INT_ST_S = 19
const UART_RXFIFO_FULL_INT_ENA_S = 0
const UART_TXFIFO_EMPTY_INT_ENA_S = 1
const UART_PARITY_ERR_INT_ENA_S = 2
const UART_FRM_ERR_INT_ENA_S = 3
const UART_RXFIFO_OVF_INT_ENA_S = 4
const UART_DSR_CHG_INT_ENA_S = 5
const UART_CTS_CHG_INT_ENA_S = 6
const UART_BRK_DET_INT_ENA_S = 7
const UART_RXFIFO_TOUT_INT_ENA_S = 8
const UART_SW_XON_INT_ENA_S = 9
const UART_SW_XOFF_INT_ENA_S = 10
const UART_GLITCH_DET_INT_ENA_S = 11
const UART_TX_BRK_DONE_INT_ENA_S = 12
const UART_TX_BRK_IDLE_DONE_INT_ENA_S = 13
const UART_TX_DONE_INT_ENA_S = 14
const UART_RS485_PARITY_ERR_INT_ENA_S = 15
const UART_RS485_FRM_ERR_INT_ENA_S = 16
const UART_RS485_CLASH_INT_ENA_S = 17
const UART_AT_CMD_CHAR_DET_INT_ENA_S = 18
const UART_WAKEUP_INT_ENA_S = 19
const UART_RXFIFO_FULL_INT_CLR_S = 0
const UART_TXFIFO_EMPTY_INT_CLR_S = 1
const UART_PARITY_ERR_INT_CLR_S = 2
const UART_FRM_ERR_INT_CLR_S = 3
const UART_RXFIFO_OVF_INT_CLR_S = 4
const UART_DSR_CHG_INT_CLR_S = 5
const UART_CTS_CHG_INT_CLR_S = 6
const UART_BRK_DET_INT_CLR_S = 7
const UART_RXFIFO_TOUT_INT_CLR_S = 8
const UART_SW_XON_INT_CLR_S = 9
const UART_SW_XOFF_INT_CLR_S = 10
const UART_GLITCH_DET_INT_CLR_S = 11
const UART_TX_BRK_DONE_INT_CLR_S = 12
const UART_TX_BRK_IDLE_DONE_INT_CLR_S = 13
const UART_TX_DONE_INT_CLR_S = 14
const UART_RS485_PARITY_ERR_INT_CLR_S = 15
const UART_RS485_FRM_ERR_INT_CLR_S = 16
const UART_RS485_CLASH_INT_CLR_S = 17
const UART_AT_CMD_CHAR_DET_INT_CLR_S = 18
const UART_WAKEUP_INT_CLR_S = 19
const UART_CLKDIV_S = 0
const UART_CLKDIV_FRAG_S = 20
const UART_GLITCH_FILT_S = 0
const UART_GLITCH_FILT_EN_S = 8
const UART_RXFIFO_CNT_S = 0
const UART_DSRN_S = 13
const UART_CTSN_S = 14
const UART_RXD_S = 15
const UART_TXFIFO_CNT_S = 16
const UART_DTRN_S = 29
const UART_RTSN_S = 30
const UART_TXD_S = 31
const UART_PARITY_S = 0
const UART_PARITY_EN_S = 1
const UART_BIT_NUM_S = 2
const UART_STOP_BIT_NUM_S = 4
const UART_TXD_BRK_S = 6
const UART_IRDA_DPLX_S = 7
const UART_IRDA_TX_EN_S = 8
const UART_IRDA_WCTL_S = 9
const UART_IRDA_TX_INV_S = 10
const UART_IRDA_RX_INV_S = 11
const UART_LOOPBACK_S = 12
const UART_TX_FLOW_EN_S = 13
const UART_IRDA_EN_S = 14
const UART_RXD_INV_S = 15
const UART_TXD_INV_S = 16
const UART_DIS_RX_DAT_OVF_S = 17
const UART_ERR_WR_MASK_S = 18
const UART_AUTOBAUD_EN_S = 19
const UART_MEM_CLK_EN_S = 20
const UART_SW_RTS_S = 21
const UART_RXFIFO_RST_S = 22
const UART_TXFIFO_RST_S = 23
const UART_RXFIFO_FULL_THRHD_S = 0
const UART_TXFIFO_EMPTY_THRHD_S = 8
const UART_CTS_INV_S = 16
const UART_DSR_INV_S = 17
const UART_RTS_INV_S = 18
const UART_DTR_INV_S = 19
const UART_SW_DTR_S = 20
const UART_CLK_EN_S = 21
const UART_RX_FLOW_THRHD_S = 0
const UART_RX_FLOW_EN_S = 8
const UART_WK_CHAR1_S = 0
const UART_WK_CHAR2_S = 8
const UART_WK_CHAR3_S = 16
const UART_WK_CHAR4_S = 24
const UART_WK_CHAR0_S = 0
const UART_ACTIVE_THRESHOLD_S = 0
const UART_RX_WAKE_UP_THRHD_S = 10
const UART_WK_CHAR_NUM_S = 18
const UART_WK_CHAR_MASK_S = 21
const UART_WK_MODE_SEL_S = 26
const UART_XON_CHAR_S = 0
const UART_XOFF_CHAR_S = 8
const UART_XON_XOFF_STILL_SEND_S = 16
const UART_SW_FLOW_CON_EN_S = 17
const UART_XONOFF_DEL_S = 18
const UART_FORCE_XON_S = 19
const UART_FORCE_XOFF_S = 20
const UART_SEND_XON_S = 21
const UART_SEND_XOFF_S = 22
const UART_XON_THRESHOLD_S = 0
const UART_XOFF_THRESHOLD_S = 8
const UART_TX_BRK_NUM_S = 0
const UART_RX_IDLE_THRHD_S = 0
const UART_TX_IDLE_NUM_S = 10
const UART_RS485_EN_S = 0
const UART_DL0_EN_S = 1
const UART_DL1_EN_S = 2
const UART_RS485TX_RX_EN_S = 3
const UART_RS485RXBY_TX_EN_S = 4
const UART_RS485_RX_DLY_NUM_S = 5
const UART_RS485_TX_DLY_NUM_S = 6
const UART_PRE_IDLE_NUM_S = 0
const UART_POST_IDLE_NUM_S = 0
const UART_RX_GAP_TOUT_S = 0
const UART_AT_CMD_CHAR_S = 0
const UART_CHAR_NUM_S = 8
const UART_MEM_FORCE_PD_S = 25
const UART_MEM_FORCE_PU_S = 26
const UART_RX_TOUT_EN_S = 0
const UART_RX_TOUT_FLOW_DIS_S = 1
const UART_RX_TOUT_THRHD_S = 2
const UART_TX_SRAM_WADDR_S = 0
const UART_TX_SRAM_RADDR_S = 9
const UART_RX_SRAM_RADDR_S = 0
const UART_RX_SRAM_WADDR_S = 9
const UART_ST_URX_OUT_S = 0
const UART_ST_UTX_OUT_S = 4
const UART_POSEDGE_MIN_CNT_S = 0
const UART_NEGEDGE_MIN_CNT_S = 0
const UART_LOWPULSE_MIN_CNT_S = 0
const UART_HIGHPULSE_MIN_CNT_S = 0
const UART_RXD_EDGE_CNT_S = 0
const UART_TX_SCLK_EN_S = 24
const UART_RX_SCLK_EN_S = 25
const UART_TX_RST_CORE_S = 26
const UART_RX_RST_CORE_S = 27
const UART_DATE_S = 0
const UART_TX_AFIFO_FULL_S = 0
const UART_TX_AFIFO_EMPTY_S = 1
const UART_RX_AFIFO_FULL_S = 2
const UART_RX_AFIFO_EMPTY_S = 3
const UART_REG_UPDATE_S = 0
const UART_ID_S = 0
const LP_UART_RXFIFO_RD_BYTE_S = 0
const LP_UART_RXFIFO_FULL_INT_RAW_S = 0
const LP_UART_TXFIFO_EMPTY_INT_RAW_S = 1
const LP_UART_PARITY_ERR_INT_RAW_S = 2
const LP_UART_FRM_ERR_INT_RAW_S = 3
const LP_UART_RXFIFO_OVF_INT_RAW_S = 4
const LP_UART_DSR_CHG_INT_RAW_S = 5
const LP_UART_CTS_CHG_INT_RAW_S = 6
const LP_UART_BRK_DET_INT_RAW_S = 7
const LP_UART_RXFIFO_TOUT_INT_RAW_S = 8
const LP_UART_SW_XON_INT_RAW_S = 9
const LP_UART_SW_XOFF_INT_RAW_S = 10
const LP_UART_GLITCH_DET_INT_RAW_S = 11
const LP_UART_TX_BRK_DONE_INT_RAW_S = 12
const LP_UART_TX_BRK_IDLE_DONE_INT_RAW_S = 13
const LP_UART_TX_DONE_INT_RAW_S = 14
const LP_UART_AT_CMD_CHAR_DET_INT_RAW_S = 18
const LP_UART_WAKEUP_INT_RAW_S = 19
const LP_UART_RXFIFO_FULL_INT_ST_S = 0
const LP_UART_TXFIFO_EMPTY_INT_ST_S = 1
const LP_UART_PARITY_ERR_INT_ST_S = 2
const LP_UART_FRM_ERR_INT_ST_S = 3
const LP_UART_RXFIFO_OVF_INT_ST_S = 4
const LP_UART_DSR_CHG_INT_ST_S = 5
const LP_UART_CTS_CHG_INT_ST_S = 6
const LP_UART_BRK_DET_INT_ST_S = 7
const LP_UART_RXFIFO_TOUT_INT_ST_S = 8
const LP_UART_SW_XON_INT_ST_S = 9
const LP_UART_SW_XOFF_INT_ST_S = 10
const LP_UART_GLITCH_DET_INT_ST_S = 11
const LP_UART_TX_BRK_DONE_INT_ST_S = 12
const LP_UART_TX_BRK_IDLE_DONE_INT_ST_S = 13
const LP_UART_TX_DONE_INT_ST_S = 14
const LP_UART_AT_CMD_CHAR_DET_INT_ST_S = 18
const LP_UART_WAKEUP_INT_ST_S = 19
const LP_UART_RXFIFO_FULL_INT_ENA_S = 0
const LP_UART_TXFIFO_EMPTY_INT_ENA_S = 1
const LP_UART_PARITY_ERR_INT_ENA_S = 2
const LP_UART_FRM_ERR_INT_ENA_S = 3
const LP_UART_RXFIFO_OVF_INT_ENA_S = 4
const LP_UART_DSR_CHG_INT_ENA_S = 5
const LP_UART_CTS_CHG_INT_ENA_S = 6
const LP_UART_BRK_DET_INT_ENA_S = 7
const LP_UART_RXFIFO_TOUT_INT_ENA_S = 8
const LP_UART_SW_XON_INT_ENA_S = 9
const LP_UART_SW_XOFF_INT_ENA_S = 10
const LP_UART_GLITCH_DET_INT_ENA_S = 11
const LP_UART_TX_BRK_DONE_INT_ENA_S = 12
const LP_UART_TX_BRK_IDLE_DONE_INT_ENA_S = 13
const LP_UART_TX_DONE_INT_ENA_S = 14
const LP_UART_AT_CMD_CHAR_DET_INT_ENA_S = 18
const LP_UART_WAKEUP_INT_ENA_S = 19
const LP_UART_RXFIFO_FULL_INT_CLR_S = 0
const LP_UART_TXFIFO_EMPTY_INT_CLR_S = 1
const LP_UART_PARITY_ERR_INT_CLR_S = 2
const LP_UART_FRM_ERR_INT_CLR_S = 3
const LP_UART_RXFIFO_OVF_INT_CLR_S = 4
const LP_UART_DSR_CHG_INT_CLR_S = 5
const LP_UART_CTS_CHG_INT_CLR_S = 6
const LP_UART_BRK_DET_INT_CLR_S = 7
const LP_UART_RXFIFO_TOUT_INT_CLR_S = 8
const LP_UART_SW_XON_INT_CLR_S = 9
const LP_UART_SW_XOFF_INT_CLR_S = 10
const LP_UART_GLITCH_DET_INT_CLR_S = 11
const LP_UART_TX_BRK_DONE_INT_CLR_S = 12
const LP_UART_TX_BRK_IDLE_DONE_INT_CLR_S = 13
const LP_UART_TX_DONE_INT_CLR_S = 14
const LP_UART_AT_CMD_CHAR_DET_INT_CLR_S = 18
const LP_UART_WAKEUP_INT_CLR_S = 19
const LP_UART_CLKDIV_S = 0
const LP_UART_CLKDIV_FRAG_S = 20
const LP_UART_GLITCH_FILT_S = 0
const LP_UART_GLITCH_FILT_EN_S = 8
const LP_UART_RXFIFO_CNT_S = 3
const LP_UART_DSRN_S = 13
const LP_UART_CTSN_S = 14
const LP_UART_RXD_S = 15
const LP_UART_TXFIFO_CNT_S = 19
const LP_UART_DTRN_S = 29
const LP_UART_RTSN_S = 30
const LP_UART_TXD_S = 31
const LP_UART_PARITY_S = 0
const LP_UART_PARITY_EN_S = 1
const LP_UART_BIT_NUM_S = 2
const LP_UART_STOP_BIT_NUM_S = 4
const LP_UART_TXD_BRK_S = 6
const LP_UART_LOOPBACK_S = 12
const LP_UART_TX_FLOW_EN_S = 13
const LP_UART_RXD_INV_S = 15
const LP_UART_TXD_INV_S = 16
const LP_UART_DIS_RX_DAT_OVF_S = 17
const LP_UART_ERR_WR_MASK_S = 18
const LP_UART_MEM_CLK_EN_S = 20
const LP_UART_SW_RTS_S = 21
const LP_UART_RXFIFO_RST_S = 22
const LP_UART_TXFIFO_RST_S = 23
const LP_UART_RXFIFO_FULL_THRHD_S = 3
const LP_UART_TXFIFO_EMPTY_THRHD_S = 11
const LP_UART_CTS_INV_S = 16
const LP_UART_DSR_INV_S = 17
const LP_UART_RTS_INV_S = 18
const LP_UART_DTR_INV_S = 19
const LP_UART_SW_DTR_S = 20
const LP_UART_CLK_EN_S = 21
const LP_UART_RX_FLOW_THRHD_S = 3
const LP_UART_RX_FLOW_EN_S = 8
const LP_UART_WK_CHAR1_S = 0
const LP_UART_WK_CHAR2_S = 8
const LP_UART_WK_CHAR3_S = 16
const LP_UART_WK_CHAR4_S = 24
const LP_UART_WK_CHAR0_S = 0
const LP_UART_ACTIVE_THRESHOLD_S = 0
const LP_UART_RX_WAKE_UP_THRHD_S = 13
const LP_UART_WK_CHAR_NUM_S = 18
const LP_UART_WK_CHAR_MASK_S = 21
const LP_UART_WK_MODE_SEL_S = 26
const LP_UART_XON_CHAR_S = 0
const LP_UART_XOFF_CHAR_S = 8
const LP_UART_XON_XOFF_STILL_SEND_S = 16
const LP_UART_SW_FLOW_CON_EN_S = 17
const LP_UART_XONOFF_DEL_S = 18
const LP_UART_FORCE_XON_S = 19
const LP_UART_FORCE_XOFF_S = 20
const LP_UART_SEND_XON_S = 21
const LP_UART_SEND_XOFF_S = 22
const LP_UART_XON_THRESHOLD_S = 3
const LP_UART_XOFF_THRESHOLD_S = 11
const LP_UART_TX_BRK_NUM_S = 0
const LP_UART_RX_IDLE_THRHD_S = 0
const LP_UART_TX_IDLE_NUM_S = 10
const LP_UART_DL0_EN_S = 1
const LP_UART_DL1_EN_S = 2
const LP_UART_PRE_IDLE_NUM_S = 0
const LP_UART_POST_IDLE_NUM_S = 0
const LP_UART_RX_GAP_TOUT_S = 0
const LP_UART_AT_CMD_CHAR_S = 0
const LP_UART_CHAR_NUM_S = 8
const LP_UART_MEM_FORCE_PD_S = 25
const LP_UART_MEM_FORCE_PU_S = 26
const LP_UART_RX_TOUT_EN_S = 0
const LP_UART_RX_TOUT_FLOW_DIS_S = 1
const LP_UART_RX_TOUT_THRHD_S = 2
const LP_UART_TX_SRAM_WADDR_S = 3
const LP_UART_TX_SRAM_RADDR_S = 12
const LP_UART_RX_SRAM_RADDR_S = 3
const LP_UART_RX_SRAM_WADDR_S = 12
const LP_UART_ST_URX_OUT_S = 0
const LP_UART_ST_UTX_OUT_S = 4
const LP_UART_TX_SCLK_EN_S = 24
const LP_UART_RX_SCLK_EN_S = 25
const LP_UART_TX_RST_CORE_S = 26
const LP_UART_RX_RST_CORE_S = 27
const LP_UART_DATE_S = 0
const LP_UART_TX_AFIFO_FULL_S = 0
const LP_UART_TX_AFIFO_EMPTY_S = 1
const LP_UART_RX_AFIFO_FULL_S = 2
const LP_UART_RX_AFIFO_EMPTY_S = 3
const LP_UART_REG_UPDATE_S = 0
const LP_UART_ID_S = 0
const TIMG_T0_USE_XTAL_S = 9
const TIMG_T0_ALARM_EN_S = 10
const TIMG_T0_DIVCNT_RST_S = 12
const TIMG_T0_DIVIDER_S = 13
const TIMG_T0_AUTORELOAD_S = 29
const TIMG_T0_INCREASE_S = 30
const TIMG_T0_EN_S = 31
const TIMG_T0_LO_S = 0
const TIMG_T0_HI_S = 0
const TIMG_T0_UPDATE_S = 31
const TIMG_T0_ALARM_LO_S = 0
const TIMG_T0_ALARM_HI_S = 0
const TIMG_T0_LOAD_LO_S = 0
const TIMG_T0_LOAD_HI_S = 0
const TIMG_T0_LOAD_S = 0
const TIMG_WDT_APPCPU_RESET_EN_S = 12
const TIMG_WDT_PROCPU_RESET_EN_S = 13
const TIMG_WDT_FLASHBOOT_MOD_EN_S = 14
const TIMG_WDT_SYS_RESET_LENGTH_S = 15
const TIMG_WDT_CPU_RESET_LENGTH_S = 18
const TIMG_WDT_USE_XTAL_S = 21
const TIMG_WDT_CONF_UPDATE_EN_S = 22
const TIMG_WDT_STG3_S = 23
const TIMG_WDT_STG2_S = 25
const TIMG_WDT_STG1_S = 27
const TIMG_WDT_STG0_S = 29
const TIMG_WDT_EN_S = 31
const TIMG_WDT_DIVCNT_RST_S = 0
const TIMG_WDT_CLK_PRESCALE_S = 16
const TIMG_WDT_STG0_HOLD_S = 0
const TIMG_WDT_STG1_HOLD_S = 0
const TIMG_WDT_STG2_HOLD_S = 0
const TIMG_WDT_STG3_HOLD_S = 0
const TIMG_WDT_FEED_S = 0
const TIMG_WDT_WKEY_S = 0
const TIMG_RTC_CALI_START_CYCLING_S = 12
const TIMG_RTC_CALI_CLK_SEL_S = 13
const TIMG_RTC_CALI_RDY_S = 15
const TIMG_RTC_CALI_MAX_S = 16
const TIMG_RTC_CALI_START_S = 31
const TIMG_RTC_CALI_CYCLING_DATA_VLD_S = 0
const TIMG_RTC_CALI_VALUE_S = 7
const TIMG_T0_INT_ENA_S = 0
const TIMG_WDT_INT_ENA_S = 1
const TIMG_T0_INT_RAW_S = 0
const TIMG_WDT_INT_RAW_S = 1
const TIMG_T0_INT_ST_S = 0
const TIMG_WDT_INT_ST_S = 1
const TIMG_T0_INT_CLR_S = 0
const TIMG_WDT_INT_CLR_S = 1
const TIMG_RTC_CALI_TIMEOUT_S = 0
const TIMG_RTC_CALI_TIMEOUT_RST_CNT_S = 3
const TIMG_RTC_CALI_TIMEOUT_THRES_S = 7
const TIMG_NTIMGS_DATE_S = 0
const TIMG_ETM_EN_S = 28
const TIMG_WDT_CLK_IS_ACTIVE_S = 29
const TIMG_TIMER_CLK_IS_ACTIVE_S = 30
const TIMG_CLK_EN_S = 31
const TIMG_WDT_WKEY_VALUE = 0x50D83AA1
const I2S_RX_DONE_INT_RAW_S = 0
const I2S_TX_DONE_INT_RAW_S = 1
const I2S_RX_HUNG_INT_RAW_S = 2
const I2S_TX_HUNG_INT_RAW_S = 3
const I2S_RX_DONE_INT_ST_S = 0
const I2S_TX_DONE_INT_ST_S = 1
const I2S_RX_HUNG_INT_ST_S = 2
const I2S_TX_HUNG_INT_ST_S = 3
const I2S_RX_DONE_INT_ENA_S = 0
const I2S_TX_DONE_INT_ENA_S = 1
const I2S_RX_HUNG_INT_ENA_S = 2
const I2S_TX_HUNG_INT_ENA_S = 3
const I2S_RX_DONE_INT_CLR_S = 0
const I2S_TX_DONE_INT_CLR_S = 1
const I2S_RX_HUNG_INT_CLR_S = 2
const I2S_TX_HUNG_INT_CLR_S = 3
const I2S_RX_RESET_S = 0
const I2S_RX_FIFO_RESET_S = 1
const I2S_RX_START_S = 2
const I2S_RX_SLAVE_MOD_S = 3
const I2S_RX_MONO_S = 5
const I2S_RX_BIG_ENDIAN_S = 7
const I2S_RX_UPDATE_S = 8
const I2S_RX_MONO_FST_VLD_S = 9
const I2S_RX_PCM_CONF_S = 10
const I2S_RX_PCM_BYPASS_S = 12
const I2S_RX_STOP_MODE_S = 13
const I2S_RX_LEFT_ALIGN_S = 15
const I2S_RX_24_FILL_EN_S = 16
const I2S_RX_WS_IDLE_POL_S = 17
const I2S_RX_BIT_ORDER_S = 18
const I2S_RX_TDM_EN_S = 19
const I2S_RX_PDM_EN_S = 20
const I2S_TX_RESET_S = 0
const I2S_TX_FIFO_RESET_S = 1
const I2S_TX_START_S = 2
const I2S_TX_SLAVE_MOD_S = 3
const I2S_TX_MONO_S = 5
const I2S_TX_CHAN_EQUAL_S = 6
const I2S_TX_BIG_ENDIAN_S = 7
const I2S_TX_UPDATE_S = 8
const I2S_TX_MONO_FST_VLD_S = 9
const I2S_TX_PCM_CONF_S = 10
const I2S_TX_PCM_BYPASS_S = 12
const I2S_TX_STOP_EN_S = 13
const I2S_TX_LEFT_ALIGN_S = 15
const I2S_TX_24_FILL_EN_S = 16
const I2S_TX_WS_IDLE_POL_S = 17
const I2S_TX_BIT_ORDER_S = 18
const I2S_TX_TDM_EN_S = 19
const I2S_TX_PDM_EN_S = 20
const I2S_TX_CHAN_MOD_S = 24
const I2S_SIG_LOOPBACK_S = 27
const I2S_RX_TDM_WS_WIDTH_S = 0
const I2S_RX_BCK_DIV_NUM_S = 7
const I2S_RX_BITS_MOD_S = 13
const I2S_RX_HALF_SAMPLE_BITS_S = 18
const I2S_RX_TDM_CHAN_BITS_S = 24
const I2S_RX_MSB_SHIFT_S = 29
const I2S_TX_TDM_WS_WIDTH_S = 0
const I2S_TX_BCK_DIV_NUM_S = 7
const I2S_TX_BITS_MOD_S = 13
const I2S_TX_HALF_SAMPLE_BITS_S = 18
const I2S_TX_TDM_CHAN_BITS_S = 24
const I2S_TX_MSB_SHIFT_S = 29
const I2S_TX_BCK_NO_DLY_S = 30
const I2S_RX_CLKM_DIV_NUM_S = 0
const I2S_RX_CLK_ACTIVE_S = 26
const I2S_RX_CLK_SEL_S = 27
const I2S_MCLK_SEL_S = 29
const I2S_TX_CLKM_DIV_NUM_S = 0
const I2S_TX_CLK_ACTIVE_S = 26
const I2S_TX_CLK_SEL_S = 27
const I2S_CLK_EN_S = 29
const I2S_RX_CLKM_DIV_Z_S = 0
const I2S_RX_CLKM_DIV_Y_S = 9
const I2S_RX_CLKM_DIV_X_S = 18
const I2S_RX_CLKM_DIV_YN1_S = 27
const I2S_TX_CLKM_DIV_Z_S = 0
const I2S_TX_CLKM_DIV_Y_S = 9
const I2S_TX_CLKM_DIV_X_S = 18
const I2S_TX_CLKM_DIV_YN1_S = 27
const I2S_TX_PDM_HP_BYPASS_S = 0
const I2S_TX_PDM_SINC_OSR2_S = 1
const I2S_TX_PDM_PRESCALE_S = 5
const I2S_TX_PDM_HP_IN_SHIFT_S = 13
const I2S_TX_PDM_LP_IN_SHIFT_S = 15
const I2S_TX_PDM_SINC_IN_SHIFT_S = 17
const I2S_TX_PDM_SIGMADELTA_IN_SHIFT_S = 19
const I2S_TX_PDM_SIGMADELTA_DITHER2_S = 21
const I2S_TX_PDM_SIGMADELTA_DITHER_S = 22
const I2S_TX_PDM_DAC_2OUT_EN_S = 23
const I2S_TX_PDM_DAC_MODE_EN_S = 24
const I2S_PCM2PDM_CONV_EN_S = 25
const I2S_TX_PDM_FP_S = 0
const I2S_TX_PDM_FS_S = 10
const I2S_TX_IIR_HP_MULT12_5_S = 20
const I2S_TX_IIR_HP_MULT12_0_S = 23
const I2S_RX_TDM_PDM_CHAN0_EN_S = 0
const I2S_RX_TDM_PDM_CHAN1_EN_S = 1
const I2S_RX_TDM_PDM_CHAN2_EN_S = 2
const I2S_RX_TDM_PDM_CHAN3_EN_S = 3
const I2S_RX_TDM_PDM_CHAN4_EN_S = 4
const I2S_RX_TDM_PDM_CHAN5_EN_S = 5
const I2S_RX_TDM_PDM_CHAN6_EN_S = 6
const I2S_RX_TDM_PDM_CHAN7_EN_S = 7
const I2S_RX_TDM_CHAN8_EN_S = 8
const I2S_RX_TDM_CHAN9_EN_S = 9
const I2S_RX_TDM_CHAN10_EN_S = 10
const I2S_RX_TDM_CHAN11_EN_S = 11
const I2S_RX_TDM_CHAN12_EN_S = 12
const I2S_RX_TDM_CHAN13_EN_S = 13
const I2S_RX_TDM_CHAN14_EN_S = 14
const I2S_RX_TDM_CHAN15_EN_S = 15
const I2S_RX_TDM_TOT_CHAN_NUM_S = 16
const I2S_TX_TDM_CHAN0_EN_S = 0
const I2S_TX_TDM_CHAN1_EN_S = 1
const I2S_TX_TDM_CHAN2_EN_S = 2
const I2S_TX_TDM_CHAN3_EN_S = 3
const I2S_TX_TDM_CHAN4_EN_S = 4
const I2S_TX_TDM_CHAN5_EN_S = 5
const I2S_TX_TDM_CHAN6_EN_S = 6
const I2S_TX_TDM_CHAN7_EN_S = 7
const I2S_TX_TDM_CHAN8_EN_S = 8
const I2S_TX_TDM_CHAN9_EN_S = 9
const I2S_TX_TDM_CHAN10_EN_S = 10
const I2S_TX_TDM_CHAN11_EN_S = 11
const I2S_TX_TDM_CHAN12_EN_S = 12
const I2S_TX_TDM_CHAN13_EN_S = 13
const I2S_TX_TDM_CHAN14_EN_S = 14
const I2S_TX_TDM_CHAN15_EN_S = 15
const I2S_TX_TDM_TOT_CHAN_NUM_S = 16
const I2S_TX_TDM_SKIP_MSK_EN_S = 20
const I2S_RX_SD_IN_DM_S = 0
const I2S_RX_WS_OUT_DM_S = 16
const I2S_RX_BCK_OUT_DM_S = 20
const I2S_RX_WS_IN_DM_S = 24
const I2S_RX_BCK_IN_DM_S = 28
const I2S_TX_SD_OUT_DM_S = 0
const I2S_TX_SD1_OUT_DM_S = 4
const I2S_TX_WS_OUT_DM_S = 16
const I2S_TX_BCK_OUT_DM_S = 20
const I2S_TX_WS_IN_DM_S = 24
const I2S_TX_BCK_IN_DM_S = 28
const I2S_LC_FIFO_TIMEOUT_S = 0
const I2S_LC_FIFO_TIMEOUT_SHIFT_S = 8
const I2S_LC_FIFO_TIMEOUT_ENA_S = 11
const I2S_RX_EOF_NUM_S = 0
const I2S_SINGLE_DATA_S = 0
const I2S_TX_IDLE_S = 0
const I2S_ETM_TX_SEND_WORD_NUM_S = 0
const I2S_ETM_RX_RECEIVE_WORD_NUM_S = 10
const I2S_DATE_S = 0
const I2C_SCL_LOW_PERIOD_S = 0
const I2C_SDA_FORCE_OUT_S = 0
const I2C_SCL_FORCE_OUT_S = 1
const I2C_SAMPLE_SCL_LEVEL_S = 2
const I2C_RX_FULL_ACK_LEVEL_S = 3
const I2C_MS_MODE_S = 4
const I2C_TRANS_START_S = 5
const I2C_TX_LSB_FIRST_S = 6
const I2C_RX_LSB_FIRST_S = 7
const I2C_CLK_EN_S = 8
const I2C_ARBITRATION_EN_S = 9
const I2C_FSM_RST_S = 10
const I2C_CONF_UPGATE_S = 11
const I2C_SLV_TX_AUTO_START_EN_S = 12
const I2C_ADDR_10BIT_RW_CHECK_EN_S = 13
const I2C_ADDR_BROADCASTING_EN_S = 14
const I2C_RESP_REC_S = 0
const I2C_SLAVE_RW_S = 1
const I2C_ARB_LOST_S = 3
const I2C_BUS_BUSY_S = 4
const I2C_SLAVE_ADDRESSED_S = 5
const I2C_RXFIFO_CNT_S = 8
const I2C_STRETCH_CAUSE_S = 14
const I2C_TXFIFO_CNT_S = 18
const I2C_SCL_MAIN_STATE_LAST_S = 24
const I2C_SCL_STATE_LAST_S = 28
const I2C_TIME_OUT_VALUE_S = 0
const I2C_TIME_OUT_EN_S = 5
const I2C_SLAVE_ADDR_S = 0
const I2C_ADDR_10BIT_EN_S = 31
const I2C_RXFIFO_RADDR_S = 0
const I2C_RXFIFO_WADDR_S = 5
const I2C_TXFIFO_RADDR_S = 10
const I2C_TXFIFO_WADDR_S = 15
const I2C_SLAVE_RW_POINT_S = 22
const I2C_RXFIFO_WM_THRHD_S = 0
const I2C_TXFIFO_WM_THRHD_S = 5
const I2C_NONFIFO_EN_S = 10
const I2C_FIFO_ADDR_CFG_EN_S = 11
const I2C_RX_FIFO_RST_S = 12
const I2C_TX_FIFO_RST_S = 13
const I2C_FIFO_PRT_EN_S = 14
const I2C_FIFO_RDATA_S = 0
const I2C_RXFIFO_WM_INT_RAW_S = 0
const I2C_TXFIFO_WM_INT_RAW_S = 1
const I2C_RXFIFO_OVF_INT_RAW_S = 2
const I2C_END_DETECT_INT_RAW_S = 3
const I2C_BYTE_TRANS_DONE_INT_RAW_S = 4
const I2C_ARBITRATION_LOST_INT_RAW_S = 5
const I2C_MST_TXFIFO_UDF_INT_RAW_S = 6
const I2C_TRANS_COMPLETE_INT_RAW_S = 7
const I2C_TIME_OUT_INT_RAW_S = 8
const I2C_TRANS_START_INT_RAW_S = 9
const I2C_NACK_INT_RAW_S = 10
const I2C_TXFIFO_OVF_INT_RAW_S = 11
const I2C_RXFIFO_UDF_INT_RAW_S = 12
const I2C_SCL_ST_TO_INT_RAW_S = 13
const I2C_SCL_MAIN_ST_TO_INT_RAW_S = 14
const I2C_DET_START_INT_RAW_S = 15
const I2C_SLAVE_STRETCH_INT_RAW_S = 16
const I2C_GENERAL_CALL_INT_RAW_S = 17
const I2C_SLAVE_ADDR_UNMATCH_INT_RAW_S = 18
const I2C_RXFIFO_WM_INT_CLR_S = 0
const I2C_TXFIFO_WM_INT_CLR_S = 1
const I2C_RXFIFO_OVF_INT_CLR_S = 2
const I2C_END_DETECT_INT_CLR_S = 3
const I2C_BYTE_TRANS_DONE_INT_CLR_S = 4
const I2C_ARBITRATION_LOST_INT_CLR_S = 5
const I2C_MST_TXFIFO_UDF_INT_CLR_S = 6
const I2C_TRANS_COMPLETE_INT_CLR_S = 7
const I2C_TIME_OUT_INT_CLR_S = 8
const I2C_TRANS_START_INT_CLR_S = 9
const I2C_NACK_INT_CLR_S = 10
const I2C_TXFIFO_OVF_INT_CLR_S = 11
const I2C_RXFIFO_UDF_INT_CLR_S = 12
const I2C_SCL_ST_TO_INT_CLR_S = 13
const I2C_SCL_MAIN_ST_TO_INT_CLR_S = 14
const I2C_DET_START_INT_CLR_S = 15
const I2C_SLAVE_STRETCH_INT_CLR_S = 16
const I2C_GENERAL_CALL_INT_CLR_S = 17
const I2C_SLAVE_ADDR_UNMATCH_INT_CLR_S = 18
const I2C_RXFIFO_WM_INT_ENA_S = 0
const I2C_TXFIFO_WM_INT_ENA_S = 1
const I2C_RXFIFO_OVF_INT_ENA_S = 2
const I2C_END_DETECT_INT_ENA_S = 3
const I2C_BYTE_TRANS_DONE_INT_ENA_S = 4
const I2C_ARBITRATION_LOST_INT_ENA_S = 5
const I2C_MST_TXFIFO_UDF_INT_ENA_S = 6
const I2C_TRANS_COMPLETE_INT_ENA_S = 7
const I2C_TIME_OUT_INT_ENA_S = 8
const I2C_TRANS_START_INT_ENA_S = 9
const I2C_NACK_INT_ENA_S = 10
const I2C_TXFIFO_OVF_INT_ENA_S = 11
const I2C_RXFIFO_UDF_INT_ENA_S = 12
const I2C_SCL_ST_TO_INT_ENA_S = 13
const I2C_SCL_MAIN_ST_TO_INT_ENA_S = 14
const I2C_DET_START_INT_ENA_S = 15
const I2C_SLAVE_STRETCH_INT_ENA_S = 16
const I2C_GENERAL_CALL_INT_ENA_S = 17
const I2C_SLAVE_ADDR_UNMATCH_INT_ENA_S = 18
const I2C_RXFIFO_WM_INT_ST_S = 0
const I2C_TXFIFO_WM_INT_ST_S = 1
const I2C_RXFIFO_OVF_INT_ST_S = 2
const I2C_END_DETECT_INT_ST_S = 3
const I2C_BYTE_TRANS_DONE_INT_ST_S = 4
const I2C_ARBITRATION_LOST_INT_ST_S = 5
const I2C_MST_TXFIFO_UDF_INT_ST_S = 6
const I2C_TRANS_COMPLETE_INT_ST_S = 7
const I2C_TIME_OUT_INT_ST_S = 8
const I2C_TRANS_START_INT_ST_S = 9
const I2C_NACK_INT_ST_S = 10
const I2C_TXFIFO_OVF_INT_ST_S = 11
const I2C_RXFIFO_UDF_INT_ST_S = 12
const I2C_SCL_ST_TO_INT_ST_S = 13
const I2C_SCL_MAIN_ST_TO_INT_ST_S = 14
const I2C_DET_START_INT_ST_S = 15
const I2C_SLAVE_STRETCH_INT_ST_S = 16
const I2C_GENERAL_CALL_INT_ST_S = 17
const I2C_SLAVE_ADDR_UNMATCH_INT_ST_S = 18
const I2C_SDA_HOLD_TIME_S = 0
const I2C_SDA_SAMPLE_TIME_S = 0
const I2C_SCL_HIGH_PERIOD_S = 0
const I2C_SCL_WAIT_HIGH_PERIOD_S = 9
const I2C_SCL_START_HOLD_TIME_S = 0
const I2C_SCL_RSTART_SETUP_TIME_S = 0
const I2C_SCL_STOP_HOLD_TIME_S = 0
const I2C_SCL_STOP_SETUP_TIME_S = 0
const I2C_SCL_FILTER_THRES_S = 0
const I2C_SDA_FILTER_THRES_S = 4
const I2C_SCL_FILTER_EN_S = 8
const I2C_SDA_FILTER_EN_S = 9
const I2C_SCLK_DIV_NUM_S = 0
const I2C_SCLK_DIV_A_S = 8
const I2C_SCLK_DIV_B_S = 14
const I2C_SCLK_SEL_S = 20
const I2C_SCLK_ACTIVE_S = 21
const I2C_COMMAND0_S = 0
const I2C_COMMAND0_DONE_S = 31
const I2C_COMMAND1_S = 0
const I2C_COMMAND1_DONE_S = 31
const I2C_COMMAND2_S = 0
const I2C_COMMAND2_DONE_S = 31
const I2C_COMMAND3_S = 0
const I2C_COMMAND3_DONE_S = 31
const I2C_COMMAND4_S = 0
const I2C_COMMAND4_DONE_S = 31
const I2C_COMMAND5_S = 0
const I2C_COMMAND5_DONE_S = 31
const I2C_COMMAND6_S = 0
const I2C_COMMAND6_DONE_S = 31
const I2C_COMMAND7_S = 0
const I2C_COMMAND7_DONE_S = 31
const I2C_SCL_ST_TO_I2C_S = 0
const I2C_SCL_MAIN_ST_TO_I2C_S = 0
const I2C_SCL_RST_SLV_EN_S = 0
const I2C_SCL_RST_SLV_NUM_S = 1
const I2C_SCL_PD_EN_S = 6
const I2C_SDA_PD_EN_S = 7
const I2C_STRETCH_PROTECT_NUM_S = 0
const I2C_SLAVE_SCL_STRETCH_EN_S = 10
const I2C_SLAVE_SCL_STRETCH_CLR_S = 11
const I2C_SLAVE_BYTE_ACK_CTL_EN_S = 12
const I2C_SLAVE_BYTE_ACK_LVL_S = 13
const I2C_DATE_S = 0
const I2C_TXFIFO_START_ADDR_S = 0
const I2C_RXFIFO_START_ADDR_S = 0
const I2C_SAR_ADC = 0x69
const I2C_SAR_ADC_HOSTID = 0
const ADC_SAR1_ENCAL_GND_ADDR = 0x7
const ADC_SAR1_ENCAL_GND_ADDR_MSB = 5
const ADC_SAR1_ENCAL_GND_ADDR_LSB = 5
const ADC_SAR2_ENCAL_GND_ADDR = 0x7
const ADC_SAR2_ENCAL_GND_ADDR_MSB = 7
const ADC_SAR2_ENCAL_GND_ADDR_LSB = 7
const ADC_SAR1_INITIAL_CODE_HIGH_ADDR = 0x1
const ADC_SAR1_INITIAL_CODE_HIGH_ADDR_MSB = 0x3
const ADC_SAR1_INITIAL_CODE_HIGH_ADDR_LSB = 0x0
const ADC_SAR1_INITIAL_CODE_LOW_ADDR = 0x0
const ADC_SAR1_INITIAL_CODE_LOW_ADDR_MSB = 0x7
const ADC_SAR1_INITIAL_CODE_LOW_ADDR_LSB = 0x0
const ADC_SAR2_INITIAL_CODE_HIGH_ADDR = 0x4
const ADC_SAR2_INITIAL_CODE_HIGH_ADDR_MSB = 0x3
const ADC_SAR2_INITIAL_CODE_HIGH_ADDR_LSB = 0x0
const ADC_SAR2_INITIAL_CODE_LOW_ADDR = 0x3
const ADC_SAR2_INITIAL_CODE_LOW_ADDR_MSB = 0x7
const ADC_SAR2_INITIAL_CODE_LOW_ADDR_LSB = 0x0
const ADC_SAR1_DREF_ADDR = 0x2
const ADC_SAR1_DREF_ADDR_MSB = 0x6
const ADC_SAR1_DREF_ADDR_LSB = 0x4
const ADC_SAR2_DREF_ADDR = 0x5
const ADC_SAR2_DREF_ADDR_MSB = 0x6
const ADC_SAR2_DREF_ADDR_LSB = 0x4
const ADC_SAR1_SAMPLE_CYCLE_ADDR = 0x2
const ADC_SAR1_SAMPLE_CYCLE_ADDR_MSB = 0x2
const ADC_SAR1_SAMPLE_CYCLE_ADDR_LSB = 0x0
const ADC_SARADC_DTEST_RTC_ADDR = 0x7
const ADC_SARADC_DTEST_RTC_ADDR_MSB = 1
const ADC_SARADC_DTEST_RTC_ADDR_LSB = 0
const ADC_SARADC_ENT_TSENS_ADDR = 0x7
const ADC_SARADC_ENT_TSENS_ADDR_MSB = 2
const ADC_SARADC_ENT_TSENS_ADDR_LSB = 2
const ADC_SARADC_ENT_RTC_ADDR = 0x7
const ADC_SARADC_ENT_RTC_ADDR_MSB = 3
const ADC_SARADC_ENT_RTC_ADDR_LSB = 3
const ADC_SARADC1_ENCAL_REF_ADDR = 0x7
const ADC_SARADC1_ENCAL_REF_ADDR_MSB = 4
const ADC_SARADC1_ENCAL_REF_ADDR_LSB = 4
const ADC_SARADC2_ENCAL_REF_ADDR = 0x7
const ADC_SARADC2_ENCAL_REF_ADDR_MSB = 6
const ADC_SARADC2_ENCAL_REF_ADDR_LSB = 6
const I2C_SARADC_TSENS_DAC = 0x6
const I2C_SARADC_TSENS_DAC_MSB = 3
const I2C_SARADC_TSENS_DAC_LSB = 0
const APB_SARADC_SARADC_START_FORCE_S = 0
const APB_SARADC_SARADC_START_S = 1
const APB_SARADC_SARADC_SAR_CLK_GATED_S = 6
const APB_SARADC_SARADC_SAR_CLK_DIV_S = 7
const APB_SARADC_SARADC_SAR_PATT_LEN_S = 15
const APB_SARADC_SARADC_SAR_PATT_P_CLEAR_S = 23
const APB_SARADC_SARADC_XPD_SAR_FORCE_S = 27
const APB_SARADC_SARADC2_PWDET_DRV_S = 29
const APB_SARADC_SARADC_WAIT_ARB_CYCLE_S = 30
const APB_SARADC_SARADC_MEAS_NUM_LIMIT_S = 0
const APB_SARADC_SARADC_MAX_MEAS_NUM_S = 1
const APB_SARADC_SARADC_SAR1_INV_S = 9
const APB_SARADC_SARADC_SAR2_INV_S = 10
const APB_SARADC_SARADC_TIMER_TARGET_S = 12
const APB_SARADC_SARADC_TIMER_EN_S = 24
const APB_SARADC_APB_SARADC_FILTER_FACTOR1_S = 26
const APB_SARADC_APB_SARADC_FILTER_FACTOR0_S = 29
const APB_SARADC_SARADC_XPD_WAIT_S = 0
const APB_SARADC_SARADC_RSTB_WAIT_S = 8
const APB_SARADC_SARADC_STANDBY_WAIT_S = 16
const APB_SARADC_SARADC_SAR1_STATUS_S = 0
const APB_SARADC_SARADC_SAR2_STATUS_S = 0
const APB_SARADC_SARADC_SAR_PATT_TAB1_S = 0
const APB_SARADC_SARADC_SAR_PATT_TAB2_S = 0
const APB_SARADC_SARADC_ONETIME_ATTEN_S = 23
const APB_SARADC_SARADC_ONETIME_CHANNEL_S = 25
const APB_SARADC_SARADC_ONETIME_START_S = 29
const APB_SARADC_SARADC2_ONETIME_SAMPLE_S = 30
const APB_SARADC_SARADC1_ONETIME_SAMPLE_S = 31
const APB_SARADC_ADC_ARB_APB_FORCE_S = 2
const APB_SARADC_ADC_ARB_RTC_FORCE_S = 3
const APB_SARADC_ADC_ARB_WIFI_FORCE_S = 4
const APB_SARADC_ADC_ARB_GRANT_FORCE_S = 5
const APB_SARADC_ADC_ARB_APB_PRIORITY_S = 6
const APB_SARADC_ADC_ARB_RTC_PRIORITY_S = 8
const APB_SARADC_ADC_ARB_WIFI_PRIORITY_S = 10
const APB_SARADC_ADC_ARB_FIX_PRIORITY_S = 12
const APB_SARADC_APB_SARADC_FILTER_CHANNEL1_S = 18
const APB_SARADC_APB_SARADC_FILTER_CHANNEL0_S = 22
const APB_SARADC_APB_SARADC_FILTER_RESET_S = 31
const APB_SARADC_APB_SARADC1_DATA_S = 0
const APB_SARADC_APB_SARADC2_DATA_S = 0
const APB_SARADC_APB_SARADC_THRES0_CHANNEL_S = 0
const APB_SARADC_APB_SARADC_THRES0_HIGH_S = 5
const APB_SARADC_APB_SARADC_THRES0_LOW_S = 18
const APB_SARADC_APB_SARADC_THRES1_CHANNEL_S = 0
const APB_SARADC_APB_SARADC_THRES1_HIGH_S = 5
const APB_SARADC_APB_SARADC_THRES1_LOW_S = 18
const APB_SARADC_APB_SARADC_THRES_ALL_EN_S = 27
const APB_SARADC_APB_SARADC_THRES1_EN_S = 30
const APB_SARADC_APB_SARADC_THRES0_EN_S = 31
const APB_SARADC_APB_SARADC_TSENS_INT_ENA_S = 25
const APB_SARADC_APB_SARADC_THRES1_LOW_INT_ENA_S = 26
const APB_SARADC_APB_SARADC_THRES0_LOW_INT_ENA_S = 27
const APB_SARADC_APB_SARADC_THRES1_HIGH_INT_ENA_S = 28
const APB_SARADC_APB_SARADC_THRES0_HIGH_INT_ENA_S = 29
const APB_SARADC_APB_SARADC2_DONE_INT_ENA_S = 30
const APB_SARADC_APB_SARADC1_DONE_INT_ENA_S = 31
const APB_SARADC_APB_SARADC_TSENS_INT_RAW_S = 25
const APB_SARADC_APB_SARADC_THRES1_LOW_INT_RAW_S = 26
const APB_SARADC_APB_SARADC_THRES0_LOW_INT_RAW_S = 27
const APB_SARADC_APB_SARADC_THRES1_HIGH_INT_RAW_S = 28
const APB_SARADC_APB_SARADC_THRES0_HIGH_INT_RAW_S = 29
const APB_SARADC_APB_SARADC2_DONE_INT_RAW_S = 30
const APB_SARADC_APB_SARADC1_DONE_INT_RAW_S = 31
const APB_SARADC_APB_SARADC_TSENS_INT_ST_S = 25
const APB_SARADC_APB_SARADC_THRES1_LOW_INT_ST_S = 26
const APB_SARADC_APB_SARADC_THRES0_LOW_INT_ST_S = 27
const APB_SARADC_APB_SARADC_THRES1_HIGH_INT_ST_S = 28
const APB_SARADC_APB_SARADC_THRES0_HIGH_INT_ST_S = 29
const APB_SARADC_APB_SARADC2_DONE_INT_ST_S = 30
const APB_SARADC_APB_SARADC1_DONE_INT_ST_S = 31
const APB_SARADC_APB_SARADC_TSENS_INT_CLR_S = 25
const APB_SARADC_APB_SARADC_THRES1_LOW_INT_CLR_S = 26
const APB_SARADC_APB_SARADC_THRES0_LOW_INT_CLR_S = 27
const APB_SARADC_APB_SARADC_THRES1_HIGH_INT_CLR_S = 28
const APB_SARADC_APB_SARADC_THRES0_HIGH_INT_CLR_S = 29
const APB_SARADC_APB_SARADC2_DONE_INT_CLR_S = 30
const APB_SARADC_APB_SARADC1_DONE_INT_CLR_S = 31
const APB_SARADC_APB_ADC_EOF_NUM_S = 0
const APB_SARADC_APB_ADC_RESET_FSM_S = 30
const APB_SARADC_APB_ADC_TRANS_S = 31
const APB_SARADC_CLKM_DIV_NUM_S = 0
const APB_SARADC_CLKM_DIV_B_S = 8
const APB_SARADC_CLKM_DIV_A_S = 14
const APB_SARADC_CLK_EN_S = 20
const APB_SARADC_CLK_SEL_S = 21
const APB_SARADC_TSENS_OUT_S = 0
const APB_SARADC_TSENS_IN_INV_S = 13
const APB_SARADC_TSENS_CLK_DIV_S = 14
const APB_SARADC_TSENS_PU_S = 22
const APB_SARADC_TSENS_XPD_WAIT_S = 0
const APB_SARADC_TSENS_XPD_FORCE_S = 12
const APB_SARADC_TSENS_CLK_INV_S = 14
const APB_SARADC_TSENS_CLK_SEL_S = 15
const APB_SARADC_APB_SARADC_CALI_CFG_S = 0
const APB_SARADC_WAKEUP_TH_LOW_S = 0
const APB_SARADC_WAKEUP_TH_HIGH_S = 8
const APB_SARADC_WAKEUP_OVER_UPPER_TH_S = 16
const APB_SARADC_WAKEUP_MODE_S = 17
const APB_SARADC_WAKEUP_EN_S = 18
const APB_SARADC_TSENS_SAMPLE_RATE_S = 0
const APB_SARADC_TSENS_SAMPLE_EN_S = 16
const APB_SARADC_DATE_S = 0
const RTCIO_GPIO0_CHANNEL = 0
const RTCIO_CHANNEL_0_GPIO_NUM = 0
const RTCIO_GPIO1_CHANNEL = 1
const RTCIO_CHANNEL_1_GPIO_NUM = 1
const RTCIO_GPIO2_CHANNEL = 2
const RTCIO_CHANNEL_2_GPIO_NUM = 2
const RTCIO_GPIO3_CHANNEL = 3
const RTCIO_CHANNEL_3_GPIO_NUM = 3
const RTCIO_GPIO4_CHANNEL = 4
const RTCIO_CHANNEL_4_GPIO_NUM = 4
const RTCIO_GPIO5_CHANNEL = 5
const RTCIO_CHANNEL_5_GPIO_NUM = 5
const RTCIO_GPIO6_CHANNEL = 6
const RTCIO_CHANNEL_6_GPIO_NUM = 6
const RTCIO_GPIO7_CHANNEL = 7
const RTCIO_CHANNEL_7_GPIO_NUM = 7
const GPIO_BT_SEL_S = 0
const GPIO_OUT_DATA_ORIG_S = 0
const GPIO_OUT_W1TS_S = 0
const GPIO_OUT_W1TC_S = 0
const GPIO_OUT1_DATA_ORIG_S = 0
const GPIO_OUT1_W1TS_S = 0
const GPIO_OUT1_W1TC_S = 0
const GPIO_SDIO_SEL_S = 0
const GPIO_ENABLE_DATA_S = 0
const GPIO_ENABLE_W1TS_S = 0
const GPIO_ENABLE_W1TC_S = 0
const GPIO_ENABLE1_DATA_S = 0
const GPIO_ENABLE1_W1TS_S = 0
const GPIO_ENABLE1_W1TC_S = 0
const GPIO_STRAPPING_S = 0
const GPIO_IN_DATA_NEXT_S = 0
const GPIO_IN1_DATA_NEXT_S = 0
const GPIO_STATUS_INTERRUPT_S = 0
const GPIO_STATUS_W1TS_S = 0
const GPIO_STATUS_W1TC_S = 0
const GPIO_STATUS1_INTERRUPT_S = 0
const GPIO_STATUS1_W1TS_S = 0
const GPIO_STATUS1_W1TC_S = 0
const GPIO_PROCPU_INT_S = 0
const GPIO_PROCPU_NMI_INT_S = 0
const GPIO_SDIO_INT_S = 0
const GPIO_PROCPU_INT1_S = 0
const GPIO_PROCPU_NMI_INT1_S = 0
const GPIO_SDIO_INT1_S = 0
const GPIO_PIN0_SYNC2_BYPASS_S = 0
const GPIO_PIN0_PAD_DRIVER_S = 2
const GPIO_PIN0_SYNC1_BYPASS_S = 3
const GPIO_PIN0_INT_TYPE_S = 7
const GPIO_PIN0_WAKEUP_ENABLE_S = 10
const GPIO_PIN0_CONFIG_S = 11
const GPIO_PIN0_INT_ENA_S = 13
const GPIO_PIN1_SYNC2_BYPASS_S = 0
const GPIO_PIN1_PAD_DRIVER_S = 2
const GPIO_PIN1_SYNC1_BYPASS_S = 3
const GPIO_PIN1_INT_TYPE_S = 7
const GPIO_PIN1_WAKEUP_ENABLE_S = 10
const GPIO_PIN1_CONFIG_S = 11
const GPIO_PIN1_INT_ENA_S = 13
const GPIO_PIN2_SYNC2_BYPASS_S = 0
const GPIO_PIN2_PAD_DRIVER_S = 2
const GPIO_PIN2_SYNC1_BYPASS_S = 3
const GPIO_PIN2_INT_TYPE_S = 7
const GPIO_PIN2_WAKEUP_ENABLE_S = 10
const GPIO_PIN2_CONFIG_S = 11
const GPIO_PIN2_INT_ENA_S = 13
const GPIO_PIN3_SYNC2_BYPASS_S = 0
const GPIO_PIN3_PAD_DRIVER_S = 2
const GPIO_PIN3_SYNC1_BYPASS_S = 3
const GPIO_PIN3_INT_TYPE_S = 7
const GPIO_PIN3_WAKEUP_ENABLE_S = 10
const GPIO_PIN3_CONFIG_S = 11
const GPIO_PIN3_INT_ENA_S = 13
const GPIO_PIN4_SYNC2_BYPASS_S = 0
const GPIO_PIN4_PAD_DRIVER_S = 2
const GPIO_PIN4_SYNC1_BYPASS_S = 3
const GPIO_PIN4_INT_TYPE_S = 7
const GPIO_PIN4_WAKEUP_ENABLE_S = 10
const GPIO_PIN4_CONFIG_S = 11
const GPIO_PIN4_INT_ENA_S = 13
const GPIO_PIN5_SYNC2_BYPASS_S = 0
const GPIO_PIN5_PAD_DRIVER_S = 2
const GPIO_PIN5_SYNC1_BYPASS_S = 3
const GPIO_PIN5_INT_TYPE_S = 7
const GPIO_PIN5_WAKEUP_ENABLE_S = 10
const GPIO_PIN5_CONFIG_S = 11
const GPIO_PIN5_INT_ENA_S = 13
const GPIO_PIN6_SYNC2_BYPASS_S = 0
const GPIO_PIN6_PAD_DRIVER_S = 2
const GPIO_PIN6_SYNC1_BYPASS_S = 3
const GPIO_PIN6_INT_TYPE_S = 7
const GPIO_PIN6_WAKEUP_ENABLE_S = 10
const GPIO_PIN6_CONFIG_S = 11
const GPIO_PIN6_INT_ENA_S = 13
const GPIO_PIN7_SYNC2_BYPASS_S = 0
const GPIO_PIN7_PAD_DRIVER_S = 2
const GPIO_PIN7_SYNC1_BYPASS_S = 3
const GPIO_PIN7_INT_TYPE_S = 7
const GPIO_PIN7_WAKEUP_ENABLE_S = 10
const GPIO_PIN7_CONFIG_S = 11
const GPIO_PIN7_INT_ENA_S = 13
const GPIO_PIN8_SYNC2_BYPASS_S = 0
const GPIO_PIN8_PAD_DRIVER_S = 2
const GPIO_PIN8_SYNC1_BYPASS_S = 3
const GPIO_PIN8_INT_TYPE_S = 7
const GPIO_PIN8_WAKEUP_ENABLE_S = 10
const GPIO_PIN8_CONFIG_S = 11
const GPIO_PIN8_INT_ENA_S = 13
const GPIO_PIN9_SYNC2_BYPASS_S = 0
const GPIO_PIN9_PAD_DRIVER_S = 2
const GPIO_PIN9_SYNC1_BYPASS_S = 3
const GPIO_PIN9_INT_TYPE_S = 7
const GPIO_PIN9_WAKEUP_ENABLE_S = 10
const GPIO_PIN9_CONFIG_S = 11
const GPIO_PIN9_INT_ENA_S = 13
const GPIO_PIN10_SYNC2_BYPASS_S = 0
const GPIO_PIN10_PAD_DRIVER_S = 2
const GPIO_PIN10_SYNC1_BYPASS_S = 3
const GPIO_PIN10_INT_TYPE_S = 7
const GPIO_PIN10_WAKEUP_ENABLE_S = 10
const GPIO_PIN10_CONFIG_S = 11
const GPIO_PIN10_INT_ENA_S = 13
const GPIO_PIN11_SYNC2_BYPASS_S = 0
const GPIO_PIN11_PAD_DRIVER_S = 2
const GPIO_PIN11_SYNC1_BYPASS_S = 3
const GPIO_PIN11_INT_TYPE_S = 7
const GPIO_PIN11_WAKEUP_ENABLE_S = 10
const GPIO_PIN11_CONFIG_S = 11
const GPIO_PIN11_INT_ENA_S = 13
const GPIO_PIN12_SYNC2_BYPASS_S = 0
const GPIO_PIN12_PAD_DRIVER_S = 2
const GPIO_PIN12_SYNC1_BYPASS_S = 3
const GPIO_PIN12_INT_TYPE_S = 7
const GPIO_PIN12_WAKEUP_ENABLE_S = 10
const GPIO_PIN12_CONFIG_S = 11
const GPIO_PIN12_INT_ENA_S = 13
const GPIO_PIN13_SYNC2_BYPASS_S = 0
const GPIO_PIN13_PAD_DRIVER_S = 2
const GPIO_PIN13_SYNC1_BYPASS_S = 3
const GPIO_PIN13_INT_TYPE_S = 7
const GPIO_PIN13_WAKEUP_ENABLE_S = 10
const GPIO_PIN13_CONFIG_S = 11
const GPIO_PIN13_INT_ENA_S = 13
const GPIO_PIN14_SYNC2_BYPASS_S = 0
const GPIO_PIN14_PAD_DRIVER_S = 2
const GPIO_PIN14_SYNC1_BYPASS_S = 3
const GPIO_PIN14_INT_TYPE_S = 7
const GPIO_PIN14_WAKEUP_ENABLE_S = 10
const GPIO_PIN14_CONFIG_S = 11
const GPIO_PIN14_INT_ENA_S = 13
const GPIO_PIN15_SYNC2_BYPASS_S = 0
const GPIO_PIN15_PAD_DRIVER_S = 2
const GPIO_PIN15_SYNC1_BYPASS_S = 3
const GPIO_PIN15_INT_TYPE_S = 7
const GPIO_PIN15_WAKEUP_ENABLE_S = 10
const GPIO_PIN15_CONFIG_S = 11
const GPIO_PIN15_INT_ENA_S = 13
const GPIO_PIN16_SYNC2_BYPASS_S = 0
const GPIO_PIN16_PAD_DRIVER_S = 2
const GPIO_PIN16_SYNC1_BYPASS_S = 3
const GPIO_PIN16_INT_TYPE_S = 7
const GPIO_PIN16_WAKEUP_ENABLE_S = 10
const GPIO_PIN16_CONFIG_S = 11
const GPIO_PIN16_INT_ENA_S = 13
const GPIO_PIN17_SYNC2_BYPASS_S = 0
const GPIO_PIN17_PAD_DRIVER_S = 2
const GPIO_PIN17_SYNC1_BYPASS_S = 3
const GPIO_PIN17_INT_TYPE_S = 7
const GPIO_PIN17_WAKEUP_ENABLE_S = 10
const GPIO_PIN17_CONFIG_S = 11
const GPIO_PIN17_INT_ENA_S = 13
const GPIO_PIN18_SYNC2_BYPASS_S = 0
const GPIO_PIN18_PAD_DRIVER_S = 2
const GPIO_PIN18_SYNC1_BYPASS_S = 3
const GPIO_PIN18_INT_TYPE_S = 7
const GPIO_PIN18_WAKEUP_ENABLE_S = 10
const GPIO_PIN18_CONFIG_S = 11
const GPIO_PIN18_INT_ENA_S = 13
const GPIO_PIN19_SYNC2_BYPASS_S = 0
const GPIO_PIN19_PAD_DRIVER_S = 2
const GPIO_PIN19_SYNC1_BYPASS_S = 3
const GPIO_PIN19_INT_TYPE_S = 7
const GPIO_PIN19_WAKEUP_ENABLE_S = 10
const GPIO_PIN19_CONFIG_S = 11
const GPIO_PIN19_INT_ENA_S = 13
const GPIO_PIN20_SYNC2_BYPASS_S = 0
const GPIO_PIN20_PAD_DRIVER_S = 2
const GPIO_PIN20_SYNC1_BYPASS_S = 3
const GPIO_PIN20_INT_TYPE_S = 7
const GPIO_PIN20_WAKEUP_ENABLE_S = 10
const GPIO_PIN20_CONFIG_S = 11
const GPIO_PIN20_INT_ENA_S = 13
const GPIO_PIN21_SYNC2_BYPASS_S = 0
const GPIO_PIN21_PAD_DRIVER_S = 2
const GPIO_PIN21_SYNC1_BYPASS_S = 3
const GPIO_PIN21_INT_TYPE_S = 7
const GPIO_PIN21_WAKEUP_ENABLE_S = 10
const GPIO_PIN21_CONFIG_S = 11
const GPIO_PIN21_INT_ENA_S = 13
const GPIO_PIN22_SYNC2_BYPASS_S = 0
const GPIO_PIN22_PAD_DRIVER_S = 2
const GPIO_PIN22_SYNC1_BYPASS_S = 3
const GPIO_PIN22_INT_TYPE_S = 7
const GPIO_PIN22_WAKEUP_ENABLE_S = 10
const GPIO_PIN22_CONFIG_S = 11
const GPIO_PIN22_INT_ENA_S = 13
const GPIO_PIN23_SYNC2_BYPASS_S = 0
const GPIO_PIN23_PAD_DRIVER_S = 2
const GPIO_PIN23_SYNC1_BYPASS_S = 3
const GPIO_PIN23_INT_TYPE_S = 7
const GPIO_PIN23_WAKEUP_ENABLE_S = 10
const GPIO_PIN23_CONFIG_S = 11
const GPIO_PIN23_INT_ENA_S = 13
const GPIO_PIN24_SYNC2_BYPASS_S = 0
const GPIO_PIN24_PAD_DRIVER_S = 2
const GPIO_PIN24_SYNC1_BYPASS_S = 3
const GPIO_PIN24_INT_TYPE_S = 7
const GPIO_PIN24_WAKEUP_ENABLE_S = 10
const GPIO_PIN24_CONFIG_S = 11
const GPIO_PIN24_INT_ENA_S = 13
const GPIO_PIN25_SYNC2_BYPASS_S = 0
const GPIO_PIN25_PAD_DRIVER_S = 2
const GPIO_PIN25_SYNC1_BYPASS_S = 3
const GPIO_PIN25_INT_TYPE_S = 7
const GPIO_PIN25_WAKEUP_ENABLE_S = 10
const GPIO_PIN25_CONFIG_S = 11
const GPIO_PIN25_INT_ENA_S = 13
const GPIO_PIN26_SYNC2_BYPASS_S = 0
const GPIO_PIN26_PAD_DRIVER_S = 2
const GPIO_PIN26_SYNC1_BYPASS_S = 3
const GPIO_PIN26_INT_TYPE_S = 7
const GPIO_PIN26_WAKEUP_ENABLE_S = 10
const GPIO_PIN26_CONFIG_S = 11
const GPIO_PIN26_INT_ENA_S = 13
const GPIO_PIN27_SYNC2_BYPASS_S = 0
const GPIO_PIN27_PAD_DRIVER_S = 2
const GPIO_PIN27_SYNC1_BYPASS_S = 3
const GPIO_PIN27_INT_TYPE_S = 7
const GPIO_PIN27_WAKEUP_ENABLE_S = 10
const GPIO_PIN27_CONFIG_S = 11
const GPIO_PIN27_INT_ENA_S = 13
const GPIO_PIN28_SYNC2_BYPASS_S = 0
const GPIO_PIN28_PAD_DRIVER_S = 2
const GPIO_PIN28_SYNC1_BYPASS_S = 3
const GPIO_PIN28_INT_TYPE_S = 7
const GPIO_PIN28_WAKEUP_ENABLE_S = 10
const GPIO_PIN28_CONFIG_S = 11
const GPIO_PIN28_INT_ENA_S = 13
const GPIO_PIN29_SYNC2_BYPASS_S = 0
const GPIO_PIN29_PAD_DRIVER_S = 2
const GPIO_PIN29_SYNC1_BYPASS_S = 3
const GPIO_PIN29_INT_TYPE_S = 7
const GPIO_PIN29_WAKEUP_ENABLE_S = 10
const GPIO_PIN29_CONFIG_S = 11
const GPIO_PIN29_INT_ENA_S = 13
const GPIO_PIN30_SYNC2_BYPASS_S = 0
const GPIO_PIN30_PAD_DRIVER_S = 2
const GPIO_PIN30_SYNC1_BYPASS_S = 3
const GPIO_PIN30_INT_TYPE_S = 7
const GPIO_PIN30_WAKEUP_ENABLE_S = 10
const GPIO_PIN30_CONFIG_S = 11
const GPIO_PIN30_INT_ENA_S = 13
const GPIO_PIN31_SYNC2_BYPASS_S = 0
const GPIO_PIN31_PAD_DRIVER_S = 2
const GPIO_PIN31_SYNC1_BYPASS_S = 3
const GPIO_PIN31_INT_TYPE_S = 7
const GPIO_PIN31_WAKEUP_ENABLE_S = 10
const GPIO_PIN31_CONFIG_S = 11
const GPIO_PIN31_INT_ENA_S = 13
const GPIO_PIN32_SYNC2_BYPASS_S = 0
const GPIO_PIN32_PAD_DRIVER_S = 2
const GPIO_PIN32_SYNC1_BYPASS_S = 3
const GPIO_PIN32_INT_TYPE_S = 7
const GPIO_PIN32_WAKEUP_ENABLE_S = 10
const GPIO_PIN32_CONFIG_S = 11
const GPIO_PIN32_INT_ENA_S = 13
const GPIO_PIN33_SYNC2_BYPASS_S = 0
const GPIO_PIN33_PAD_DRIVER_S = 2
const GPIO_PIN33_SYNC1_BYPASS_S = 3
const GPIO_PIN33_INT_TYPE_S = 7
const GPIO_PIN33_WAKEUP_ENABLE_S = 10
const GPIO_PIN33_CONFIG_S = 11
const GPIO_PIN33_INT_ENA_S = 13
const GPIO_PIN34_SYNC2_BYPASS_S = 0
const GPIO_PIN34_PAD_DRIVER_S = 2
const GPIO_PIN34_SYNC1_BYPASS_S = 3
const GPIO_PIN34_INT_TYPE_S = 7
const GPIO_PIN34_WAKEUP_ENABLE_S = 10
const GPIO_PIN34_CONFIG_S = 11
const GPIO_PIN34_INT_ENA_S = 13
const GPIO_STATUS_INTERRUPT_NEXT_S = 0
const GPIO_STATUS_INTERRUPT_NEXT1_S = 0
const GPIO_FUNC0_IN_SEL_S = 0
const GPIO_FUNC0_IN_INV_SEL_S = 6
const GPIO_SIG0_IN_SEL_S = 7
const GPIO_FUNC6_IN_SEL_S = 0
const GPIO_FUNC6_IN_INV_SEL_S = 6
const GPIO_SIG6_IN_SEL_S = 7
const GPIO_FUNC7_IN_SEL_S = 0
const GPIO_FUNC7_IN_INV_SEL_S = 6
const GPIO_SIG7_IN_SEL_S = 7
const GPIO_FUNC8_IN_SEL_S = 0
const GPIO_FUNC8_IN_INV_SEL_S = 6
const GPIO_SIG8_IN_SEL_S = 7
const GPIO_FUNC9_IN_SEL_S = 0
const GPIO_FUNC9_IN_INV_SEL_S = 6
const GPIO_SIG9_IN_SEL_S = 7
const GPIO_FUNC10_IN_SEL_S = 0
const GPIO_FUNC10_IN_INV_SEL_S = 6
const GPIO_SIG10_IN_SEL_S = 7
const GPIO_FUNC11_IN_SEL_S = 0
const GPIO_FUNC11_IN_INV_SEL_S = 6
const GPIO_SIG11_IN_SEL_S = 7
const GPIO_FUNC12_IN_SEL_S = 0
const GPIO_FUNC12_IN_INV_SEL_S = 6
const GPIO_SIG12_IN_SEL_S = 7
const GPIO_FUNC13_IN_SEL_S = 0
const GPIO_FUNC13_IN_INV_SEL_S = 6
const GPIO_SIG13_IN_SEL_S = 7
const GPIO_FUNC14_IN_SEL_S = 0
const GPIO_FUNC14_IN_INV_SEL_S = 6
const GPIO_SIG14_IN_SEL_S = 7
const GPIO_FUNC15_IN_SEL_S = 0
const GPIO_FUNC15_IN_INV_SEL_S = 6
const GPIO_SIG15_IN_SEL_S = 7
const GPIO_FUNC16_IN_SEL_S = 0
const GPIO_FUNC16_IN_INV_SEL_S = 6
const GPIO_SIG16_IN_SEL_S = 7
const GPIO_FUNC17_IN_SEL_S = 0
const GPIO_FUNC17_IN_INV_SEL_S = 6
const GPIO_SIG17_IN_SEL_S = 7
const GPIO_FUNC19_IN_SEL_S = 0
const GPIO_FUNC19_IN_INV_SEL_S = 6
const GPIO_SIG19_IN_SEL_S = 7
const GPIO_FUNC28_IN_SEL_S = 0
const GPIO_FUNC28_IN_INV_SEL_S = 6
const GPIO_SIG28_IN_SEL_S = 7
const GPIO_FUNC29_IN_SEL_S = 0
const GPIO_FUNC29_IN_INV_SEL_S = 6
const GPIO_SIG29_IN_SEL_S = 7
const GPIO_FUNC30_IN_SEL_S = 0
const GPIO_FUNC30_IN_INV_SEL_S = 6
const GPIO_SIG30_IN_SEL_S = 7
const GPIO_FUNC31_IN_SEL_S = 0
const GPIO_FUNC31_IN_INV_SEL_S = 6
const GPIO_SIG31_IN_SEL_S = 7
const GPIO_FUNC32_IN_SEL_S = 0
const GPIO_FUNC32_IN_INV_SEL_S = 6
const GPIO_SIG32_IN_SEL_S = 7
const GPIO_FUNC33_IN_SEL_S = 0
const GPIO_FUNC33_IN_INV_SEL_S = 6
const GPIO_SIG33_IN_SEL_S = 7
const GPIO_FUNC34_IN_SEL_S = 0
const GPIO_FUNC34_IN_INV_SEL_S = 6
const GPIO_SIG34_IN_SEL_S = 7
const GPIO_FUNC35_IN_SEL_S = 0
const GPIO_FUNC35_IN_INV_SEL_S = 6
const GPIO_SIG35_IN_SEL_S = 7
const GPIO_FUNC40_IN_SEL_S = 0
const GPIO_FUNC40_IN_INV_SEL_S = 6
const GPIO_SIG40_IN_SEL_S = 7
const GPIO_FUNC41_IN_SEL_S = 0
const GPIO_FUNC41_IN_INV_SEL_S = 6
const GPIO_SIG41_IN_SEL_S = 7
const GPIO_FUNC42_IN_SEL_S = 0
const GPIO_FUNC42_IN_INV_SEL_S = 6
const GPIO_SIG42_IN_SEL_S = 7
const GPIO_FUNC45_IN_SEL_S = 0
const GPIO_FUNC45_IN_INV_SEL_S = 6
const GPIO_SIG45_IN_SEL_S = 7
const GPIO_FUNC46_IN_SEL_S = 0
const GPIO_FUNC46_IN_INV_SEL_S = 6
const GPIO_SIG46_IN_SEL_S = 7
const GPIO_FUNC47_IN_SEL_S = 0
const GPIO_FUNC47_IN_INV_SEL_S = 6
const GPIO_SIG47_IN_SEL_S = 7
const GPIO_FUNC48_IN_SEL_S = 0
const GPIO_FUNC48_IN_INV_SEL_S = 6
const GPIO_SIG48_IN_SEL_S = 7
const GPIO_FUNC49_IN_SEL_S = 0
const GPIO_FUNC49_IN_INV_SEL_S = 6
const GPIO_SIG49_IN_SEL_S = 7
const GPIO_FUNC50_IN_SEL_S = 0
const GPIO_FUNC50_IN_INV_SEL_S = 6
const GPIO_SIG50_IN_SEL_S = 7
const GPIO_FUNC51_IN_SEL_S = 0
const GPIO_FUNC51_IN_INV_SEL_S = 6
const GPIO_SIG51_IN_SEL_S = 7
const GPIO_FUNC52_IN_SEL_S = 0
const GPIO_FUNC52_IN_INV_SEL_S = 6
const GPIO_SIG52_IN_SEL_S = 7
const GPIO_FUNC53_IN_SEL_S = 0
const GPIO_FUNC53_IN_INV_SEL_S = 6
const GPIO_SIG53_IN_SEL_S = 7
const GPIO_FUNC54_IN_SEL_S = 0
const GPIO_FUNC54_IN_INV_SEL_S = 6
const GPIO_SIG54_IN_SEL_S = 7
const GPIO_FUNC55_IN_SEL_S = 0
const GPIO_FUNC55_IN_INV_SEL_S = 6
const GPIO_SIG55_IN_SEL_S = 7
const GPIO_FUNC56_IN_SEL_S = 0
const GPIO_FUNC56_IN_INV_SEL_S = 6
const GPIO_SIG56_IN_SEL_S = 7
const GPIO_FUNC57_IN_SEL_S = 0
const GPIO_FUNC57_IN_INV_SEL_S = 6
const GPIO_SIG57_IN_SEL_S = 7
const GPIO_FUNC58_IN_SEL_S = 0
const GPIO_FUNC58_IN_INV_SEL_S = 6
const GPIO_SIG58_IN_SEL_S = 7
const GPIO_FUNC59_IN_SEL_S = 0
const GPIO_FUNC59_IN_INV_SEL_S = 6
const GPIO_SIG59_IN_SEL_S = 7
const GPIO_FUNC60_IN_SEL_S = 0
const GPIO_FUNC60_IN_INV_SEL_S = 6
const GPIO_SIG60_IN_SEL_S = 7
const GPIO_FUNC61_IN_SEL_S = 0
const GPIO_FUNC61_IN_INV_SEL_S = 6
const GPIO_SIG61_IN_SEL_S = 7
const GPIO_FUNC62_IN_SEL_S = 0
const GPIO_FUNC62_IN_INV_SEL_S = 6
const GPIO_SIG62_IN_SEL_S = 7
const GPIO_FUNC63_IN_SEL_S = 0
const GPIO_FUNC63_IN_INV_SEL_S = 6
const GPIO_SIG63_IN_SEL_S = 7
const GPIO_FUNC64_IN_SEL_S = 0
const GPIO_FUNC64_IN_INV_SEL_S = 6
const GPIO_SIG64_IN_SEL_S = 7
const GPIO_FUNC65_IN_SEL_S = 0
const GPIO_FUNC65_IN_INV_SEL_S = 6
const GPIO_SIG65_IN_SEL_S = 7
const GPIO_FUNC66_IN_SEL_S = 0
const GPIO_FUNC66_IN_INV_SEL_S = 6
const GPIO_SIG66_IN_SEL_S = 7
const GPIO_FUNC67_IN_SEL_S = 0
const GPIO_FUNC67_IN_INV_SEL_S = 6
const GPIO_SIG67_IN_SEL_S = 7
const GPIO_FUNC68_IN_SEL_S = 0
const GPIO_FUNC68_IN_INV_SEL_S = 6
const GPIO_SIG68_IN_SEL_S = 7
const GPIO_FUNC69_IN_SEL_S = 0
const GPIO_FUNC69_IN_INV_SEL_S = 6
const GPIO_SIG69_IN_SEL_S = 7
const GPIO_FUNC70_IN_SEL_S = 0
const GPIO_FUNC70_IN_INV_SEL_S = 6
const GPIO_SIG70_IN_SEL_S = 7
const GPIO_FUNC71_IN_SEL_S = 0
const GPIO_FUNC71_IN_INV_SEL_S = 6
const GPIO_SIG71_IN_SEL_S = 7
const GPIO_FUNC72_IN_SEL_S = 0
const GPIO_FUNC72_IN_INV_SEL_S = 6
const GPIO_SIG72_IN_SEL_S = 7
const GPIO_FUNC73_IN_SEL_S = 0
const GPIO_FUNC73_IN_INV_SEL_S = 6
const GPIO_SIG73_IN_SEL_S = 7
const GPIO_FUNC77_IN_SEL_S = 0
const GPIO_FUNC77_IN_INV_SEL_S = 6
const GPIO_SIG77_IN_SEL_S = 7
const GPIO_FUNC81_IN_SEL_S = 0
const GPIO_FUNC81_IN_INV_SEL_S = 6
const GPIO_SIG81_IN_SEL_S = 7
const GPIO_FUNC82_IN_SEL_S = 0
const GPIO_FUNC82_IN_INV_SEL_S = 6
const GPIO_SIG82_IN_SEL_S = 7
const GPIO_FUNC87_IN_SEL_S = 0
const GPIO_FUNC87_IN_INV_SEL_S = 6
const GPIO_SIG87_IN_SEL_S = 7
const GPIO_FUNC88_IN_SEL_S = 0
const GPIO_FUNC88_IN_INV_SEL_S = 6
const GPIO_SIG88_IN_SEL_S = 7
const GPIO_FUNC89_IN_SEL_S = 0
const GPIO_FUNC89_IN_INV_SEL_S = 6
const GPIO_SIG89_IN_SEL_S = 7
const GPIO_FUNC90_IN_SEL_S = 0
const GPIO_FUNC90_IN_INV_SEL_S = 6
const GPIO_SIG90_IN_SEL_S = 7
const GPIO_FUNC91_IN_SEL_S = 0
const GPIO_FUNC91_IN_INV_SEL_S = 6
const GPIO_SIG91_IN_SEL_S = 7
const GPIO_FUNC92_IN_SEL_S = 0
const GPIO_FUNC92_IN_INV_SEL_S = 6
const GPIO_SIG92_IN_SEL_S = 7
const GPIO_FUNC93_IN_SEL_S = 0
const GPIO_FUNC93_IN_INV_SEL_S = 6
const GPIO_SIG93_IN_SEL_S = 7
const GPIO_FUNC94_IN_SEL_S = 0
const GPIO_FUNC94_IN_INV_SEL_S = 6
const GPIO_SIG94_IN_SEL_S = 7
const GPIO_FUNC95_IN_SEL_S = 0
const GPIO_FUNC95_IN_INV_SEL_S = 6
const GPIO_SIG95_IN_SEL_S = 7
const GPIO_FUNC97_IN_SEL_S = 0
const GPIO_FUNC97_IN_INV_SEL_S = 6
const GPIO_SIG97_IN_SEL_S = 7
const GPIO_FUNC98_IN_SEL_S = 0
const GPIO_FUNC98_IN_INV_SEL_S = 6
const GPIO_SIG98_IN_SEL_S = 7
const GPIO_FUNC99_IN_SEL_S = 0
const GPIO_FUNC99_IN_INV_SEL_S = 6
const GPIO_SIG99_IN_SEL_S = 7
const GPIO_FUNC100_IN_SEL_S = 0
const GPIO_FUNC100_IN_INV_SEL_S = 6
const GPIO_SIG100_IN_SEL_S = 7
const GPIO_FUNC101_IN_SEL_S = 0
const GPIO_FUNC101_IN_INV_SEL_S = 6
const GPIO_SIG101_IN_SEL_S = 7
const GPIO_FUNC102_IN_SEL_S = 0
const GPIO_FUNC102_IN_INV_SEL_S = 6
const GPIO_SIG102_IN_SEL_S = 7
const GPIO_FUNC103_IN_SEL_S = 0
const GPIO_FUNC103_IN_INV_SEL_S = 6
const GPIO_SIG103_IN_SEL_S = 7
const GPIO_FUNC104_IN_SEL_S = 0
const GPIO_FUNC104_IN_INV_SEL_S = 6
const GPIO_SIG104_IN_SEL_S = 7
const GPIO_FUNC105_IN_SEL_S = 0
const GPIO_FUNC105_IN_INV_SEL_S = 6
const GPIO_SIG105_IN_SEL_S = 7
const GPIO_FUNC106_IN_SEL_S = 0
const GPIO_FUNC106_IN_INV_SEL_S = 6
const GPIO_SIG106_IN_SEL_S = 7
const GPIO_FUNC107_IN_SEL_S = 0
const GPIO_FUNC107_IN_INV_SEL_S = 6
const GPIO_SIG107_IN_SEL_S = 7
const GPIO_FUNC108_IN_SEL_S = 0
const GPIO_FUNC108_IN_INV_SEL_S = 6
const GPIO_SIG108_IN_SEL_S = 7
const GPIO_FUNC109_IN_SEL_S = 0
const GPIO_FUNC109_IN_INV_SEL_S = 6
const GPIO_SIG109_IN_SEL_S = 7
const GPIO_FUNC110_IN_SEL_S = 0
const GPIO_FUNC110_IN_INV_SEL_S = 6
const GPIO_SIG110_IN_SEL_S = 7
const GPIO_FUNC111_IN_SEL_S = 0
const GPIO_FUNC111_IN_INV_SEL_S = 6
const GPIO_SIG111_IN_SEL_S = 7
const GPIO_FUNC112_IN_SEL_S = 0
const GPIO_FUNC112_IN_INV_SEL_S = 6
const GPIO_SIG112_IN_SEL_S = 7
const GPIO_FUNC113_IN_SEL_S = 0
const GPIO_FUNC113_IN_INV_SEL_S = 6
const GPIO_SIG113_IN_SEL_S = 7
const GPIO_FUNC114_IN_SEL_S = 0
const GPIO_FUNC114_IN_INV_SEL_S = 6
const GPIO_SIG114_IN_SEL_S = 7
const GPIO_FUNC115_IN_SEL_S = 0
const GPIO_FUNC115_IN_INV_SEL_S = 6
const GPIO_SIG115_IN_SEL_S = 7
const GPIO_FUNC116_IN_SEL_S = 0
const GPIO_FUNC116_IN_INV_SEL_S = 6
const GPIO_SIG116_IN_SEL_S = 7
const GPIO_FUNC117_IN_SEL_S = 0
const GPIO_FUNC117_IN_INV_SEL_S = 6
const GPIO_SIG117_IN_SEL_S = 7
const GPIO_FUNC118_IN_SEL_S = 0
const GPIO_FUNC118_IN_INV_SEL_S = 6
const GPIO_SIG118_IN_SEL_S = 7
const GPIO_FUNC119_IN_SEL_S = 0
const GPIO_FUNC119_IN_INV_SEL_S = 6
const GPIO_SIG119_IN_SEL_S = 7
const GPIO_FUNC120_IN_SEL_S = 0
const GPIO_FUNC120_IN_INV_SEL_S = 6
const GPIO_SIG120_IN_SEL_S = 7
const GPIO_FUNC121_IN_SEL_S = 0
const GPIO_FUNC121_IN_INV_SEL_S = 6
const GPIO_SIG121_IN_SEL_S = 7
const GPIO_FUNC122_IN_SEL_S = 0
const GPIO_FUNC122_IN_INV_SEL_S = 6
const GPIO_SIG122_IN_SEL_S = 7
const GPIO_FUNC123_IN_SEL_S = 0
const GPIO_FUNC123_IN_INV_SEL_S = 6
const GPIO_SIG123_IN_SEL_S = 7
const GPIO_FUNC124_IN_SEL_S = 0
const GPIO_FUNC124_IN_INV_SEL_S = 6
const GPIO_SIG124_IN_SEL_S = 7
const GPIO_FUNC0_OUT_SEL_S = 0
const GPIO_FUNC0_OUT_INV_SEL_S = 8
const GPIO_FUNC0_OEN_SEL_S = 9
const GPIO_FUNC0_OEN_INV_SEL_S = 10
const GPIO_FUNC1_OUT_SEL_S = 0
const GPIO_FUNC1_OUT_INV_SEL_S = 8
const GPIO_FUNC1_OEN_SEL_S = 9
const GPIO_FUNC1_OEN_INV_SEL_S = 10
const GPIO_FUNC2_OUT_SEL_S = 0
const GPIO_FUNC2_OUT_INV_SEL_S = 8
const GPIO_FUNC2_OEN_SEL_S = 9
const GPIO_FUNC2_OEN_INV_SEL_S = 10
const GPIO_FUNC3_OUT_SEL_S = 0
const GPIO_FUNC3_OUT_INV_SEL_S = 8
const GPIO_FUNC3_OEN_SEL_S = 9
const GPIO_FUNC3_OEN_INV_SEL_S = 10
const GPIO_FUNC4_OUT_SEL_S = 0
const GPIO_FUNC4_OUT_INV_SEL_S = 8
const GPIO_FUNC4_OEN_SEL_S = 9
const GPIO_FUNC4_OEN_INV_SEL_S = 10
const GPIO_FUNC5_OUT_SEL_S = 0
const GPIO_FUNC5_OUT_INV_SEL_S = 8
const GPIO_FUNC5_OEN_SEL_S = 9
const GPIO_FUNC5_OEN_INV_SEL_S = 10
const GPIO_FUNC6_OUT_SEL_S = 0
const GPIO_FUNC6_OUT_INV_SEL_S = 8
const GPIO_FUNC6_OEN_SEL_S = 9
const GPIO_FUNC6_OEN_INV_SEL_S = 10
const GPIO_FUNC7_OUT_SEL_S = 0
const GPIO_FUNC7_OUT_INV_SEL_S = 8
const GPIO_FUNC7_OEN_SEL_S = 9
const GPIO_FUNC7_OEN_INV_SEL_S = 10
const GPIO_FUNC8_OUT_SEL_S = 0
const GPIO_FUNC8_OUT_INV_SEL_S = 8
const GPIO_FUNC8_OEN_SEL_S = 9
const GPIO_FUNC8_OEN_INV_SEL_S = 10
const GPIO_FUNC9_OUT_SEL_S = 0
const GPIO_FUNC9_OUT_INV_SEL_S = 8
const GPIO_FUNC9_OEN_SEL_S = 9
const GPIO_FUNC9_OEN_INV_SEL_S = 10
const GPIO_FUNC10_OUT_SEL_S = 0
const GPIO_FUNC10_OUT_INV_SEL_S = 8
const GPIO_FUNC10_OEN_SEL_S = 9
const GPIO_FUNC10_OEN_INV_SEL_S = 10
const GPIO_FUNC11_OUT_SEL_S = 0
const GPIO_FUNC11_OUT_INV_SEL_S = 8
const GPIO_FUNC11_OEN_SEL_S = 9
const GPIO_FUNC11_OEN_INV_SEL_S = 10
const GPIO_FUNC12_OUT_SEL_S = 0
const GPIO_FUNC12_OUT_INV_SEL_S = 8
const GPIO_FUNC12_OEN_SEL_S = 9
const GPIO_FUNC12_OEN_INV_SEL_S = 10
const GPIO_FUNC13_OUT_SEL_S = 0
const GPIO_FUNC13_OUT_INV_SEL_S = 8
const GPIO_FUNC13_OEN_SEL_S = 9
const GPIO_FUNC13_OEN_INV_SEL_S = 10
const GPIO_FUNC14_OUT_SEL_S = 0
const GPIO_FUNC14_OUT_INV_SEL_S = 8
const GPIO_FUNC14_OEN_SEL_S = 9
const GPIO_FUNC14_OEN_INV_SEL_S = 10
const GPIO_FUNC15_OUT_SEL_S = 0
const GPIO_FUNC15_OUT_INV_SEL_S = 8
const GPIO_FUNC15_OEN_SEL_S = 9
const GPIO_FUNC15_OEN_INV_SEL_S = 10
const GPIO_FUNC16_OUT_SEL_S = 0
const GPIO_FUNC16_OUT_INV_SEL_S = 8
const GPIO_FUNC16_OEN_SEL_S = 9
const GPIO_FUNC16_OEN_INV_SEL_S = 10
const GPIO_FUNC17_OUT_SEL_S = 0
const GPIO_FUNC17_OUT_INV_SEL_S = 8
const GPIO_FUNC17_OEN_SEL_S = 9
const GPIO_FUNC17_OEN_INV_SEL_S = 10
const GPIO_FUNC18_OUT_SEL_S = 0
const GPIO_FUNC18_OUT_INV_SEL_S = 8
const GPIO_FUNC18_OEN_SEL_S = 9
const GPIO_FUNC18_OEN_INV_SEL_S = 10
const GPIO_FUNC19_OUT_SEL_S = 0
const GPIO_FUNC19_OUT_INV_SEL_S = 8
const GPIO_FUNC19_OEN_SEL_S = 9
const GPIO_FUNC19_OEN_INV_SEL_S = 10
const GPIO_FUNC20_OUT_SEL_S = 0
const GPIO_FUNC20_OUT_INV_SEL_S = 8
const GPIO_FUNC20_OEN_SEL_S = 9
const GPIO_FUNC20_OEN_INV_SEL_S = 10
const GPIO_FUNC21_OUT_SEL_S = 0
const GPIO_FUNC21_OUT_INV_SEL_S = 8
const GPIO_FUNC21_OEN_SEL_S = 9
const GPIO_FUNC21_OEN_INV_SEL_S = 10
const GPIO_FUNC22_OUT_SEL_S = 0
const GPIO_FUNC22_OUT_INV_SEL_S = 8
const GPIO_FUNC22_OEN_SEL_S = 9
const GPIO_FUNC22_OEN_INV_SEL_S = 10
const GPIO_FUNC23_OUT_SEL_S = 0
const GPIO_FUNC23_OUT_INV_SEL_S = 8
const GPIO_FUNC23_OEN_SEL_S = 9
const GPIO_FUNC23_OEN_INV_SEL_S = 10
const GPIO_FUNC24_OUT_SEL_S = 0
const GPIO_FUNC24_OUT_INV_SEL_S = 8
const GPIO_FUNC24_OEN_SEL_S = 9
const GPIO_FUNC24_OEN_INV_SEL_S = 10
const GPIO_FUNC25_OUT_SEL_S = 0
const GPIO_FUNC25_OUT_INV_SEL_S = 8
const GPIO_FUNC25_OEN_SEL_S = 9
const GPIO_FUNC25_OEN_INV_SEL_S = 10
const GPIO_FUNC26_OUT_SEL_S = 0
const GPIO_FUNC26_OUT_INV_SEL_S = 8
const GPIO_FUNC26_OEN_SEL_S = 9
const GPIO_FUNC26_OEN_INV_SEL_S = 10
const GPIO_FUNC27_OUT_SEL_S = 0
const GPIO_FUNC27_OUT_INV_SEL_S = 8
const GPIO_FUNC27_OEN_SEL_S = 9
const GPIO_FUNC27_OEN_INV_SEL_S = 10
const GPIO_FUNC28_OUT_SEL_S = 0
const GPIO_FUNC28_OUT_INV_SEL_S = 8
const GPIO_FUNC28_OEN_SEL_S = 9
const GPIO_FUNC28_OEN_INV_SEL_S = 10
const GPIO_FUNC29_OUT_SEL_S = 0
const GPIO_FUNC29_OUT_INV_SEL_S = 8
const GPIO_FUNC29_OEN_SEL_S = 9
const GPIO_FUNC29_OEN_INV_SEL_S = 10
const GPIO_FUNC30_OUT_SEL_S = 0
const GPIO_FUNC30_OUT_INV_SEL_S = 8
const GPIO_FUNC30_OEN_SEL_S = 9
const GPIO_FUNC30_OEN_INV_SEL_S = 10
const GPIO_FUNC31_OUT_SEL_S = 0
const GPIO_FUNC31_OUT_INV_SEL_S = 8
const GPIO_FUNC31_OEN_SEL_S = 9
const GPIO_FUNC31_OEN_INV_SEL_S = 10
const GPIO_FUNC32_OUT_SEL_S = 0
const GPIO_FUNC32_OUT_INV_SEL_S = 8
const GPIO_FUNC32_OEN_SEL_S = 9
const GPIO_FUNC32_OEN_INV_SEL_S = 10
const GPIO_FUNC33_OUT_SEL_S = 0
const GPIO_FUNC33_OUT_INV_SEL_S = 8
const GPIO_FUNC33_OEN_SEL_S = 9
const GPIO_FUNC33_OEN_INV_SEL_S = 10
const GPIO_FUNC34_OUT_SEL_S = 0
const GPIO_FUNC34_OUT_INV_SEL_S = 8
const GPIO_FUNC34_OEN_SEL_S = 9
const GPIO_FUNC34_OEN_INV_SEL_S = 10
const GPIO_CLK_EN_S = 0
const GPIO_DATE_S = 0
const ADC1_GPIO0_CHANNEL = 0
const ADC1_CHANNEL_0_GPIO_NUM = 0
const ADC1_GPIO1_CHANNEL = 1
const ADC1_CHANNEL_1_GPIO_NUM = 1
const ADC1_GPIO2_CHANNEL = 2
const ADC1_CHANNEL_2_GPIO_NUM = 2
const ADC1_GPIO3_CHANNEL = 3
const ADC1_CHANNEL_3_GPIO_NUM = 3
const ADC1_GPIO4_CHANNEL = 4
const ADC1_CHANNEL_4_GPIO_NUM = 4
const ADC1_GPIO5_CHANNEL = 5
const ADC1_CHANNEL_5_GPIO_NUM = 5
const ADC1_GPIO6_CHANNEL = 6
const ADC1_CHANNEL_6_GPIO_NUM = 6
const MSPI_FUNC_NUM = 0
const MSPI_IOMUX_PIN_NUM_HD = 28
const MSPI_IOMUX_PIN_NUM_WP = 26
const MSPI_IOMUX_PIN_NUM_CS0 = 24
const MSPI_IOMUX_PIN_NUM_CLK = 29
const MSPI_IOMUX_PIN_NUM_MOSI = 30
const MSPI_IOMUX_PIN_NUM_MISO = 25
const SPI2_FUNC_NUM = 2
const SPI2_IOMUX_PIN_NUM_MISO = 2
const SPI2_IOMUX_PIN_NUM_HD = 4
const SPI2_IOMUX_PIN_NUM_WP = 5
const SPI2_IOMUX_PIN_NUM_CLK = 6
const SPI2_IOMUX_PIN_NUM_MOSI = 7
const SPI2_IOMUX_PIN_NUM_CS = 16
const SPI_CONF_BITLEN_S = 0
const SPI_UPDATE_S = 23
const SPI_USR_S = 24
const SPI_USR_ADDR_VALUE_S = 0
const SPI_DUMMY_OUT_S = 3
const SPI_FADDR_DUAL_S = 5
const SPI_FADDR_QUAD_S = 6
const SPI_FADDR_OCT_S = 7
const SPI_FCMD_DUAL_S = 8
const SPI_FCMD_QUAD_S = 9
const SPI_FCMD_OCT_S = 10
const SPI_FREAD_DUAL_S = 14
const SPI_FREAD_QUAD_S = 15
const SPI_FREAD_OCT_S = 16
const SPI_Q_POL_S = 18
const SPI_D_POL_S = 19
const SPI_HOLD_POL_S = 20
const SPI_WP_POL_S = 21
const SPI_RD_BIT_ORDER_S = 23
const SPI_WR_BIT_ORDER_S = 25
const SPI_CLKCNT_L_S = 0
const SPI_CLKCNT_H_S = 6
const SPI_CLKCNT_N_S = 12
const SPI_CLKDIV_PRE_S = 18
const SPI_CLK_EQU_SYSCLK_S = 31
const SPI_DOUTDIN_S = 0
const SPI_QPI_MODE_S = 3
const SPI_OPI_MODE_S = 4
const SPI_TSCK_I_EDGE_S = 5
const SPI_CS_HOLD_S = 6
const SPI_CS_SETUP_S = 7
const SPI_RSCK_I_EDGE_S = 8
const SPI_CK_OUT_EDGE_S = 9
const SPI_FWRITE_DUAL_S = 12
const SPI_FWRITE_QUAD_S = 13
const SPI_FWRITE_OCT_S = 14
const SPI_USR_CONF_NXT_S = 15
const SPI_SIO_S = 17
const SPI_USR_MISO_HIGHPART_S = 24
const SPI_USR_MOSI_HIGHPART_S = 25
const SPI_USR_DUMMY_IDLE_S = 26
const SPI_USR_MOSI_S = 27
const SPI_USR_MISO_S = 28
const SPI_USR_DUMMY_S = 29
const SPI_USR_ADDR_S = 30
const SPI_USR_COMMAND_S = 31
const SPI_USR_DUMMY_CYCLELEN_S = 0
const SPI_MST_WFULL_ERR_END_EN_S = 16
const SPI_CS_SETUP_TIME_S = 17
const SPI_CS_HOLD_TIME_S = 22
const SPI_USR_ADDR_BITLEN_S = 27
const SPI_USR_COMMAND_VALUE_S = 0
const SPI_MST_REMPTY_ERR_END_EN_S = 27
const SPI_USR_COMMAND_BITLEN_S = 28
const SPI_MS_DATA_BITLEN_S = 0
const SPI_CS0_DIS_S = 0
const SPI_CS1_DIS_S = 1
const SPI_CS2_DIS_S = 2
const SPI_CS3_DIS_S = 3
const SPI_CS4_DIS_S = 4
const SPI_CS5_DIS_S = 5
const SPI_CK_DIS_S = 6
const SPI_MASTER_CS_POL_S = 7
const SPI_CLK_DATA_DTR_EN_S = 16
const SPI_DATA_DTR_EN_S = 17
const SPI_ADDR_DTR_EN_S = 18
const SPI_CMD_DTR_EN_S = 19
const SPI_SLAVE_CS_POL_S = 23
const SPI_DQS_IDLE_EDGE_S = 24
const SPI_CK_IDLE_EDGE_S = 29
const SPI_CS_KEEP_ACTIVE_S = 30
const SPI_QUAD_DIN_PIN_SWAP_S = 31
const SPI_DIN0_MODE_S = 0
const SPI_DIN1_MODE_S = 2
const SPI_DIN2_MODE_S = 4
const SPI_DIN3_MODE_S = 6
const SPI_DIN4_MODE_S = 8
const SPI_DIN5_MODE_S = 10
const SPI_DIN6_MODE_S = 12
const SPI_DIN7_MODE_S = 14
const SPI_TIMING_HCLK_ACTIVE_S = 16
const SPI_DIN0_NUM_S = 0
const SPI_DIN1_NUM_S = 2
const SPI_DIN2_NUM_S = 4
const SPI_DIN3_NUM_S = 6
const SPI_DIN4_NUM_S = 8
const SPI_DIN5_NUM_S = 10
const SPI_DIN6_NUM_S = 12
const SPI_DIN7_NUM_S = 14
const SPI_DOUT0_MODE_S = 0
const SPI_DOUT1_MODE_S = 1
const SPI_DOUT2_MODE_S = 2
const SPI_DOUT3_MODE_S = 3
const SPI_DOUT4_MODE_S = 4
const SPI_DOUT5_MODE_S = 5
const SPI_DOUT6_MODE_S = 6
const SPI_DOUT7_MODE_S = 7
const SPI_D_DQS_MODE_S = 8
const SPI_DMA_OUTFIFO_EMPTY_S = 0
const SPI_DMA_INFIFO_FULL_S = 1
const SPI_DMA_SLV_SEG_TRANS_EN_S = 18
const SPI_SLV_RX_SEG_TRANS_CLR_EN_S = 19
const SPI_SLV_TX_SEG_TRANS_CLR_EN_S = 20
const SPI_RX_EOF_EN_S = 21
const SPI_DMA_RX_ENA_S = 27
const SPI_DMA_TX_ENA_S = 28
const SPI_RX_AFIFO_RST_S = 29
const SPI_BUF_AFIFO_RST_S = 30
const SPI_DMA_AFIFO_RST_S = 31
const SPI_DMA_INFIFO_FULL_ERR_INT_ENA_S = 0
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ENA_S = 1
const SPI_SLV_EX_QPI_INT_ENA_S = 2
const SPI_SLV_EN_QPI_INT_ENA_S = 3
const SPI_SLV_CMD7_INT_ENA_S = 4
const SPI_SLV_CMD8_INT_ENA_S = 5
const SPI_SLV_CMD9_INT_ENA_S = 6
const SPI_SLV_CMDA_INT_ENA_S = 7
const SPI_SLV_RD_DMA_DONE_INT_ENA_S = 8
const SPI_SLV_WR_DMA_DONE_INT_ENA_S = 9
const SPI_SLV_RD_BUF_DONE_INT_ENA_S = 10
const SPI_SLV_WR_BUF_DONE_INT_ENA_S = 11
const SPI_TRANS_DONE_INT_ENA_S = 12
const SPI_DMA_SEG_TRANS_DONE_INT_ENA_S = 13
const SPI_SEG_MAGIC_ERR_INT_ENA_S = 14
const SPI_SLV_BUF_ADDR_ERR_INT_ENA_S = 15
const SPI_SLV_CMD_ERR_INT_ENA_S = 16
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ENA_S = 17
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ENA_S = 18
const SPI_APP2_INT_ENA_S = 19
const SPI_APP1_INT_ENA_S = 20
const SPI_DMA_INFIFO_FULL_ERR_INT_CLR_S = 0
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_CLR_S = 1
const SPI_SLV_EX_QPI_INT_CLR_S = 2
const SPI_SLV_EN_QPI_INT_CLR_S = 3
const SPI_SLV_CMD7_INT_CLR_S = 4
const SPI_SLV_CMD8_INT_CLR_S = 5
const SPI_SLV_CMD9_INT_CLR_S = 6
const SPI_SLV_CMDA_INT_CLR_S = 7
const SPI_SLV_RD_DMA_DONE_INT_CLR_S = 8
const SPI_SLV_WR_DMA_DONE_INT_CLR_S = 9
const SPI_SLV_RD_BUF_DONE_INT_CLR_S = 10
const SPI_SLV_WR_BUF_DONE_INT_CLR_S = 11
const SPI_TRANS_DONE_INT_CLR_S = 12
const SPI_DMA_SEG_TRANS_DONE_INT_CLR_S = 13
const SPI_SEG_MAGIC_ERR_INT_CLR_S = 14
const SPI_SLV_BUF_ADDR_ERR_INT_CLR_S = 15
const SPI_SLV_CMD_ERR_INT_CLR_S = 16
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_CLR_S = 17
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_CLR_S = 18
const SPI_APP2_INT_CLR_S = 19
const SPI_APP1_INT_CLR_S = 20
const SPI_DMA_INFIFO_FULL_ERR_INT_RAW_S = 0
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_RAW_S = 1
const SPI_SLV_EX_QPI_INT_RAW_S = 2
const SPI_SLV_EN_QPI_INT_RAW_S = 3
const SPI_SLV_CMD7_INT_RAW_S = 4
const SPI_SLV_CMD8_INT_RAW_S = 5
const SPI_SLV_CMD9_INT_RAW_S = 6
const SPI_SLV_CMDA_INT_RAW_S = 7
const SPI_SLV_RD_DMA_DONE_INT_RAW_S = 8
const SPI_SLV_WR_DMA_DONE_INT_RAW_S = 9
const SPI_SLV_RD_BUF_DONE_INT_RAW_S = 10
const SPI_SLV_WR_BUF_DONE_INT_RAW_S = 11
const SPI_TRANS_DONE_INT_RAW_S = 12
const SPI_DMA_SEG_TRANS_DONE_INT_RAW_S = 13
const SPI_SEG_MAGIC_ERR_INT_RAW_S = 14
const SPI_SLV_BUF_ADDR_ERR_INT_RAW_S = 15
const SPI_SLV_CMD_ERR_INT_RAW_S = 16
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_RAW_S = 17
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_RAW_S = 18
const SPI_APP2_INT_RAW_S = 19
const SPI_APP1_INT_RAW_S = 20
const SPI_DMA_INFIFO_FULL_ERR_INT_ST_S = 0
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ST_S = 1
const SPI_SLV_EX_QPI_INT_ST_S = 2
const SPI_SLV_EN_QPI_INT_ST_S = 3
const SPI_SLV_CMD7_INT_ST_S = 4
const SPI_SLV_CMD8_INT_ST_S = 5
const SPI_SLV_CMD9_INT_ST_S = 6
const SPI_SLV_CMDA_INT_ST_S = 7
const SPI_SLV_RD_DMA_DONE_INT_ST_S = 8
const SPI_SLV_WR_DMA_DONE_INT_ST_S = 9
const SPI_SLV_RD_BUF_DONE_INT_ST_S = 10
const SPI_SLV_WR_BUF_DONE_INT_ST_S = 11
const SPI_TRANS_DONE_INT_ST_S = 12
const SPI_DMA_SEG_TRANS_DONE_INT_ST_S = 13
const SPI_SEG_MAGIC_ERR_INT_ST_S = 14
const SPI_SLV_BUF_ADDR_ERR_INT_ST_S = 15
const SPI_SLV_CMD_ERR_INT_ST_S = 16
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ST_S = 17
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ST_S = 18
const SPI_APP2_INT_ST_S = 19
const SPI_APP1_INT_ST_S = 20
const SPI_DMA_INFIFO_FULL_ERR_INT_SET_S = 0
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_SET_S = 1
const SPI_SLV_EX_QPI_INT_SET_S = 2
const SPI_SLV_EN_QPI_INT_SET_S = 3
const SPI_SLV_CMD7_INT_SET_S = 4
const SPI_SLV_CMD8_INT_SET_S = 5
const SPI_SLV_CMD9_INT_SET_S = 6
const SPI_SLV_CMDA_INT_SET_S = 7
const SPI_SLV_RD_DMA_DONE_INT_SET_S = 8
const SPI_SLV_WR_DMA_DONE_INT_SET_S = 9
const SPI_SLV_RD_BUF_DONE_INT_SET_S = 10
const SPI_SLV_WR_BUF_DONE_INT_SET_S = 11
const SPI_TRANS_DONE_INT_SET_S = 12
const SPI_DMA_SEG_TRANS_DONE_INT_SET_S = 13
const SPI_SEG_MAGIC_ERR_INT_SET_S = 14
const SPI_SLV_BUF_ADDR_ERR_INT_SET_S = 15
const SPI_SLV_CMD_ERR_INT_SET_S = 16
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_SET_S = 17
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_SET_S = 18
const SPI_APP2_INT_SET_S = 19
const SPI_APP1_INT_SET_S = 20
const SPI_BUF0_S = 0
const SPI_BUF1_S = 0
const SPI_BUF2_S = 0
const SPI_BUF3_S = 0
const SPI_BUF4_S = 0
const SPI_BUF5_S = 0
const SPI_BUF6_S = 0
const SPI_BUF7_S = 0
const SPI_BUF8_S = 0
const SPI_BUF9_S = 0
const SPI_BUF10_S = 0
const SPI_BUF11_S = 0
const SPI_BUF12_S = 0
const SPI_BUF13_S = 0
const SPI_BUF14_S = 0
const SPI_BUF15_S = 0
const SPI_CLK_MODE_S = 0
const SPI_CLK_MODE_13_S = 2
const SPI_RSCK_DATA_OUT_S = 3
const SPI_SLV_RDDMA_BITLEN_EN_S = 8
const SPI_SLV_WRDMA_BITLEN_EN_S = 9
const SPI_SLV_RDBUF_BITLEN_EN_S = 10
const SPI_SLV_WRBUF_BITLEN_EN_S = 11
const SPI_DMA_SEG_MAGIC_VALUE_S = 22
const SPI_SLAVE_MODE_S = 26
const SPI_SOFT_RESET_S = 27
const SPI_USR_CONF_S = 28
const SPI_MST_FD_WAIT_DMA_TX_DATA_S = 29
const SPI_SLV_DATA_BITLEN_S = 0
const SPI_SLV_LAST_COMMAND_S = 18
const SPI_SLV_LAST_ADDR_S = 26
const SPI_CLK_EN_S = 0
const SPI_MST_CLK_ACTIVE_S = 1
const SPI_MST_CLK_SEL_S = 2
const SPI_DATE_S = 0
const I2C_BBPLL = 0x66
const I2C_BBPLL_HOSTID = 0
const I2C_BBPLL_IR_CAL_DELAY = 0
const I2C_BBPLL_IR_CAL_DELAY_MSB = 3
const I2C_BBPLL_IR_CAL_DELAY_LSB = 0
const I2C_BBPLL_IR_CAL_CK_DIV = 0
const I2C_BBPLL_IR_CAL_CK_DIV_MSB = 7
const I2C_BBPLL_IR_CAL_CK_DIV_LSB = 4
const I2C_BBPLL_IR_CAL_EXT_CAP = 1
const I2C_BBPLL_IR_CAL_EXT_CAP_MSB = 3
const I2C_BBPLL_IR_CAL_EXT_CAP_LSB = 0
const I2C_BBPLL_IR_CAL_ENX_CAP = 1
const I2C_BBPLL_IR_CAL_ENX_CAP_MSB = 4
const I2C_BBPLL_IR_CAL_ENX_CAP_LSB = 4
const I2C_BBPLL_IR_CAL_RSTB = 1
const I2C_BBPLL_IR_CAL_RSTB_MSB = 5
const I2C_BBPLL_IR_CAL_RSTB_LSB = 5
const I2C_BBPLL_IR_CAL_START = 1
const I2C_BBPLL_IR_CAL_START_MSB = 6
const I2C_BBPLL_IR_CAL_START_LSB = 6
const I2C_BBPLL_IR_CAL_UNSTOP = 1
const I2C_BBPLL_IR_CAL_UNSTOP_MSB = 7
const I2C_BBPLL_IR_CAL_UNSTOP_LSB = 7
const I2C_BBPLL_OC_REF_DIV = 2
const I2C_BBPLL_OC_REF_DIV_MSB = 3
const I2C_BBPLL_OC_REF_DIV_LSB = 0
const I2C_BBPLL_OC_DCHGP = 2
const I2C_BBPLL_OC_DCHGP_MSB = 6
const I2C_BBPLL_OC_DCHGP_LSB = 4
const I2C_BBPLL_OC_ENB_FCAL = 2
const I2C_BBPLL_OC_ENB_FCAL_MSB = 7
const I2C_BBPLL_OC_ENB_FCAL_LSB = 7
const I2C_BBPLL_OC_DIV_7_0 = 3
const I2C_BBPLL_OC_DIV_7_0_MSB = 7
const I2C_BBPLL_OC_DIV_7_0_LSB = 0
const I2C_BBPLL_RSTB_DIV_ADC = 4
const I2C_BBPLL_RSTB_DIV_ADC_MSB = 0
const I2C_BBPLL_RSTB_DIV_ADC_LSB = 0
const I2C_BBPLL_MODE_HF = 4
const I2C_BBPLL_MODE_HF_MSB = 1
const I2C_BBPLL_MODE_HF_LSB = 1
const I2C_BBPLL_DIV_ADC = 4
const I2C_BBPLL_DIV_ADC_MSB = 3
const I2C_BBPLL_DIV_ADC_LSB = 2
const I2C_BBPLL_DIV_DAC = 4
const I2C_BBPLL_DIV_DAC_MSB = 4
const I2C_BBPLL_DIV_DAC_LSB = 4
const I2C_BBPLL_DIV_CPU = 4
const I2C_BBPLL_DIV_CPU_MSB = 5
const I2C_BBPLL_DIV_CPU_LSB = 5
const I2C_BBPLL_OC_ENB_VCON = 4
const I2C_BBPLL_OC_ENB_VCON_MSB = 6
const I2C_BBPLL_OC_ENB_VCON_LSB = 6
const I2C_BBPLL_OC_TSCHGP = 4
const I2C_BBPLL_OC_TSCHGP_MSB = 7
const I2C_BBPLL_OC_TSCHGP_LSB = 7
const I2C_BBPLL_OC_DR1 = 5
const I2C_BBPLL_OC_DR1_MSB = 2
const I2C_BBPLL_OC_DR1_LSB = 0
const I2C_BBPLL_OC_DR3 = 5
const I2C_BBPLL_OC_DR3_MSB = 6
const I2C_BBPLL_OC_DR3_LSB = 4
const I2C_BBPLL_EN_USB = 5
const I2C_BBPLL_EN_USB_MSB = 7
const I2C_BBPLL_EN_USB_LSB = 7
const I2C_BBPLL_OC_DCUR = 6
const I2C_BBPLL_OC_DCUR_MSB = 2
const I2C_BBPLL_OC_DCUR_LSB = 0
const I2C_BBPLL_INC_CUR = 6
const I2C_BBPLL_INC_CUR_MSB = 3
const I2C_BBPLL_INC_CUR_LSB = 3
const I2C_BBPLL_OC_DHREF_SEL = 6
const I2C_BBPLL_OC_DHREF_SEL_MSB = 5
const I2C_BBPLL_OC_DHREF_SEL_LSB = 4
const I2C_BBPLL_OC_DLREF_SEL = 6
const I2C_BBPLL_OC_DLREF_SEL_MSB = 7
const I2C_BBPLL_OC_DLREF_SEL_LSB = 6
const I2C_BBPLL_OR_CAL_CAP = 8
const I2C_BBPLL_OR_CAL_CAP_MSB = 3
const I2C_BBPLL_OR_CAL_CAP_LSB = 0
const I2C_BBPLL_OR_CAL_UDF = 8
const I2C_BBPLL_OR_CAL_UDF_MSB = 4
const I2C_BBPLL_OR_CAL_UDF_LSB = 4
const I2C_BBPLL_OR_CAL_OVF = 8
const I2C_BBPLL_OR_CAL_OVF_MSB = 5
const I2C_BBPLL_OR_CAL_OVF_LSB = 5
const I2C_BBPLL_OR_CAL_END = 8
const I2C_BBPLL_OR_CAL_END_MSB = 6
const I2C_BBPLL_OR_CAL_END_LSB = 6
const I2C_BBPLL_OR_LOCK = 8
const I2C_BBPLL_OR_LOCK_MSB = 7
const I2C_BBPLL_OR_LOCK_LSB = 7
const I2C_BBPLL_OC_VCO_DBIAS = 9
const I2C_BBPLL_OC_VCO_DBIAS_MSB = 1
const I2C_BBPLL_OC_VCO_DBIAS_LSB = 0
const I2C_BBPLL_BBADC_DELAY2 = 9
const I2C_BBPLL_BBADC_DELAY2_MSB = 3
const I2C_BBPLL_BBADC_DELAY2_LSB = 2
const I2C_BBPLL_BBADC_DVDD = 9
const I2C_BBPLL_BBADC_DVDD_MSB = 5
const I2C_BBPLL_BBADC_DVDD_LSB = 4
const I2C_BBPLL_BBADC_DREF = 9
const I2C_BBPLL_BBADC_DREF_MSB = 7
const I2C_BBPLL_BBADC_DREF_LSB = 6
const I2C_BBPLL_BBADC_DCUR = 10
const I2C_BBPLL_BBADC_DCUR_MSB = 1
const I2C_BBPLL_BBADC_DCUR_LSB = 0
const I2C_BBPLL_BBADC_INPUT_SHORT = 10
const I2C_BBPLL_BBADC_INPUT_SHORT_MSB = 2
const I2C_BBPLL_BBADC_INPUT_SHORT_LSB = 2
const I2C_BBPLL_ENT_PLL = 10
const I2C_BBPLL_ENT_PLL_MSB = 3
const I2C_BBPLL_ENT_PLL_LSB = 3
const I2C_BBPLL_DTEST = 10
const I2C_BBPLL_DTEST_MSB = 5
const I2C_BBPLL_DTEST_LSB = 4
const I2C_BBPLL_ENT_ADC = 10
const I2C_BBPLL_ENT_ADC_MSB = 7
const I2C_BBPLL_ENT_ADC_LSB = 6
const LP_IO_LP_GPIO_OUT_DATA_S = 0
const LP_IO_LP_GPIO_OUT_DATA_W1TS_S = 0
const LP_IO_LP_GPIO_OUT_DATA_W1TC_S = 0
const LP_IO_LP_GPIO_ENABLE_S = 0
const LP_IO_LP_GPIO_ENABLE_W1TS_S = 0
const LP_IO_LP_GPIO_ENABLE_W1TC_S = 0
const LP_IO_LP_GPIO_STATUS_INTERRUPT_S = 0
const LP_IO_LP_GPIO_STATUS_W1TS_S = 0
const LP_IO_LP_GPIO_STATUS_W1TC_S = 0
const LP_IO_LP_GPIO_IN_DATA_NEXT_S = 0
const LP_IO_LP_GPIO0_SYNC_BYPASS_S = 0
const LP_IO_LP_GPIO0_PAD_DRIVER_S = 2
const LP_IO_LP_GPIO0_EDGE_WAKEUP_CLR_S = 3
const LP_IO_LP_GPIO0_INT_TYPE_S = 7
const LP_IO_LP_GPIO0_WAKEUP_ENABLE_S = 10
const LP_IO_LP_GPIO0_FILTER_EN_S = 11
const LP_IO_LP_GPIO1_SYNC_BYPASS_S = 0
const LP_IO_LP_GPIO1_PAD_DRIVER_S = 2
const LP_IO_LP_GPIO1_EDGE_WAKEUP_CLR_S = 3
const LP_IO_LP_GPIO1_INT_TYPE_S = 7
const LP_IO_LP_GPIO1_WAKEUP_ENABLE_S = 10
const LP_IO_LP_GPIO1_FILTER_EN_S = 11
const LP_IO_LP_GPIO2_SYNC_BYPASS_S = 0
const LP_IO_LP_GPIO2_PAD_DRIVER_S = 2
const LP_IO_LP_GPIO2_EDGE_WAKEUP_CLR_S = 3
const LP_IO_LP_GPIO2_INT_TYPE_S = 7
const LP_IO_LP_GPIO2_WAKEUP_ENABLE_S = 10
const LP_IO_LP_GPIO2_FILTER_EN_S = 11
const LP_IO_LP_GPIO3_SYNC_BYPASS_S = 0
const LP_IO_LP_GPIO3_PAD_DRIVER_S = 2
const LP_IO_LP_GPIO3_EDGE_WAKEUP_CLR_S = 3
const LP_IO_LP_GPIO3_INT_TYPE_S = 7
const LP_IO_LP_GPIO3_WAKEUP_ENABLE_S = 10
const LP_IO_LP_GPIO3_FILTER_EN_S = 11
const LP_IO_LP_GPIO4_SYNC_BYPASS_S = 0
const LP_IO_LP_GPIO4_PAD_DRIVER_S = 2
const LP_IO_LP_GPIO4_EDGE_WAKEUP_CLR_S = 3
const LP_IO_LP_GPIO4_INT_TYPE_S = 7
const LP_IO_LP_GPIO4_WAKEUP_ENABLE_S = 10
const LP_IO_LP_GPIO4_FILTER_EN_S = 11
const LP_IO_LP_GPIO5_SYNC_BYPASS_S = 0
const LP_IO_LP_GPIO5_PAD_DRIVER_S = 2
const LP_IO_LP_GPIO5_EDGE_WAKEUP_CLR_S = 3
const LP_IO_LP_GPIO5_INT_TYPE_S = 7
const LP_IO_LP_GPIO5_WAKEUP_ENABLE_S = 10
const LP_IO_LP_GPIO5_FILTER_EN_S = 11
const LP_IO_LP_GPIO6_SYNC_BYPASS_S = 0
const LP_IO_LP_GPIO6_PAD_DRIVER_S = 2
const LP_IO_LP_GPIO6_EDGE_WAKEUP_CLR_S = 3
const LP_IO_LP_GPIO6_INT_TYPE_S = 7
const LP_IO_LP_GPIO6_WAKEUP_ENABLE_S = 10
const LP_IO_LP_GPIO6_FILTER_EN_S = 11
const LP_IO_LP_GPIO7_SYNC_BYPASS_S = 0
const LP_IO_LP_GPIO7_PAD_DRIVER_S = 2
const LP_IO_LP_GPIO7_EDGE_WAKEUP_CLR_S = 3
const LP_IO_LP_GPIO7_INT_TYPE_S = 7
const LP_IO_LP_GPIO7_WAKEUP_ENABLE_S = 10
const LP_IO_LP_GPIO7_FILTER_EN_S = 11
const LP_IO_LP_GPIO0_MCU_OE_S = 0
const LP_IO_LP_GPIO0_SLP_SEL_S = 1
const LP_IO_LP_GPIO0_MCU_WPD_S = 2
const LP_IO_LP_GPIO0_MCU_WPU_S = 3
const LP_IO_LP_GPIO0_MCU_IE_S = 4
const LP_IO_LP_GPIO0_MCU_DRV_S = 5
const LP_IO_LP_GPIO0_FUN_WPD_S = 7
const LP_IO_LP_GPIO0_FUN_WPU_S = 8
const LP_IO_LP_GPIO0_FUN_IE_S = 9
const LP_IO_LP_GPIO0_FUN_DRV_S = 10
const LP_IO_LP_GPIO0_MCU_SEL_S = 12
const LP_IO_LP_GPIO1_MCU_OE_S = 0
const LP_IO_LP_GPIO1_SLP_SEL_S = 1
const LP_IO_LP_GPIO1_MCU_WPD_S = 2
const LP_IO_LP_GPIO1_MCU_WPU_S = 3
const LP_IO_LP_GPIO1_MCU_IE_S = 4
const LP_IO_LP_GPIO1_MCU_DRV_S = 5
const LP_IO_LP_GPIO1_FUN_WPD_S = 7
const LP_IO_LP_GPIO1_FUN_WPU_S = 8
const LP_IO_LP_GPIO1_FUN_IE_S = 9
const LP_IO_LP_GPIO1_FUN_DRV_S = 10
const LP_IO_LP_GPIO1_MCU_SEL_S = 12
const LP_IO_LP_GPIO2_MCU_OE_S = 0
const LP_IO_LP_GPIO2_SLP_SEL_S = 1
const LP_IO_LP_GPIO2_MCU_WPD_S = 2
const LP_IO_LP_GPIO2_MCU_WPU_S = 3
const LP_IO_LP_GPIO2_MCU_IE_S = 4
const LP_IO_LP_GPIO2_MCU_DRV_S = 5
const LP_IO_LP_GPIO2_FUN_WPD_S = 7
const LP_IO_LP_GPIO2_FUN_WPU_S = 8
const LP_IO_LP_GPIO2_FUN_IE_S = 9
const LP_IO_LP_GPIO2_FUN_DRV_S = 10
const LP_IO_LP_GPIO2_MCU_SEL_S = 12
const LP_IO_LP_GPIO3_MCU_OE_S = 0
const LP_IO_LP_GPIO3_SLP_SEL_S = 1
const LP_IO_LP_GPIO3_MCU_WPD_S = 2
const LP_IO_LP_GPIO3_MCU_WPU_S = 3
const LP_IO_LP_GPIO3_MCU_IE_S = 4
const LP_IO_LP_GPIO3_MCU_DRV_S = 5
const LP_IO_LP_GPIO3_FUN_WPD_S = 7
const LP_IO_LP_GPIO3_FUN_WPU_S = 8
const LP_IO_LP_GPIO3_FUN_IE_S = 9
const LP_IO_LP_GPIO3_FUN_DRV_S = 10
const LP_IO_LP_GPIO3_MCU_SEL_S = 12
const LP_IO_LP_GPIO4_MCU_OE_S = 0
const LP_IO_LP_GPIO4_SLP_SEL_S = 1
const LP_IO_LP_GPIO4_MCU_WPD_S = 2
const LP_IO_LP_GPIO4_MCU_WPU_S = 3
const LP_IO_LP_GPIO4_MCU_IE_S = 4
const LP_IO_LP_GPIO4_MCU_DRV_S = 5
const LP_IO_LP_GPIO4_FUN_WPD_S = 7
const LP_IO_LP_GPIO4_FUN_WPU_S = 8
const LP_IO_LP_GPIO4_FUN_IE_S = 9
const LP_IO_LP_GPIO4_FUN_DRV_S = 10
const LP_IO_LP_GPIO4_MCU_SEL_S = 12
const LP_IO_LP_GPIO5_MCU_OE_S = 0
const LP_IO_LP_GPIO5_SLP_SEL_S = 1
const LP_IO_LP_GPIO5_MCU_WPD_S = 2
const LP_IO_LP_GPIO5_MCU_WPU_S = 3
const LP_IO_LP_GPIO5_MCU_IE_S = 4
const LP_IO_LP_GPIO5_MCU_DRV_S = 5
const LP_IO_LP_GPIO5_FUN_WPD_S = 7
const LP_IO_LP_GPIO5_FUN_WPU_S = 8
const LP_IO_LP_GPIO5_FUN_IE_S = 9
const LP_IO_LP_GPIO5_FUN_DRV_S = 10
const LP_IO_LP_GPIO5_MCU_SEL_S = 12
const LP_IO_LP_GPIO6_MCU_OE_S = 0
const LP_IO_LP_GPIO6_SLP_SEL_S = 1
const LP_IO_LP_GPIO6_MCU_WPD_S = 2
const LP_IO_LP_GPIO6_MCU_WPU_S = 3
const LP_IO_LP_GPIO6_MCU_IE_S = 4
const LP_IO_LP_GPIO6_MCU_DRV_S = 5
const LP_IO_LP_GPIO6_FUN_WPD_S = 7
const LP_IO_LP_GPIO6_FUN_WPU_S = 8
const LP_IO_LP_GPIO6_FUN_IE_S = 9
const LP_IO_LP_GPIO6_FUN_DRV_S = 10
const LP_IO_LP_GPIO6_MCU_SEL_S = 12
const LP_IO_LP_GPIO7_MCU_OE_S = 0
const LP_IO_LP_GPIO7_SLP_SEL_S = 1
const LP_IO_LP_GPIO7_MCU_WPD_S = 2
const LP_IO_LP_GPIO7_MCU_WPU_S = 3
const LP_IO_LP_GPIO7_MCU_IE_S = 4
const LP_IO_LP_GPIO7_MCU_DRV_S = 5
const LP_IO_LP_GPIO7_FUN_WPD_S = 7
const LP_IO_LP_GPIO7_FUN_WPU_S = 8
const LP_IO_LP_GPIO7_FUN_IE_S = 9
const LP_IO_LP_GPIO7_FUN_DRV_S = 10
const LP_IO_LP_GPIO7_MCU_SEL_S = 12
const LP_IO_LP_GPIO_STATUS_INTERRUPT_NEXT_S = 0
const LP_IO_LP_DEBUG_SEL0_S = 0
const LP_IO_LP_DEBUG_SEL1_S = 7
const LP_IO_LP_DEBUG_SEL2_S = 14
const LP_IO_LP_DEBUG_SEL3_S = 21
const LP_IO_LP_DEBUG_SEL4_S = 0
const LP_IO_LP_I2C_SDA_IE_S = 30
const LP_IO_LP_I2C_SCL_IE_S = 31
const LP_IO_LP_IO_DATE_S = 0
const LP_IO_CLK_EN_S = 31
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_CLOSE_FLASH_ENA_S = 6
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_PD_RF_ENA_S = 7
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_INTR_WAIT_S = 8
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_RESET_WAIT_S = 18
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_CNT_CLR_S = 28
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_INTR_ENA_S = 29
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_RESET_SEL_S = 30
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_RESET_ENA_S = 31
const LP_ANALOG_PERI_LP_ANA_BOD_MODE1_RESET_ENA_S = 31
const LP_ANALOG_PERI_LP_ANA_CK_GLITCH_RESET_ENA_S = 31
const LP_ANALOG_PERI_LP_ANA_ANA_FIB_ENA_S = 0
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_INT_RAW_S = 31
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_INT_ST_S = 31
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_INT_ENA_S = 31
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_INT_CLR_S = 31
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_LP_INT_RAW_S = 31
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_LP_INT_ST_S = 31
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_LP_INT_ENA_S = 31
const LP_ANALOG_PERI_LP_ANA_BOD_MODE0_LP_INT_CLR_S = 31
const LP_ANALOG_PERI_LP_ANA_LP_ANALOG_PERI_LP_ANA_DATE_S = 0
const LP_ANALOG_PERI_LP_ANA_CLK_EN_S = 31
const LP_CLKRST_SLOW_CLK_SEL_S = 0
const LP_CLKRST_FAST_CLK_SEL_S = 2
const LP_CLKRST_LP_PERI_DIV_NUM_S = 3
const LP_CLKRST_AON_SLOW_OEN_S = 0
const LP_CLKRST_AON_FAST_OEN_S = 1
const LP_CLKRST_SOSC_OEN_S = 2
const LP_CLKRST_FOSC_OEN_S = 3
const LP_CLKRST_OSC32K_OEN_S = 4
const LP_CLKRST_XTAL32K_OEN_S = 5
const LP_CLKRST_CORE_EFUSE_OEN_S = 6
const LP_CLKRST_SLOW_OEN_S = 7
const LP_CLKRST_FAST_OEN_S = 8
const LP_CLKRST_RNG_OEN_S = 9
const LP_CLKRST_LPBUS_OEN_S = 10
const LP_CLKRST_FAST_ORI_GATE_S = 31
const LP_CLKRST_AON_EFUSE_CORE_RESET_EN_S = 28
const LP_CLKRST_LP_TIMER_RESET_EN_S = 29
const LP_CLKRST_WDT_RESET_EN_S = 30
const LP_CLKRST_ANA_PERI_RESET_EN_S = 31
const LP_CLKRST_RESET_CAUSE_S = 0
const LP_CLKRST_CORE0_RESET_FLAG_S = 5
const LP_CLKRST_CORE0_RESET_CAUSE_CLR_S = 29
const LP_CLKRST_CORE0_RESET_FLAG_SET_S = 30
const LP_CLKRST_CORE0_RESET_FLAG_CLR_S = 31
const LP_CLKRST_RTC_WDT_CPU_RESET_LENGTH_S = 22
const LP_CLKRST_RTC_WDT_CPU_RESET_EN_S = 25
const LP_CLKRST_CPU_STALL_WAIT_S = 26
const LP_CLKRST_CPU_STALL_EN_S = 31
const LP_CLKRST_FOSC_DFREQ_S = 22
const LP_CLKRST_RC32K_DFREQ_S = 22
const LP_CLKRST_ICG_HP_XTAL32K_S = 28
const LP_CLKRST_ICG_HP_SOSC_S = 29
const LP_CLKRST_ICG_HP_OSC32K_S = 30
const LP_CLKRST_ICG_HP_FOSC_S = 31
const LP_CLKRST_LPMEM_CLK_FORCE_ON_S = 31
const LP_CLKRST_LP_I2C_CLK_SEL_S = 30
const LP_CLKRST_LP_UART_CLK_SEL_S = 31
const LP_CLKRST_DRES_XTAL32K_S = 22
const LP_CLKRST_DGM_XTAL32K_S = 25
const LP_CLKRST_DBUF_XTAL32K_S = 28
const LP_CLKRST_DAC_XTAL32K_S = 29
const LP_CLKRST_CLKRST_DATE_S = 0
const LP_CLKRST_CLK_EN_S = 31
const LP_I2C_SCL_LOW_PERIOD_S = 0
const LP_I2C_SDA_FORCE_OUT_S = 0
const LP_I2C_SCL_FORCE_OUT_S = 1
const LP_I2C_SAMPLE_SCL_LEVEL_S = 2
const LP_I2C_RX_FULL_ACK_LEVEL_S = 3
const LP_I2C_TRANS_START_S = 5
const LP_I2C_TX_LSB_FIRST_S = 6
const LP_I2C_RX_LSB_FIRST_S = 7
const LP_I2C_CLK_EN_S = 8
const LP_I2C_ARBITRATION_EN_S = 9
const LP_I2C_FSM_RST_S = 10
const LP_I2C_CONF_UPGATE_S = 11
const LP_I2C_RESP_REC_S = 0
const LP_I2C_ARB_LOST_S = 3
const LP_I2C_BUS_BUSY_S = 4
const LP_I2C_RXFIFO_CNT_S = 8
const LP_I2C_TXFIFO_CNT_S = 18
const LP_I2C_SCL_MAIN_STATE_LAST_S = 24
const LP_I2C_SCL_STATE_LAST_S = 28
const LP_I2C_TIME_OUT_VALUE_S = 0
const LP_I2C_TIME_OUT_EN_S = 5
const LP_I2C_RXFIFO_RADDR_S = 0
const LP_I2C_RXFIFO_WADDR_S = 5
const LP_I2C_TXFIFO_RADDR_S = 10
const LP_I2C_TXFIFO_WADDR_S = 15
const LP_I2C_RXFIFO_WM_THRHD_S = 0
const LP_I2C_TXFIFO_WM_THRHD_S = 5
const LP_I2C_NONFIFO_EN_S = 10
const LP_I2C_RX_FIFO_RST_S = 12
const LP_I2C_TX_FIFO_RST_S = 13
const LP_I2C_FIFO_PRT_EN_S = 14
const LP_I2C_FIFO_RDATA_S = 0
const LP_I2C_RXFIFO_WM_INT_RAW_S = 0
const LP_I2C_TXFIFO_WM_INT_RAW_S = 1
const LP_I2C_RXFIFO_OVF_INT_RAW_S = 2
const LP_I2C_END_DETECT_INT_RAW_S = 3
const LP_I2C_BYTE_TRANS_DONE_INT_RAW_S = 4
const LP_I2C_ARBITRATION_LOST_INT_RAW_S = 5
const LP_I2C_MST_TXFIFO_UDF_INT_RAW_S = 6
const LP_I2C_TRANS_COMPLETE_INT_RAW_S = 7
const LP_I2C_TIME_OUT_INT_RAW_S = 8
const LP_I2C_TRANS_START_INT_RAW_S = 9
const LP_I2C_NACK_INT_RAW_S = 10
const LP_I2C_TXFIFO_OVF_INT_RAW_S = 11
const LP_I2C_RXFIFO_UDF_INT_RAW_S = 12
const LP_I2C_SCL_ST_TO_INT_RAW_S = 13
const LP_I2C_SCL_MAIN_ST_TO_INT_RAW_S = 14
const LP_I2C_DET_START_INT_RAW_S = 15
const LP_I2C_RXFIFO_WM_INT_CLR_S = 0
const LP_I2C_TXFIFO_WM_INT_CLR_S = 1
const LP_I2C_RXFIFO_OVF_INT_CLR_S = 2
const LP_I2C_END_DETECT_INT_CLR_S = 3
const LP_I2C_BYTE_TRANS_DONE_INT_CLR_S = 4
const LP_I2C_ARBITRATION_LOST_INT_CLR_S = 5
const LP_I2C_MST_TXFIFO_UDF_INT_CLR_S = 6
const LP_I2C_TRANS_COMPLETE_INT_CLR_S = 7
const LP_I2C_TIME_OUT_INT_CLR_S = 8
const LP_I2C_TRANS_START_INT_CLR_S = 9
const LP_I2C_NACK_INT_CLR_S = 10
const LP_I2C_TXFIFO_OVF_INT_CLR_S = 11
const LP_I2C_RXFIFO_UDF_INT_CLR_S = 12
const LP_I2C_SCL_ST_TO_INT_CLR_S = 13
const LP_I2C_SCL_MAIN_ST_TO_INT_CLR_S = 14
const LP_I2C_DET_START_INT_CLR_S = 15
const LP_I2C_RXFIFO_WM_INT_ENA_S = 0
const LP_I2C_TXFIFO_WM_INT_ENA_S = 1
const LP_I2C_RXFIFO_OVF_INT_ENA_S = 2
const LP_I2C_END_DETECT_INT_ENA_S = 3
const LP_I2C_BYTE_TRANS_DONE_INT_ENA_S = 4
const LP_I2C_ARBITRATION_LOST_INT_ENA_S = 5
const LP_I2C_MST_TXFIFO_UDF_INT_ENA_S = 6
const LP_I2C_TRANS_COMPLETE_INT_ENA_S = 7
const LP_I2C_TIME_OUT_INT_ENA_S = 8
const LP_I2C_TRANS_START_INT_ENA_S = 9
const LP_I2C_NACK_INT_ENA_S = 10
const LP_I2C_TXFIFO_OVF_INT_ENA_S = 11
const LP_I2C_RXFIFO_UDF_INT_ENA_S = 12
const LP_I2C_SCL_ST_TO_INT_ENA_S = 13
const LP_I2C_SCL_MAIN_ST_TO_INT_ENA_S = 14
const LP_I2C_DET_START_INT_ENA_S = 15
const LP_I2C_RXFIFO_WM_INT_ST_S = 0
const LP_I2C_TXFIFO_WM_INT_ST_S = 1
const LP_I2C_RXFIFO_OVF_INT_ST_S = 2
const LP_I2C_END_DETECT_INT_ST_S = 3
const LP_I2C_BYTE_TRANS_DONE_INT_ST_S = 4
const LP_I2C_ARBITRATION_LOST_INT_ST_S = 5
const LP_I2C_MST_TXFIFO_UDF_INT_ST_S = 6
const LP_I2C_TRANS_COMPLETE_INT_ST_S = 7
const LP_I2C_TIME_OUT_INT_ST_S = 8
const LP_I2C_TRANS_START_INT_ST_S = 9
const LP_I2C_NACK_INT_ST_S = 10
const LP_I2C_TXFIFO_OVF_INT_ST_S = 11
const LP_I2C_RXFIFO_UDF_INT_ST_S = 12
const LP_I2C_SCL_ST_TO_INT_ST_S = 13
const LP_I2C_SCL_MAIN_ST_TO_INT_ST_S = 14
const LP_I2C_DET_START_INT_ST_S = 15
const LP_I2C_SDA_HOLD_TIME_S = 0
const LP_I2C_SDA_SAMPLE_TIME_S = 0
const LP_I2C_SCL_HIGH_PERIOD_S = 0
const LP_I2C_SCL_WAIT_HIGH_PERIOD_S = 9
const LP_I2C_SCL_START_HOLD_TIME_S = 0
const LP_I2C_SCL_RSTART_SETUP_TIME_S = 0
const LP_I2C_SCL_STOP_HOLD_TIME_S = 0
const LP_I2C_SCL_STOP_SETUP_TIME_S = 0
const LP_I2C_SCL_FILTER_THRES_S = 0
const LP_I2C_SDA_FILTER_THRES_S = 4
const LP_I2C_SCL_FILTER_EN_S = 8
const LP_I2C_SDA_FILTER_EN_S = 9
const LP_I2C_SCLK_DIV_NUM_S = 0
const LP_I2C_SCLK_DIV_A_S = 8
const LP_I2C_SCLK_DIV_B_S = 14
const LP_I2C_SCLK_SEL_S = 20
const LP_I2C_SCLK_ACTIVE_S = 21
const LP_I2C_COMMAND0_S = 0
const LP_I2C_COMMAND0_DONE_S = 31
const LP_I2C_COMMAND1_S = 0
const LP_I2C_COMMAND1_DONE_S = 31
const LP_I2C_COMMAND2_S = 0
const LP_I2C_COMMAND2_DONE_S = 31
const LP_I2C_COMMAND3_S = 0
const LP_I2C_COMMAND3_DONE_S = 31
const LP_I2C_COMMAND4_S = 0
const LP_I2C_COMMAND4_DONE_S = 31
const LP_I2C_COMMAND5_S = 0
const LP_I2C_COMMAND5_DONE_S = 31
const LP_I2C_COMMAND6_S = 0
const LP_I2C_COMMAND6_DONE_S = 31
const LP_I2C_COMMAND7_S = 0
const LP_I2C_COMMAND7_DONE_S = 31
const LP_I2C_SCL_ST_TO_LP_I2C_S = 0
const LP_I2C_SCL_MAIN_ST_TO_LP_I2C_S = 0
const LP_I2C_SCL_RST_SLV_EN_S = 0
const LP_I2C_SCL_RST_SLV_NUM_S = 1
const LP_I2C_SCL_PD_EN_S = 6
const LP_I2C_SDA_PD_EN_S = 7
const LP_I2C_DATE_S = 0
const LP_I2C_TXFIFO_START_ADDR_S = 0
const LP_I2C_RXFIFO_START_ADDR_S = 0
const LP_WDT_WDT_CHIP_RESET_WIDTH_S = 0
const LP_WDT_WDT_CHIP_RESET_EN_S = 8
const LP_WDT_WDT_PAUSE_IN_SLP_S = 9
const LP_WDT_WDT_APPCPU_RESET_EN_S = 10
const LP_WDT_WDT_PROCPU_RESET_EN_S = 11
const LP_WDT_WDT_FLASHBOOT_MOD_EN_S = 12
const LP_WDT_WDT_SYS_RESET_LENGTH_S = 13
const LP_WDT_WDT_CPU_RESET_LENGTH_S = 16
const LP_WDT_WDT_STG3_S = 19
const LP_WDT_WDT_STG2_S = 22
const LP_WDT_WDT_STG1_S = 25
const LP_WDT_WDT_STG0_S = 28
const LP_WDT_WDT_EN_S = 31
const LP_WDT_WDT_STG0_HOLD_S = 0
const LP_WDT_WDT_STG1_HOLD_S = 0
const LP_WDT_WDT_STG2_HOLD_S = 0
const LP_WDT_WDT_STG3_HOLD_S = 0
const LP_WDT_RTC_WDT_FEED_S = 31
const LP_WDT_WDT_WKEY_S = 0
const LP_WDT_SWD_RESET_FLAG_S = 0
const LP_WDT_SWD_AUTO_FEED_EN_S = 18
const LP_WDT_SWD_RST_FLAG_CLR_S = 19
const LP_WDT_SWD_SIGNAL_WIDTH_S = 20
const LP_WDT_SWD_DISABLE_S = 30
const LP_WDT_SWD_FEED_S = 31
const LP_WDT_SWD_WKEY_S = 0
const LP_WDT_SUPER_WDT_INT_RAW_S = 30
const LP_WDT_LP_WDT_INT_RAW_S = 31
const LP_WDT_SUPER_WDT_INT_ST_S = 30
const LP_WDT_LP_WDT_INT_ST_S = 31
const LP_WDT_SUPER_WDT_INT_ENA_S = 30
const LP_WDT_LP_WDT_INT_ENA_S = 31
const LP_WDT_SUPER_WDT_INT_CLR_S = 30
const LP_WDT_LP_WDT_INT_CLR_S = 31
const LP_WDT_LP_WDT_DATE_S = 0
const LP_WDT_CLK_EN_S = 31

type X__int8T c.Char
type X__uint8T c.Char
type X__int16T int16
type X__uint16T uint16
type X__int32T c.Int
type X__uint32T c.Uint
type X__int64T c.LongLong
type X__uint64T c.UlongLong
type X__intLeast8T c.Char
type X__uintLeast8T c.Char
type X__intLeast16T int16
type X__uintLeast16T uint16
type X__intLeast32T c.Int
type X__uintLeast32T c.Uint
type X__intLeast64T c.LongLong
type X__uintLeast64T c.UlongLong
type X__intmaxT c.LongLong
type X__uintmaxT c.UlongLong
type X__intptrT c.Int
type X__uintptrT c.Uint
type IntLeast8T X__intLeast8T
type UintLeast8T X__uintLeast8T
type IntLeast16T X__intLeast16T
type UintLeast16T X__uintLeast16T
type IntLeast32T X__intLeast32T
type UintLeast32T X__uintLeast32T
type IntLeast64T X__intLeast64T
type UintLeast64T X__uintLeast64T
type IntFast8T c.Char
type UintFast8T c.Char
type IntFast16T int16
type UintFast16T uint16
type IntFast32T c.Int
type UintFast32T c.Uint
type IntFast64T c.LongLong
type UintFast64T c.UlongLong
type WcharT c.Int
type PtrdiffT c.Int

type MaxAlignT struct {
	X__clangMaxAlignNonce1 c.LongLong
	X__clangMaxAlignNonce2 c.Double
}
type WintT c.Uint
type X__blkcntT c.Long
type X__blksizeT c.Long
type X__fsblkcntT X__uint64T
type X__fsfilcntT X__uint32T
type X_offT c.Long
type X__pidT c.Int
type X__devT int16
type X__uidT uint16
type X__gidT uint16
type X__idT X__uint32T
type X__inoT uint16
type X__modeT X__uint32T
type X_off64T c.LongLong
type X__offT X_offT
type X__loffT X_off64T
type X__keyT c.Long
type X_fposT c.Long
type X__sizeT c.Uint
type X_ssizeT c.Int
type X__ssizeT X_ssizeT

type X_mbstateT struct {
	X__count c.Int
	X__value struct {
		X__wch WintT
	}
}
type X_iconvT c.Pointer
type X__clockT c.Ulong
type X__timeT X__intLeast64T
type X__clockidT c.Ulong
type X__daddrT c.Long
type X__timerT c.Ulong
type X__saFamilyT X__uint8T
type X__socklenT X__uint32T
type X__nlItem c.Int
type X__nlinkT uint16
type X__susecondsT c.Long
type X__usecondsT c.Ulong
type X__vaList c.Pointer
type X__ULong c.Ulong

type X__lock struct {
	Unused [8]uint8
}
type X_LOCKT *X__lock
type X_lockT X_LOCKT
type X_flockT X_LOCKT

type X_reent struct {
	Unused [8]uint8
}

type X__localeT struct {
	Unused [8]uint8
}

type X_Bigint struct {
	X_next   *X_Bigint
	X_k      c.Int
	X_maxwds c.Int
	X_sign   c.Int
	X_wds    c.Int
	X_x      [1]X__ULong
}

type X__tm struct {
	X__tmSec   c.Int
	X__tmMin   c.Int
	X__tmHour  c.Int
	X__tmMday  c.Int
	X__tmMon   c.Int
	X__tmYear  c.Int
	X__tmWday  c.Int
	X__tmYday  c.Int
	X__tmIsdst c.Int
}

type X_onExitArgs struct {
	X_fnargs    [32]c.Pointer
	X_dsoHandle [32]c.Pointer
	X_fntypes   X__ULong
	X_isCxa     X__ULong
}

type X_atexit struct {
	X_next          *X_atexit
	X_ind           c.Int
	X_fns           [32]c.Pointer
	X_onExitArgsPtr *X_onExitArgs
}

type X__sbuf struct {
	X_base *c.Char
	X_size c.Int
}

type X__sFILE struct {
	X_p       *c.Char
	X_r       c.Int
	X_w       c.Int
	X_flags   int16
	X_file    int16
	X_bf      X__sbuf
	X_lbfsize c.Int
	X_data    *X_reent
	X_cookie  c.Pointer
	X_read    c.Pointer
	X_write   c.Pointer
	X_seek    c.Pointer
	X_close   c.Pointer
	X_ub      X__sbuf
	X_up      *c.Char
	X_ur      c.Int
	X_ubuf    [3]c.Char
	X_nbuf    [1]c.Char
	X_lb      X__sbuf
	X_blksize c.Int
	X_offset  X_offT
	X_lock    X_flockT
	X_mbstate X_mbstateT
	X_flags2  c.Int
}
type X__FILE X__sFILE

type X_glue struct {
	X_next  *X_glue
	X_niobs c.Int
	X_iobs  *X__FILE
}

type X_rand48 struct {
	X_seed     [3]uint16
	X_mult     [3]uint16
	X_add      uint16
	X_randNext c.UlongLong
}

type X_mprec struct {
	X_result   *X_Bigint
	X_resultK  c.Int
	X_p5s      *X_Bigint
	X_freelist **X_Bigint
}

type X_miscReent struct {
	X_strtokLast     *c.Char
	X_mblenState     X_mbstateT
	X_wctombState    X_mbstateT
	X_mbtowcState    X_mbstateT
	X_l64aBuf        [8]c.Char
	X_getdateErr     c.Int
	X_mbrlenState    X_mbstateT
	X_mbrtowcState   X_mbstateT
	X_mbsrtowcsState X_mbstateT
	X_wcrtombState   X_mbstateT
	X_wcsrtombsState X_mbstateT
}

type DivT struct {
	Quot c.Int
	Rem  c.Int
}

type LdivT struct {
	Quot c.Long
	Rem  c.Long
}

type LldivT struct {
	Quot c.LongLong
	Rem  c.LongLong
}

// llgo:type C
type X__comparFnT func(c.Pointer, c.Pointer) c.Int

//go:linkname Abort C.abort
func Abort()

type SocRootClkT c.Int

const (
	SOC_ROOT_CLK_INT_RC_FAST  SocRootClkT = 0
	SOC_ROOT_CLK_INT_RC_SLOW  SocRootClkT = 1
	SOC_ROOT_CLK_EXT_XTAL     SocRootClkT = 2
	SOC_ROOT_CLK_EXT_XTAL32K  SocRootClkT = 3
	SOC_ROOT_CLK_INT_RC32K    SocRootClkT = 4
	SOC_ROOT_CLK_EXT_OSC_SLOW SocRootClkT = 5
)

type SocCpuClkSrcT c.Int

const (
	SOC_CPU_CLK_SRC_XTAL    SocCpuClkSrcT = 0
	SOC_CPU_CLK_SRC_PLL     SocCpuClkSrcT = 1
	SOC_CPU_CLK_SRC_RC_FAST SocCpuClkSrcT = 2
	SOC_CPU_CLK_SRC_INVALID SocCpuClkSrcT = 3
)

type SocRtcSlowClkSrcT c.Int

const (
	SOC_RTC_SLOW_CLK_SRC_RC_SLOW  SocRtcSlowClkSrcT = 0
	SOC_RTC_SLOW_CLK_SRC_XTAL32K  SocRtcSlowClkSrcT = 1
	SOC_RTC_SLOW_CLK_SRC_RC32K    SocRtcSlowClkSrcT = 2
	SOC_RTC_SLOW_CLK_SRC_OSC_SLOW SocRtcSlowClkSrcT = 3
	SOC_RTC_SLOW_CLK_SRC_INVALID  SocRtcSlowClkSrcT = 4
)

type SocRtcFastClkSrcT c.Int

const (
	SOC_RTC_FAST_CLK_SRC_RC_FAST  SocRtcFastClkSrcT = 0
	SOC_RTC_FAST_CLK_SRC_XTAL_D2  SocRtcFastClkSrcT = 1
	SOC_RTC_FAST_CLK_SRC_XTAL_DIV SocRtcFastClkSrcT = 1
	SOC_RTC_FAST_CLK_SRC_INVALID  SocRtcFastClkSrcT = 2
)

type SocXtalFreqT c.Int

const SOC_XTAL_FREQ_40M SocXtalFreqT = 40

type SocModuleClkT c.Int

const (
	SOC_MOD_CLK_CPU       SocModuleClkT = 1
	SOC_MOD_CLK_RTC_FAST  SocModuleClkT = 2
	SOC_MOD_CLK_RTC_SLOW  SocModuleClkT = 3
	SOC_MOD_CLK_PLL_F80M  SocModuleClkT = 4
	SOC_MOD_CLK_PLL_F160M SocModuleClkT = 5
	SOC_MOD_CLK_PLL_F240M SocModuleClkT = 6
	SOC_MOD_CLK_XTAL32K   SocModuleClkT = 7
	SOC_MOD_CLK_RC_FAST   SocModuleClkT = 8
	SOC_MOD_CLK_XTAL      SocModuleClkT = 9
	SOC_MOD_CLK_XTAL_D2   SocModuleClkT = 10
	SOC_MOD_CLK_INVALID   SocModuleClkT = 11
)

type SocPeriphSystimerClkSrcT c.Int

const (
	SYSTIMER_CLK_SRC_XTAL    SocPeriphSystimerClkSrcT = 9
	SYSTIMER_CLK_SRC_RC_FAST SocPeriphSystimerClkSrcT = 8
	SYSTIMER_CLK_SRC_DEFAULT SocPeriphSystimerClkSrcT = 9
)

type SocPeriphGptimerClkSrcT c.Int

const (
	GPTIMER_CLK_SRC_PLL_F80M SocPeriphGptimerClkSrcT = 4
	GPTIMER_CLK_SRC_RC_FAST  SocPeriphGptimerClkSrcT = 8
	GPTIMER_CLK_SRC_XTAL     SocPeriphGptimerClkSrcT = 9
	GPTIMER_CLK_SRC_DEFAULT  SocPeriphGptimerClkSrcT = 4
)

type SocPeriphTgClkSrcLegacyT c.Int

const (
	TIMER_SRC_CLK_PLL_F80M SocPeriphTgClkSrcLegacyT = 4
	TIMER_SRC_CLK_XTAL     SocPeriphTgClkSrcLegacyT = 9
	TIMER_SRC_CLK_DEFAULT  SocPeriphTgClkSrcLegacyT = 4
)

type SocPeriphRmtClkSrcT c.Int

const (
	RMT_CLK_SRC_PLL_F80M SocPeriphRmtClkSrcT = 4
	RMT_CLK_SRC_RC_FAST  SocPeriphRmtClkSrcT = 8
	RMT_CLK_SRC_XTAL     SocPeriphRmtClkSrcT = 9
	RMT_CLK_SRC_DEFAULT  SocPeriphRmtClkSrcT = 4
)

type SocPeriphRmtClkSrcLegacyT c.Int

const (
	RMT_BASECLK_PLL_F80M SocPeriphRmtClkSrcLegacyT = 4
	RMT_BASECLK_XTAL     SocPeriphRmtClkSrcLegacyT = 9
	RMT_BASECLK_DEFAULT  SocPeriphRmtClkSrcLegacyT = 4
)

type SocPeriphTemperatureSensorClkSrcT c.Int

const (
	TEMPERATURE_SENSOR_CLK_SRC_XTAL    SocPeriphTemperatureSensorClkSrcT = 9
	TEMPERATURE_SENSOR_CLK_SRC_RC_FAST SocPeriphTemperatureSensorClkSrcT = 8
	TEMPERATURE_SENSOR_CLK_SRC_DEFAULT SocPeriphTemperatureSensorClkSrcT = 9
)

type SocPeriphUartClkSrcLegacyT c.Int

const (
	UART_SCLK_PLL_F80M SocPeriphUartClkSrcLegacyT = 4
	UART_SCLK_RTC      SocPeriphUartClkSrcLegacyT = 8
	UART_SCLK_XTAL     SocPeriphUartClkSrcLegacyT = 9
	UART_SCLK_DEFAULT  SocPeriphUartClkSrcLegacyT = 4
)

type SocPeriphLpUartClkSrcT c.Int

const (
	LP_UART_SCLK_LP_FAST SocPeriphLpUartClkSrcT = 2
	LP_UART_SCLK_XTAL_D2 SocPeriphLpUartClkSrcT = 10
	LP_UART_SCLK_DEFAULT SocPeriphLpUartClkSrcT = 2
)

type SocPeriphMcpwmTimerClkSrcT c.Int

const (
	MCPWM_TIMER_CLK_SRC_PLL160M SocPeriphMcpwmTimerClkSrcT = 5
	MCPWM_TIMER_CLK_SRC_XTAL    SocPeriphMcpwmTimerClkSrcT = 9
	MCPWM_TIMER_CLK_SRC_DEFAULT SocPeriphMcpwmTimerClkSrcT = 5
)

type SocPeriphMcpwmCaptureClkSrcT c.Int

const (
	MCPWM_CAPTURE_CLK_SRC_PLL160M SocPeriphMcpwmCaptureClkSrcT = 5
	MCPWM_CAPTURE_CLK_SRC_XTAL    SocPeriphMcpwmCaptureClkSrcT = 9
	MCPWM_CAPTURE_CLK_SRC_DEFAULT SocPeriphMcpwmCaptureClkSrcT = 5
)

type SocPeriphMcpwmCarrierClkSrcT c.Int

const (
	MCPWM_CARRIER_CLK_SRC_PLL160M SocPeriphMcpwmCarrierClkSrcT = 5
	MCPWM_CARRIER_CLK_SRC_XTAL    SocPeriphMcpwmCarrierClkSrcT = 9
	MCPWM_CARRIER_CLK_SRC_DEFAULT SocPeriphMcpwmCarrierClkSrcT = 5
)

type SocPeriphI2sClkSrcT c.Int

const (
	I2S_CLK_SRC_DEFAULT  SocPeriphI2sClkSrcT = 5
	I2S_CLK_SRC_PLL_160M SocPeriphI2sClkSrcT = 5
	I2S_CLK_SRC_XTAL     SocPeriphI2sClkSrcT = 9
	I2S_CLK_SRC_EXTERNAL SocPeriphI2sClkSrcT = -1
)

type SocPeriphI2cClkSrcT c.Int

const (
	I2C_CLK_SRC_XTAL    SocPeriphI2cClkSrcT = 9
	I2C_CLK_SRC_RC_FAST SocPeriphI2cClkSrcT = 8
	I2C_CLK_SRC_DEFAULT SocPeriphI2cClkSrcT = 9
)

type SocPeriphLpI2cClkSrcT c.Int

const (
	LP_I2C_SCLK_LP_FAST SocPeriphLpI2cClkSrcT = 2
	LP_I2C_SCLK_XTAL_D2 SocPeriphLpI2cClkSrcT = 10
	LP_I2C_SCLK_DEFAULT SocPeriphLpI2cClkSrcT = 2
)

type SocPeriphSpiClkSrcT c.Int

const (
	SPI_CLK_SRC_DEFAULT  SocPeriphSpiClkSrcT = 4
	SPI_CLK_SRC_PLL_F80M SocPeriphSpiClkSrcT = 4
	SPI_CLK_SRC_XTAL     SocPeriphSpiClkSrcT = 9
	SPI_CLK_SRC_RC_FAST  SocPeriphSpiClkSrcT = 8
)

type SocPeriphSdmClkSrcT c.Int

const (
	SDM_CLK_SRC_XTAL     SocPeriphSdmClkSrcT = 9
	SDM_CLK_SRC_PLL_F80M SocPeriphSdmClkSrcT = 4
	SDM_CLK_SRC_DEFAULT  SocPeriphSdmClkSrcT = 4
)

type SocPeriphGlitchFilterClkSrcT c.Int

const (
	GLITCH_FILTER_CLK_SRC_XTAL     SocPeriphGlitchFilterClkSrcT = 9
	GLITCH_FILTER_CLK_SRC_PLL_F80M SocPeriphGlitchFilterClkSrcT = 4
	GLITCH_FILTER_CLK_SRC_DEFAULT  SocPeriphGlitchFilterClkSrcT = 4
)

type SocPeriphTwaiClkSrcT c.Int

const (
	TWAI_CLK_SRC_XTAL    SocPeriphTwaiClkSrcT = 9
	TWAI_CLK_SRC_DEFAULT SocPeriphTwaiClkSrcT = 9
)

type SocPeriphAdcDigiClkSrcT c.Int

const (
	ADC_DIGI_CLK_SRC_XTAL     SocPeriphAdcDigiClkSrcT = 9
	ADC_DIGI_CLK_SRC_PLL_F80M SocPeriphAdcDigiClkSrcT = 4
	ADC_DIGI_CLK_SRC_RC_FAST  SocPeriphAdcDigiClkSrcT = 8
	ADC_DIGI_CLK_SRC_DEFAULT  SocPeriphAdcDigiClkSrcT = 4
)

type SocPeriphMwdtClkSrcT c.Int

const (
	MWDT_CLK_SRC_XTAL     SocPeriphMwdtClkSrcT = 9
	MWDT_CLK_SRC_PLL_F80M SocPeriphMwdtClkSrcT = 4
	MWDT_CLK_SRC_RC_FAST  SocPeriphMwdtClkSrcT = 8
	MWDT_CLK_SRC_DEFAULT  SocPeriphMwdtClkSrcT = 9
)

type SocPeriphLedcClkSrcLegacyT c.Int

const (
	LEDC_AUTO_CLK        SocPeriphLedcClkSrcLegacyT = 0
	LEDC_USE_PLL_DIV_CLK SocPeriphLedcClkSrcLegacyT = 4
	LEDC_USE_RC_FAST_CLK SocPeriphLedcClkSrcLegacyT = 8
	LEDC_USE_XTAL_CLK    SocPeriphLedcClkSrcLegacyT = 9
	LEDC_USE_RTC8M_CLK   SocPeriphLedcClkSrcLegacyT = 8
)

type SocPeriphParlioClkSrcT c.Int

const (
	PARLIO_CLK_SRC_XTAL      SocPeriphParlioClkSrcT = 9
	PARLIO_CLK_SRC_PLL_F240M SocPeriphParlioClkSrcT = 6
	PARLIO_CLK_SRC_RC_FAST   SocPeriphParlioClkSrcT = 8
	PARLIO_CLK_SRC_EXTERNAL  SocPeriphParlioClkSrcT = -1
	PARLIO_CLK_SRC_DEFAULT   SocPeriphParlioClkSrcT = 6
)

type SocClkoutSigIdT c.Int

const (
	CLKOUT_SIG_PLL      SocClkoutSigIdT = 1
	CLKOUT_SIG_XTAL     SocClkoutSigIdT = 5
	CLKOUT_SIG_PLL_F80M SocClkoutSigIdT = 13
	CLKOUT_SIG_CPU      SocClkoutSigIdT = 16
	CLKOUT_SIG_AHB      SocClkoutSigIdT = 17
	CLKOUT_SIG_APB      SocClkoutSigIdT = 18
	CLKOUT_SIG_XTAL32K  SocClkoutSigIdT = 21
	CLKOUT_SIG_EXT32K   SocClkoutSigIdT = 22
	CLKOUT_SIG_RC_FAST  SocClkoutSigIdT = 23
	CLKOUT_SIG_RC_32K   SocClkoutSigIdT = 24
	CLKOUT_SIG_RC_SLOW  SocClkoutSigIdT = 25
	CLKOUT_SIG_INVALID  SocClkoutSigIdT = 255
)

type X__gnucVaList c.Pointer
type FposT X_fposT
type OffT X__offT

/** Group: Configuration Register */
/** Type of conf0 register
 *  a
 */

type UhciConf0RegT struct {
	Val c.Uint32T
}

/** Type of conf1 register
 *  a
 */

type UhciConf1RegT struct {
	Val c.Uint32T
}

/** Type of escape_conf register
 *  a
 */

type UhciEscapeConfRegT struct {
	Val c.Uint32T
}

/** Type of hung_conf register
 *  a
 */

type UhciHungConfRegT struct {
	Val c.Uint32T
}

/** Type of ack_num register
 *  a
 */

type UhciAckNumRegT struct {
	Val c.Uint32T
}

/** Type of quick_sent register
 *  a
 */

type UhciQuickSentRegT struct {
	Val c.Uint32T
}

/** Type of reg_qn_word0 register
 *  a
 */

type UhciRegQnWord0RegT struct {
	Val c.Uint32T
}

/** Type of reg_qn_word1 register
 *  a
 */

type UhciRegQnWord1RegT struct {
	Val c.Uint32T
}

/** Type of esc_conf0 register
 *  a
 */

type UhciEscConf0RegT struct {
	Val c.Uint32T
}

/** Type of esc_conf1 register
 *  a
 */

type UhciEscConf1RegT struct {
	Val c.Uint32T
}

/** Type of esc_conf2 register
 *  a
 */

type UhciEscConf2RegT struct {
	Val c.Uint32T
}

/** Type of esc_conf3 register
 *  a
 */

type UhciEscConf3RegT struct {
	Val c.Uint32T
}

/** Type of pkt_thres register
 *  a
 */

type UhciPktThresRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt Register */
/** Type of int_raw register
 *  a
 */

type UhciIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  a
 */

type UhciIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  a
 */

type UhciIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  a
 */

type UhciIntClrRegT struct {
	Val c.Uint32T
}

/** Group: UHCI Status Register */
/** Type of state0 register
 *  a
 */

type UhciState0RegT struct {
	Val c.Uint32T
}

/** Type of state1 register
 *  a
 */

type UhciState1RegT struct {
	Val c.Uint32T
}

/** Type of rx_head register
 *  a
 */

type UhciRxHeadRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  a
 */

type UhciDateRegT struct {
	Val c.Uint32T
}

type UhciDevS struct {
	Conf0      UhciConf0RegT
	IntRaw     UhciIntRawRegT
	IntSt      UhciIntStRegT
	IntEna     UhciIntEnaRegT
	IntClr     UhciIntClrRegT
	Conf1      UhciConf1RegT
	State0     UhciState0RegT
	State1     UhciState1RegT
	EscapeConf UhciEscapeConfRegT
	HungConf   UhciHungConfRegT
	AckNum     UhciAckNumRegT
	RxHead     UhciRxHeadRegT
	QuickSent  UhciQuickSentRegT
	QData      [7]struct {
		Word0 UhciRegQnWord0RegT
		Word1 UhciRegQnWord1RegT
	}
	EscConf0 UhciEscConf0RegT
	EscConf1 UhciEscConf1RegT
	EscConf2 UhciEscConf2RegT
	EscConf3 UhciEscConf3RegT
	PktThres UhciPktThresRegT
	Date     UhciDateRegT
}
type UhciDevT UhciDevS

/** Group: Configuration Register */
/** Type of un_conf0 register
 *  Configuration register 0 for unit n
 */

type PcntUnConf0RegT struct {
	Val c.Uint32T
}

/** Type of un_conf1 register
 *  Configuration register 1 for unit n
 */

type PcntUnConf1RegT struct {
	Val c.Uint32T
}

/** Type of un_conf2 register
 *  Configuration register 2 for unit n
 */

type PcntUnConf2RegT struct {
	Val c.Uint32T
}

/** Type of ctrl register
 *  Control register for all counters
 */

type PcntCtrlRegT struct {
	Val c.Uint32T
}

/** Group: Status Register */
/** Type of un_cnt register
 *  Counter value for unit n
 */

type PcntUnCntRegT struct {
	Val c.Uint32T
}

/** Type of un_status register
 *  PNCT UNITn status register
 */

type PcntUnStatusRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt Register */
/** Type of int_raw register
 *  Interrupt raw status register
 */

type PcntIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  Interrupt status register
 */

type PcntIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  Interrupt enable register
 */

type PcntIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Interrupt clear register
 */

type PcntIntClrRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  PCNT version control register
 */

type PcntDateRegT struct {
	Val c.Uint32T
}

/** Group: Configuration Register */
/** Type of uart0_conf register
 *  UART0 configuration register
 */

type PcrUart0ConfRegT struct {
	Val c.Uint32T
}

/** Type of uart0_sclk_conf register
 *  UART0_SCLK configuration register
 */

type PcrUart0SclkConfRegT struct {
	Val c.Uint32T
}

/** Type of uart0_pd_ctrl register
 *  UART0 power control register
 */

type PcrUart0PdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of uart1_conf register
 *  UART1 configuration register
 */

type PcrUart1ConfRegT struct {
	Val c.Uint32T
}

/** Type of uart1_sclk_conf register
 *  UART1_SCLK configuration register
 */

type PcrUart1SclkConfRegT struct {
	Val c.Uint32T
}

/** Type of uart1_pd_ctrl register
 *  UART1 power control register
 */

type PcrUart1PdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of mspi_conf register
 *  MSPI configuration register
 */

type PcrMspiConfRegT struct {
	Val c.Uint32T
}

/** Type of mspi_clk_conf register
 *  MSPI_CLK configuration register
 */

type PcrMspiClkConfRegT struct {
	Val c.Uint32T
}

/** Type of i2c_conf register
 *  I2C configuration register
 */

type PcrI2cConfRegT struct {
	Val c.Uint32T
}

/** Type of i2c_sclk_conf register
 *  I2C_SCLK configuration register
 */

type PcrI2cSclkConfRegT struct {
	Val c.Uint32T
}

/** Type of uhci_conf register
 *  UHCI configuration register
 */

type PcrUhciConfRegT struct {
	Val c.Uint32T
}

/** Type of rmt_conf register
 *  RMT configuration register
 */

type PcrRmtConfRegT struct {
	Val c.Uint32T
}

/** Type of rmt_sclk_conf register
 *  RMT_SCLK configuration register
 */

type PcrRmtSclkConfRegT struct {
	Val c.Uint32T
}

/** Type of ledc_conf register
 *  LEDC configuration register
 */

type PcrLedcConfRegT struct {
	Val c.Uint32T
}

/** Type of ledc_sclk_conf register
 *  LEDC_SCLK configuration register
 */

type PcrLedcSclkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup0_conf register
 *  TIMERGROUP0 configuration register
 */

type PcrTimergroup0ConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup0_timer_clk_conf register
 *  TIMERGROUP0_TIMER_CLK configuration register
 */

type PcrTimergroup0TimerClkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup0_wdt_clk_conf register
 *  TIMERGROUP0_WDT_CLK configuration register
 */

type PcrTimergroup0WdtClkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup1_conf register
 *  TIMERGROUP1 configuration register
 */

type PcrTimergroup1ConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup1_timer_clk_conf register
 *  TIMERGROUP1_TIMER_CLK configuration register
 */

type PcrTimergroup1TimerClkConfRegT struct {
	Val c.Uint32T
}

/** Type of timergroup1_wdt_clk_conf register
 *  TIMERGROUP1_WDT_CLK configuration register
 */

type PcrTimergroup1WdtClkConfRegT struct {
	Val c.Uint32T
}

/** Type of systimer_conf register
 *  SYSTIMER configuration register
 */

type PcrSystimerConfRegT struct {
	Val c.Uint32T
}

/** Type of systimer_func_clk_conf register
 *  SYSTIMER_FUNC_CLK configuration register
 */

type PcrSystimerFuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of twai0_conf register
 *  TWAI0 configuration register
 */

type PcrTwai0ConfRegT struct {
	Val c.Uint32T
}

/** Type of twai0_func_clk_conf register
 *  TWAI0_FUNC_CLK configuration register
 */

type PcrTwai0FuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of twai1_conf register
 *  TWAI1 configuration register
 */

type PcrTwai1ConfRegT struct {
	Val c.Uint32T
}

/** Type of twai1_func_clk_conf register
 *  TWAI1_FUNC_CLK configuration register
 */

type PcrTwai1FuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_conf register
 *  I2S configuration register
 */

type PcrI2sConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_tx_clkm_conf register
 *  I2S_TX_CLKM configuration register
 */

type PcrI2sTxClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_tx_clkm_div_conf register
 *  I2S_TX_CLKM_DIV configuration register
 */

type PcrI2sTxClkmDivConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_rx_clkm_conf register
 *  I2S_RX_CLKM configuration register
 */

type PcrI2sRxClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of i2s_rx_clkm_div_conf register
 *  I2S_RX_CLKM_DIV configuration register
 */

type PcrI2sRxClkmDivConfRegT struct {
	Val c.Uint32T
}

/** Type of saradc_conf register
 *  SARADC configuration register
 */

type PcrSaradcConfRegT struct {
	Val c.Uint32T
}

/** Type of saradc_clkm_conf register
 *  SARADC_CLKM configuration register
 */

type PcrSaradcClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of tsens_clk_conf register
 *  TSENS_CLK configuration register
 */

type PcrTsensClkConfRegT struct {
	Val c.Uint32T
}

/** Type of usb_device_conf register
 *  USB_DEVICE configuration register
 */

type PcrUsbDeviceConfRegT struct {
	Val c.Uint32T
}

/** Type of intmtx_conf register
 *  INTMTX configuration register
 */

type PcrIntmtxConfRegT struct {
	Val c.Uint32T
}

/** Type of pcnt_conf register
 *  PCNT configuration register
 */

type PcrPcntConfRegT struct {
	Val c.Uint32T
}

/** Type of etm_conf register
 *  ETM configuration register
 */

type PcrEtmConfRegT struct {
	Val c.Uint32T
}

/** Type of pwm_conf register
 *  PWM configuration register
 */

type PcrPwmConfRegT struct {
	Val c.Uint32T
}

/** Type of pwm_clk_conf register
 *  PWM_CLK configuration register
 */

type PcrPwmClkConfRegT struct {
	Val c.Uint32T
}

/** Type of parl_io_conf register
 *  PARL_IO configuration register
 */

type PcrParlIoConfRegT struct {
	Val c.Uint32T
}

/** Type of parl_clk_rx_conf register
 *  PARL_CLK_RX configuration register
 */

type PcrParlClkRxConfRegT struct {
	Val c.Uint32T
}

/** Type of parl_clk_tx_conf register
 *  PARL_CLK_TX configuration register
 */

type PcrParlClkTxConfRegT struct {
	Val c.Uint32T
}

/** Type of sdio_slave_conf register
 *  SDIO_SLAVE configuration register
 */

type PcrSdioSlaveConfRegT struct {
	Val c.Uint32T
}

/** Type of pvt_monitor_conf register
 *  PVT_MONITOR configuration register
 */

type PcrPvtMonitorConfRegT struct {
	Val c.Uint32T
}

/** Type of pvt_monitor_func_clk_conf register
 *  PVT_MONITOR function clock configuration register
 */

type PcrPvtMonitorFuncClkConfRegT struct {
	Val c.Uint32T
}

/** Type of gdma_conf register
 *  GDMA configuration register
 */

type PcrGdmaConfRegT struct {
	Val c.Uint32T
}

/** Type of spi2_conf register
 *  SPI2 configuration register
 */

type PcrSpi2ConfRegT struct {
	Val c.Uint32T
}

/** Type of spi2_clkm_conf register
 *  SPI2_CLKM configuration register
 */

type PcrSpi2ClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of aes_conf register
 *  AES configuration register
 */

type PcrAesConfRegT struct {
	Val c.Uint32T
}

/** Type of sha_conf register
 *  SHA configuration register
 */

type PcrShaConfRegT struct {
	Val c.Uint32T
}

/** Type of rsa_conf register
 *  RSA configuration register
 */

type PcrRsaConfRegT struct {
	Val c.Uint32T
}

/** Type of rsa_pd_ctrl register
 *  RSA power control register
 */

type PcrRsaPdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of ecc_conf register
 *  ECC configuration register
 */

type PcrEccConfRegT struct {
	Val c.Uint32T
}

/** Type of ecc_pd_ctrl register
 *  ECC power control register
 */

type PcrEccPdCtrlRegT struct {
	Val c.Uint32T
}

/** Type of ds_conf register
 *  DS configuration register
 */

type PcrDsConfRegT struct {
	Val c.Uint32T
}

/** Type of hmac_conf register
 *  HMAC configuration register
 */

type PcrHmacConfRegT struct {
	Val c.Uint32T
}

/** Type of iomux_conf register
 *  IOMUX configuration register
 */

type PcrIomuxConfRegT struct {
	Val c.Uint32T
}

/** Type of iomux_clk_conf register
 *  IOMUX_CLK configuration register
 */

type PcrIomuxClkConfRegT struct {
	Val c.Uint32T
}

/** Type of mem_monitor_conf register
 *  MEM_MONITOR configuration register
 */

type PcrMemMonitorConfRegT struct {
	Val c.Uint32T
}

/** Type of regdma_conf register
 *  REGDMA configuration register
 */

type PcrRegdmaConfRegT struct {
	Val c.Uint32T
}

/** Type of retention_conf register
 *  retention configuration register
 */

type PcrRetentionConfRegT struct {
	Val c.Uint32T
}

/** Type of trace_conf register
 *  TRACE configuration register
 */

type PcrTraceConfRegT struct {
	Val c.Uint32T
}

/** Type of assist_conf register
 *  ASSIST configuration register
 */

type PcrAssistConfRegT struct {
	Val c.Uint32T
}

/** Type of cache_conf register
 *  CACHE configuration register
 */

type PcrCacheConfRegT struct {
	Val c.Uint32T
}

/** Type of modem_apb_conf register
 *  MODEM_APB configuration register
 */

type PcrModemApbConfRegT struct {
	Val c.Uint32T
}

/** Type of timeout_conf register
 *  TIMEOUT configuration register
 */

type PcrTimeoutConfRegT struct {
	Val c.Uint32T
}

/** Type of sysclk_conf register
 *  SYSCLK configuration register
 */

type PcrSysclkConfRegT struct {
	Val c.Uint32T
}

/** Type of cpu_waiti_conf register
 *  CPU_WAITI configuration register
 */

type PcrCpuWaitiConfRegT struct {
	Val c.Uint32T
}

/** Type of cpu_freq_conf register
 *  CPU_FREQ configuration register
 */

type PcrCpuFreqConfRegT struct {
	Val c.Uint32T
}

/** Type of ahb_freq_conf register
 *  AHB_FREQ configuration register
 */

type PcrAhbFreqConfRegT struct {
	Val c.Uint32T
}

/** Type of apb_freq_conf register
 *  APB_FREQ configuration register
 */

type PcrApbFreqConfRegT struct {
	Val c.Uint32T
}

/** Type of pll_div_clk_en register
 *  SPLL DIV clock-gating configuration register
 */

type PcrPllDivClkEnRegT struct {
	Val c.Uint32T
}

/** Type of ctrl_clk_out_en register
 *  CLK_OUT_EN configuration register
 */

type PcrCtrlClkOutEnRegT struct {
	Val c.Uint32T
}

/** Type of ctrl_tick_conf register
 *  TICK configuration register
 */

type PcrCtrlTickConfRegT struct {
	Val c.Uint32T
}

/** Type of ctrl_32k_conf register
 *  32KHz clock configuration register
 */

type PcrCtrl32kConfRegT struct {
	Val c.Uint32T
}

/** Type of sram_power_conf register
 *  HP SRAM/ROM configuration register
 */

type PcrSramPowerConfRegT struct {
	Val c.Uint32T
}

/** Type of reset_event_bypass register
 *  reset event bypass backdoor configuration register
 */

type PcrResetEventBypassRegT struct {
	Val c.Uint32T
}

/** Type of clock_gate register
 *  PCR clock gating configure register
 */

type PcrClockGateRegT struct {
	Val c.Uint32T
}

/** Group: Frequency Statistics Register */
/** Type of sysclk_freq_query_0 register
 *  SYSCLK frequency query 0 register
 */

type PcrSysclkFreqQuery0RegT struct {
	Val c.Uint32T
}

/** Group: FPGA Debug Register */
/** Type of fpga_debug register
 *  fpga debug register
 */

type PcrFpgaDebugRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  Date register.
 */

type PcrDateRegT struct {
	Val c.Uint32T
}

type PcrDevT struct {
	Uart0Conf               PcrUart0ConfRegT
	Uart0SclkConf           PcrUart0SclkConfRegT
	Uart0PdCtrl             PcrUart0PdCtrlRegT
	Uart1Conf               PcrUart1ConfRegT
	Uart1SclkConf           PcrUart1SclkConfRegT
	Uart1PdCtrl             PcrUart1PdCtrlRegT
	MspiConf                PcrMspiConfRegT
	MspiClkConf             PcrMspiClkConfRegT
	I2cConf                 PcrI2cConfRegT
	I2cSclkConf             PcrI2cSclkConfRegT
	UhciConf                PcrUhciConfRegT
	RmtConf                 PcrRmtConfRegT
	RmtSclkConf             PcrRmtSclkConfRegT
	LedcConf                PcrLedcConfRegT
	LedcSclkConf            PcrLedcSclkConfRegT
	Timergroup0Conf         PcrTimergroup0ConfRegT
	Timergroup0TimerClkConf PcrTimergroup0TimerClkConfRegT
	Timergroup0WdtClkConf   PcrTimergroup0WdtClkConfRegT
	Timergroup1Conf         PcrTimergroup1ConfRegT
	Timergroup1TimerClkConf PcrTimergroup1TimerClkConfRegT
	Timergroup1WdtClkConf   PcrTimergroup1WdtClkConfRegT
	SystimerConf            PcrSystimerConfRegT
	SystimerFuncClkConf     PcrSystimerFuncClkConfRegT
	Twai0Conf               PcrTwai0ConfRegT
	Twai0FuncClkConf        PcrTwai0FuncClkConfRegT
	Twai1Conf               PcrTwai1ConfRegT
	Twai1FuncClkConf        PcrTwai1FuncClkConfRegT
	I2sConf                 PcrI2sConfRegT
	I2sTxClkmConf           PcrI2sTxClkmConfRegT
	I2sTxClkmDivConf        PcrI2sTxClkmDivConfRegT
	I2sRxClkmConf           PcrI2sRxClkmConfRegT
	I2sRxClkmDivConf        PcrI2sRxClkmDivConfRegT
	SaradcConf              PcrSaradcConfRegT
	SaradcClkmConf          PcrSaradcClkmConfRegT
	TsensClkConf            PcrTsensClkConfRegT
	UsbDeviceConf           PcrUsbDeviceConfRegT
	IntmtxConf              PcrIntmtxConfRegT
	PcntConf                PcrPcntConfRegT
	EtmConf                 PcrEtmConfRegT
	PwmConf                 PcrPwmConfRegT
	PwmClkConf              PcrPwmClkConfRegT
	ParlIoConf              PcrParlIoConfRegT
	ParlClkRxConf           PcrParlClkRxConfRegT
	ParlClkTxConf           PcrParlClkTxConfRegT
	SdioSlaveConf           PcrSdioSlaveConfRegT
	PvtMonitorConf          PcrPvtMonitorConfRegT
	PvtMonitorFuncClkConf   PcrPvtMonitorFuncClkConfRegT
	GdmaConf                PcrGdmaConfRegT
	Spi2Conf                PcrSpi2ConfRegT
	Spi2ClkmConf            PcrSpi2ClkmConfRegT
	AesConf                 PcrAesConfRegT
	ShaConf                 PcrShaConfRegT
	RsaConf                 PcrRsaConfRegT
	RsaPdCtrl               PcrRsaPdCtrlRegT
	EccConf                 PcrEccConfRegT
	EccPdCtrl               PcrEccPdCtrlRegT
	DsConf                  PcrDsConfRegT
	HmacConf                PcrHmacConfRegT
	IomuxConf               PcrIomuxConfRegT
	IomuxClkConf            PcrIomuxClkConfRegT
	MemMonitorConf          PcrMemMonitorConfRegT
	RegdmaConf              PcrRegdmaConfRegT
	RetentionConf           PcrRetentionConfRegT
	TraceConf               PcrTraceConfRegT
	AssistConf              PcrAssistConfRegT
	CacheConf               PcrCacheConfRegT
	ModemApbConf            PcrModemApbConfRegT
	TimeoutConf             PcrTimeoutConfRegT
	SysclkConf              PcrSysclkConfRegT
	CpuWaitiConf            PcrCpuWaitiConfRegT
	CpuFreqConf             PcrCpuFreqConfRegT
	AhbFreqConf             PcrAhbFreqConfRegT
	ApbFreqConf             PcrApbFreqConfRegT
	SysclkFreqQuery0        PcrSysclkFreqQuery0RegT
	PllDivClkEn             PcrPllDivClkEnRegT
	CtrlClkOutEn            PcrCtrlClkOutEnRegT
	CtrlTickConf            PcrCtrlTickConfRegT
	Ctrl32kConf             PcrCtrl32kConfRegT
	SramPowerConf           PcrSramPowerConfRegT
	Reserved13c             [941]c.Uint32T
	ResetEventBypass        PcrResetEventBypassRegT
	FpgaDebug               PcrFpgaDebugRegT
	ClockGate               PcrClockGateRegT
	Date                    PcrDateRegT
}
type ETSSTATUS c.Int

const (
	ETS_OK      ETSSTATUS = 0
	ETS_FAILED  ETSSTATUS = 1
	ETS_PENDING ETSSTATUS = 2
	ETS_BUSY    ETSSTATUS = 3
	ETS_CANCEL  ETSSTATUS = 4
)

type EtsStatusT ETSSTATUS
type ETSSignal c.Uint32T
type ETSParam c.Uint32T

type ETSEventTag struct {
	Unused [8]uint8
}
type ETSEvent ETSEventTag

// llgo:type C
type ETSTask func(*ETSEvent)

// llgo:type C
type EtsIdleCbT func(c.Pointer)

// llgo:type C
type ETSTimerFunc func(c.Pointer)

type X_ETSTIMER_ struct {
	TimerNext   *X_ETSTIMER_
	TimerExpire c.Uint32T
	TimerPeriod c.Uint32T
	TimerFunc   *ETSTimerFunc
	TimerArg    c.Pointer
}
type ETSTimer X_ETSTIMER_

// llgo:type C
type EtsIsrT func(c.Pointer)
type SHATYPE c.Int

const (
	SHA1         SHATYPE = 0
	SHA2_224     SHATYPE = 1
	SHA2_256     SHATYPE = 2
	SHA_TYPE_MAX SHATYPE = 3
)

type SHAContext struct {
	Start      bool
	InHardware bool
	Type       SHATYPE
	State      [16]c.Uint32T
	Buffer     [128]c.Char
	TotalBits  [4]c.Uint32T
}
type SHACTX SHAContext

/** Group: SDM Configure Registers */
/** Type of sigmadelta_chn register
 *  Duty Cycle Configure Register of SDMn
 */

type GpioSigmadeltaChnRegT struct {
	Val c.Uint32T
}

/** Type of sigmadelta_misc register
 *  MISC Register
 */

type GpioSigmadeltaMiscRegT struct {
	Val c.Uint32T
}

/** Group: Clock gate Register */
/** Type of clock_gate register
 *  Clock Gating Configure Register
 */

type GpioSigmadeltaClockGateRegT struct {
	Val c.Uint32T
}

/** Group: Glitch filter Configure Registers */
/** Type of glitch_filter_chn register
 *  Glitch Filter Configure Register of Channeln
 */

type GpioGlitchFilterChnRegT struct {
	Val c.Uint32T
}

/** Group: Etm Configure Registers */
/** Type of etm_event_chn_cfg register
 *  Etm Config register of Channeln
 */

type GpioEtmEventChnCfgRegT struct {
	Val c.Uint32T
}

/** Type of etm_task_p0_cfg register
 *  Etm Configure Register to decide which GPIO been chosen
 */

type GpioEtmTaskPnCfgRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of version register
 *  Version Control Register
 */

type GpioExtVersionRegT struct {
	Val c.Uint32T
}

type GpioGlitchFilterDevT struct {
	GlitchFilterChn [8]GpioGlitchFilterChnRegT
}

type GpioEtmDevT struct {
	EventChnCfg  [8]GpioEtmEventChnCfgRegT
	Reserved080  [8]c.Uint32T
	EtmTaskPnCfg [8]GpioEtmTaskPnCfgRegT
}

type GpioExtDevT struct {
	SigmaDelta   GpioSdDevT
	Reserved028  [2]c.Uint32T
	GlitchFilter GpioGlitchFilterDevT
	Reserved050  [4]c.Uint32T
	Etm          GpioEtmDevT
	Reserved0c0  [15]c.Uint32T
	Version      GpioExtVersionRegT
}

/** Group: Interrupt Registers */
/** Type of in_int_raw_chn register
 *  Raw status interrupt of channel 0
 */

type GdmaInIntRawChnRegT struct {
	Val c.Uint32T
}

/** Type of in_int_st_chn register
 *  Masked interrupt of channel 0
 */

type GdmaInIntStChnRegT struct {
	Val c.Uint32T
}

/** Type of in_int_ena_chn register
 *  Interrupt enable bits of channel 0
 */

type GdmaInIntEnaChnRegT struct {
	Val c.Uint32T
}

/** Type of in_int_clr_chn register
 *  Interrupt clear bits of channel 0
 */

type GdmaInIntClrChnRegT struct {
	Val c.Uint32T
}

/** Type of out_int_raw_chn register
 *  Raw status interrupt of channel 0
 */

type GdmaOutIntRawChnRegT struct {
	Val c.Uint32T
}

/** Type of out_int_st_chn register
 *  Masked interrupt of channel 0
 */

type GdmaOutIntStChnRegT struct {
	Val c.Uint32T
}

/** Type of out_int_ena_chn register
 *  Interrupt enable bits of channel 0
 */

type GdmaOutIntEnaChnRegT struct {
	Val c.Uint32T
}

/** Type of out_int_clr_chn register
 *  Interrupt clear bits of channel 0
 */

type GdmaOutIntClrChnRegT struct {
	Val c.Uint32T
}

/** Group: Debug Registers */
/** Type of ahb_test register
 *  reserved
 */

type GdmaAhbTestRegT struct {
	Val c.Uint32T
}

/** Group: Configuration Registers */
/** Type of misc_conf register
 *  MISC register
 */

type GdmaMiscConfRegT struct {
	Val c.Uint32T
}

/** Type of in_conf0_chn register
 *  Configure 0 register of Rx channel 0
 */

type GdmaInConf0ChnRegT struct {
	Val c.Uint32T
}

/** Type of in_conf1_chn register
 *  Configure 1 register of Rx channel 0
 */

type GdmaInConf1ChnRegT struct {
	Val c.Uint32T
}

/** Type of in_pop_chn register
 *  Pop control register of Rx channel 0
 */

type GdmaInPopChnRegT struct {
	Val c.Uint32T
}

/** Type of in_link_chn register
 *  Link descriptor configure and control register of Rx channel 0
 */

type GdmaInLinkChnRegT struct {
	Val c.Uint32T
}

/** Type of out_conf0_chn register
 *  Configure 0 register of Tx channel 0
 */

type GdmaOutConf0ChnRegT struct {
	Val c.Uint32T
}

/** Type of out_conf1_chn register
 *  Configure 1 register of Tx channel 0
 */

type GdmaOutConf1ChnRegT struct {
	Val c.Uint32T
}

/** Type of out_push_chn register
 *  Push control register of Rx channel 0
 */

type GdmaOutPushChnRegT struct {
	Val c.Uint32T
}

/** Type of out_link_chn register
 *  Link descriptor configure and control register of Tx channel 0
 */

type GdmaOutLinkChnRegT struct {
	Val c.Uint32T
}

/** Group: Version Registers */
/** Type of date register
 *  Version control register
 */

type GdmaDateRegT struct {
	Val c.Uint32T
}

/** Group: Status Registers */
/** Type of infifo_status_chn register
 *  Receive FIFO status of Rx channel 0
 */

type GdmaInfifoStatusChnRegT struct {
	Val c.Uint32T
}

/** Type of in_state_chn register
 *  Receive status of Rx channel 0
 */

type GdmaInStateChnRegT struct {
	Val c.Uint32T
}

/** Type of in_suc_eof_des_addr_chn register
 *  Inlink descriptor address when EOF occurs of Rx channel 0
 */

type GdmaInSucEofDesAddrChnRegT struct {
	Val c.Uint32T
}

/** Type of in_err_eof_des_addr_chn register
 *  Inlink descriptor address when errors occur of Rx channel 0
 */

type GdmaInErrEofDesAddrChnRegT struct {
	Val c.Uint32T
}

/** Type of in_dscr_chn register
 *  Current inlink descriptor address of Rx channel 0
 */

type GdmaInDscrChnRegT struct {
	Val c.Uint32T
}

/** Type of in_dscr_bf0_chn register
 *  The last inlink descriptor address of Rx channel 0
 */

type GdmaInDscrBf0ChnRegT struct {
	Val c.Uint32T
}

/** Type of in_dscr_bf1_chn register
 *  The second-to-last inlink descriptor address of Rx channel 0
 */

type GdmaInDscrBf1ChnRegT struct {
	Val c.Uint32T
}

/** Type of outfifo_status_chn register
 *  Transmit FIFO status of Tx channel 0
 */

type GdmaOutfifoStatusChnRegT struct {
	Val c.Uint32T
}

/** Type of out_state_chn register
 *  Transmit status of Tx channel 0
 */

type GdmaOutStateChnRegT struct {
	Val c.Uint32T
}

/** Type of out_eof_des_addr_chn register
 *  Outlink descriptor address when EOF occurs of Tx channel 0
 */

type GdmaOutEofDesAddrChnRegT struct {
	Val c.Uint32T
}

/** Type of out_eof_bfr_des_addr_chn register
 *  The last outlink descriptor address when EOF occurs of Tx channel 0
 */

type GdmaOutEofBfrDesAddrChnRegT struct {
	Val c.Uint32T
}

/** Type of out_dscr_chn register
 *  Current inlink descriptor address of Tx channel 0
 */

type GdmaOutDscrChnRegT struct {
	Val c.Uint32T
}

/** Type of out_dscr_bf0_chn register
 *  The last inlink descriptor address of Tx channel 0
 */

type GdmaOutDscrBf0ChnRegT struct {
	Val c.Uint32T
}

/** Type of out_dscr_bf1_chn register
 *  The second-to-last inlink descriptor address of Tx channel 0
 */

type GdmaOutDscrBf1ChnRegT struct {
	Val c.Uint32T
}

/** Group: Priority Registers */
/** Type of in_pri_chn register
 *  Priority register of Rx channel 0
 */

type GdmaInPriChnRegT struct {
	Val c.Uint32T
}

/** Type of out_pri_chn register
 *  Priority register of Tx channel 0.
 */

type GdmaOutPriChnRegT struct {
	Val c.Uint32T
}

/** Group: Peripheral Select Registers */
/** Type of in_peri_sel_chn register
 *  Peripheral selection of Rx channel 0
 */

type GdmaInPeriSelChnRegT struct {
	Val c.Uint32T
}

/** Type of out_peri_sel_chn register
 *  Peripheral selection of Tx channel 0
 */

type GdmaOutPeriSelChnRegT struct {
	Val c.Uint32T
}

type GdmaInIntChnRegT struct {
	Raw GdmaInIntRawChnRegT
	St  GdmaInIntStChnRegT
	Ena GdmaInIntEnaChnRegT
	Clr GdmaInIntClrChnRegT
}

type GdmaOutIntChnRegT struct {
	Raw GdmaOutIntRawChnRegT
	St  GdmaOutIntStChnRegT
	Ena GdmaOutIntEnaChnRegT
	Clr GdmaOutIntClrChnRegT
}

type GdmaInChnRegT struct {
	InConf0         GdmaInConf0ChnRegT
	InConf1         GdmaInConf1ChnRegT
	InfifoStatus    GdmaInfifoStatusChnRegT
	InPop           GdmaInPopChnRegT
	InLink          GdmaInLinkChnRegT
	InState         GdmaInStateChnRegT
	InSucEofDesAddr GdmaInSucEofDesAddrChnRegT
	InErrEofDesAddr GdmaInErrEofDesAddrChnRegT
	InDscr          GdmaInDscrChnRegT
	InDscrBf0       GdmaInDscrBf0ChnRegT
	InDscrBf1       GdmaInDscrBf1ChnRegT
	InPri           GdmaInPriChnRegT
	InPeriSel       GdmaInPeriSelChnRegT
}

type GdmaOutChnRegT struct {
	OutConf0         GdmaOutConf0ChnRegT
	OutConf1         GdmaOutConf1ChnRegT
	OutfifoStatus    GdmaOutfifoStatusChnRegT
	OutPush          GdmaOutPushChnRegT
	OutLink          GdmaOutLinkChnRegT
	OutState         GdmaOutStateChnRegT
	OutEofDesAddr    GdmaOutEofDesAddrChnRegT
	OutEofBfrDesAddr GdmaOutEofBfrDesAddrChnRegT
	OutDscr          GdmaOutDscrChnRegT
	OutDscrBf0       GdmaOutDscrBf0ChnRegT
	OutDscrBf1       GdmaOutDscrBf1ChnRegT
	OutPri           GdmaOutPriChnRegT
	OutPeriSel       GdmaOutPeriSelChnRegT
}

type GdmaChnRegT struct {
	In          GdmaInChnRegT
	ReservedIn  [11]c.Uint32T
	Out         GdmaOutChnRegT
	ReservedOut [11]c.Uint32T
}

type GdmaDevS struct {
	InIntr      [3]GdmaInIntChnRegT
	OutIntr     [3]GdmaOutIntChnRegT
	AhbTest     GdmaAhbTestRegT
	MiscConf    GdmaMiscConfRegT
	Date        GdmaDateRegT
	Reserved06c c.Uint32T
	Channel     [3]GdmaChnRegT
}
type GdmaDevT GdmaDevS
type GpioNumT c.Int

const (
	GPIO_NUM_NC  GpioNumT = -1
	GPIO_NUM_0   GpioNumT = 0
	GPIO_NUM_1   GpioNumT = 1
	GPIO_NUM_2   GpioNumT = 2
	GPIO_NUM_3   GpioNumT = 3
	GPIO_NUM_4   GpioNumT = 4
	GPIO_NUM_5   GpioNumT = 5
	GPIO_NUM_6   GpioNumT = 6
	GPIO_NUM_7   GpioNumT = 7
	GPIO_NUM_8   GpioNumT = 8
	GPIO_NUM_9   GpioNumT = 9
	GPIO_NUM_10  GpioNumT = 10
	GPIO_NUM_11  GpioNumT = 11
	GPIO_NUM_12  GpioNumT = 12
	GPIO_NUM_13  GpioNumT = 13
	GPIO_NUM_14  GpioNumT = 14
	GPIO_NUM_15  GpioNumT = 15
	GPIO_NUM_16  GpioNumT = 16
	GPIO_NUM_17  GpioNumT = 17
	GPIO_NUM_18  GpioNumT = 18
	GPIO_NUM_19  GpioNumT = 19
	GPIO_NUM_20  GpioNumT = 20
	GPIO_NUM_21  GpioNumT = 21
	GPIO_NUM_22  GpioNumT = 22
	GPIO_NUM_23  GpioNumT = 23
	GPIO_NUM_24  GpioNumT = 24
	GPIO_NUM_25  GpioNumT = 25
	GPIO_NUM_26  GpioNumT = 26
	GPIO_NUM_27  GpioNumT = 27
	GPIO_NUM_28  GpioNumT = 28
	GPIO_NUM_29  GpioNumT = 29
	GPIO_NUM_30  GpioNumT = 30
	GPIO_NUM_MAX GpioNumT = 31
)

type EspErrT c.Int

/** Group: Configuration Register */
/** Type of ch_ena_ad0 register
 *  channel enable register
 */

type SocEtmChEnaAd0RegT struct {
	Val c.Uint32T
}

/** Type of ch_ena_ad0_set register
 *  channel enable set register
 */

type SocEtmChEnaAd0SetRegT struct {
	Val c.Uint32T
}

/** Type of ch_ena_ad0_clr register
 *  channel enable clear register
 */

type SocEtmChEnaAd0ClrRegT struct {
	Val c.Uint32T
}

/** Type of ch_ena_ad1 register
 *  channel enable register
 */

type SocEtmChEnaAd1RegT struct {
	Val c.Uint32T
}

/** Type of ch_ena_ad1_set register
 *  channel enable set register
 */

type SocEtmChEnaAd1SetRegT struct {
	Val c.Uint32T
}

/** Type of ch_ena_ad1_clr register
 *  channel enable clear register
 */

type SocEtmChEnaAd1ClrRegT struct {
	Val c.Uint32T
}

/** Type of chn_evt_id register
 *  channeln event id register
 */

type SocEtmChnEvtIdRegT struct {
	Val c.Uint32T
}

/** Type of chn_task_id register
 *  channeln task id register
 */

type SocEtmChnTaskIdRegT struct {
	Val c.Uint32T
}

/** Type of clk_en register
 *  etm clock enable register
 */

type SocEtmClkEnRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  etm date register
 */

type SocEtmDateRegT struct {
	Val c.Uint32T
}

/** Group: SYSTEM TIMER CLK CONTROL REGISTER */
/** Type of conf register
 *  Configure system timer clock
 */

type SystimerConfRegT struct {
	Val c.Uint32T
}

/** Group: SYSTEM TIMER UNIT CONTROL AND CONFIGURATION REGISTER */
/** Type of unit_op register
 *  system timer unit value update register
 */

type SystimerUnitOpRegT struct {
	Val c.Uint32T
}

/** Type of unit_load register
 *  system timer unit value high and low load register
 */

type SystimerUnitLoadValRegT struct {
	Hi struct {
		Val c.Uint32T
	}
	Lo struct {
		Val c.Uint32T
	}
}

/** Type of unit_value_hi register
 *  system timer unit value high and low register
 */

type SystimerUnitValueRegT struct {
	Hi struct {
		Val c.Uint32T
	}
	Lo struct {
		Val c.Uint32T
	}
}

/** Type of unit_load register
 *  system timer unit conf sync register
 */

type SystimerUnitLoadRegT struct {
	Val c.Uint32T
}

/** Group: SYSTEM TIMER COMP CONTROL AND CONFIGURATION REGISTER */
/** Type of target register
 *  system timer comp value high and low register
 */

type SystimerTargetValRegT struct {
	Hi struct {
		Val c.Uint32T
	}
	Lo struct {
		Val c.Uint32T
	}
}

/** Type of target_conf register
 *  system timer comp target mode register
 */

type SystimerTargetConfRegT struct {
	Val c.Uint32T
}

/** Type of comp_load register
 *  system timer comp conf sync register
 */

type SystimerCompLoadRegT struct {
	Val c.Uint32T
}

/** Group: SYSTEM TIMER INTERRUPT REGISTER */
/** Type of int_ena register
 *  systimer interrupt enable register
 */

type SystimerIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_raw register
 *  systimer interrupt raw register
 */

type SystimerIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  systimer interrupt clear register
 */

type SystimerIntClrRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  systimer interrupt status register
 */

type SystimerIntStRegT struct {
	Val c.Uint32T
}

/** Group: SYSTEM TIMER COMP STATUS REGISTER */
/** Type of real_target_hi/lo register
 *  system timer comp actual target value low register
 */

type SystimerRealTargetRegT struct {
	Lo struct {
		Val c.Uint32T
	}
	Hi struct {
		Val c.Uint32T
	}
}

/** Group: VERSION REGISTER */
/** Type of date register
 *  system timer version control register
 */

type SystimerDateRegT struct {
	Val c.Uint32T
}

type SystimerDevT struct {
	Conf        SystimerConfRegT
	UnitOp      [2]SystimerUnitOpRegT
	UnitLoadVal [2]SystimerUnitLoadValRegT
	TargetVal   [3]SystimerTargetValRegT
	TargetConf  [3]SystimerTargetConfRegT
	UnitVal     [2]SystimerUnitValueRegT
	CompLoad    [3]SystimerCompLoadRegT
	UnitLoad    [2]SystimerUnitLoadRegT
	IntEna      SystimerIntEnaRegT
	IntRaw      SystimerIntRawRegT
	IntClr      SystimerIntClrRegT
	IntSt       SystimerIntStRegT
	RealTarget  [3]SystimerRealTargetRegT
	Reserved08c [28]c.Uint32T
	Date        SystimerDateRegT
}
type RegdmaLinkPriorityT c.Int

const (
	REGDMA_LINK_PRI_0 RegdmaLinkPriorityT = 0
	REGDMA_LINK_PRI_1 RegdmaLinkPriorityT = 1
	REGDMA_LINK_PRI_2 RegdmaLinkPriorityT = 2
	REGDMA_LINK_PRI_3 RegdmaLinkPriorityT = 3
	REGDMA_LINK_PRI_4 RegdmaLinkPriorityT = 4
	REGDMA_LINK_PRI_5 RegdmaLinkPriorityT = 5
	REGDMA_LINK_PRI_6 RegdmaLinkPriorityT = 6
	REGDMA_LINK_PRI_7 RegdmaLinkPriorityT = 7
)

type RegdmaEntryBufT [4]c.Pointer
type RegdmaLinkMode c.Int

const (
	REGDMA_LINK_MODE_CONTINUOUS RegdmaLinkMode = 0
	REGDMA_LINK_MODE_ADDR_MAP   RegdmaLinkMode = 1
	REGDMA_LINK_MODE_WRITE      RegdmaLinkMode = 2
	REGDMA_LINK_MODE_WAIT       RegdmaLinkMode = 3
)

type RegdmaLinkModeT RegdmaLinkMode

type RegdmaLinkHead struct {
	Length   c.Uint32T
	Reserve0 c.Uint32T
	Mode     c.Uint32T
	Reserve1 c.Uint32T
	Branch   c.Uint32T
	SkipR    c.Uint32T
	SkipB    c.Uint32T
	Eof      c.Uint32T
}
type RegdmaLinkHeadT RegdmaLinkHead

/* Continuous type linked list node body type definition */

type RegdmaLinkContinuousBody struct {
	Next    c.Pointer
	Backup  c.Pointer
	Restore c.Pointer
	Mem     c.Pointer
}
type RegdmaLinkContinuousBodyT RegdmaLinkContinuousBody

/* Address Map type linked list node body type definition */

type RegdmaLinkAddrMapBody struct {
	Next    c.Pointer
	Backup  c.Pointer
	Restore c.Pointer
	Mem     c.Pointer
	Map     [4]c.Uint32T
}
type RegdmaLinkAddrMapBodyT RegdmaLinkAddrMapBody

/* Write/Wait type linked list node body type definition */

type RegdmaLinkWriteWaitBody struct {
	Next   c.Pointer
	Backup c.Pointer
	Value  c.Uint32T
	Mask   c.Uint32T
}
type RegdmaLinkWriteWaitBodyT RegdmaLinkWriteWaitBody

/* Branch Continuous type linked list node body type definition */

type RegdmaLinkBranchContinuousBody struct {
	Next    RegdmaEntryBufT
	Backup  c.Pointer
	Restore c.Pointer
	Mem     c.Pointer
}
type RegdmaLinkBranchContinuousBodyT RegdmaLinkBranchContinuousBody

/* Branch Address Map type linked list node body type definition */

type RegdmaLinkBranchAddrMapBody struct {
	Next    RegdmaEntryBufT
	Backup  c.Pointer
	Restore c.Pointer
	Mem     c.Pointer
	Map     [4]c.Uint32T
}
type RegdmaLinkBranchAddrMapBodyT RegdmaLinkBranchAddrMapBody

/* Branch Write/Wait type linked list node body type definition */

type RegdmaLinkBranchWriteWaitBody struct {
	Next   RegdmaEntryBufT
	Backup c.Pointer
	Value  c.Uint32T
	Mask   c.Uint32T
}
type RegdmaLinkBranchWriteWaitBodyT RegdmaLinkBranchWriteWaitBody

type RegdmaLinkStats struct {
	Ref     c.Uint32T
	Reserve c.Uint32T
	Id      c.Uint32T
	Module  c.Int
}
type RegdmaLinkStatsT RegdmaLinkStats

type RegdmaLinkContinuous struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkContinuousBodyT
	Buff [0]c.Uint32T
}
type RegdmaLinkContinuousT RegdmaLinkContinuous

type RegdmaLinkAddrMap struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkAddrMapBodyT
	Buff [0]c.Uint32T
}
type RegdmaLinkAddrMapT RegdmaLinkAddrMap

type RegdmaLinkWriteWait struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkWriteWaitBodyT
}
type RegdmaLinkWriteWaitT RegdmaLinkWriteWait

type RegdmaLinkBranchContinuous struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkBranchContinuousBodyT
	Buff [0]c.Uint32T
}
type RegdmaLinkBranchContinuousT RegdmaLinkBranchContinuous

type RegdmaLinkBranchAddrMap struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkBranchAddrMapBodyT
	Buff [0]c.Uint32T
}
type RegdmaLinkBranchAddrMapT RegdmaLinkBranchAddrMap

type RegdmaLinkBranchWriteWait struct {
	Stat RegdmaLinkStatsT
	Head RegdmaLinkHeadT
	Body RegdmaLinkBranchWriteWaitBodyT
}
type RegdmaLinkBranchWriteWaitT RegdmaLinkBranchWriteWait

type RegdmaLinkConfig struct {
	Head RegdmaLinkHeadT
	Id   c.Int
}
type RegdmaLinkConfigT RegdmaLinkConfig

type RegdmaEntriesConfigT struct {
	Config RegdmaLinkConfigT
	Owner  c.Uint32T
}

/** Group: Configure Register */
/** Type of saradc_ctrl register
 *  digital saradc configure register
 */

type ApbSaradcCtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_ctrl2 register
 *  digital saradc configure register
 */

type ApbSaradcCtrl2RegT struct {
	Val c.Uint32T
}

/** Type of saradc_filter_ctrl1 register
 *  digital saradc configure register
 */

type ApbSaradcFilterCtrl1RegT struct {
	Val c.Uint32T
}

/** Type of saradc_fsm_wait register
 *  digital saradc configure register
 */

type ApbSaradcFsmWaitRegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar1_status register
 *  digital saradc configure register
 */

type ApbSaradcSar1StatusRegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar2_status register
 *  digital saradc configure register
 */

type ApbSaradcSar2StatusRegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar_patt_tab1 register
 *  digital saradc configure register
 */

type ApbSaradcSarPattTab1RegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar_patt_tab2 register
 *  digital saradc configure register
 */

type ApbSaradcSarPattTab2RegT struct {
	Val c.Uint32T
}

/** Type of saradc_onetime_sample register
 *  digital saradc configure register
 */

type ApbSaradcOnetimeSampleRegT struct {
	Val c.Uint32T
}

/** Type of saradc_arb_ctrl register
 *  digital saradc configure register
 */

type ApbSaradcArbCtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_filter_ctrl0 register
 *  digital saradc configure register
 */

type ApbSaradcFilterCtrl0RegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar1data_status register
 *  digital saradc configure register
 */

type ApbSaradcSar1dataStatusRegT struct {
	Val c.Uint32T
}

/** Type of saradc_sar2data_status register
 *  digital saradc configure register
 */

type ApbSaradcSar2dataStatusRegT struct {
	Val c.Uint32T
}

/** Type of saradc_thres0_ctrl register
 *  digital saradc configure register
 */

type ApbSaradcThres0CtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_thres1_ctrl register
 *  digital saradc configure register
 */

type ApbSaradcThres1CtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_thres_ctrl register
 *  digital saradc configure register
 */

type ApbSaradcThresCtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_int_ena register
 *  digital saradc int register
 */

type ApbSaradcIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of saradc_int_raw register
 *  digital saradc int register
 */

type ApbSaradcIntRawRegT struct {
	Val c.Uint32T
}

/** Type of saradc_int_st register
 *  digital saradc int register
 */

type ApbSaradcIntStRegT struct {
	Val c.Uint32T
}

/** Type of saradc_int_clr register
 *  digital saradc int register
 */

type ApbSaradcIntClrRegT struct {
	Val c.Uint32T
}

/** Type of saradc_dma_conf register
 *  digital saradc configure register
 */

type ApbSaradcDmaConfRegT struct {
	Val c.Uint32T
}

/** Type of saradc_clkm_conf register
 *  digital saradc configure register
 */

type ApbSaradcClkmConfRegT struct {
	Val c.Uint32T
}

/** Type of saradc_apb_tsens_ctrl register
 *  digital tsens configure register
 */

type ApbSaradcApbTsensCtrlRegT struct {
	Val c.Uint32T
}

/** Type of saradc_tsens_ctrl2 register
 *  digital tsens configure register
 */

type ApbSaradcTsensCtrl2RegT struct {
	Val c.Uint32T
}

/** Type of saradc_cali register
 *  digital saradc configure register
 */

type ApbSaradcCaliRegT struct {
	Val c.Uint32T
}

/** Type of tsens_wake register
 *  digital tsens configure register
 */

type ApbTsensWakeRegT struct {
	Val c.Uint32T
}

/** Type of tsens_sample register
 *  digital tsens configure register
 */

type ApbTsensSampleRegT struct {
	Val c.Uint32T
}

/** Type of saradc_ctrl_date register
 *  version
 */

type ApbSaradcCtrlDateRegT struct {
	Val c.Uint32T
}

type ApbDevT struct {
	SaradcCtrl           ApbSaradcCtrlRegT
	SaradcCtrl2          ApbSaradcCtrl2RegT
	SaradcFilterCtrl1    ApbSaradcFilterCtrl1RegT
	SaradcFsmWait        ApbSaradcFsmWaitRegT
	SaradcSar1Status     ApbSaradcSar1StatusRegT
	SaradcSar2Status     ApbSaradcSar2StatusRegT
	SaradcSarPattTab1    ApbSaradcSarPattTab1RegT
	SaradcSarPattTab2    ApbSaradcSarPattTab2RegT
	SaradcOnetimeSample  ApbSaradcOnetimeSampleRegT
	SaradcArbCtrl        ApbSaradcArbCtrlRegT
	SaradcFilterCtrl0    ApbSaradcFilterCtrl0RegT
	SaradcSar1dataStatus ApbSaradcSar1dataStatusRegT
	SaradcSar2dataStatus ApbSaradcSar2dataStatusRegT
	SaradcThres0Ctrl     ApbSaradcThres0CtrlRegT
	SaradcThres1Ctrl     ApbSaradcThres1CtrlRegT
	SaradcThresCtrl      ApbSaradcThresCtrlRegT
	SaradcIntEna         ApbSaradcIntEnaRegT
	SaradcIntRaw         ApbSaradcIntRawRegT
	SaradcIntSt          ApbSaradcIntStRegT
	SaradcIntClr         ApbSaradcIntClrRegT
	SaradcDmaConf        ApbSaradcDmaConfRegT
	SaradcClkmConf       ApbSaradcClkmConfRegT
	SaradcApbTsensCtrl   ApbSaradcApbTsensCtrlRegT
	SaradcTsensCtrl2     ApbSaradcTsensCtrl2RegT
	SaradcCali           ApbSaradcCaliRegT
	TsensWake            ApbTsensWakeRegT
	TsensSample          ApbTsensSampleRegT
	Reserved06c          [228]c.Uint32T
	SaradcCtrlDate       ApbSaradcCtrlDateRegT
}

/* this bitfield is start from the LSB!!! */

type LldescS struct {
	Size   c.Uint32T
	Length c.Uint32T
	Offset c.Uint32T
	Sosf   c.Uint32T
	Eof    c.Uint32T
	Owner  c.Uint32T
	Buf    *c.Uint8T
}
type LldescT LldescS

/** Group: configure_register */
/** Type of lp_clk_conf register
 *  need_des
 */

type LpClkrstLpClkConfRegT struct {
	Val c.Uint32T
}

/** Type of lp_clk_po_en register
 *  need_des
 */

type LpClkrstLpClkPoEnRegT struct {
	Val c.Uint32T
}

/** Type of lp_clk_en register
 *  need_des
 */

type LpClkrstLpClkEnRegT struct {
	Val c.Uint32T
}

/** Type of lp_rst_en register
 *  need_des
 */

type LpClkrstLpRstEnRegT struct {
	Val c.Uint32T
}

/** Type of reset_cause register
 *  need_des
 */

type LpClkrstResetCauseRegT struct {
	Val c.Uint32T
}

/** Type of cpu_reset register
 *  need_des
 */

type LpClkrstCpuResetRegT struct {
	Val c.Uint32T
}

/** Type of fosc_cntl register
 *  need_des
 */

type LpClkrstFoscCntlRegT struct {
	Val c.Uint32T
}

/** Type of rc32k_cntl register
 *  need_des
 */

type LpClkrstRc32kCntlRegT struct {
	Val c.Uint32T
}

/** Type of clk_to_hp register
 *  need_des
 */

type LpClkrstClkToHpRegT struct {
	Val c.Uint32T
}

/** Type of lpmem_force register
 *  need_des
 */

type LpClkrstLpmemForceRegT struct {
	Val c.Uint32T
}

/** Type of lpperi register
 *  need_des
 */

type LpClkrstLpperiRegT struct {
	Val c.Uint32T
}

/** Type of xtal32k register
 *  need_des
 */

type LpClkrstXtal32kRegT struct {
	Val c.Uint32T
}

/** Type of date register
 *  need_des
 */

type LpClkrstDateRegT struct {
	Val c.Uint32T
}

type LpClkrstDevT struct {
	LpClkConf   LpClkrstLpClkConfRegT
	LpClkPoEn   LpClkrstLpClkPoEnRegT
	LpClkEn     LpClkrstLpClkEnRegT
	LpRstEn     LpClkrstLpRstEnRegT
	ResetCause  LpClkrstResetCauseRegT
	CpuReset    LpClkrstCpuResetRegT
	FoscCntl    LpClkrstFoscCntlRegT
	Rc32kCntl   LpClkrstRc32kCntlRegT
	ClkToHp     LpClkrstClkToHpRegT
	LpmemForce  LpClkrstLpmemForceRegT
	Lpperi      LpClkrstLpperiRegT
	Xtal32k     LpClkrstXtal32kRegT
	Reserved030 [243]c.Uint32T
	Date        LpClkrstDateRegT
}

/** Group: configure_register */
/** Type of clk_en register
 *  need_des
 */

type LpperiClkEnRegT struct {
	Val c.Uint32T
}

/** Type of reset_en register
 *  need_des
 */

type LpperiResetEnRegT struct {
	Val c.Uint32T
}

/** Type of rng_data register
 *  need_des
 */

type LpperiRngDataRegT struct {
	Val c.Uint32T
}

/** Type of cpu register
 *  need_des
 */

type LpperiCpuRegT struct {
	Val c.Uint32T
}

/** Type of bus_timeout register
 *  need_des
 */

type LpperiBusTimeoutRegT struct {
	Val c.Uint32T
}

/** Type of bus_timeout_addr register
 *  need_des
 */

type LpperiBusTimeoutAddrRegT struct {
	Val c.Uint32T
}

/** Type of bus_timeout_uid register
 *  need_des
 */

type LpperiBusTimeoutUidRegT struct {
	Val c.Uint32T
}

/** Type of mem_ctrl register
 *  need_des
 */

type LpperiMemCtrlRegT struct {
	Val c.Uint32T
}

/** Type of interrupt_source register
 *  need_des
 */

type LpperiInterruptSourceRegT struct {
	Val c.Uint32T
}

/** Group: Version register */
/** Type of date register
 *  need_des
 */

type LpperiDateRegT struct {
	Val c.Uint32T
}

type LpperiDevT struct {
	ClkEn           LpperiClkEnRegT
	ResetEn         LpperiResetEnRegT
	RngData         LpperiRngDataRegT
	Cpu             LpperiCpuRegT
	BusTimeout      LpperiBusTimeoutRegT
	BusTimeoutAddr  LpperiBusTimeoutAddrRegT
	BusTimeoutUid   LpperiBusTimeoutUidRegT
	MemCtrl         LpperiMemCtrlRegT
	InterruptSource LpperiInterruptSourceRegT
	Reserved024     [246]c.Uint32T
	Date            LpperiDateRegT
}

type ImaxdivT struct {
	Quot c.IntmaxT
	Rem  c.IntmaxT
}
type SocResetReasonT c.Int

const (
	RESET_REASON_CHIP_POWER_ON   SocResetReasonT = 1
	RESET_REASON_CHIP_BROWN_OUT  SocResetReasonT = 1
	RESET_REASON_CORE_SW         SocResetReasonT = 3
	RESET_REASON_CORE_DEEP_SLEEP SocResetReasonT = 5
	RESET_REASON_CORE_SDIO       SocResetReasonT = 6
	RESET_REASON_CORE_MWDT0      SocResetReasonT = 7
	RESET_REASON_CORE_MWDT1      SocResetReasonT = 8
	RESET_REASON_CORE_RTC_WDT    SocResetReasonT = 9
	RESET_REASON_CPU0_MWDT0      SocResetReasonT = 11
	RESET_REASON_CPU0_SW         SocResetReasonT = 12
	RESET_REASON_CPU0_RTC_WDT    SocResetReasonT = 13
	RESET_REASON_SYS_BROWN_OUT   SocResetReasonT = 15
	RESET_REASON_SYS_RTC_WDT     SocResetReasonT = 16
	RESET_REASON_CPU0_MWDT1      SocResetReasonT = 17
	RESET_REASON_SYS_SUPER_WDT   SocResetReasonT = 18
	RESET_REASON_CORE_EFUSE_CRC  SocResetReasonT = 20
	RESET_REASON_CORE_USB_UART   SocResetReasonT = 21
	RESET_REASON_CORE_USB_JTAG   SocResetReasonT = 22
	RESET_REASON_CPU0_JTAG       SocResetReasonT = 24
)

type EspLogLevelT c.Int

const (
	ESP_LOG_NONE    EspLogLevelT = 0
	ESP_LOG_ERROR   EspLogLevelT = 1
	ESP_LOG_WARN    EspLogLevelT = 2
	ESP_LOG_INFO    EspLogLevelT = 3
	ESP_LOG_DEBUG   EspLogLevelT = 4
	ESP_LOG_VERBOSE EspLogLevelT = 5
	ESP_LOG_MAX     EspLogLevelT = 6
)

// llgo:type C
type VprintfLikeT func(*c.Char, c.VaList) c.Int

/**
 * SPDX-FileCopyrightText: 2022 Espressif Systems (Shanghai) CO LTD
 *
 *  SPDX-License-Identifier: Apache-2.0
 */

type ModemLpconTestConfRegT struct {
	Val c.Uint32T
}

type ModemLpconLpTimerConfRegT struct {
	Val c.Uint32T
}

type ModemLpconCoexLpClkConfRegT struct {
	Val c.Uint32T
}

type ModemLpconWifiLpClkConfRegT struct {
	Val c.Uint32T
}

type ModemLpconI2cMstClkConfRegT struct {
	Val c.Uint32T
}

type ModemLpconModem32kClkConfRegT struct {
	Val c.Uint32T
}

type ModemLpconClkConfRegT struct {
	Val c.Uint32T
}

type ModemLpconClkConfForceOnRegT struct {
	Val c.Uint32T
}

type ModemLpconClkConfPowerStRegT struct {
	Val c.Uint32T
}

type ModemLpconRstConfRegT struct {
	Val c.Uint32T
}

type ModemLpconMemConfRegT struct {
	Val c.Uint32T
}

type ModemLpconDateRegT struct {
	Val c.Uint32T
}

type ModemLpconDevT struct {
	TestConf        ModemLpconTestConfRegT
	LpTimerConf     ModemLpconLpTimerConfRegT
	CoexLpClkConf   ModemLpconCoexLpClkConfRegT
	WifiLpClkConf   ModemLpconWifiLpClkConfRegT
	I2cMstClkConf   ModemLpconI2cMstClkConfRegT
	Modem32kClkConf ModemLpconModem32kClkConfRegT
	ClkConf         ModemLpconClkConfRegT
	ClkConfForceOn  ModemLpconClkConfForceOnRegT
	ClkConfPowerSt  ModemLpconClkConfPowerStRegT
	RstConf         ModemLpconRstConfRegT
	MemConf         ModemLpconMemConfRegT
	Date            ModemLpconDateRegT
}

/**
 * SPDX-FileCopyrightText: 2022 Espressif Systems (Shanghai) CO LTD
 *
 *  SPDX-License-Identifier: Apache-2.0
 */

type ModemSysconTestConfRegT struct {
	Val c.Uint32T
}

type ModemSysconClkConfRegT struct {
	Val c.Uint32T
}

type ModemSysconClkConfForceOnRegT struct {
	Val c.Uint32T
}

type ModemSysconClkConfPowerStRegT struct {
	Val c.Uint32T
}

type ModemSysconModemRstConfRegT struct {
	Val c.Uint32T
}

type ModemSysconClkConf1RegT struct {
	Val c.Uint32T
}

type ModemSysconClkConf1ForceOnRegT struct {
	Val c.Uint32T
}

type ModemSysconWifiBbCfgRegT struct {
	Val c.Uint32T
}

type ModemSysconMemConfRegT struct {
	Val c.Uint32T
}

type ModemSysconDateRegT struct {
	Val c.Uint32T
}

type ModemSysconDevT struct {
	TestConf        ModemSysconTestConfRegT
	ClkConf         ModemSysconClkConfRegT
	ClkConfForceOn  ModemSysconClkConfForceOnRegT
	ClkConfPowerSt  ModemSysconClkConfPowerStRegT
	ModemRstConf    ModemSysconModemRstConfRegT
	ClkConf1        ModemSysconClkConf1RegT
	ClkConf1ForceOn ModemSysconClkConf1ForceOnRegT
	WifiBbCfg       ModemSysconWifiBbCfgRegT
	MemConf         ModemSysconMemConfRegT
	Date            ModemSysconDateRegT
}

/** Group: Prescaler configuration */
/** Type of clk_cfg register
 *  PWM clock prescaler register.
 */

type McpwmClkCfgRegT struct {
	Val c.Uint32T
}

/** Group: MCPWM Timer Configuration and status */
/** Type of timer_cfg0 register
 *  PWM timer period and update method configuration register.
 */

type McpwmTimerCfg0RegT struct {
	Val c.Uint32T
}

/** Type of timer_cfg1 register
 *  PWM timer0 working mode and start/stop control configuration register.
 */

type McpwmTimerCfg1RegT struct {
	Val c.Uint32T
}

/** Type of timer_sync register
 *  PWM timer sync function configuration register.
 */

type McpwmTimerSyncRegT struct {
	Val c.Uint32T
}

/** Type of timer_status register
 *  PWM timer status register.
 */

type McpwmTimerStatusRegT struct {
	Val c.Uint32T
}

/** Group: Common configuration for MCPWM timers */
/** Type of timer_synci_cfg register
 *  Synchronization input selection for three PWM timers.
 */

type McpwmTimerSynciCfgRegT struct {
	Val c.Uint32T
}

/** Type of operator_timersel register
 *  Select specific timer for PWM operators.
 */

type McpwmOperatorTimerselRegT struct {
	Val c.Uint32T
}

/** Group: MCPWM Operator Configuration and Status */
/** Type of gen_stmp_cfg register
 *  Transfer status and update method for time stamp registers A and B
 */

type McpwmGenStmpCfgRegT struct {
	Val c.Uint32T
}

/** Type of gen_tstmp register
 *  Shadow register for register B.
 */

type McpwmGenTstmpRegT struct {
	Val c.Uint32T
}

/** Type of gen_cfg0 register
 *  Fault event T0 and T1 handling
 */

type McpwmGenCfg0RegT struct {
	Val c.Uint32T
}

/** Type of gen_force register
 *  Permissives to force PWM0A and PWM0B outputs by software
 */

type McpwmGenForceRegT struct {
	Val c.Uint32T
}

/** Type of gen register
 *  Actions triggered by events on PWM0B
 */

type McpwmGenRegT struct {
	Val c.Uint32T
}

/** Type of dt_cfg register
 *  dead time type selection and configuration
 */

type McpwmDtCfgRegT struct {
	Val c.Uint32T
}

/** Type of dt_fed_cfg register
 *  Shadow register for falling edge delay (FED).
 */

type McpwmDtFedCfgRegT struct {
	Val c.Uint32T
}

/** Type of dt_red_cfg register
 *  Shadow register for rising edge delay (RED).
 */

type McpwmDtRedCfgRegT struct {
	Val c.Uint32T
}

/** Type of carrier_cfg register
 *  Carrier enable and configuration
 */

type McpwmCarrierCfgRegT struct {
	Val c.Uint32T
}

/** Type of fh_cfg0 register
 *  Actions on PWM0A and PWM0B trip events
 */

type McpwmFhCfg0RegT struct {
	Val c.Uint32T
}

/** Type of fh_cfg1 register
 *  Software triggers for fault handler actions
 */

type McpwmFhCfg1RegT struct {
	Val c.Uint32T
}

/** Type of fh_status register
 *  Status of fault events.
 */

type McpwmFhStatusRegT struct {
	Val c.Uint32T
}

/** Group: Fault Detection Configuration and Status */
/** Type of fault_detect register
 *  Fault detection configuration and status
 */

type McpwmFaultDetectRegT struct {
	Val c.Uint32T
}

/** Group: Capture Configuration and Status */
/** Type of cap_timer_cfg register
 *  Configure capture timer
 */

type McpwmCapTimerCfgRegT struct {
	Val c.Uint32T
}

/** Type of cap_timer_phase register
 *  Phase for capture timer sync
 */

type McpwmCapTimerPhaseRegT struct {
	Val c.Uint32T
}

/** Type of cap_chn_cfg register
 *  Capture channel n configuration and enable
 */

type McpwmCapChnCfgRegT struct {
	Val c.Uint32T
}

/** Type of cap_chn register
 *  chn capture value status register
 */

type McpwmCapChnRegT struct {
	Val c.Uint32T
}

/** Type of cap_status register
 *  Edge of last capture trigger
 */

type McpwmCapStatusRegT struct {
	Val c.Uint32T
}

/** Group: Enable update of active registers */
/** Type of update_cfg register
 *  Enable update.
 */

type McpwmUpdateCfgRegT struct {
	Val c.Uint32T
}

/** Group: Manage Interrupts */
/** Type of int_ena register
 *  Interrupt enable bits
 */

type McpwmIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_raw register
 *  Raw interrupt status
 */

type McpwmIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  Masked interrupt status
 */

type McpwmIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Interrupt clear bits
 */

type McpwmIntClrRegT struct {
	Val c.Uint32T
}

/** Group: MCPWM event enable register */
/** Type of evt_en register
 *  MCPWM event enable register
 */

type McpwmEvtEnRegT struct {
	Val c.Uint32T
}

/** Group: MCPWM task enable register */
/** Type of task_en register
 *  MCPWM task enable register
 */

type McpwmTaskEnRegT struct {
	Val c.Uint32T
}

/** Group: MCPWM APB configuration register */
/** Type of clk register
 *  MCPWM APB configuration register
 */

type McpwmClkRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of version register
 *  Version register.
 */

type McpwmVersionRegT struct {
	Val c.Uint32T
}

type McpwmTimerRegsT struct {
	TimerCfg0   McpwmTimerCfg0RegT
	TimerCfg1   McpwmTimerCfg1RegT
	TimerSync   McpwmTimerSyncRegT
	TimerStatus McpwmTimerStatusRegT
}

type McpwmOperatorRegT struct {
	GenStmpCfg McpwmGenStmpCfgRegT
	Timestamp  [2]McpwmGenTstmpRegT
	GenCfg0    McpwmGenCfg0RegT
	GenForce   McpwmGenForceRegT
	Generator  [2]McpwmGenRegT
	DtCfg      McpwmDtCfgRegT
	DtFedCfg   McpwmDtFedCfgRegT
	DtRedCfg   McpwmDtRedCfgRegT
	CarrierCfg McpwmCarrierCfgRegT
	FhCfg0     McpwmFhCfg0RegT
	FhCfg1     McpwmFhCfg1RegT
	FhStatus   McpwmFhStatusRegT
}

/** Group: FIFO R/W registers */
/** Type of chndata register
 *  The read and write  data register for CHANNELn by apb fifo access.
 */

type RmtChndataRegT struct {
	Val c.Uint32T
}

/** Type of chmdata register
 *  The read and write  data register for CHANNEL$n by apb fifo access.
 */

type RmtChmdataRegT struct {
	Val c.Uint32T
}

/** Group: Configuration registers */
/** Type of chnconf0 register
 *  Channel n configure register 0
 */

type RmtChnconf0RegT struct {
	Val c.Uint32T
}

/** Type of chmconf0 register
 *  Channel m configure register 0
 */

type RmtChmconf0RegT struct {
	Val c.Uint32T
}

/** Type of chmconf1 register
 *  Channel m configure register 1
 */

type RmtChmconf1RegT struct {
	Val c.Uint32T
}

/** Type of sys_conf register
 *  RMT apb configuration register
 */

type RmtSysConfRegT struct {
	Val c.Uint32T
}

/** Type of ref_cnt_rst register
 *  RMT clock divider reset register
 */

type RmtRefCntRstRegT struct {
	Val c.Uint32T
}

/** Group: Status registers */
/** Type of chnstatus register
 *  Channel n status register
 */

type RmtChnstatusRegT struct {
	Val c.Uint32T
}

/** Type of chmstatus register
 *  Channel m status register
 */

type RmtChmstatusRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt registers */
/** Type of int_raw register
 *  Raw interrupt status
 */

type RmtIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  Masked interrupt status
 */

type RmtIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  Interrupt enable bits
 */

type RmtIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Interrupt clear bits
 */

type RmtIntClrRegT struct {
	Val c.Uint32T
}

/** Group: Carrier wave duty cycle registers */
/** Type of chncarrier_duty register
 *  Channel n duty cycle configuration register
 */

type RmtChncarrierDutyRegT struct {
	Val c.Uint32T
}

/** Type of chm_rx_carrier_rm register
 *  Channel m carrier remove register
 */

type RmtChmRxCarrierRmRegT struct {
	Val c.Uint32T
}

/** Group: Tx event configuration registers */
/** Type of chn_tx_lim register
 *  Channel n Tx event configuration register
 */

type RmtChnTxLimRegT struct {
	Val c.Uint32T
}

/** Type of tx_sim register
 *  RMT TX synchronous register
 */

type RmtTxSimRegT struct {
	Val c.Uint32T
}

/** Group: Rx event configuration registers */
/** Type of chm_rx_lim register
 *  Channel m Rx event configuration register
 */

type RmtChmRxLimRegT struct {
	Val c.Uint32T
}

/** Group: Version register */
/** Type of date register
 *  RMT version register
 */

type RmtDateRegT struct {
	Val c.Uint32T
}
type PeriphRetentionModule c.Int

const (
	SLEEP_RETENTION_MODULE_MIN          PeriphRetentionModule = 0
	SLEEP_RETENTION_MODULE_NULL         PeriphRetentionModule = 0
	SLEEP_RETENTION_MODULE_CLOCK_SYSTEM PeriphRetentionModule = 1
	SLEEP_RETENTION_MODULE_CLOCK_MODEM  PeriphRetentionModule = 2
	SLEEP_RETENTION_MODULE_SYS_PERIPH   PeriphRetentionModule = 3
	SLEEP_RETENTION_MODULE_TG0_WDT      PeriphRetentionModule = 4
	SLEEP_RETENTION_MODULE_TG1_WDT      PeriphRetentionModule = 5
	SLEEP_RETENTION_MODULE_TG0_TIMER0   PeriphRetentionModule = 6
	SLEEP_RETENTION_MODULE_TG1_TIMER0   PeriphRetentionModule = 7
	SLEEP_RETENTION_MODULE_GDMA_CH0     PeriphRetentionModule = 8
	SLEEP_RETENTION_MODULE_GDMA_CH1     PeriphRetentionModule = 9
	SLEEP_RETENTION_MODULE_GDMA_CH2     PeriphRetentionModule = 10
	SLEEP_RETENTION_MODULE_ADC          PeriphRetentionModule = 11
	SLEEP_RETENTION_MODULE_I2C0         PeriphRetentionModule = 12
	SLEEP_RETENTION_MODULE_RMT0         PeriphRetentionModule = 13
	SLEEP_RETENTION_MODULE_UART0        PeriphRetentionModule = 14
	SLEEP_RETENTION_MODULE_UART1        PeriphRetentionModule = 15
	SLEEP_RETENTION_MODULE_I2S0         PeriphRetentionModule = 16
	SLEEP_RETENTION_MODULE_ETM0         PeriphRetentionModule = 17
	SLEEP_RETENTION_MODULE_TEMP_SENSOR  PeriphRetentionModule = 18
	SLEEP_RETENTION_MODULE_TWAI0        PeriphRetentionModule = 19
	SLEEP_RETENTION_MODULE_TWAI1        PeriphRetentionModule = 20
	SLEEP_RETENTION_MODULE_PARLIO0      PeriphRetentionModule = 21
	SLEEP_RETENTION_MODULE_GPSPI2       PeriphRetentionModule = 22
	SLEEP_RETENTION_MODULE_LEDC         PeriphRetentionModule = 23
	SLEEP_RETENTION_MODULE_PCNT0        PeriphRetentionModule = 24
	SLEEP_RETENTION_MODULE_MCPWM0       PeriphRetentionModule = 25
	SLEEP_RETENTION_MODULE_WIFI_MAC     PeriphRetentionModule = 26
	SLEEP_RETENTION_MODULE_WIFI_BB      PeriphRetentionModule = 27
	SLEEP_RETENTION_MODULE_BLE_MAC      PeriphRetentionModule = 28
	SLEEP_RETENTION_MODULE_BT_BB        PeriphRetentionModule = 29
	SLEEP_RETENTION_MODULE_802154_MAC   PeriphRetentionModule = 30
	SLEEP_RETENTION_MODULE_MAX          PeriphRetentionModule = 31
)

type PeriphRetentionModuleT PeriphRetentionModule

/** Group: configure_register */
/** Type of bod_mode0_cntl register
 *  need_des
 */

type LpAnaBodMode0CntlRegT struct {
	Val c.Uint32T
}

/** Type of bod_mode1_cntl register
 *  need_des
 */

type LpAnaBodMode1CntlRegT struct {
	Val c.Uint32T
}

/** Type of ck_glitch_cntl register
 *  need_des
 */

type LpAnaCkGlitchCntlRegT struct {
	Val c.Uint32T
}

/** Type of fib_enable register
 *  need_des
 */

type LpAnaFibEnableRegT struct {
	Val c.Uint32T
}

/** Type of int_raw register
 *  need_des
 */

type LpAnaIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  need_des
 */

type LpAnaIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  need_des
 */

type LpAnaIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  need_des
 */

type LpAnaIntClrRegT struct {
	Val c.Uint32T
}

/** Type of lp_int_raw register
 *  need_des
 */

type LpAnaLpIntRawRegT struct {
	Val c.Uint32T
}

/** Type of lp_int_st register
 *  need_des
 */

type LpAnaLpIntStRegT struct {
	Val c.Uint32T
}

/** Type of lp_int_ena register
 *  need_des
 */

type LpAnaLpIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of lp_int_clr register
 *  need_des
 */

type LpAnaLpIntClrRegT struct {
	Val c.Uint32T
}

/** Type of date register
 *  need_des
 */

type LpAnaDateRegT struct {
	Val c.Uint32T
}

type LpAnaDevT struct {
	BodMode0Cntl LpAnaBodMode0CntlRegT
	BodMode1Cntl LpAnaBodMode1CntlRegT
	CkGlitchCntl LpAnaCkGlitchCntlRegT
	FibEnable    LpAnaFibEnableRegT
	IntRaw       LpAnaIntRawRegT
	IntSt        LpAnaIntStRegT
	IntEna       LpAnaIntEnaRegT
	IntClr       LpAnaIntClrRegT
	LpIntRaw     LpAnaLpIntRawRegT
	LpIntSt      LpAnaLpIntStRegT
	LpIntEna     LpAnaLpIntEnaRegT
	LpIntClr     LpAnaLpIntClrRegT
	Reserved030  [243]c.Uint32T
	Date         LpAnaDateRegT
}

/** Group: PARL_IO RX Configuration0 */
/** Type of rx_cfg0 register
 *  Parallel RX module configuration register0.
 */

type ParlIoRxCfg0RegT struct {
	Val c.Uint32T
}

/** Group: PARL_IO RX Configuration1 */
/** Type of rx_cfg1 register
 *  Parallel RX module configuration register1.
 */

type ParlIoRxCfg1RegT struct {
	Val c.Uint32T
}

/** Group: PARL_IO TX Configuration0 */
/** Type of tx_cfg0 register
 *  Parallel TX module configuration register0.
 */

type ParlIoTxCfg0RegT struct {
	Val c.Uint32T
}

/** Group: PARL_IO TX Configuration1 */
/** Type of tx_cfg1 register
 *  Parallel TX module configuration register1.
 */

type ParlIoTxCfg1RegT struct {
	Val c.Uint32T
}

/** Group: PARL_IO TX Status0 */
/** Type of st register
 *  Parallel IO module status register0.
 */

type ParlIoStRegT struct {
	Val c.Uint32T
}

/** Group: PARL_IO Interrupt Configuration and Status */
/** Type of int_ena register
 *  Parallel IO interrupt enable signal configuration register.
 */

type ParlIoIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_raw register
 *  Parallel IO interrupt raw signal status register.
 */

type ParlIoIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  Parallel IO interrupt signal status register.
 */

type ParlIoIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Parallel IO interrupt  clear signal configuration register.
 */

type ParlIoIntClrRegT struct {
	Val c.Uint32T
}

/** Group: PARL_IO Clock Gating Configuration */
/** Type of clk register
 *  Parallel IO clk configuration register
 */

type ParlIoClkRegT struct {
	Val c.Uint32T
}

/** Group: PARL_IO Version Register */
/** Type of version register
 *  Version register.
 */

type ParlIoVersionRegT struct {
	Val c.Uint32T
}

/** Group: T0 Control and configuration registers */
/** Type of txconfig register
 *  Timer x configuration register
 */

type TimgTxconfigRegT struct {
	Val c.Uint32T
}

/** Type of txlo register
 *  Timer x current value, low 32 bits
 */

type TimgTxloRegT struct {
	Val c.Uint32T
}

/** Type of txhi register
 *  Timer x current value, high 22 bits
 */

type TimgTxhiRegT struct {
	Val c.Uint32T
}

/** Type of txupdate register
 *  Write to copy current timer value to TIMGn_Tx_(LO/HI)_REG
 */

type TimgTxupdateRegT struct {
	Val c.Uint32T
}

/** Type of txalarmlo register
 *  Timer x alarm value, low 32 bits
 */

type TimgTxalarmloRegT struct {
	Val c.Uint32T
}

/** Type of txalarmhi register
 *  Timer x alarm value, high bits
 */

type TimgTxalarmhiRegT struct {
	Val c.Uint32T
}

/** Type of txloadlo register
 *  Timer x reload value, low 32 bits
 */

type TimgTxloadloRegT struct {
	Val c.Uint32T
}

/** Type of txloadhi register
 *  Timer x reload value, high 22 bits
 */

type TimgTxloadhiRegT struct {
	Val c.Uint32T
}

/** Type of txload register
 *  Write to reload timer from TIMG_Tx_(LOADLOLOADHI)_REG
 */

type TimgTxloadRegT struct {
	Val c.Uint32T
}

/** Group: WDT Control and configuration registers */
/** Type of wdtconfig0 register
 *  Watchdog timer configuration register
 */

type TimgWdtconfig0RegT struct {
	Val c.Uint32T
}

/** Type of wdtconfig1 register
 *  Watchdog timer prescaler register
 */

type TimgWdtconfig1RegT struct {
	Val c.Uint32T
}

/** Type of wdtconfig2 register
 *  Watchdog timer stage 0 timeout value
 */

type TimgWdtconfig2RegT struct {
	Val c.Uint32T
}

/** Type of wdtconfig3 register
 *  Watchdog timer stage 1 timeout value
 */

type TimgWdtconfig3RegT struct {
	Val c.Uint32T
}

/** Type of wdtconfig4 register
 *  Watchdog timer stage 2 timeout value
 */

type TimgWdtconfig4RegT struct {
	Val c.Uint32T
}

/** Type of wdtconfig5 register
 *  Watchdog timer stage 3 timeout value
 */

type TimgWdtconfig5RegT struct {
	Val c.Uint32T
}

/** Type of wdtfeed register
 *  Write to feed the watchdog timer
 */

type TimgWdtfeedRegT struct {
	Val c.Uint32T
}

/** Type of wdtwprotect register
 *  Watchdog write protect register
 */

type TimgWdtwprotectRegT struct {
	Val c.Uint32T
}

/** Group: RTC CALI Control and configuration registers */
/** Type of rtccalicfg register
 *  RTC calibration configure register
 */

type TimgRtccalicfgRegT struct {
	Val c.Uint32T
}

/** Type of rtccalicfg1 register
 *  RTC calibration configure1 register
 */

type TimgRtccalicfg1RegT struct {
	Val c.Uint32T
}

/** Type of rtccalicfg2 register
 *  Timer group calibration register
 */

type TimgRtccalicfg2RegT struct {
	Val c.Uint32T
}

/** Group: Interrupt registers */
/** Type of int_ena_timers register
 *  Interrupt enable bits
 */

type TimgIntEnaTimersRegT struct {
	Val c.Uint32T
}

/** Type of int_raw_timers register
 *  Raw interrupt status
 */

type TimgIntRawTimersRegT struct {
	Val c.Uint32T
}

/** Type of int_st_timers register
 *  Masked interrupt status
 */

type TimgIntStTimersRegT struct {
	Val c.Uint32T
}

/** Type of int_clr_timers register
 *  Interrupt clear bits
 */

type TimgIntClrTimersRegT struct {
	Val c.Uint32T
}

/** Group: Version register */
/** Type of ntimers_date register
 *  Timer version control register
 */

type TimgNtimersDateRegT struct {
	Val c.Uint32T
}

/** Group: Clock configuration registers */
/** Type of regclk register
 *  Timer group clock gate register
 */

type TimgRegclkRegT struct {
	Val c.Uint32T
}

type TimgHwtimerRegT struct {
	Config  TimgTxconfigRegT
	Lo      TimgTxloRegT
	Hi      TimgTxhiRegT
	Update  TimgTxupdateRegT
	Alarmlo TimgTxalarmloRegT
	Alarmhi TimgTxalarmhiRegT
	Loadlo  TimgTxloadloRegT
	Loadhi  TimgTxloadhiRegT
	Load    TimgTxloadRegT
}

/** Group: Configuration Registers */
/** Type of mode register
 *  TWAI mode register.
 */

type TwaiModeRegT struct {
	Val c.Uint32T
}

/** Type of cmd register
 *  TWAI command register.
 */

type TwaiCmdRegT struct {
	Val c.Uint32T
}

/** Type of bus_timing_0 register
 *  Bit timing configuration register 0.
 */

type TwaiBusTiming0RegT struct {
	Val c.Uint32T
}

/** Type of bus_timing_1 register
 *  Bit timing configuration register 1.
 */

type TwaiBusTiming1RegT struct {
	Val c.Uint32T
}

/** Type of err_warning_limit register
 *  TWAI error threshold configuration register.
 */

type TwaiErrWarningLimitRegT struct {
	Val c.Uint32T
}

/** Type of clock_divider register
 *  Clock divider register.
 */

type TwaiClockDividerRegT struct {
	Val c.Uint32T
}

/** Type of sw_standby_cfg register
 *  Software configure standby pin directly.
 */

type TwaiSwStandbyCfgRegT struct {
	Val c.Uint32T
}

/** Type of hw_cfg register
 *  Hardware configure standby pin.
 */

type TwaiHwCfgRegT struct {
	Val c.Uint32T
}

/** Type of hw_standby_cnt register
 *  Configure standby counter.
 */

type TwaiHwStandbyCntRegT struct {
	Val c.Uint32T
}

/** Type of idle_intr_cnt register
 *  Configure idle interrupt counter.
 */

type TwaiIdleIntrCntRegT struct {
	Val c.Uint32T
}

/** Type of eco_cfg register
 *  ECO configuration register.
 */

type TwaiEcoCfgRegT struct {
	Val c.Uint32T
}

/** Group: Status Registers */
/** Type of status register
 *  TWAI status register.
 */

type TwaiStatusRegT struct {
	Val c.Uint32T
}

/** Type of arb_lost_cap register
 *  TWAI arbiter lost capture register.
 */

type TwaiArbLostCapRegT struct {
	Val c.Uint32T
}

/** Type of err_code_cap register
 *  TWAI error info capture register.
 */

type TwaiErrCodeCapRegT struct {
	Val c.Uint32T
}

/** Type of rx_err_cnt register
 *  Rx error counter register.
 */

type TwaiRxErrCntRegT struct {
	Val c.Uint32T
}

/** Type of tx_err_cnt register
 *  Tx error counter register.
 */

type TwaiTxErrCntRegT struct {
	Val c.Uint32T
}

/** Type of rx_message_counter register
 *  Received message counter register.
 */

type TwaiRxMessageCounterRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt Registers */
/** Type of interrupt register
 *  Interrupt signals' register.
 */

type TwaiInterruptRegT struct {
	Val c.Uint32T
}

/** Type of interrupt_enable register
 *  Interrupt enable register.
 */

type TwaiInterruptEnableRegT struct {
	Val c.Uint32T
}

/** Group: Data Registers */
/** Type of buffer register
 *  TX RX Buffer.
 */

type TwaiTxRxBufferRegT struct {
	Val c.Uint32T
}

type AcceptanceFilterRegT struct {
	Acr [4]struct {
		Val c.Uint32T
	}
	Amr [4]struct {
		Val c.Uint32T
	}
	Reserved60 c.Uint32T
	Reserved64 c.Uint32T
	Reserved68 c.Uint32T
	Reserved6c c.Uint32T
	Reserved70 c.Uint32T
}

type TwaiDevS struct {
	Mode             TwaiModeRegT
	Cmd              TwaiCmdRegT
	Status           TwaiStatusRegT
	Interrupt        TwaiInterruptRegT
	InterruptEnable  TwaiInterruptEnableRegT
	Reserved014      c.Uint32T
	BusTiming0       TwaiBusTiming0RegT
	BusTiming1       TwaiBusTiming1RegT
	Reserved020      [3]c.Uint32T
	ArbLostCap       TwaiArbLostCapRegT
	ErrCodeCap       TwaiErrCodeCapRegT
	ErrWarningLimit  TwaiErrWarningLimitRegT
	RxErrCnt         TwaiRxErrCntRegT
	TxErrCnt         TwaiTxErrCntRegT
	RxMessageCounter TwaiRxMessageCounterRegT
	Reserved078      c.Uint32T
	ClockDivider     TwaiClockDividerRegT
	SwStandbyCfg     TwaiSwStandbyCfgRegT
	HwCfg            TwaiHwCfgRegT
	HwStandbyCnt     TwaiHwStandbyCntRegT
	IdleIntrCnt      TwaiIdleIntrCntRegT
	EcoCfg           TwaiEcoCfgRegT
}
type TwaiDevT TwaiDevS

/** Group: configure_register */
/** Type of store register
 *  need_des
 */

type LpAonStoreRegT struct {
	Val c.Uint32T
}

/** Type of gpio_mux register
 *  need_des
 */

type LpAonGpioMuxRegT struct {
	Val c.Uint32T
}

/** Type of gpio_hold0 register
 *  need_des
 */

type LpAonGpioHold0RegT struct {
	Val c.Uint32T
}

/** Type of gpio_hold1 register
 *  need_des
 */

type LpAonGpioHold1RegT struct {
	Val c.Uint32T
}

/** Type of sys_cfg register
 *  need_des
 */

type LpAonSysCfgRegT struct {
	Val c.Uint32T
}

/** Type of cpucore0_cfg register
 *  need_des
 */

type LpAonCpucore0CfgRegT struct {
	Val c.Uint32T
}

/** Type of io_mux register
 *  need_des
 */

type LpAonIoMuxRegT struct {
	Val c.Uint32T
}

/** Type of ext_wakeup_cntl register
 *  need_des
 */

type LpAonExtWakeupCntlRegT struct {
	Val c.Uint32T
}

/** Type of usb register
 *  need_des
 */

type LpAonUsbRegT struct {
	Val c.Uint32T
}

/** Type of lpbus register
 *  need_des
 */

type LpAonLpbusRegT struct {
	Val c.Uint32T
}

/** Type of sdio_active register
 *  need_des
 */

type LpAonSdioActiveRegT struct {
	Val c.Uint32T
}

/** Type of lpcore register
 *  need_des
 */

type LpAonLpcoreRegT struct {
	Val c.Uint32T
}

/** Type of sar_cct register
 *  need_des
 */

type LpAonSarCctRegT struct {
	Val c.Uint32T
}

/** Type of date register
 *  need_des
 */

type LpAonDateRegT struct {
	Val c.Uint32T
}

type LpAonDevT struct {
	Store         [10]LpAonStoreRegT
	GpioMux       LpAonGpioMuxRegT
	GpioHold0     LpAonGpioHold0RegT
	GpioHold1     LpAonGpioHold1RegT
	SysCfg        LpAonSysCfgRegT
	Cpucore0Cfg   LpAonCpucore0CfgRegT
	IoMux         LpAonIoMuxRegT
	ExtWakeupCntl LpAonExtWakeupCntlRegT
	Usb           LpAonUsbRegT
	Lpbus         LpAonLpbusRegT
	SdioActive    LpAonSdioActiveRegT
	Lpcore        LpAonLpcoreRegT
	SarCct        LpAonSarCctRegT
	Reserved058   [233]c.Uint32T
	Date          LpAonDateRegT
}
type SLEEPMODE c.Int

const (
	AWAKE       SLEEPMODE = 0
	LIGHT_SLEEP SLEEPMODE = 1
	DEEP_SLEEP  SLEEPMODE = 2
)

type RESETREASON c.Int

const (
	NO_MEAN                RESETREASON = 0
	POWERON_RESET          RESETREASON = 1
	RTC_SW_SYS_RESET       RESETREASON = 3
	DEEPSLEEP_RESET        RESETREASON = 5
	SDIO_RESET             RESETREASON = 6
	TG0WDT_SYS_RESET       RESETREASON = 7
	TG1WDT_SYS_RESET       RESETREASON = 8
	RTCWDT_SYS_RESET       RESETREASON = 9
	TG0WDT_CPU_RESET       RESETREASON = 11
	RTC_SW_CPU_RESET       RESETREASON = 12
	RTCWDT_CPU_RESET       RESETREASON = 13
	RTCWDT_BROWN_OUT_RESET RESETREASON = 15
	RTCWDT_RTC_RESET       RESETREASON = 16
	TG1WDT_CPU_RESET       RESETREASON = 17
	SUPER_WDT_RESET        RESETREASON = 18
	EFUSE_RESET            RESETREASON = 20
	USB_UART_CHIP_RESET    RESETREASON = 21
	USB_JTAG_CHIP_RESET    RESETREASON = 22
	JTAG_RESET             RESETREASON = 24
)

type WAKEUPREASON c.Int

const (
	NO_SLEEP        WAKEUPREASON = 0
	EXT_EVENT0_TRIG WAKEUPREASON = 1
	EXT_EVENT1_TRIG WAKEUPREASON = 2
	GPIO_TRIG       WAKEUPREASON = 4
	TIMER_EXPIRE    WAKEUPREASON = 8
	SDIO_TRIG       WAKEUPREASON = 16
	MAC_TRIG        WAKEUPREASON = 32
	UART0_TRIG      WAKEUPREASON = 64
	UART1_TRIG      WAKEUPREASON = 128
	TOUCH_TRIG      WAKEUPREASON = 256
	SAR_TRIG        WAKEUPREASON = 512
	BT_TRIG         WAKEUPREASON = 1024
	RISCV_TRIG      WAKEUPREASON = 2048
	XTAL_DEAD_TRIG  WAKEUPREASON = 4096
	RISCV_TRAP_TRIG WAKEUPREASON = 8192
	USB_TRIG        WAKEUPREASON = 16384
)

type WAKEUPENABLE c.Int

const (
	DISEN_WAKEUP       WAKEUPENABLE = 0
	EXT_EVENT0_TRIG_EN WAKEUPENABLE = 1
	EXT_EVENT1_TRIG_EN WAKEUPENABLE = 2
	GPIO_TRIG_EN       WAKEUPENABLE = 4
	TIMER_EXPIRE_EN    WAKEUPENABLE = 8
	SDIO_TRIG_EN       WAKEUPENABLE = 16
	MAC_TRIG_EN        WAKEUPENABLE = 32
	UART0_TRIG_EN      WAKEUPENABLE = 64
	UART1_TRIG_EN      WAKEUPENABLE = 128
	TOUCH_TRIG_EN      WAKEUPENABLE = 256
	SAR_TRIG_EN        WAKEUPENABLE = 512
	BT_TRIG_EN         WAKEUPENABLE = 1024
	RISCV_TRIG_EN      WAKEUPENABLE = 2048
	XTAL_DEAD_TRIG_EN  WAKEUPENABLE = 4096
	RISCV_TRAP_TRIG_EN WAKEUPENABLE = 8192
	USB_TRIG_EN        WAKEUPENABLE = 16384
)

// llgo:type C
type EspRomWakeFuncT func()

type PmuHpDigPowerRegT struct {
	Val c.Uint32T
}

type PmuHpIcgModemRegT struct {
	Val c.Uint32T
}

type PmuHpSysCntlRegT struct {
	Val c.Uint32T
}

type PmuHpClkPowerRegT struct {
	Val c.Uint32T
}

type PmuHpBiasRegT struct {
	Val c.Uint32T
}

type PmuHpBackupRegT struct {
	Val c.Uint32T
}

type PmuHpSysclkRegT struct {
	Val c.Uint32T
}

type PmuHpRegulator0RegT struct {
	Val c.Uint32T
}

type PmuHpRegulator1RegT struct {
	Val c.Uint32T
}

type PmuHpXtalRegT struct {
	Val c.Uint32T
}

type PmuHpHwRegmapT struct {
	DigPower   PmuHpDigPowerRegT
	IcgFunc    c.Uint32T
	IcgApb     c.Uint32T
	IcgModem   PmuHpIcgModemRegT
	Syscntl    PmuHpSysCntlRegT
	ClkPower   PmuHpClkPowerRegT
	Bias       PmuHpBiasRegT
	Backup     PmuHpBackupRegT
	BackupClk  c.Uint32T
	Sysclk     PmuHpSysclkRegT
	Regulator0 PmuHpRegulator0RegT
	Regulator1 PmuHpRegulator1RegT
	Xtal       PmuHpXtalRegT
}

/** */

type PmuLpRegulator0RegT struct {
	Val c.Uint32T
}

type PmuLpRegulator1RegT struct {
	Val c.Uint32T
}

type PmuLpXtalRegT struct {
	Val c.Uint32T
}

type PmuLpDigPowerRegT struct {
	Val c.Uint32T
}

type PmuLpClkPowerRegT struct {
	Val c.Uint32T
}

type PmuLpBiasRegT struct {
	Val c.Uint32T
}

type PmuLpHwRegmapT struct {
	Regulator0 PmuLpRegulator0RegT
	Regulator1 PmuLpRegulator1RegT
	Xtal       PmuLpXtalRegT
	DigPower   PmuLpDigPowerRegT
	ClkPower   PmuLpClkPowerRegT
	Bias       PmuLpBiasRegT
}

type PmuImmHpClkPowerRegT struct {
	Val c.Uint32T
}

type PmuImmSleepSysclkRegT struct {
	Val c.Uint32T
}

type PmuImmHpFuncIcgRegT struct {
	Val c.Uint32T
}

type PmuImmHpApbIcgRegT struct {
	Val c.Uint32T
}

type PmuImmModemIcgRegT struct {
	Val c.Uint32T
}

type PmuImmLpIcgRegT struct {
	Val c.Uint32T
}

type PmuImmPadHoldAllRegT struct {
	Val c.Uint32T
}

type PmuImmI2cIsolateRegT struct {
	Val c.Uint32T
}

type PmuImmHwRegmapT struct {
	ClkPower    PmuImmHpClkPowerRegT
	SleepSysclk PmuImmSleepSysclkRegT
	HpFuncIcg   PmuImmHpFuncIcgRegT
	HpApbIcg    PmuImmHpApbIcgRegT
	ModemIcg    PmuImmModemIcgRegT
	LpIcg       PmuImmLpIcgRegT
	PadHoldAll  PmuImmPadHoldAllRegT
	I2cIso      PmuImmI2cIsolateRegT
}

type PmuPowerWaitTimer0RegT struct {
	Val c.Uint32T
}

type PmuPowerWaitTimer1RegT struct {
	Val c.Uint32T
}

type PmuPowerDomainCntlRegT struct {
	Val c.Uint32T
}

type PmuPowerMemoryCntlRegT struct {
	Val c.Uint32T
}

type PmuPowerMemoryMaskRegT struct {
	Val c.Uint32T
}

type PmuPowerHpPadRegT struct {
	Val c.Uint32T
}

type PmuPowerVddSpiCntlRegT struct {
	Val c.Uint32T
}

type PmuPowerClkWaitCntlRegT struct {
	Val c.Uint32T
}

type PmuPowerHwRegmapT struct {
	WaitTimer0 PmuPowerWaitTimer0RegT
	WaitTimer1 PmuPowerWaitTimer1RegT
	HpPd       [5]PmuPowerDomainCntlRegT
	LpPeri     PmuPowerDomainCntlRegT
	MemCntl    PmuPowerMemoryCntlRegT
	MemMask    PmuPowerMemoryMaskRegT
	HpPad      PmuPowerHpPadRegT
	VddSpi     PmuPowerVddSpiCntlRegT
	ClkWait    PmuPowerClkWaitCntlRegT
}

type PmuSlpWakeupCntl0RegT struct {
	Val c.Uint32T
}

type PmuSlpWakeupCntl1RegT struct {
	Val c.Uint32T
}

type PmuSlpWakeupCntl3RegT struct {
	Val c.Uint32T
}

type PmuSlpWakeupCntl4RegT struct {
	Val c.Uint32T
}

type PmuSlpWakeupCntl5RegT struct {
	Val c.Uint32T
}

type PmuSlpWakeupCntl6RegT struct {
	Val c.Uint32T
}

type PmuSlpWakeupCntl7RegT struct {
	Val c.Uint32T
}

type PmuWakeupHwRegmapT struct {
	Cntl0   PmuSlpWakeupCntl0RegT
	Cntl1   PmuSlpWakeupCntl1RegT
	Cntl2   c.Uint32T
	Cntl3   PmuSlpWakeupCntl3RegT
	Cntl4   PmuSlpWakeupCntl4RegT
	Cntl5   PmuSlpWakeupCntl5RegT
	Cntl6   PmuSlpWakeupCntl6RegT
	Cntl7   PmuSlpWakeupCntl7RegT
	Status0 c.Uint32T
	Status1 c.Uint32T
}

type PmuHpClkPoweronRegT struct {
	Val c.Uint32T
}

type PmuHpClkCntlRegT struct {
	Val c.Uint32T
}

type PmuPorStatusRegT struct {
	Val c.Uint32T
}

type PmuRfPwcRegT struct {
	Val c.Uint32T
}

type PmuBackupCfgRegT struct {
	Val c.Uint32T
}

type PmuHpIntrRegT struct {
	Val c.Uint32T
}

type PmuHpExtHwRegmapT struct {
	ClkPoweron PmuHpClkPoweronRegT
	ClkCntl    PmuHpClkCntlRegT
	PorStatus  PmuPorStatusRegT
	RfPwc      PmuRfPwcRegT
	BackupCfg  PmuBackupCfgRegT
	IntRaw     PmuHpIntrRegT
	IntSt      PmuHpIntrRegT
	IntEna     PmuHpIntrRegT
	IntClr     PmuHpIntrRegT
}

type PmuLpIntrRegT struct {
	Val c.Uint32T
}

type PmuLpCpuPwr0RegT struct {
	Val c.Uint32T
}

type PmuLpCpuPwr1RegT struct {
	Val c.Uint32T
}

type PmuLpExtHwRegmapT struct {
	IntRaw PmuLpIntrRegT
	IntSt  PmuLpIntrRegT
	IntEna PmuLpIntrRegT
	IntClr PmuLpIntrRegT
	Pwr0   PmuLpCpuPwr0RegT
	Pwr1   PmuLpCpuPwr1RegT
}

type PmuDevT struct {
	HpSys       [3]PmuHpHwRegmapT
	LpSys       [2]PmuLpHwRegmapT
	Imm         PmuImmHwRegmapT
	Power       PmuPowerHwRegmapT
	Wakeup      PmuWakeupHwRegmapT
	HpExt       PmuHpExtHwRegmapT
	LpExt       PmuLpExtHwRegmapT
	HpLpCpuComm struct {
		Val c.Uint32T
	}
	HpRegulatorCfg struct {
		Val c.Uint32T
	}
	MainState struct {
		Val c.Uint32T
	}
	PwrState struct {
		Val c.Uint32T
	}
	ClkState0 struct {
		Val c.Uint32T
	}
	ClkState1    c.Uint32T
	ClkState2    c.Uint32T
	VddSpiStatus struct {
		Val c.Uint32T
	}
	Reserved [150]c.Uint32T
	Date     struct {
		Val c.Uint32T
	}
}

// TODO: ZB-93, rewrite this file using regdesc tools when IEEE802154.csv is ready.
type EspIeee802154S struct {
	Cmd struct {
		Val c.Uint32T
	}
	Conf struct {
		Val c.Uint32T
	}
	Multipan [4]struct {
		ShortAddr struct {
			Val c.Uint32T
		}
		Panid struct {
			Val c.Uint32T
		}
		ExtAddr0 c.Uint32T
		ExtAddr1 c.Uint32T
	}
	Channel struct {
		Val c.Uint32T
	}
	Txpower struct {
		Val c.Uint32T
	}
	EdDuration struct {
		Val c.Uint32T
	}
	EdCfg struct {
		Val c.Uint32T
	}
	IfsCfg struct {
		Val c.Uint32T
	}
	AckTimeout struct {
		Val c.Uint32T
	}
	EventEn struct {
		Val c.Uint32T
	}
	EventStatus struct {
		Val c.Uint32T
	}
	RxAbortEventEn struct {
		Val c.Uint32T
	}
	PendingCfg struct {
		Val c.Uint32T
	}
	Pti struct {
		Val c.Uint32T
	}
	Reserved74     c.Uint32T
	TxAbortEventEn struct {
		Val c.Uint32T
	}
	EnhackGenerateDoneNotify c.Uint32T
	RxStatus                 struct {
		Val c.Uint32T
	}
	TxStatus struct {
		Val c.Uint32T
	}
	TxrxStatus struct {
		Val c.Uint32T
	}
	TxSecScheduleState c.Uint32T
	CoreGckCfg         struct {
		Val c.Uint32T
	}
	Reserved94          c.Uint32T
	Reserved98          c.Uint32T
	Reserved9c          c.Uint32T
	ReservedA0          c.Uint32T
	RxLength            c.Uint32T
	Timer0Threshold     c.Uint32T
	Timer0Value         c.Uint32T
	Timer1Threshold     c.Uint32T
	Timer1Value         c.Uint32T
	ClkCounterThreshold c.Uint32T
	ClkCounterValue     c.Uint32T
	IfsCounterCfg       struct {
		Val c.Uint32T
	}
	SfdWait struct {
		Val c.Uint32T
	}
	TxrxPathDelay struct {
		Val c.Uint32T
	}
	BbClk     c.Uint32T
	DmaTxAddr c.Uint32T
	DmaTxCfg  struct {
		Val c.Uint32T
	}
	DmaTxErr   c.Uint32T
	ReservedDc c.Uint32T
	DmaRxAddr  c.Uint32T
	DmaRxCfg   struct {
		Val c.Uint32T
	}
	DmaRxErr     c.Uint32T
	ReservedEc   c.Uint32T
	DmaGck       c.Uint32T
	DmaDummyData c.Uint32T
	ReservedF8   c.Uint32T
	ReservedFc   c.Uint32T
	PaOnDelay    struct {
		Val c.Uint32T
	}
	TxOnDelay struct {
		Val c.Uint32T
	}
	TxenStopDelay struct {
		Val c.Uint32T
	}
	TxOffDelay struct {
		Val c.Uint32T
	}
	RxOnDelay struct {
		Val c.Uint32T
	}
	TxrxSwitchDelay struct {
		Val c.Uint32T
	}
	ContRxDelay c.Uint32T
	DcdcCtrl    struct {
		Val c.Uint32T
	}
	DebugCtrl struct {
		Val c.Uint32T
	}
	TxDmaErrStsReg c.Uint32T
	SecurityCtrl   struct {
		Val c.Uint32T
	}
	SecurityAddr0           c.Uint32T
	SecurityAddr1           c.Uint32T
	SecurityKey0            c.Uint32T
	SecurityKey1            c.Uint32T
	SecurityKey2            c.Uint32T
	SecurityKey3            c.Uint32T
	DebugSfdTimeoutCnt      c.Uint32T
	DebugCrcErrorCnt        c.Uint32T
	DebugEdAbortCnt         c.Uint32T
	DebugCcaFailCnt         c.Uint32T
	DebugRxFilterFailCnt    c.Uint32T
	DebugNoRssDetectCnt     c.Uint32T
	DebugRxAbortCoexCnt     c.Uint32T
	DebugRxRestartCnt       c.Uint32T
	DebugTxAckAbortCoexCnt  c.Uint32T
	DebugEdScanBreakCoexCnt c.Uint32T
	DebugRxAckAbortCoexCnt  c.Uint32T
	DebugRxAckTimeoutCnt    c.Uint32T
	DebugTxBreakCoexCnt     c.Uint32T
	DebugTxSecurityErrorCnt c.Uint32T
	DebugCcaBusyCnt         c.Uint32T
	DebugCntClr             struct {
		Val c.Uint32T
	}
	I154Version c.Uint32T
}
type EspIeee802154T EspIeee802154S
type ClockOutChannel c.Int

const (
	CLKOUT_CHANNEL_1   ClockOutChannel = 0
	CLKOUT_CHANNEL_2   ClockOutChannel = 1
	CLKOUT_CHANNEL_3   ClockOutChannel = 2
	CLKOUT_CHANNEL_MAX ClockOutChannel = 3
)

type ClockOutChannelT ClockOutChannel
type CacheSizeT c.Int

const (
	CACHE_SIZE_HALF CacheSizeT = 0
	CACHE_SIZE_FULL CacheSizeT = 1
)

type CacheWaysT c.Int

const (
	CACHE_4WAYS_ASSOC CacheWaysT = 0
	CACHE_8WAYS_ASSOC CacheWaysT = 1
)

type CacheLineSizeT c.Int

const (
	CACHE_LINE_SIZE_16B CacheLineSizeT = 0
	CACHE_LINE_SIZE_32B CacheLineSizeT = 1
	CACHE_LINE_SIZE_64B CacheLineSizeT = 2
)

type CacheAutoloadOrderT c.Int

const (
	CACHE_AUTOLOAD_POSITIVE CacheAutoloadOrderT = 0
	CACHE_AUTOLOAD_NEGATIVE CacheAutoloadOrderT = 1
)

type CacheAutoloadTriggerT c.Int

const (
	CACHE_AUTOLOAD_MISS_TRIGGER CacheAutoloadTriggerT = 0
	CACHE_AUTOLOAD_HIT_TRIGGER  CacheAutoloadTriggerT = 1
	CACHE_AUTOLOAD_BOTH_TRIGGER CacheAutoloadTriggerT = 2
)

type CacheFreezeModeT c.Int

const (
	CACHE_FREEZE_ACK_BUSY  CacheFreezeModeT = 0
	CACHE_FREEZE_ACK_ERROR CacheFreezeModeT = 1
)

type MmuPageModeT c.Int

const (
	MMU_PAGE_MODE_64KB    MmuPageModeT = 0
	MMU_PAGE_MODE_32KB    MmuPageModeT = 1
	MMU_PAGE_MODE_16KB    MmuPageModeT = 2
	MMU_PAGE_MODE_8KB     MmuPageModeT = 3
	MMU_PAGE_MODE_INVALID MmuPageModeT = 4
)

type CacheMode struct {
	CacheSize     c.Uint32T
	CacheLineSize c.Uint16T
	CacheWays     c.Uint8T
	Ibus          c.Uint8T
}

type IcacheTagItem struct {
	Valid    c.Uint32T
	Lock     c.Uint32T
	FifoCnt  c.Uint32T
	Tag      c.Uint32T
	Reserved c.Uint32T
}

type AutoloadConfig struct {
	Order   c.Uint8T
	Trigger c.Uint8T
	Ena0    c.Uint8T
	Ena1    c.Uint8T
	Addr0   c.Uint32T
	Size0   c.Uint32T
	Addr1   c.Uint32T
	Size1   c.Uint32T
}

type TagGroupInfo struct {
	Mode              CacheMode
	FilterAddr        c.Uint32T
	VaddrOffset       c.Uint32T
	TagAddr           [8]c.Uint32T
	CacheMemoryOffset [8]c.Uint32T
}

type LockConfig struct {
	Addr  c.Uint32T
	Size  c.Uint16T
	Group c.Uint16T
}

type CacheInternalStubTable struct {
	IcacheLineSize        c.Pointer
	IcacheAddr            c.Pointer
	DcacheAddr            c.Pointer
	InvalidateIcacheItems c.Pointer
	LockIcacheItems       c.Pointer
	UnlockIcacheItems     c.Pointer
	SuspendIcacheAutoload c.Pointer
	ResumeIcacheAutoload  c.Pointer
	FreezeIcacheEnable    c.Pointer
	FreezeIcacheDisable   c.Pointer
	OpAddr                c.Pointer
}

// llgo:type C
type CacheOpStart func()

// llgo:type C
type CacheOpEnd func()

type CacheOpCbT struct {
	Start CacheOpStart
	End   CacheOpEnd
}
type PeriphInterrputT c.Int

const (
	ETS_WIFI_MAC_INTR_SOURCE              PeriphInterrputT = 0
	ETS_WIFI_MAC_NMI_SOURCE               PeriphInterrputT = 1
	ETS_WIFI_PWR_INTR_SOURCE              PeriphInterrputT = 2
	ETS_WIFI_BB_INTR_SOURCE               PeriphInterrputT = 3
	ETS_BT_MAC_INTR_SOURCE                PeriphInterrputT = 4
	ETS_BT_BB_INTR_SOURCE                 PeriphInterrputT = 5
	ETS_BT_BB_NMI_SOURCE                  PeriphInterrputT = 6
	ETS_LP_TIMER_INTR_SOURCE              PeriphInterrputT = 7
	ETS_COEX_INTR_SOURCE                  PeriphInterrputT = 8
	ETS_BLE_TIMER_INTR_SOURCE             PeriphInterrputT = 9
	ETS_BLE_SEC_INTR_SOURCE               PeriphInterrputT = 10
	ETS_I2C_MASTER_SOURCE                 PeriphInterrputT = 11
	ETS_ZB_MAC_SOURCE                     PeriphInterrputT = 12
	ETS_PMU_INTR_SOURCE                   PeriphInterrputT = 13
	ETS_EFUSE_INTR_SOURCE                 PeriphInterrputT = 14
	ETS_LP_RTC_TIMER_INTR_SOURCE          PeriphInterrputT = 15
	ETS_LP_UART_INTR_SOURCE               PeriphInterrputT = 16
	ETS_LP_I2C_INTR_SOURCE                PeriphInterrputT = 17
	ETS_LP_WDT_INTR_SOURCE                PeriphInterrputT = 18
	ETS_LP_PERI_TIMEOUT_INTR_SOURCE       PeriphInterrputT = 19
	ETS_LP_APM_M0_INTR_SOURCE             PeriphInterrputT = 20
	ETS_LP_APM_M1_INTR_SOURCE             PeriphInterrputT = 21
	ETS_FROM_CPU_INTR0_SOURCE             PeriphInterrputT = 22
	ETS_FROM_CPU_INTR1_SOURCE             PeriphInterrputT = 23
	ETS_FROM_CPU_INTR2_SOURCE             PeriphInterrputT = 24
	ETS_FROM_CPU_INTR3_SOURCE             PeriphInterrputT = 25
	ETS_ASSIST_DEBUG_INTR_SOURCE          PeriphInterrputT = 26
	ETS_TRACE_INTR_SOURCE                 PeriphInterrputT = 27
	ETS_CACHE_INTR_SOURCE                 PeriphInterrputT = 28
	ETS_CPU_PERI_TIMEOUT_INTR_SOURCE      PeriphInterrputT = 29
	ETS_GPIO_INTR_SOURCE                  PeriphInterrputT = 30
	ETS_GPIO_NMI_SOURCE                   PeriphInterrputT = 31
	ETS_PAU_INTR_SOURCE                   PeriphInterrputT = 32
	ETS_HP_PERI_TIMEOUT_INTR_SOURCE       PeriphInterrputT = 33
	ETS_MODEM_PERI_TIMEOUT_INTR_SOURCE    PeriphInterrputT = 34
	ETS_HP_APM_M0_INTR_SOURCE             PeriphInterrputT = 35
	ETS_HP_APM_M1_INTR_SOURCE             PeriphInterrputT = 36
	ETS_HP_APM_M2_INTR_SOURCE             PeriphInterrputT = 37
	ETS_HP_APM_M3_INTR_SOURCE             PeriphInterrputT = 38
	ETS_LP_APM0_INTR_SOURCE               PeriphInterrputT = 39
	ETS_MSPI_INTR_SOURCE                  PeriphInterrputT = 40
	ETS_I2S0_INTR_SOURCE                  PeriphInterrputT = 41
	ETS_UHCI0_INTR_SOURCE                 PeriphInterrputT = 42
	ETS_UART0_INTR_SOURCE                 PeriphInterrputT = 43
	ETS_UART1_INTR_SOURCE                 PeriphInterrputT = 44
	ETS_LEDC_INTR_SOURCE                  PeriphInterrputT = 45
	ETS_TWAI0_INTR_SOURCE                 PeriphInterrputT = 46
	ETS_TWAI1_INTR_SOURCE                 PeriphInterrputT = 47
	ETS_USB_SERIAL_JTAG_INTR_SOURCE       PeriphInterrputT = 48
	ETS_RMT_INTR_SOURCE                   PeriphInterrputT = 49
	ETS_I2C_EXT0_INTR_SOURCE              PeriphInterrputT = 50
	ETS_TG0_T0_LEVEL_INTR_SOURCE          PeriphInterrputT = 51
	ETS_TG0_T1_LEVEL_INTR_SOURCE          PeriphInterrputT = 52
	ETS_TG0_WDT_LEVEL_INTR_SOURCE         PeriphInterrputT = 53
	ETS_TG1_T0_LEVEL_INTR_SOURCE          PeriphInterrputT = 54
	ETS_TG1_T1_LEVEL_INTR_SOURCE          PeriphInterrputT = 55
	ETS_TG1_WDT_LEVEL_INTR_SOURCE         PeriphInterrputT = 56
	ETS_SYSTIMER_TARGET0_INTR_SOURCE      PeriphInterrputT = 57
	ETS_SYSTIMER_TARGET1_INTR_SOURCE      PeriphInterrputT = 58
	ETS_SYSTIMER_TARGET2_INTR_SOURCE      PeriphInterrputT = 59
	ETS_SYSTIMER_TARGET0_EDGE_INTR_SOURCE PeriphInterrputT = 57
	ETS_SYSTIMER_TARGET1_EDGE_INTR_SOURCE PeriphInterrputT = 58
	ETS_SYSTIMER_TARGET2_EDGE_INTR_SOURCE PeriphInterrputT = 59
	ETS_APB_ADC_INTR_SOURCE               PeriphInterrputT = 60
	ETS_TEMPERATURE_SENSOR_INTR_SOURCE    PeriphInterrputT = 60
	ETS_MCPWM0_INTR_SOURCE                PeriphInterrputT = 61
	ETS_PCNT_INTR_SOURCE                  PeriphInterrputT = 62
	ETS_PARL_IO_INTR_SOURCE               PeriphInterrputT = 63
	ETS_SLC0_INTR_SOURCE                  PeriphInterrputT = 64
	ETS_SLC_INTR_SOURCE                   PeriphInterrputT = 65
	ETS_DMA_IN_CH0_INTR_SOURCE            PeriphInterrputT = 66
	ETS_DMA_IN_CH1_INTR_SOURCE            PeriphInterrputT = 67
	ETS_DMA_IN_CH2_INTR_SOURCE            PeriphInterrputT = 68
	ETS_DMA_OUT_CH0_INTR_SOURCE           PeriphInterrputT = 69
	ETS_DMA_OUT_CH1_INTR_SOURCE           PeriphInterrputT = 70
	ETS_DMA_OUT_CH2_INTR_SOURCE           PeriphInterrputT = 71
	ETS_GSPI2_INTR_SOURCE                 PeriphInterrputT = 72
	ETS_AES_INTR_SOURCE                   PeriphInterrputT = 73
	ETS_SHA_INTR_SOURCE                   PeriphInterrputT = 74
	ETS_RSA_INTR_SOURCE                   PeriphInterrputT = 75
	ETS_ECC_INTR_SOURCE                   PeriphInterrputT = 76
	ETS_MAX_INTR_SOURCE                   PeriphInterrputT = 77
)

type PeriphModuleT c.Int

const (
	PERIPH_LEDC_MODULE                PeriphModuleT = 0
	PERIPH_UART0_MODULE               PeriphModuleT = 1
	PERIPH_UART1_MODULE               PeriphModuleT = 2
	PERIPH_USB_DEVICE_MODULE          PeriphModuleT = 3
	PERIPH_I2C0_MODULE                PeriphModuleT = 4
	PERIPH_I2S0_MODULE                PeriphModuleT = 5
	PERIPH_TIMG0_MODULE               PeriphModuleT = 6
	PERIPH_TIMG1_MODULE               PeriphModuleT = 7
	PERIPH_UHCI0_MODULE               PeriphModuleT = 8
	PERIPH_RMT_MODULE                 PeriphModuleT = 9
	PERIPH_PCNT_MODULE                PeriphModuleT = 10
	PERIPH_SPI_MODULE                 PeriphModuleT = 11
	PERIPH_SPI2_MODULE                PeriphModuleT = 12
	PERIPH_TWAI0_MODULE               PeriphModuleT = 13
	PERIPH_TWAI1_MODULE               PeriphModuleT = 14
	PERIPH_RNG_MODULE                 PeriphModuleT = 15
	PERIPH_RSA_MODULE                 PeriphModuleT = 16
	PERIPH_AES_MODULE                 PeriphModuleT = 17
	PERIPH_SHA_MODULE                 PeriphModuleT = 18
	PERIPH_ECC_MODULE                 PeriphModuleT = 19
	PERIPH_HMAC_MODULE                PeriphModuleT = 20
	PERIPH_DS_MODULE                  PeriphModuleT = 21
	PERIPH_SDIO_SLAVE_MODULE          PeriphModuleT = 22
	PERIPH_GDMA_MODULE                PeriphModuleT = 23
	PERIPH_MCPWM0_MODULE              PeriphModuleT = 24
	PERIPH_ETM_MODULE                 PeriphModuleT = 25
	PERIPH_PARLIO_MODULE              PeriphModuleT = 26
	PERIPH_SYSTIMER_MODULE            PeriphModuleT = 27
	PERIPH_SARADC_MODULE              PeriphModuleT = 28
	PERIPH_TEMPSENSOR_MODULE          PeriphModuleT = 29
	PERIPH_ASSIST_DEBUG_MODULE        PeriphModuleT = 30
	PERIPH_LP_I2C0_MODULE             PeriphModuleT = 31
	PERIPH_LP_UART0_MODULE            PeriphModuleT = 32
	PERIPH_WIFI_MODULE                PeriphModuleT = 33
	PERIPH_BT_MODULE                  PeriphModuleT = 34
	PERIPH_IEEE802154_MODULE          PeriphModuleT = 35
	PERIPH_COEX_MODULE                PeriphModuleT = 36
	PERIPH_PHY_MODULE                 PeriphModuleT = 37
	PERIPH_ANA_I2C_MASTER_MODULE      PeriphModuleT = 38
	PERIPH_MODEM_ETM_MODULE           PeriphModuleT = 39
	PERIPH_MODEM_ADC_COMMON_FE_MODULE PeriphModuleT = 40
	PERIPH_MODULE_MAX                 PeriphModuleT = 41
)

/** Group: Configuration Registers */
/** Type of ep1 register
 *  FIFO access for the CDC-ACM data IN and OUT endpoints.
 */

type UsbSerialJtagEp1RegT struct {
	Val c.Uint32T
}

/** Type of ep1_conf register
 *  Configuration and control registers for the CDC-ACM FIFOs.
 */

type UsbSerialJtagEp1ConfRegT struct {
	Val c.Uint32T
}

/** Type of conf0 register
 *  PHY hardware configuration.
 */

type UsbSerialJtagConf0RegT struct {
	Val c.Uint32T
}

/** Type of test register
 *  Registers used for debugging the PHY.
 */

type UsbSerialJtagTestRegT struct {
	Val c.Uint32T
}

/** Type of misc_conf register
 *  Clock enable control
 */

type UsbSerialJtagMiscConfRegT struct {
	Val c.Uint32T
}

/** Type of mem_conf register
 *  Memory power control
 */

type UsbSerialJtagMemConfRegT struct {
	Val c.Uint32T
}

/** Type of chip_rst register
 *  CDC-ACM chip reset control.
 */

type UsbSerialJtagChipRstRegT struct {
	Val c.Uint32T
}

/** Type of get_line_code_w0 register
 *  W0 of GET_LINE_CODING command.
 */

type UsbSerialJtagGetLineCodeW0RegT struct {
	Val c.Uint32T
}

/** Type of get_line_code_w1 register
 *  W1 of GET_LINE_CODING command.
 */

type UsbSerialJtagGetLineCodeW1RegT struct {
	Val c.Uint32T
}

/** Type of config_update register
 *  Configuration registers' value update
 */

type UsbSerialJtagConfigUpdateRegT struct {
	Val c.Uint32T
}

/** Type of ser_afifo_config register
 *  Serial AFIFO configure register
 */

type UsbSerialJtagSerAfifoConfigRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt Registers */
/** Type of int_raw register
 *  Interrupt raw status register.
 */

type UsbSerialJtagIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  Interrupt status register.
 */

type UsbSerialJtagIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  Interrupt enable status register.
 */

type UsbSerialJtagIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Interrupt clear status register.
 */

type UsbSerialJtagIntClrRegT struct {
	Val c.Uint32T
}

/** Group: Status Registers */
/** Type of jfifo_st register
 *  JTAG FIFO status and control registers.
 */

type UsbSerialJtagJfifoStRegT struct {
	Val c.Uint32T
}

/** Type of fram_num register
 *  Last received SOF frame index register.
 */

type UsbSerialJtagFramNumRegT struct {
	Val c.Uint32T
}

/** Type of in_ep0_st register
 *  Control IN endpoint status information.
 */

type UsbSerialJtagInEp0StRegT struct {
	Val c.Uint32T
}

/** Type of in_ep1_st register
 *  CDC-ACM IN endpoint status information.
 */

type UsbSerialJtagInEp1StRegT struct {
	Val c.Uint32T
}

/** Type of in_ep2_st register
 *  CDC-ACM interrupt IN endpoint status information.
 */

type UsbSerialJtagInEp2StRegT struct {
	Val c.Uint32T
}

/** Type of in_ep3_st register
 *  JTAG IN endpoint status information.
 */

type UsbSerialJtagInEp3StRegT struct {
	Val c.Uint32T
}

/** Type of out_ep0_st register
 *  Control OUT endpoint status information.
 */

type UsbSerialJtagOutEp0StRegT struct {
	Val c.Uint32T
}

/** Type of out_ep1_st register
 *  CDC-ACM OUT endpoint status information.
 */

type UsbSerialJtagOutEp1StRegT struct {
	Val c.Uint32T
}

/** Type of out_ep2_st register
 *  JTAG OUT endpoint status information.
 */

type UsbSerialJtagOutEp2StRegT struct {
	Val c.Uint32T
}

/** Type of set_line_code_w0 register
 *  W0 of SET_LINE_CODING command.
 */

type UsbSerialJtagSetLineCodeW0RegT struct {
	Val c.Uint32T
}

/** Type of set_line_code_w1 register
 *  W1 of SET_LINE_CODING command.
 */

type UsbSerialJtagSetLineCodeW1RegT struct {
	Val c.Uint32T
}

/** Type of bus_reset_st register
 *  USB Bus reset status register
 */

type UsbSerialJtagBusResetStRegT struct {
	Val c.Uint32T
}

/** Group: Version Registers */
/** Type of date register
 *  Date register
 */

type UsbSerialJtagDateRegT struct {
	Val c.Uint32T
}

type UsbSerialJtagDevS struct {
	Ep1            UsbSerialJtagEp1RegT
	Ep1Conf        UsbSerialJtagEp1ConfRegT
	IntRaw         UsbSerialJtagIntRawRegT
	IntSt          UsbSerialJtagIntStRegT
	IntEna         UsbSerialJtagIntEnaRegT
	IntClr         UsbSerialJtagIntClrRegT
	Conf0          UsbSerialJtagConf0RegT
	Test           UsbSerialJtagTestRegT
	JfifoSt        UsbSerialJtagJfifoStRegT
	FramNum        UsbSerialJtagFramNumRegT
	InEp0St        UsbSerialJtagInEp0StRegT
	InEp1St        UsbSerialJtagInEp1StRegT
	InEp2St        UsbSerialJtagInEp2StRegT
	InEp3St        UsbSerialJtagInEp3StRegT
	OutEp0St       UsbSerialJtagOutEp0StRegT
	OutEp1St       UsbSerialJtagOutEp1StRegT
	OutEp2St       UsbSerialJtagOutEp2StRegT
	MiscConf       UsbSerialJtagMiscConfRegT
	MemConf        UsbSerialJtagMemConfRegT
	ChipRst        UsbSerialJtagChipRstRegT
	SetLineCodeW0  UsbSerialJtagSetLineCodeW0RegT
	SetLineCodeW1  UsbSerialJtagSetLineCodeW1RegT
	GetLineCodeW0  UsbSerialJtagGetLineCodeW0RegT
	GetLineCodeW1  UsbSerialJtagGetLineCodeW1RegT
	ConfigUpdate   UsbSerialJtagConfigUpdateRegT
	SerAfifoConfig UsbSerialJtagSerAfifoConfigRegT
	BusResetSt     UsbSerialJtagBusResetStRegT
	Reserved06c    [5]c.Uint32T
	Date           UsbSerialJtagDateRegT
}
type UsbSerialJtagDevT UsbSerialJtagDevS

/**
 * SPDX-FileCopyrightText: 2022-2023 Espressif Systems (Shanghai) CO LTD
 *
 *  SPDX-License-Identifier: Apache-2.0
 */

type LpTimerTargetRegT struct {
	Lo struct {
		Val c.Uint32T
	}
	Hi struct {
		Val c.Uint32T
	}
}

type LpTimerUpdateRegT struct {
	Val c.Uint32T
}

type LpTimerCounterRegT struct {
	Lo struct {
		Val c.Uint32T
	}
	Hi struct {
		Val c.Uint32T
	}
}

type LpTimerOverflowRegT struct {
	Val c.Uint32T
}

type LpTimerIntrRegT struct {
	Val c.Uint32T
}

type LpTimerLpIntrRegT struct {
	Val c.Uint32T
}

type LpTimerDateClkenRegT struct {
	Val c.Uint32T
}

type LpTimerDevT struct {
	Target    [2]LpTimerTargetRegT
	Update    LpTimerUpdateRegT
	Counter   [2]LpTimerCounterRegT
	Overflow  LpTimerOverflowRegT
	IntRaw    LpTimerIntrRegT
	IntSt     LpTimerIntrRegT
	IntEn     LpTimerIntrRegT
	IntClr    LpTimerIntrRegT
	LpIntRaw  LpTimerLpIntrRegT
	LpIntSt   LpTimerLpIntrRegT
	LpIntEn   LpTimerLpIntrRegT
	LpIntClr  LpTimerLpIntrRegT
	Reserved  [237]c.Uint32T
	DateClken LpTimerDateClkenRegT
}

/** Group: PGM Data Register */
/** Type of pgm_data0 register
 *  Register 0 that stores data to be programmed.
 */

type EfusePgmData0RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data1 register
 *  Register 1 that stores data to be programmed.
 */

type EfusePgmData1RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data2 register
 *  Register 2 that stores data to be programmed.
 */

type EfusePgmData2RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data3 register
 *  Register 3 that stores data to be programmed.
 */

type EfusePgmData3RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data4 register
 *  Register 4 that stores data to be programmed.
 */

type EfusePgmData4RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data5 register
 *  Register 5 that stores data to be programmed.
 */

type EfusePgmData5RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data6 register
 *  Register 6 that stores data to be programmed.
 */

type EfusePgmData6RegT struct {
	Val c.Uint32T
}

/** Type of pgm_data7 register
 *  Register 7 that stores data to be programmed.
 */

type EfusePgmData7RegT struct {
	Val c.Uint32T
}

/** Type of pgm_check_value0 register
 *  Register 0 that stores the RS code to be programmed.
 */

type EfusePgmCheckValue0RegT struct {
	Val c.Uint32T
}

/** Type of pgm_check_value1 register
 *  Register 1 that stores the RS code to be programmed.
 */

type EfusePgmCheckValue1RegT struct {
	Val c.Uint32T
}

/** Type of pgm_check_value2 register
 *  Register 2 that stores the RS code to be programmed.
 */

type EfusePgmCheckValue2RegT struct {
	Val c.Uint32T
}

/** Group: Read Data Register */
/** Type of rd_wr_dis register
 *  BLOCK0 data register 0.
 */

type EfuseRdWrDisRegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_data0 register
 *  BLOCK0 data register 1.
 */

type EfuseRdRepeatData0RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_data1 register
 *  BLOCK0 data register 2.
 */

type EfuseRdRepeatData1RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_data2 register
 *  BLOCK0 data register 3.
 */

type EfuseRdRepeatData2RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_data3 register
 *  BLOCK0 data register 4.
 */

type EfuseRdRepeatData3RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_data4 register
 *  BLOCK0 data register 5.
 */

type EfuseRdRepeatData4RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_0 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys0RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_1 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys1RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_2 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys2RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_3 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys3RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_4 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys4RegT struct {
	Val c.Uint32T
}

/** Type of rd_mac_spi_sys_5 register
 *  BLOCK1 data register $n.
 */

type EfuseRdMacSpiSys5RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data0 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data1 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data2 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data3 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data4 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data5 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data6 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part1_data7 register
 *  Register $n of BLOCK2 (system).
 */

type EfuseRdSysPart1Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data0 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData0RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data1 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData1RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data2 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData2RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data3 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData3RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data4 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData4RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data5 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData5RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data6 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData6RegT struct {
	Val c.Uint32T
}

/** Type of rd_usr_data7 register
 *  Register $n of BLOCK3 (user).
 */

type EfuseRdUsrData7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data0 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data1 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data2 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data3 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data4 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data5 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data6 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key0_data7 register
 *  Register $n of BLOCK4 (KEY0).
 */

type EfuseRdKey0Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data0 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data1 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data2 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data3 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data4 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data5 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data6 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key1_data7 register
 *  Register $n of BLOCK5 (KEY1).
 */

type EfuseRdKey1Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data0 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data1 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data2 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data3 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data4 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data5 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data6 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key2_data7 register
 *  Register $n of BLOCK6 (KEY2).
 */

type EfuseRdKey2Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data0 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data1 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data2 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data3 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data4 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data5 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data6 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key3_data7 register
 *  Register $n of BLOCK7 (KEY3).
 */

type EfuseRdKey3Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data0 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data1 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data2 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data3 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data4 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data5 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data6 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key4_data7 register
 *  Register $n of BLOCK8 (KEY4).
 */

type EfuseRdKey4Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data0 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data1 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data2 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data3 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data4 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data5 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data6 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_key5_data7 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdKey5Data7RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data0 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data0RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data1 register
 *  Register $n of BLOCK9 (KEY5).
 */

type EfuseRdSysPart2Data1RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data2 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data2RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data3 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data3RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data4 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data4RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data5 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data5RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data6 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data6RegT struct {
	Val c.Uint32T
}

/** Type of rd_sys_part2_data7 register
 *  Register $n of BLOCK10 (system).
 */

type EfuseRdSysPart2Data7RegT struct {
	Val c.Uint32T
}

/** Group: Report Register */
/** Type of rd_repeat_err0 register
 *  Programming error record register 0 of BLOCK0.
 */

type EfuseRdRepeatErr0RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_err1 register
 *  Programming error record register 1 of BLOCK0.
 */

type EfuseRdRepeatErr1RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_err2 register
 *  Programming error record register 2 of BLOCK0.
 */

type EfuseRdRepeatErr2RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_err3 register
 *  Programming error record register 3 of BLOCK0.
 */

type EfuseRdRepeatErr3RegT struct {
	Val c.Uint32T
}

/** Type of rd_repeat_err4 register
 *  Programming error record register 4 of BLOCK0.
 */

type EfuseRdRepeatErr4RegT struct {
	Val c.Uint32T
}

/** Type of rd_rs_err0 register
 *  Programming error record register 0 of BLOCK1-10.
 */

type EfuseRdRsErr0RegT struct {
	Val c.Uint32T
}

/** Type of rd_rs_err1 register
 *  Programming error record register 1 of BLOCK1-10.
 */

type EfuseRdRsErr1RegT struct {
	Val c.Uint32T
}

/** Group: Configuration Register */
/** Type of clk register
 *  eFuse clcok configuration register.
 */

type EfuseClkRegT struct {
	Val c.Uint32T
}

/** Type of conf register
 *  eFuse operation mode configuration register
 */

type EfuseConfRegT struct {
	Val c.Uint32T
}

/** Type of cmd register
 *  eFuse command register.
 */

type EfuseCmdRegT struct {
	Val c.Uint32T
}

/** Type of dac_conf register
 *  Controls the eFuse programming voltage.
 */

type EfuseDacConfRegT struct {
	Val c.Uint32T
}

/** Type of rd_tim_conf register
 *  Configures read timing parameters.
 */

type EfuseRdTimConfRegT struct {
	Val c.Uint32T
}

/** Type of wr_tim_conf1 register
 *  Configurarion register 1 of eFuse programming timing parameters.
 */

type EfuseWrTimConf1RegT struct {
	Val c.Uint32T
}

/** Type of wr_tim_conf2 register
 *  Configurarion register 2 of eFuse programming timing parameters.
 */

type EfuseWrTimConf2RegT struct {
	Val c.Uint32T
}

/** Type of wr_tim_conf0_rs_bypass register
 *  Configurarion register0 of eFuse programming time parameters and rs bypass
 *  operation.
 */

type EfuseWrTimConf0RsBypassRegT struct {
	Val c.Uint32T
}

/** Group: Status Register */
/** Type of status register
 *  eFuse status register.
 */

type EfuseStatusRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt Register */
/** Type of int_raw register
 *  eFuse raw interrupt register.
 */

type EfuseIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  eFuse interrupt status register.
 */

type EfuseIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  eFuse interrupt enable register.
 */

type EfuseIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  eFuse interrupt clear register.
 */

type EfuseIntClrRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  eFuse version register.
 */

type EfuseDateRegT struct {
	Val c.Uint32T
}

type EfuseDevT struct {
	PgmData0           EfusePgmData0RegT
	PgmData1           EfusePgmData1RegT
	PgmData2           EfusePgmData2RegT
	PgmData3           EfusePgmData3RegT
	PgmData4           EfusePgmData4RegT
	PgmData5           EfusePgmData5RegT
	PgmData6           EfusePgmData6RegT
	PgmData7           EfusePgmData7RegT
	PgmCheckValue0     EfusePgmCheckValue0RegT
	PgmCheckValue1     EfusePgmCheckValue1RegT
	PgmCheckValue2     EfusePgmCheckValue2RegT
	RdWrDis            EfuseRdWrDisRegT
	RdRepeatData0      EfuseRdRepeatData0RegT
	RdRepeatData1      EfuseRdRepeatData1RegT
	RdRepeatData2      EfuseRdRepeatData2RegT
	RdRepeatData3      EfuseRdRepeatData3RegT
	RdRepeatData4      EfuseRdRepeatData4RegT
	RdMacSpiSys0       EfuseRdMacSpiSys0RegT
	RdMacSpiSys1       EfuseRdMacSpiSys1RegT
	RdMacSpiSys2       EfuseRdMacSpiSys2RegT
	RdMacSpiSys3       EfuseRdMacSpiSys3RegT
	RdMacSpiSys4       EfuseRdMacSpiSys4RegT
	RdMacSpiSys5       EfuseRdMacSpiSys5RegT
	RdSysPart1Data0    EfuseRdSysPart1Data0RegT
	RdSysPart1Data1    EfuseRdSysPart1Data1RegT
	RdSysPart1Data2    EfuseRdSysPart1Data2RegT
	RdSysPart1Data3    EfuseRdSysPart1Data3RegT
	RdSysPart1Data4    EfuseRdSysPart1Data4RegT
	RdSysPart1Data5    EfuseRdSysPart1Data5RegT
	RdSysPart1Data6    EfuseRdSysPart1Data6RegT
	RdSysPart1Data7    EfuseRdSysPart1Data7RegT
	RdUsrData0         EfuseRdUsrData0RegT
	RdUsrData1         EfuseRdUsrData1RegT
	RdUsrData2         EfuseRdUsrData2RegT
	RdUsrData3         EfuseRdUsrData3RegT
	RdUsrData4         EfuseRdUsrData4RegT
	RdUsrData5         EfuseRdUsrData5RegT
	RdUsrData6         EfuseRdUsrData6RegT
	RdUsrData7         EfuseRdUsrData7RegT
	RdKey0Data0        EfuseRdKey0Data0RegT
	RdKey0Data1        EfuseRdKey0Data1RegT
	RdKey0Data2        EfuseRdKey0Data2RegT
	RdKey0Data3        EfuseRdKey0Data3RegT
	RdKey0Data4        EfuseRdKey0Data4RegT
	RdKey0Data5        EfuseRdKey0Data5RegT
	RdKey0Data6        EfuseRdKey0Data6RegT
	RdKey0Data7        EfuseRdKey0Data7RegT
	RdKey1Data0        EfuseRdKey1Data0RegT
	RdKey1Data1        EfuseRdKey1Data1RegT
	RdKey1Data2        EfuseRdKey1Data2RegT
	RdKey1Data3        EfuseRdKey1Data3RegT
	RdKey1Data4        EfuseRdKey1Data4RegT
	RdKey1Data5        EfuseRdKey1Data5RegT
	RdKey1Data6        EfuseRdKey1Data6RegT
	RdKey1Data7        EfuseRdKey1Data7RegT
	RdKey2Data0        EfuseRdKey2Data0RegT
	RdKey2Data1        EfuseRdKey2Data1RegT
	RdKey2Data2        EfuseRdKey2Data2RegT
	RdKey2Data3        EfuseRdKey2Data3RegT
	RdKey2Data4        EfuseRdKey2Data4RegT
	RdKey2Data5        EfuseRdKey2Data5RegT
	RdKey2Data6        EfuseRdKey2Data6RegT
	RdKey2Data7        EfuseRdKey2Data7RegT
	RdKey3Data0        EfuseRdKey3Data0RegT
	RdKey3Data1        EfuseRdKey3Data1RegT
	RdKey3Data2        EfuseRdKey3Data2RegT
	RdKey3Data3        EfuseRdKey3Data3RegT
	RdKey3Data4        EfuseRdKey3Data4RegT
	RdKey3Data5        EfuseRdKey3Data5RegT
	RdKey3Data6        EfuseRdKey3Data6RegT
	RdKey3Data7        EfuseRdKey3Data7RegT
	RdKey4Data0        EfuseRdKey4Data0RegT
	RdKey4Data1        EfuseRdKey4Data1RegT
	RdKey4Data2        EfuseRdKey4Data2RegT
	RdKey4Data3        EfuseRdKey4Data3RegT
	RdKey4Data4        EfuseRdKey4Data4RegT
	RdKey4Data5        EfuseRdKey4Data5RegT
	RdKey4Data6        EfuseRdKey4Data6RegT
	RdKey4Data7        EfuseRdKey4Data7RegT
	RdKey5Data0        EfuseRdKey5Data0RegT
	RdKey5Data1        EfuseRdKey5Data1RegT
	RdKey5Data2        EfuseRdKey5Data2RegT
	RdKey5Data3        EfuseRdKey5Data3RegT
	RdKey5Data4        EfuseRdKey5Data4RegT
	RdKey5Data5        EfuseRdKey5Data5RegT
	RdKey5Data6        EfuseRdKey5Data6RegT
	RdKey5Data7        EfuseRdKey5Data7RegT
	RdSysPart2Data0    EfuseRdSysPart2Data0RegT
	RdSysPart2Data1    EfuseRdSysPart2Data1RegT
	RdSysPart2Data2    EfuseRdSysPart2Data2RegT
	RdSysPart2Data3    EfuseRdSysPart2Data3RegT
	RdSysPart2Data4    EfuseRdSysPart2Data4RegT
	RdSysPart2Data5    EfuseRdSysPart2Data5RegT
	RdSysPart2Data6    EfuseRdSysPart2Data6RegT
	RdSysPart2Data7    EfuseRdSysPart2Data7RegT
	RdRepeatErr0       EfuseRdRepeatErr0RegT
	RdRepeatErr1       EfuseRdRepeatErr1RegT
	RdRepeatErr2       EfuseRdRepeatErr2RegT
	RdRepeatErr3       EfuseRdRepeatErr3RegT
	Reserved18c        c.Uint32T
	RdRepeatErr4       EfuseRdRepeatErr4RegT
	Reserved194        [11]c.Uint32T
	RdRsErr0           EfuseRdRsErr0RegT
	RdRsErr1           EfuseRdRsErr1RegT
	Clk                EfuseClkRegT
	Conf               EfuseConfRegT
	Status             EfuseStatusRegT
	Cmd                EfuseCmdRegT
	IntRaw             EfuseIntRawRegT
	IntSt              EfuseIntStRegT
	IntEna             EfuseIntEnaRegT
	IntClr             EfuseIntClrRegT
	DacConf            EfuseDacConfRegT
	RdTimConf          EfuseRdTimConfRegT
	WrTimConf1         EfuseWrTimConf1RegT
	WrTimConf2         EfuseWrTimConf2RegT
	WrTimConf0RsBypass EfuseWrTimConf0RsBypassRegT
	Date               EfuseDateRegT
}
type EtsEfusePurposeT c.Int

const (
	ETS_EFUSE_KEY_PURPOSE_USER                        EtsEfusePurposeT = 0
	ETS_EFUSE_KEY_PURPOSE_RESERVED                    EtsEfusePurposeT = 1
	ETS_EFUSE_KEY_PURPOSE_XTS_AES_128_KEY             EtsEfusePurposeT = 4
	ETS_EFUSE_KEY_PURPOSE_HMAC_DOWN_ALL               EtsEfusePurposeT = 5
	ETS_EFUSE_KEY_PURPOSE_HMAC_DOWN_JTAG              EtsEfusePurposeT = 6
	ETS_EFUSE_KEY_PURPOSE_HMAC_DOWN_DIGITAL_SIGNATURE EtsEfusePurposeT = 7
	ETS_EFUSE_KEY_PURPOSE_HMAC_UP                     EtsEfusePurposeT = 8
	ETS_EFUSE_KEY_PURPOSE_SECURE_BOOT_DIGEST0         EtsEfusePurposeT = 9
	ETS_EFUSE_KEY_PURPOSE_SECURE_BOOT_DIGEST1         EtsEfusePurposeT = 10
	ETS_EFUSE_KEY_PURPOSE_SECURE_BOOT_DIGEST2         EtsEfusePurposeT = 11
	ETS_EFUSE_KEY_PURPOSE_MAX                         EtsEfusePurposeT = 12
)

type EtsEfuseBlockT c.Int

const (
	ETS_EFUSE_BLOCK0         EtsEfuseBlockT = 0
	ETS_EFUSE_MAC_SPI_SYS_0  EtsEfuseBlockT = 1
	ETS_EFUSE_BLOCK_SYS_DATA EtsEfuseBlockT = 2
	ETS_EFUSE_BLOCK_USR_DATA EtsEfuseBlockT = 3
	ETS_EFUSE_BLOCK_KEY0     EtsEfuseBlockT = 4
	ETS_EFUSE_BLOCK_KEY1     EtsEfuseBlockT = 5
	ETS_EFUSE_BLOCK_KEY2     EtsEfuseBlockT = 6
	ETS_EFUSE_BLOCK_KEY3     EtsEfuseBlockT = 7
	ETS_EFUSE_BLOCK_KEY4     EtsEfuseBlockT = 8
	ETS_EFUSE_BLOCK_KEY5     EtsEfuseBlockT = 9
	ETS_EFUSE_BLOCK_KEY6     EtsEfuseBlockT = 10
	ETS_EFUSE_BLOCK_MAX      EtsEfuseBlockT = 11
)

/** Group: Configuration Register */
/** Type of regdma_conf register
 *  Peri backup control register
 */

type PauRegdmaConfRegT struct {
	Val c.Uint32T
}

/** Type of regdma_clk_conf register
 *  Clock control register
 */

type PauRegdmaClkConfRegT struct {
	Val c.Uint32T
}

/** Type of regdma_etm_ctrl register
 *  ETM start ctrl reg
 */

type PauRegdmaEtmCtrlRegT struct {
	Val c.Uint32T
}

/** Type of regdma_link_0_addr register
 *  link_0_addr
 */

type PauRegdmaLink0AddrRegT struct {
	Val c.Uint32T
}

/** Type of regdma_link_1_addr register
 *  Link_1_addr
 */

type PauRegdmaLink1AddrRegT struct {
	Val c.Uint32T
}

/** Type of regdma_link_2_addr register
 *  Link_2_addr
 */

type PauRegdmaLink2AddrRegT struct {
	Val c.Uint32T
}

/** Type of regdma_link_3_addr register
 *  Link_3_addr
 */

type PauRegdmaLink3AddrRegT struct {
	Val c.Uint32T
}

/** Type of regdma_link_mac_addr register
 *  Link_mac_addr
 */

type PauRegdmaLinkMacAddrRegT struct {
	Val c.Uint32T
}

/** Type of regdma_current_link_addr register
 *  current link addr
 */

type PauRegdmaCurrentLinkAddrRegT struct {
	Val c.Uint32T
}

/** Type of regdma_backup_addr register
 *  Backup addr
 */

type PauRegdmaBackupAddrRegT struct {
	Val c.Uint32T
}

/** Type of regdma_mem_addr register
 *  mem addr
 */

type PauRegdmaMemAddrRegT struct {
	Val c.Uint32T
}

/** Type of regdma_bkp_conf register
 *  backup config
 */

type PauRegdmaBkpConfRegT struct {
	Val c.Uint32T
}

/** Type of retention_link_base register
 *  retention dma link base
 */

type PauRetentionLinkBaseRegT struct {
	Val c.Uint32T
}

/** Type of retention_cfg register
 *  retention_cfg
 */

type PauRetentionCfgRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  Read only register for error and done
 */

type PauIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_raw register
 *  Read only register for error and done
 */

type PauIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Read only register for error and done
 */

type PauIntClrRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  Read only register for error and done
 */

type PauIntStRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  Date register.
 */

type PauDateRegT struct {
	Val c.Uint32T
}

type PauDevT struct {
	RegdmaConf            PauRegdmaConfRegT
	RegdmaClkConf         PauRegdmaClkConfRegT
	RegdmaEtmCtrl         PauRegdmaEtmCtrlRegT
	RegdmaLink0Addr       PauRegdmaLink0AddrRegT
	RegdmaLink1Addr       PauRegdmaLink1AddrRegT
	RegdmaLink2Addr       PauRegdmaLink2AddrRegT
	RegdmaLink3Addr       PauRegdmaLink3AddrRegT
	RegdmaLinkMacAddr     PauRegdmaLinkMacAddrRegT
	RegdmaCurrentLinkAddr PauRegdmaCurrentLinkAddrRegT
	RegdmaBackupAddr      PauRegdmaBackupAddrRegT
	RegdmaMemAddr         PauRegdmaMemAddrRegT
	RegdmaBkpConf         PauRegdmaBkpConfRegT
	RetentionLinkBase     PauRetentionLinkBaseRegT
	RetentionCfg          PauRetentionCfgRegT
	IntEna                PauIntEnaRegT
	IntRaw                PauIntRawRegT
	IntClr                PauIntClrRegT
	IntSt                 PauIntStRegT
	Reserved048           [237]c.Uint32T
	Date                  PauDateRegT
}

/** Group: Configuration Register */
/** Type of chn_conf0 register
 *  Configuration register 0 for channel n
 */

type LedcChnConf0RegT struct {
	Val c.Uint32T
}

/** Type of chn_conf1 register
 *  Configuration register 1 for channel n
 */

type LedcChnConf1RegT struct {
	Val c.Uint32T
}

/** Type of evt_task_en0 register
 *  Ledc event task enable bit register0.
 */

type LedcEvtTaskEn0RegT struct {
	Val c.Uint32T
}

/** Type of evt_task_en1 register
 *  Ledc event task enable bit register1.
 */

type LedcEvtTaskEn1RegT struct {
	Val c.Uint32T
}

/** Type of evt_task_en2 register
 *  Ledc event task enable bit register2.
 */

type LedcEvtTaskEn2RegT struct {
	Val c.Uint32T
}

/** Type of timern_cmp register
 *  Ledc timern compare value register.
 */

type LedcTimernCmpRegT struct {
	Val c.Uint32T
}

/** Type of timern_cnt_cap register
 *  Ledc timern count value capture register.
 */

type LedcTimernCntCapRegT struct {
	Val c.Uint32T
}

/** Type of conf register
 *  Global ledc configuration register
 */

type LedcConfRegT struct {
	Val c.Uint32T
}

/** Group: Hpoint Register */
/** Type of chn_hpoint register
 *  High point register for channel n
 */

type LedcChnHpointRegT struct {
	Val c.Uint32T
}

/** Group: Duty Cycle Register */
/** Type of chn_duty register
 *  Initial duty cycle for channel n
 */

type LedcChnDutyRegT struct {
	Val c.Uint32T
}

/** Type of chn_duty_r register
 *  Current duty cycle for channel n
 */

type LedcChnDutyRRegT struct {
	Val c.Uint32T
}

/** Group: Timer Register */
/** Type of timern_conf register
 *  Timer n configuration
 */

type LedcTimerxConfRegT struct {
	Val c.Uint32T
}

/** Type of timern_value register
 *  Timer n current counter value
 */

type LedcTimerxValueRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt Register */
/** Type of int_raw register
 *  Raw interrupt status
 */

type LedcIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  Masked interrupt status
 */

type LedcIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  Interrupt enable bits
 */

type LedcIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Interrupt clear bits
 */

type LedcIntClrRegT struct {
	Val c.Uint32T
}

/** Group: Gamma RAM Register */
/** Type of chn_gamma_wr register
 *  Ledc chn gamma ram write register.
 */

type LedcChnGammaWrRegT struct {
	Val c.Uint32T
}

/** Type of chn_gamma_wr_addr register
 *  Ledc chn gamma ram write address register.
 */

type LedcChnGammaWrAddrRegT struct {
	Val c.Uint32T
}

/** Type of chn_gamma_rd_addr register
 *  Ledc chn gamma ram read address register.
 */

type LedcChnGammaRdAddrRegT struct {
	Val c.Uint32T
}

/** Type of chn_gamma_rd_data register
 *  Ledc chn gamma ram read data register.
 */

type LedcChnGammaRdDataRegT struct {
	Val c.Uint32T
}

/** Group: Gamma Config Register */
/** Type of chn_gamma_conf register
 *  Ledc chn gamma config register.
 */

type LedcChnGammaConfRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  Version control register
 */

type LedcDateRegT struct {
	Val c.Uint32T
}

type LedcChnRegT struct {
	Conf0  LedcChnConf0RegT
	Hpoint LedcChnHpointRegT
	Duty   LedcChnDutyRegT
	Conf1  LedcChnConf1RegT
	DutyRd LedcChnDutyRRegT
}

type LedcChGroupRegT struct {
	Channel [6]LedcChnRegT
}

type LedcTimerxRegT struct {
	Conf  LedcTimerxConfRegT
	Value LedcTimerxValueRegT
}

type LedcTimerGroupRegT struct {
	Timer [4]LedcTimerxRegT
}

type LedcChnGammaRegT struct {
	Wr     LedcChnGammaWrRegT
	WrAddr LedcChnGammaWrAddrRegT
	RdAddr LedcChnGammaRdAddrRegT
	RdData LedcChnGammaRdDataRegT
}

type LedcChGammaGroupRegT struct {
	Channel [6]LedcChnGammaRegT
}

type LedcChGammaConfGroupRegT struct {
	GammaConf [6]LedcChnGammaConfRegT
}

type LedcTimerCmpGroupRegT struct {
	Cmp [4]LedcTimernCmpRegT
}

type LedcTimerCntCapGroupRegT struct {
	CntCap [4]LedcTimernCntCapRegT
}

type LedcDevT struct {
	ChannelGroup          [1]LedcChGroupRegT
	Reserved078           [10]c.Uint32T
	TimerGroup            [1]LedcTimerGroupRegT
	IntRaw                LedcIntRawRegT
	IntSt                 LedcIntStRegT
	IntEna                LedcIntEnaRegT
	IntClr                LedcIntClrRegT
	Reserved0d0           [12]c.Uint32T
	ChannelGammaGroup     [1]LedcChGammaGroupRegT
	Reserved160           [8]c.Uint32T
	ChannelGammaConfGroup [1]LedcChGammaConfGroupRegT
	Reserved198           [2]c.Uint32T
	EvtTaskEn0            LedcEvtTaskEn0RegT
	EvtTaskEn1            LedcEvtTaskEn1RegT
	EvtTaskEn2            LedcEvtTaskEn2RegT
	Reserved1ac           c.Uint32T
	TimerCmpGroup         [1]LedcTimerCmpGroupRegT
	TimerCntCapGroup      [1]LedcTimerCntCapGroupRegT
	Reserved1d0           [8]c.Uint32T
	Conf                  LedcConfRegT
	Reserved1f4           [2]c.Uint32T
	Date                  LedcDateRegT
}

/** Group: configure_register */
/** Type of out_data register
 *  need des
 */

type LpIoOutDataRegT struct {
	Val c.Uint32T
}

/** Type of out_data_w1ts register
 *  need des
 */

type LpIoOutDataW1tsRegT struct {
	Val c.Uint32T
}

/** Type of out_data_w1tc register
 *  need des
 */

type LpIoOutDataW1tcRegT struct {
	Val c.Uint32T
}

/** Type of out_enable register
 *  need des
 */

type LpIoOutEnableRegT struct {
	Val c.Uint32T
}

/** Type of out_enable_w1ts register
 *  need des
 */

type LpIoOutEnableW1tsRegT struct {
	Val c.Uint32T
}

/** Type of out_enable_w1tc register
 *  need des
 */

type LpIoOutEnableW1tcRegT struct {
	Val c.Uint32T
}

/** Type of status register
 *  need des
 */

type LpIoStatusRegT struct {
	Val c.Uint32T
}

/** Type of status_w1ts register
 *  need des
 */

type LpIoStatusW1tsRegT struct {
	Val c.Uint32T
}

/** Type of status_w1tc register
 *  need des
 */

type LpIoStatusW1tcRegT struct {
	Val c.Uint32T
}

/** Type of in register
 *  need des
 */

type LpIoInRegT struct {
	Val c.Uint32T
}

/** Type of pin register
 *  need des
 */

type LpIoPinRegT struct {
	Val c.Uint32T
}

/** Type of gpio register
 *  need des
 */

type LpIoGpioRegT struct {
	Val c.Uint32T
}

/** Type of status_interrupt register
 *  need des
 */

type LpIoStatusInterruptRegT struct {
	Val c.Uint32T
}

/** Type of debug_sel0 register
 *  need des
 */

type LpIoDebugSel0RegT struct {
	Val c.Uint32T
}

/** Type of debug_sel1 register
 *  need des
 */

type LpIoDebugSel1RegT struct {
	Val c.Uint32T
}

/** Type of lpi2c register
 *  need des
 */

type LpIoLpi2cRegT struct {
	Val c.Uint32T
}

/** Type of date register
 *  need des
 */

type LpIoDateRegT struct {
	Val c.Uint32T
}

type LpIoDevT struct {
	OutData         LpIoOutDataRegT
	OutDataW1ts     LpIoOutDataW1tsRegT
	OutDataW1tc     LpIoOutDataW1tcRegT
	OutEnable       LpIoOutEnableRegT
	OutEnableW1ts   LpIoOutEnableW1tsRegT
	OutEnableW1tc   LpIoOutEnableW1tcRegT
	Status          LpIoStatusRegT
	StatusW1ts      LpIoStatusW1tsRegT
	StatusW1tc      LpIoStatusW1tcRegT
	In              LpIoInRegT
	Pin             [8]LpIoPinRegT
	Gpio            [8]LpIoGpioRegT
	StatusInterrupt LpIoStatusInterruptRegT
	DebugSel0       LpIoDebugSel0RegT
	DebugSel1       LpIoDebugSel1RegT
	Lpi2c           LpIoLpi2cRegT
	Reserved078     [225]c.Uint32T
	Date            LpIoDateRegT
}

/** Group: Configuration registers */
/** Type of slcconf0 register
 *  ******* Description ***********
 */

type SdioSlcconf0RegT struct {
	Val c.Uint32T
}

/** Type of slc0rxfifo_push register
 *  ******* Description ***********
 */

type SdioSlc0rxfifoPushRegT struct {
	Val c.Uint32T
}

/** Type of slc1rxfifo_push register
 *  reserved
 */

type SdioSlc1rxfifoPushRegT struct {
	Val c.Uint32T
}

/** Type of slc0rx_link register
 *  reserved
 */

type SdioSlc0rxLinkRegT struct {
	Val c.Uint32T
}

/** Type of slc0rx_link_addr register
 *  reserved
 */

type SdioSlc0rxLinkAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc0tx_link register
 *  reserved
 */

type SdioSlc0txLinkRegT struct {
	Val c.Uint32T
}

/** Type of slc0tx_link_addr register
 *  reserved
 */

type SdioSlc0txLinkAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc1rx_link register
 *  reserved
 */

type SdioSlc1rxLinkRegT struct {
	Val c.Uint32T
}

/** Type of slc1rx_link_addr register
 *  reserved
 */

type SdioSlc1rxLinkAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc1tx_link register
 *  reserved
 */

type SdioSlc1txLinkRegT struct {
	Val c.Uint32T
}

/** Type of slc1tx_link_addr register
 *  reserved
 */

type SdioSlc1txLinkAddrRegT struct {
	Val c.Uint32T
}

/** Type of slcintvec_tohost register
 *  reserved
 */

type SdioSlcintvecTohostRegT struct {
	Val c.Uint32T
}

/** Type of slc0token0 register
 *  reserved
 */

type SdioSlc0token0RegT struct {
	Val c.Uint32T
}

/** Type of slc0token1 register
 *  reserved
 */

type SdioSlc0token1RegT struct {
	Val c.Uint32T
}

/** Type of slc1token0 register
 *  ******* Description ***********
 */

type SdioSlc1token0RegT struct {
	Val c.Uint32T
}

/** Type of slc1token1 register
 *  reserved
 */

type SdioSlc1token1RegT struct {
	Val c.Uint32T
}

/** Type of slcconf1 register
 *  reserved
 */

type SdioSlcconf1RegT struct {
	Val c.Uint32T
}

/** Type of slcbridge_conf register
 *  ******* Description ***********
 */

type SdioSlcbridgeConfRegT struct {
	Val c.Uint32T
}

/** Type of slc0_to_eof_des_addr register
 *  reserved
 */

type SdioSlc0ToEofDesAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_tx_eof_des_addr register
 *  reserved
 */

type SdioSlc0TxEofDesAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_to_eof_bfr_des_addr register
 *  reserved
 */

type SdioSlc0ToEofBfrDesAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc1_to_eof_des_addr register
 *  reserved
 */

type SdioSlc1ToEofDesAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc1_tx_eof_des_addr register
 *  reserved
 */

type SdioSlc1TxEofDesAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc1_to_eof_bfr_des_addr register
 *  reserved
 */

type SdioSlc1ToEofBfrDesAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc_rx_dscr_conf register
 *  reserved
 */

type SdioSlcRxDscrConfRegT struct {
	Val c.Uint32T
}

/** Type of slc_tx_dscr_conf register
 *  reserved
 */

type SdioSlcTxDscrConfRegT struct {
	Val c.Uint32T
}

/** Type of slc0_len_conf register
 *  reserved
 */

type SdioSlc0LenConfRegT struct {
	Val c.Uint32T
}

/** Type of slc0_txpkt_h_dscr register
 *  reserved
 */

type SdioSlc0TxpktHDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_txpkt_e_dscr register
 *  reserved
 */

type SdioSlc0TxpktEDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_rxpkt_h_dscr register
 *  reserved
 */

type SdioSlc0RxpktHDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_rxpkt_e_dscr register
 *  reserved
 */

type SdioSlc0RxpktEDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_txpktu_h_dscr register
 *  reserved
 */

type SdioSlc0TxpktuHDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_txpktu_e_dscr register
 *  reserved
 */

type SdioSlc0TxpktuEDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_rxpktu_h_dscr register
 *  reserved
 */

type SdioSlc0RxpktuHDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_rxpktu_e_dscr register
 *  reserved
 */

type SdioSlc0RxpktuEDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc_seq_position register
 *  reserved
 */

type SdioSlcSeqPositionRegT struct {
	Val c.Uint32T
}

/** Type of slc0_dscr_rec_conf register
 *  reserved
 */

type SdioSlc0DscrRecConfRegT struct {
	Val c.Uint32T
}

/** Type of slc_sdio_crc_st1 register
 *  reserved
 */

type SdioSlcSdioCrcSt1RegT struct {
	Val c.Uint32T
}

/** Type of slc0_len_lim_conf register
 *  ******* Description ***********
 */

type SdioSlc0LenLimConfRegT struct {
	Val c.Uint32T
}

/** Type of slc0_tx_sharemem_start register
 *  reserved
 */

type SdioSlc0TxSharememStartRegT struct {
	Val c.Uint32T
}

/** Type of slc0_tx_sharemem_end register
 *  reserved
 */

type SdioSlc0TxSharememEndRegT struct {
	Val c.Uint32T
}

/** Type of slc0_rx_sharemem_start register
 *  reserved
 */

type SdioSlc0RxSharememStartRegT struct {
	Val c.Uint32T
}

/** Type of slc0_rx_sharemem_end register
 *  reserved
 */

type SdioSlc0RxSharememEndRegT struct {
	Val c.Uint32T
}

/** Type of slc1_tx_sharemem_start register
 *  reserved
 */

type SdioSlc1TxSharememStartRegT struct {
	Val c.Uint32T
}

/** Type of slc1_tx_sharemem_end register
 *  reserved
 */

type SdioSlc1TxSharememEndRegT struct {
	Val c.Uint32T
}

/** Type of slc1_rx_sharemem_start register
 *  reserved
 */

type SdioSlc1RxSharememStartRegT struct {
	Val c.Uint32T
}

/** Type of slc1_rx_sharemem_end register
 *  reserved
 */

type SdioSlc1RxSharememEndRegT struct {
	Val c.Uint32T
}

/** Type of hda_tx_sharemem_start register
 *  reserved
 */

type SdioHdaTxSharememStartRegT struct {
	Val c.Uint32T
}

/** Type of hda_rx_sharemem_start register
 *  reserved
 */

type SdioHdaRxSharememStartRegT struct {
	Val c.Uint32T
}

/** Type of slc_burst_len register
 *  reserved
 */

type SdioSlcBurstLenRegT struct {
	Val c.Uint32T
}

/** Type of slcid register
 *  ******* Description ***********
 */

type SdioSlcidRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt registers */
/** Type of slc0int_raw register
 *  ******* Description ***********
 */

type SdioSlc0intRawRegT struct {
	Val c.Uint32T
}

/** Type of slc0int_st register
 *  ******* Description ***********
 */

type SdioSlc0intStRegT struct {
	Val c.Uint32T
}

/** Type of slc0int_ena register
 *  ******* Description ***********
 */

type SdioSlc0intEnaRegT struct {
	Val c.Uint32T
}

/** Type of slc0int_clr register
 *  ******* Description ***********
 */

type SdioSlc0intClrRegT struct {
	Val c.Uint32T
}

/** Type of slc1int_raw register
 *  reserved
 */

type SdioSlc1intRawRegT struct {
	Val c.Uint32T
}

/** Type of slc1int_st register
 *  reserved
 */

type SdioSlc1intStRegT struct {
	Val c.Uint32T
}

/** Type of slc1int_ena register
 *  reserved
 */

type SdioSlc1intEnaRegT struct {
	Val c.Uint32T
}

/** Type of slc1int_clr register
 *  reserved
 */

type SdioSlc1intClrRegT struct {
	Val c.Uint32T
}

/** Type of slc0int_st1 register
 *  reserved
 */

type SdioSlc0intSt1RegT struct {
	Val c.Uint32T
}

/** Type of slc0int_ena1 register
 *  reserved
 */

type SdioSlc0intEna1RegT struct {
	Val c.Uint32T
}

/** Type of slc1int_st1 register
 *  reserved
 */

type SdioSlc1intSt1RegT struct {
	Val c.Uint32T
}

/** Type of slc1int_ena1 register
 *  reserved
 */

type SdioSlc1intEna1RegT struct {
	Val c.Uint32T
}

/** Group: Status registers */
/** Type of slcrx_status register
 *  ******* Description ***********
 */

type SdioSlcrxStatusRegT struct {
	Val c.Uint32T
}

/** Type of slctx_status register
 *  ******* Description ***********
 */

type SdioSlctxStatusRegT struct {
	Val c.Uint32T
}

/** Type of slc0_state0 register
 *  reserved
 */

type SdioSlc0State0RegT struct {
	Val c.Uint32T
}

/** Type of slc0_state1 register
 *  ******* Description ***********
 */

type SdioSlc0State1RegT struct {
	Val c.Uint32T
}

/** Type of slc1_state0 register
 *  ******* Description ***********
 */

type SdioSlc1State0RegT struct {
	Val c.Uint32T
}

/** Type of slc1_state1 register
 *  ******* Description ***********
 */

type SdioSlc1State1RegT struct {
	Val c.Uint32T
}

/** Type of slc_sdio_st register
 *  reserved
 */

type SdioSlcSdioStRegT struct {
	Val c.Uint32T
}

/** Type of slc0_txlink_dscr register
 *  ******* Description ***********
 */

type SdioSlc0TxlinkDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_txlink_dscr_bf0 register
 *  ******* Description ***********
 */

type SdioSlc0TxlinkDscrBf0RegT struct {
	Val c.Uint32T
}

/** Type of slc0_txlink_dscr_bf1 register
 *  reserved
 */

type SdioSlc0TxlinkDscrBf1RegT struct {
	Val c.Uint32T
}

/** Type of slc0_rxlink_dscr register
 *  ******* Description ***********
 */

type SdioSlc0RxlinkDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_rxlink_dscr_bf0 register
 *  ******* Description ***********
 */

type SdioSlc0RxlinkDscrBf0RegT struct {
	Val c.Uint32T
}

/** Type of slc0_rxlink_dscr_bf1 register
 *  reserved
 */

type SdioSlc0RxlinkDscrBf1RegT struct {
	Val c.Uint32T
}

/** Type of slc1_txlink_dscr register
 *  reserved
 */

type SdioSlc1TxlinkDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc1_txlink_dscr_bf0 register
 *  reserved
 */

type SdioSlc1TxlinkDscrBf0RegT struct {
	Val c.Uint32T
}

/** Type of slc1_txlink_dscr_bf1 register
 *  reserved
 */

type SdioSlc1TxlinkDscrBf1RegT struct {
	Val c.Uint32T
}

/** Type of slc1_rxlink_dscr register
 *  ******* Description ***********
 */

type SdioSlc1RxlinkDscrRegT struct {
	Val c.Uint32T
}

/** Type of slc1_rxlink_dscr_bf0 register
 *  ******* Description ***********
 */

type SdioSlc1RxlinkDscrBf0RegT struct {
	Val c.Uint32T
}

/** Type of slc1_rxlink_dscr_bf1 register
 *  reserved
 */

type SdioSlc1RxlinkDscrBf1RegT struct {
	Val c.Uint32T
}

/** Type of slc0_tx_erreof_des_addr register
 *  reserved
 */

type SdioSlc0TxErreofDesAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc1_tx_erreof_des_addr register
 *  reserved
 */

type SdioSlc1TxErreofDesAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc_token_lat register
 *  reserved
 */

type SdioSlcTokenLatRegT struct {
	Val c.Uint32T
}

/** Type of slc_cmd_infor0 register
 *  reserved
 */

type SdioSlcCmdInfor0RegT struct {
	Val c.Uint32T
}

/** Type of slc_cmd_infor1 register
 *  reserved
 */

type SdioSlcCmdInfor1RegT struct {
	Val c.Uint32T
}

/** Type of slc0_length register
 *  reserved
 */

type SdioSlc0LengthRegT struct {
	Val c.Uint32T
}

/** Type of slc_sdio_crc_st0 register
 *  reserved
 */

type SdioSlcSdioCrcSt0RegT struct {
	Val c.Uint32T
}

/** Type of slc0_eof_start_des register
 *  reserved
 */

type SdioSlc0EofStartDesRegT struct {
	Val c.Uint32T
}

/** Type of slc0_push_dscr_addr register
 *  ******* Description ***********
 */

type SdioSlc0PushDscrAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_done_dscr_addr register
 *  ******* Description ***********
 */

type SdioSlc0DoneDscrAddrRegT struct {
	Val c.Uint32T
}

/** Type of slc0_sub_start_des register
 *  ******* Description ***********
 */

type SdioSlc0SubStartDesRegT struct {
	Val c.Uint32T
}

/** Type of slc0_dscr_cnt register
 *  ******* Description ***********
 */

type SdioSlc0DscrCntRegT struct {
	Val c.Uint32T
}

/** Group: Debud registers */
/** Type of slc0txfifo_pop register
 *  reserved
 */

type SdioSlc0txfifoPopRegT struct {
	Val c.Uint32T
}

/** Type of slc1txfifo_pop register
 *  reserved
 */

type SdioSlc1txfifoPopRegT struct {
	Val c.Uint32T
}

/** Type of slc_ahb_test register
 *  reserved
 */

type SdioSlcAhbTestRegT struct {
	Val c.Uint32T
}

/** Group: Version registers */
/** Type of slcdate register
 *  ******* Description ***********
 */

type SdioSlcdateRegT struct {
	Val c.Uint32T
}

type SlcDevT struct {
	Slcconf0            SdioSlcconf0RegT
	Slc0intRaw          SdioSlc0intRawRegT
	Slc0intSt           SdioSlc0intStRegT
	Slc0intEna          SdioSlc0intEnaRegT
	Slc0intClr          SdioSlc0intClrRegT
	Slc1intRaw          SdioSlc1intRawRegT
	Slc1intSt           SdioSlc1intStRegT
	Slc1intEna          SdioSlc1intEnaRegT
	Slc1intClr          SdioSlc1intClrRegT
	SlcrxStatus         SdioSlcrxStatusRegT
	Slc0rxfifoPush      SdioSlc0rxfifoPushRegT
	Slc1rxfifoPush      SdioSlc1rxfifoPushRegT
	SlctxStatus         SdioSlctxStatusRegT
	Slc0txfifoPop       SdioSlc0txfifoPopRegT
	Slc1txfifoPop       SdioSlc1txfifoPopRegT
	Slc0rxLink          SdioSlc0rxLinkRegT
	Slc0rxLinkAddr      SdioSlc0rxLinkAddrRegT
	Slc0txLink          SdioSlc0txLinkRegT
	Slc0txLinkAddr      SdioSlc0txLinkAddrRegT
	Slc1rxLink          SdioSlc1rxLinkRegT
	Slc1rxLinkAddr      SdioSlc1rxLinkAddrRegT
	Slc1txLink          SdioSlc1txLinkRegT
	Slc1txLinkAddr      SdioSlc1txLinkAddrRegT
	SlcintvecTohost     SdioSlcintvecTohostRegT
	Slc0token0          SdioSlc0token0RegT
	Slc0token1          SdioSlc0token1RegT
	Slc1token0          SdioSlc1token0RegT
	Slc1token1          SdioSlc1token1RegT
	Slcconf1            SdioSlcconf1RegT
	Slc0State0          SdioSlc0State0RegT
	Slc0State1          SdioSlc0State1RegT
	Slc1State0          SdioSlc1State0RegT
	Slc1State1          SdioSlc1State1RegT
	SlcbridgeConf       SdioSlcbridgeConfRegT
	Slc0ToEofDesAddr    SdioSlc0ToEofDesAddrRegT
	Slc0TxEofDesAddr    SdioSlc0TxEofDesAddrRegT
	Slc0ToEofBfrDesAddr SdioSlc0ToEofBfrDesAddrRegT
	Slc1ToEofDesAddr    SdioSlc1ToEofDesAddrRegT
	Slc1TxEofDesAddr    SdioSlc1TxEofDesAddrRegT
	Slc1ToEofBfrDesAddr SdioSlc1ToEofBfrDesAddrRegT
	SlcAhbTest          SdioSlcAhbTestRegT
	SlcSdioSt           SdioSlcSdioStRegT
	SlcRxDscrConf       SdioSlcRxDscrConfRegT
	Slc0TxlinkDscr      SdioSlc0TxlinkDscrRegT
	Slc0TxlinkDscrBf0   SdioSlc0TxlinkDscrBf0RegT
	Slc0TxlinkDscrBf1   SdioSlc0TxlinkDscrBf1RegT
	Slc0RxlinkDscr      SdioSlc0RxlinkDscrRegT
	Slc0RxlinkDscrBf0   SdioSlc0RxlinkDscrBf0RegT
	Slc0RxlinkDscrBf1   SdioSlc0RxlinkDscrBf1RegT
	Slc1TxlinkDscr      SdioSlc1TxlinkDscrRegT
	Slc1TxlinkDscrBf0   SdioSlc1TxlinkDscrBf0RegT
	Slc1TxlinkDscrBf1   SdioSlc1TxlinkDscrBf1RegT
	Slc1RxlinkDscr      SdioSlc1RxlinkDscrRegT
	Slc1RxlinkDscrBf0   SdioSlc1RxlinkDscrBf0RegT
	Slc1RxlinkDscrBf1   SdioSlc1RxlinkDscrBf1RegT
	Slc0TxErreofDesAddr SdioSlc0TxErreofDesAddrRegT
	Slc1TxErreofDesAddr SdioSlc1TxErreofDesAddrRegT
	SlcTokenLat         SdioSlcTokenLatRegT
	SlcTxDscrConf       SdioSlcTxDscrConfRegT
	SlcCmdInfor0        SdioSlcCmdInfor0RegT
	SlcCmdInfor1        SdioSlcCmdInfor1RegT
	Slc0LenConf         SdioSlc0LenConfRegT
	Slc0Length          SdioSlc0LengthRegT
	Slc0TxpktHDscr      SdioSlc0TxpktHDscrRegT
	Slc0TxpktEDscr      SdioSlc0TxpktEDscrRegT
	Slc0RxpktHDscr      SdioSlc0RxpktHDscrRegT
	Slc0RxpktEDscr      SdioSlc0RxpktEDscrRegT
	Slc0TxpktuHDscr     SdioSlc0TxpktuHDscrRegT
	Slc0TxpktuEDscr     SdioSlc0TxpktuEDscrRegT
	Slc0RxpktuHDscr     SdioSlc0RxpktuHDscrRegT
	Slc0RxpktuEDscr     SdioSlc0RxpktuEDscrRegT
	SlcSeqPosition      SdioSlcSeqPositionRegT
	Slc0DscrRecConf     SdioSlc0DscrRecConfRegT
	SlcSdioCrcSt0       SdioSlcSdioCrcSt0RegT
	SlcSdioCrcSt1       SdioSlcSdioCrcSt1RegT
	Slc0EofStartDes     SdioSlc0EofStartDesRegT
	Slc0PushDscrAddr    SdioSlc0PushDscrAddrRegT
	Slc0DoneDscrAddr    SdioSlc0DoneDscrAddrRegT
	Slc0SubStartDes     SdioSlc0SubStartDesRegT
	Slc0DscrCnt         SdioSlc0DscrCntRegT
	Slc0LenLimConf      SdioSlc0LenLimConfRegT
	Slc0intSt1          SdioSlc0intSt1RegT
	Slc0intEna1         SdioSlc0intEna1RegT
	Slc1intSt1          SdioSlc1intSt1RegT
	Slc1intEna1         SdioSlc1intEna1RegT
	Slc0TxSharememStart SdioSlc0TxSharememStartRegT
	Slc0TxSharememEnd   SdioSlc0TxSharememEndRegT
	Slc0RxSharememStart SdioSlc0RxSharememStartRegT
	Slc0RxSharememEnd   SdioSlc0RxSharememEndRegT
	Slc1TxSharememStart SdioSlc1TxSharememStartRegT
	Slc1TxSharememEnd   SdioSlc1TxSharememEndRegT
	Slc1RxSharememStart SdioSlc1RxSharememStartRegT
	Slc1RxSharememEnd   SdioSlc1RxSharememEndRegT
	HdaTxSharememStart  SdioHdaTxSharememStartRegT
	HdaRxSharememStart  SdioHdaRxSharememStartRegT
	SlcBurstLen         SdioSlcBurstLenRegT
	Reserved180         [30]c.Uint32T
	Slcdate             SdioSlcdateRegT
	Slcid               SdioSlcidRegT
}

/** Group: ********Registers */
/** Type of func2_0 register
 *  *******Description***********
 */

type SlchostFunc20RegT struct {
	Val c.Uint32T
}

/** Type of func2_1 register
 *  *******Description***********
 */

type SlchostFunc21RegT struct {
	Val c.Uint32T
}

/** Type of func2_2 register
 *  *******Description***********
 */

type SlchostFunc22RegT struct {
	Val c.Uint32T
}

/** Type of gpio_status0 register
 *  *******Description***********
 */

type SlchostGpioStatus0RegT struct {
	Val c.Uint32T
}

/** Type of gpio_status1 register
 *  *******Description***********
 */

type SlchostGpioStatus1RegT struct {
	Val c.Uint32T
}

/** Type of gpio_in0 register
 *  *******Description***********
 */

type SlchostGpioIn0RegT struct {
	Val c.Uint32T
}

/** Type of gpio_in1 register
 *  *******Description***********
 */

type SlchostGpioIn1RegT struct {
	Val c.Uint32T
}

/** Type of slc0host_token_rdata register
 *  *******Description***********
 */

type SlchostSlc0hostTokenRdataRegT struct {
	Val c.Uint32T
}

/** Type of slc0_host_pf register
 *  *******Description***********
 */

type SlchostSlc0HostPfRegT struct {
	Val c.Uint32T
}

/** Type of slc1_host_pf register
 *  *******Description***********
 */

type SlchostSlc1HostPfRegT struct {
	Val c.Uint32T
}

/** Type of slc0host_int_raw register
 *  *******Description***********
 */

type SlchostSlc0hostIntRawRegT struct {
	Val c.Uint32T
}

/** Type of slc1host_int_raw register
 *  *******Description***********
 */

type SlchostSlc1hostIntRawRegT struct {
	Val c.Uint32T
}

/** Type of slc0host_int_st register
 *  *******Description***********
 */

type SlchostSlc0hostIntStRegT struct {
	Val c.Uint32T
}

/** Type of slc1host_int_st register
 *  *******Description***********
 */

type SlchostSlc1hostIntStRegT struct {
	Val c.Uint32T
}

/** Type of pkt_len register
 *  *******Description***********
 */

type SlchostPktLenRegT struct {
	Val c.Uint32T
}

/** Type of state_w0 register
 *  *******Description***********
 */

type SlchostStateW0RegT struct {
	Val c.Uint32T
}

/** Type of state_w1 register
 *  *******Description***********
 */

type SlchostStateW1RegT struct {
	Val c.Uint32T
}

/** Type of conf_w0 register
 *  *******Description***********
 */

type SlchostConfW0RegT struct {
	Val c.Uint32T
}

/** Type of conf_w1 register
 *  *******Description***********
 */

type SlchostConfW1RegT struct {
	Val c.Uint32T
}

/** Type of conf_w2 register
 *  *******Description***********
 */

type SlchostConfW2RegT struct {
	Val c.Uint32T
}

/** Type of conf_w3 register
 *  *******Description***********
 */

type SlchostConfW3RegT struct {
	Val c.Uint32T
}

/** Type of conf_w4 register
 *  *******Description***********
 */

type SlchostConfW4RegT struct {
	Val c.Uint32T
}

/** Type of conf_w5 register
 *  *******Description***********
 */

type SlchostConfW5RegT struct {
	Val c.Uint32T
}

/** Type of win_cmd register
 *  *******Description***********
 */

type SlchostWinCmdRegT struct {
	Val c.Uint32T
}

/** Type of conf_w6 register
 *  *******Description***********
 */

type SlchostConfW6RegT struct {
	Val c.Uint32T
}

/** Type of conf_w7 register
 *  *******Description***********
 */

type SlchostConfW7RegT struct {
	Val c.Uint32T
}

/** Type of pkt_len0 register
 *  *******Description***********
 */

type SlchostPktLen0RegT struct {
	Val c.Uint32T
}

/** Type of pkt_len1 register
 *  *******Description***********
 */

type SlchostPktLen1RegT struct {
	Val c.Uint32T
}

/** Type of pkt_len2 register
 *  *******Description***********
 */

type SlchostPktLen2RegT struct {
	Val c.Uint32T
}

/** Type of conf_w8 register
 *  *******Description***********
 */

type SlchostConfW8RegT struct {
	Val c.Uint32T
}

/** Type of conf_w9 register
 *  *******Description***********
 */

type SlchostConfW9RegT struct {
	Val c.Uint32T
}

/** Type of conf_w10 register
 *  *******Description***********
 */

type SlchostConfW10RegT struct {
	Val c.Uint32T
}

/** Type of conf_w11 register
 *  *******Description***********
 */

type SlchostConfW11RegT struct {
	Val c.Uint32T
}

/** Type of conf_w12 register
 *  *******Description***********
 */

type SlchostConfW12RegT struct {
	Val c.Uint32T
}

/** Type of conf_w13 register
 *  *******Description***********
 */

type SlchostConfW13RegT struct {
	Val c.Uint32T
}

/** Type of conf_w14 register
 *  *******Description***********
 */

type SlchostConfW14RegT struct {
	Val c.Uint32T
}

/** Type of conf_w15 register
 *  *******Description***********
 */

type SlchostConfW15RegT struct {
	Val c.Uint32T
}

/** Type of check_sum0 register
 *  *******Description***********
 */

type SlchostCheckSum0RegT struct {
	Val c.Uint32T
}

/** Type of check_sum1 register
 *  *******Description***********
 */

type SlchostCheckSum1RegT struct {
	Val c.Uint32T
}

/** Type of slc1host_token_rdata register
 *  *******Description***********
 */

type SlchostSlc1hostTokenRdataRegT struct {
	Val c.Uint32T
}

/** Type of slc0host_token_wdata register
 *  *******Description***********
 */

type SlchostSlc0hostTokenWdataRegT struct {
	Val c.Uint32T
}

/** Type of slc1host_token_wdata register
 *  *******Description***********
 */

type SlchostSlc1hostTokenWdataRegT struct {
	Val c.Uint32T
}

/** Type of token_con register
 *  *******Description***********
 */

type SlchostTokenConRegT struct {
	Val c.Uint32T
}

/** Type of slc0host_int_clr register
 *  *******Description***********
 */

type SlchostSlc0hostIntClrRegT struct {
	Val c.Uint32T
}

/** Type of slc1host_int_clr register
 *  *******Description***********
 */

type SlchostSlc1hostIntClrRegT struct {
	Val c.Uint32T
}

/** Type of slc0host_func1_int_ena register
 *  *******Description***********
 */

type SlchostSlc0hostFunc1IntEnaRegT struct {
	Val c.Uint32T
}

/** Type of slc1host_func1_int_ena register
 *  *******Description***********
 */

type SlchostSlc1hostFunc1IntEnaRegT struct {
	Val c.Uint32T
}

/** Type of slc0host_func2_int_ena register
 *  *******Description***********
 */

type SlchostSlc0hostFunc2IntEnaRegT struct {
	Val c.Uint32T
}

/** Type of slc1host_func2_int_ena register
 *  *******Description***********
 */

type SlchostSlc1hostFunc2IntEnaRegT struct {
	Val c.Uint32T
}

/** Type of slc0host_int_ena register
 *  *******Description***********
 */

type SlchostSlc0hostIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of slc1host_int_ena register
 *  *******Description***********
 */

type SlchostSlc1hostIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of slc0host_rx_infor register
 *  *******Description***********
 */

type SlchostSlc0hostRxInforRegT struct {
	Val c.Uint32T
}

/** Type of slc1host_rx_infor register
 *  *******Description***********
 */

type SlchostSlc1hostRxInforRegT struct {
	Val c.Uint32T
}

/** Type of slc0host_len_wd register
 *  *******Description***********
 */

type SlchostSlc0hostLenWdRegT struct {
	Val c.Uint32T
}

/** Type of slc_apbwin_wdata register
 *  *******Description***********
 */

type SlchostSlcApbwinWdataRegT struct {
	Val c.Uint32T
}

/** Type of slc_apbwin_conf register
 *  *******Description***********
 */

type SlchostSlcApbwinConfRegT struct {
	Val c.Uint32T
}

/** Type of slc_apbwin_rdata register
 *  *******Description***********
 */

type SlchostSlcApbwinRdataRegT struct {
	Val c.Uint32T
}

/** Type of rdclr0 register
 *  *******Description***********
 */

type SlchostRdclr0RegT struct {
	Val c.Uint32T
}

/** Type of rdclr1 register
 *  *******Description***********
 */

type SlchostRdclr1RegT struct {
	Val c.Uint32T
}

/** Type of slc0host_int_ena1 register
 *  *******Description***********
 */

type SlchostSlc0hostIntEna1RegT struct {
	Val c.Uint32T
}

/** Type of slc1host_int_ena1 register
 *  *******Description***********
 */

type SlchostSlc1hostIntEna1RegT struct {
	Val c.Uint32T
}

/** Type of slchostdate register
 *  *******Description***********
 */

type SlchostSlchostdateRegT struct {
	Val c.Uint32T
}

/** Type of slchostid register
 *  *******Description***********
 */

type SlchostSlchostidRegT struct {
	Val c.Uint32T
}

/** Type of conf register
 *  *******Description***********
 */

type SlchostConfRegT struct {
	Val c.Uint32T
}

/** Type of inf_st register
 *  *******Description***********
 */

type SlchostInfStRegT struct {
	Val c.Uint32T
}

type HostDevT struct {
	Reserved000         [4]c.Uint32T
	Func20              SlchostFunc20RegT
	Func21              SlchostFunc21RegT
	Reserved018         [2]c.Uint32T
	Func22              SlchostFunc22RegT
	Reserved024         [4]c.Uint32T
	GpioStatus0         SlchostGpioStatus0RegT
	GpioStatus1         SlchostGpioStatus1RegT
	GpioIn0             SlchostGpioIn0RegT
	GpioIn1             SlchostGpioIn1RegT
	Slc0hostTokenRdata  SlchostSlc0hostTokenRdataRegT
	Slc0HostPf          SlchostSlc0HostPfRegT
	Slc1HostPf          SlchostSlc1HostPfRegT
	Slc0hostIntRaw      SlchostSlc0hostIntRawRegT
	Slc1hostIntRaw      SlchostSlc1hostIntRawRegT
	Slc0hostIntSt       SlchostSlc0hostIntStRegT
	Slc1hostIntSt       SlchostSlc1hostIntStRegT
	PktLen              SlchostPktLenRegT
	StateW0             SlchostStateW0RegT
	StateW1             SlchostStateW1RegT
	ConfW0              SlchostConfW0RegT
	ConfW1              SlchostConfW1RegT
	ConfW2              SlchostConfW2RegT
	ConfW3              SlchostConfW3RegT
	ConfW4              SlchostConfW4RegT
	ConfW5              SlchostConfW5RegT
	WinCmd              SlchostWinCmdRegT
	ConfW6              SlchostConfW6RegT
	ConfW7              SlchostConfW7RegT
	PktLen0             SlchostPktLen0RegT
	PktLen1             SlchostPktLen1RegT
	PktLen2             SlchostPktLen2RegT
	ConfW8              SlchostConfW8RegT
	ConfW9              SlchostConfW9RegT
	ConfW10             SlchostConfW10RegT
	ConfW11             SlchostConfW11RegT
	ConfW12             SlchostConfW12RegT
	ConfW13             SlchostConfW13RegT
	ConfW14             SlchostConfW14RegT
	ConfW15             SlchostConfW15RegT
	CheckSum0           SlchostCheckSum0RegT
	CheckSum1           SlchostCheckSum1RegT
	Slc1hostTokenRdata  SlchostSlc1hostTokenRdataRegT
	Slc0hostTokenWdata  SlchostSlc0hostTokenWdataRegT
	Slc1hostTokenWdata  SlchostSlc1hostTokenWdataRegT
	TokenCon            SlchostTokenConRegT
	Slc0hostIntClr      SlchostSlc0hostIntClrRegT
	Slc1hostIntClr      SlchostSlc1hostIntClrRegT
	Slc0hostFunc1IntEna SlchostSlc0hostFunc1IntEnaRegT
	Slc1hostFunc1IntEna SlchostSlc1hostFunc1IntEnaRegT
	Slc0hostFunc2IntEna SlchostSlc0hostFunc2IntEnaRegT
	Slc1hostFunc2IntEna SlchostSlc1hostFunc2IntEnaRegT
	Slc0hostIntEna      SlchostSlc0hostIntEnaRegT
	Slc1hostIntEna      SlchostSlc1hostIntEnaRegT
	Slc0hostRxInfor     SlchostSlc0hostRxInforRegT
	Slc1hostRxInfor     SlchostSlc1hostRxInforRegT
	Slc0hostLenWd       SlchostSlc0hostLenWdRegT
	SlcApbwinWdata      SlchostSlcApbwinWdataRegT
	SlcApbwinConf       SlchostSlcApbwinConfRegT
	SlcApbwinRdata      SlchostSlcApbwinRdataRegT
	Rdclr0              SlchostRdclr0RegT
	Rdclr1              SlchostRdclr1RegT
	Slc0hostIntEna1     SlchostSlc0hostIntEna1RegT
	Slc1hostIntEna1     SlchostSlc1hostIntEna1RegT
	Reserved11c         [23]c.Uint32T
	Slchostdate         SlchostSlchostdateRegT
	Slchostid           SlchostSlchostidRegT
	Reserved180         [28]c.Uint32T
	Conf                SlchostConfRegT
	InfSt               SlchostInfStRegT
}

/** Group: Configuration registers */
/** Type of cfg_data0 register
 *  Configure sdio cis content
 */

type HinfCfgData0RegT struct {
	Val c.Uint32T
}

/** Type of cfg_data1 register
 *  SDIO configuration register
 */

type HinfCfgData1RegT struct {
	Val c.Uint32T
}

/** Type of cfg_timing register
 *  Timing configuration registers
 */

type HinfCfgTimingRegT struct {
	Val c.Uint32T
}

/** Type of cfg_update register
 *  update sdio configurations
 */

type HinfCfgUpdateRegT struct {
	Val c.Uint32T
}

/** Type of cfg_data7 register
 *  SDIO configuration register
 */

type HinfCfgData7RegT struct {
	Val c.Uint32T
}

/** Type of cis_conf_w0 register
 *  SDIO cis configuration register
 */

type HinfCisConfW0RegT struct {
	Val c.Uint32T
}

/** Type of cis_conf_w1 register
 *  SDIO cis configuration register
 */

type HinfCisConfW1RegT struct {
	Val c.Uint32T
}

/** Type of cis_conf_w2 register
 *  SDIO cis configuration register
 */

type HinfCisConfW2RegT struct {
	Val c.Uint32T
}

/** Type of cis_conf_w3 register
 *  SDIO cis configuration register
 */

type HinfCisConfW3RegT struct {
	Val c.Uint32T
}

/** Type of cis_conf_w4 register
 *  SDIO cis configuration register
 */

type HinfCisConfW4RegT struct {
	Val c.Uint32T
}

/** Type of cis_conf_w5 register
 *  SDIO cis configuration register
 */

type HinfCisConfW5RegT struct {
	Val c.Uint32T
}

/** Type of cis_conf_w6 register
 *  SDIO cis configuration register
 */

type HinfCisConfW6RegT struct {
	Val c.Uint32T
}

/** Type of cis_conf_w7 register
 *  SDIO cis configuration register
 */

type HinfCisConfW7RegT struct {
	Val c.Uint32T
}

/** Type of cfg_data16 register
 *  SDIO cis configuration register
 */

type HinfCfgData16RegT struct {
	Val c.Uint32T
}

/** Type of cfg_uhs1_int_mode register
 *  configure int to start and end ahead of time in uhs1 mode
 */

type HinfCfgUhs1IntModeRegT struct {
	Val c.Uint32T
}

/** Type of sdio_slave_eco_low register
 *  sdio_slave redundant control registers
 */

type HinfSdioSlaveEcoLowRegT struct {
	Val c.Uint32T
}

/** Type of sdio_slave_eco_high register
 *  sdio_slave redundant control registers
 */

type HinfSdioSlaveEcoHighRegT struct {
	Val c.Uint32T
}

/** Type of sdio_slave_eco_conf register
 *  sdio_slave redundant control registers
 */

type HinfSdioSlaveEcoConfRegT struct {
	Val c.Uint32T
}

/** Type of sdio_slave_ldo_conf register
 *  sdio slave ldo control register
 */

type HinfSdioSlaveLdoConfRegT struct {
	Val c.Uint32T
}

/** Group: Status registers */
/** Type of conf_status register
 *  func0 config0 status
 */

type HinfConfStatusRegT struct {
	Val c.Uint32T
}

/** Group: Version register */
/** Type of sdio_date register
 *  ******* Description ***********
 */

type HinfSdioDateRegT struct {
	Val c.Uint32T
}

type HinfDevT struct {
	CfgData0         HinfCfgData0RegT
	CfgData1         HinfCfgData1RegT
	CfgTiming        HinfCfgTimingRegT
	CfgUpdate        HinfCfgUpdateRegT
	Reserved010      [3]c.Uint32T
	CfgData7         HinfCfgData7RegT
	CisConfW0        HinfCisConfW0RegT
	CisConfW1        HinfCisConfW1RegT
	CisConfW2        HinfCisConfW2RegT
	CisConfW3        HinfCisConfW3RegT
	CisConfW4        HinfCisConfW4RegT
	CisConfW5        HinfCisConfW5RegT
	CisConfW6        HinfCisConfW6RegT
	CisConfW7        HinfCisConfW7RegT
	CfgData16        HinfCfgData16RegT
	CfgUhs1IntMode   HinfCfgUhs1IntModeRegT
	Reserved048      [3]c.Uint32T
	ConfStatus       HinfConfStatusRegT
	Reserved058      [19]c.Uint32T
	SdioSlaveEcoLow  HinfSdioSlaveEcoLowRegT
	SdioSlaveEcoHigh HinfSdioSlaveEcoHighRegT
	SdioSlaveEcoConf HinfSdioSlaveEcoConfRegT
	SdioSlaveLdoConf HinfSdioSlaveLdoConfRegT
	Reserved0b4      [18]c.Uint32T
	SdioDate         HinfSdioDateRegT
}

/** Group: FIFO Configuration */
/** Type of fifo register
 *  FIFO data register
 */

type UartFifoRegT struct {
	Val c.Uint32T
}

/** Type of mem_conf register
 *  UART memory power configuration
 */

type UartMemConfRegT struct {
	Val c.Uint32T
}

/** Type of tout_conf_sync register
 *  UART threshold and allocation configuration
 */

type UartToutConfSyncRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt Register */
/** Type of int_raw register
 *  Raw interrupt status
 */

type UartIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  Masked interrupt status
 */

type UartIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  Interrupt enable bits
 */

type UartIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Interrupt clear bits
 */

type UartIntClrRegT struct {
	Val c.Uint32T
}

/** Group: Configuration Register */
/** Type of clkdiv_sync register
 *  Clock divider configuration
 */

type UartClkdivSyncRegT struct {
	Val c.Uint32T
}

/** Type of rx_filt register
 *  Rx Filter configuration
 */

type UartRxFiltRegT struct {
	Val c.Uint32T
}

/** Type of conf0_sync register
 *  a
 */

type UartConf0SyncRegT struct {
	Val c.Uint32T
}

/** Type of conf1 register
 *  Configuration register 1
 */

type UartConf1RegT struct {
	Val c.Uint32T
}

/** Type of hwfc_conf_sync register
 *  Hardware flow-control configuration
 */

type UartHwfcConfSyncRegT struct {
	Val c.Uint32T
}

/** Type of sleep_conf0 register
 *  UART sleep configure register 0
 */

type UartSleepConf0RegT struct {
	Val c.Uint32T
}

/** Type of sleep_conf1 register
 *  UART sleep configure register 1
 */

type UartSleepConf1RegT struct {
	Val c.Uint32T
}

/** Type of sleep_conf2 register
 *  UART sleep configure register 2
 */

type UartSleepConf2RegT struct {
	Val c.Uint32T
}

/** Type of swfc_conf0_sync register
 *  Software flow-control character configuration
 */

type UartSwfcConf0SyncRegT struct {
	Val c.Uint32T
}

/** Type of swfc_conf1 register
 *  Software flow-control character configuration
 */

type UartSwfcConf1RegT struct {
	Val c.Uint32T
}

/** Type of txbrk_conf_sync register
 *  Tx Break character configuration
 */

type UartTxbrkConfSyncRegT struct {
	Val c.Uint32T
}

/** Type of idle_conf_sync register
 *  Frame-end idle configuration
 */

type UartIdleConfSyncRegT struct {
	Val c.Uint32T
}

/** Type of rs485_conf_sync register
 *  RS485 mode configuration
 */

type UartRs485ConfSyncRegT struct {
	Val c.Uint32T
}

/** Type of clk_conf register
 *  UART core clock configuration
 */

type UartClkConfRegT struct {
	Val c.Uint32T
}

/** Group: Status Register */
/** Type of status register
 *  UART status register
 */

type UartStatusRegT struct {
	Val c.Uint32T
}

/** Type of mem_tx_status register
 *  Tx-SRAM write and read offset address.
 */

type UartMemTxStatusRegT struct {
	Val c.Uint32T
}

/** Type of mem_rx_status register
 *  Rx-SRAM write and read offset address.
 */

type UartMemRxStatusRegT struct {
	Val c.Uint32T
}

/** Type of fsm_status register
 *  UART transmit and receive status.
 */

type UartFsmStatusRegT struct {
	Val c.Uint32T
}

/** Type of afifo_status register
 *  UART AFIFO Status
 */

type UartAfifoStatusRegT struct {
	Val c.Uint32T
}

/** Group: AT Escape Sequence Selection Configuration */
/** Type of at_cmd_precnt_sync register
 *  Pre-sequence timing configuration
 */

type UartAtCmdPrecntSyncRegT struct {
	Val c.Uint32T
}

/** Type of at_cmd_postcnt_sync register
 *  Post-sequence timing configuration
 */

type UartAtCmdPostcntSyncRegT struct {
	Val c.Uint32T
}

/** Type of at_cmd_gaptout_sync register
 *  Timeout configuration
 */

type UartAtCmdGaptoutSyncRegT struct {
	Val c.Uint32T
}

/** Type of at_cmd_char_sync register
 *  AT escape sequence detection configuration
 */

type UartAtCmdCharSyncRegT struct {
	Val c.Uint32T
}

/** Group: Autobaud Register */
/** Type of pospulse register
 *  Autobaud high pulse register
 */

type UartPospulseRegT struct {
	Val c.Uint32T
}

/** Type of negpulse register
 *  Autobaud low pulse register
 */

type UartNegpulseRegT struct {
	Val c.Uint32T
}

/** Type of lowpulse register
 *  Autobaud minimum low pulse duration register
 */

type UartLowpulseRegT struct {
	Val c.Uint32T
}

/** Type of highpulse register
 *  Autobaud minimum high pulse duration register
 */

type UartHighpulseRegT struct {
	Val c.Uint32T
}

/** Type of rxd_cnt register
 *  Autobaud edge change count register
 */

type UartRxdCntRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  UART Version register
 */

type UartDateRegT struct {
	Val c.Uint32T
}

/** Type of reg_update register
 *  UART Registers Configuration Update register
 */

type UartRegUpdateRegT struct {
	Val c.Uint32T
}

/** Type of id register
 *  UART ID register
 */

type UartIdRegT struct {
	Val c.Uint32T
}

type UartDevS struct {
	Fifo             UartFifoRegT
	IntRaw           UartIntRawRegT
	IntSt            UartIntStRegT
	IntEna           UartIntEnaRegT
	IntClr           UartIntClrRegT
	ClkdivSync       UartClkdivSyncRegT
	RxFilt           UartRxFiltRegT
	Status           UartStatusRegT
	Conf0Sync        UartConf0SyncRegT
	Conf1            UartConf1RegT
	Reserved028      c.Uint32T
	HwfcConfSync     UartHwfcConfSyncRegT
	SleepConf0       UartSleepConf0RegT
	SleepConf1       UartSleepConf1RegT
	SleepConf2       UartSleepConf2RegT
	SwfcConf0Sync    UartSwfcConf0SyncRegT
	SwfcConf1        UartSwfcConf1RegT
	TxbrkConfSync    UartTxbrkConfSyncRegT
	IdleConfSync     UartIdleConfSyncRegT
	Rs485ConfSync    UartRs485ConfSyncRegT
	AtCmdPrecntSync  UartAtCmdPrecntSyncRegT
	AtCmdPostcntSync UartAtCmdPostcntSyncRegT
	AtCmdGaptoutSync UartAtCmdGaptoutSyncRegT
	AtCmdCharSync    UartAtCmdCharSyncRegT
	MemConf          UartMemConfRegT
	ToutConfSync     UartToutConfSyncRegT
	MemTxStatus      UartMemTxStatusRegT
	MemRxStatus      UartMemRxStatusRegT
	FsmStatus        UartFsmStatusRegT
	Pospulse         UartPospulseRegT
	Negpulse         UartNegpulseRegT
	Lowpulse         UartLowpulseRegT
	Highpulse        UartHighpulseRegT
	RxdCnt           UartRxdCntRegT
	ClkConf          UartClkConfRegT
	Date             UartDateRegT
	AfifoStatus      UartAfifoStatusRegT
	Reserved094      c.Uint32T
	RegUpdate        UartRegUpdateRegT
	Id               UartIdRegT
}
type UartDevT UartDevS

type TgRegCtxLinkT struct {
	LinkList *RegdmaEntriesConfigT
	LinkNum  c.Uint32T
}

/** Group: Interrupt registers */
/** Type of int_raw register
 *  I2S interrupt raw register, valid in level.
 */

type I2sIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  I2S interrupt status register.
 */

type I2sIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  I2S interrupt enable register.
 */

type I2sIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  I2S interrupt clear register.
 */

type I2sIntClrRegT struct {
	Val c.Uint32T
}

/** Group: RX Control and configuration registers */
/** Type of rx_conf register
 *  I2S RX configure register
 */

type I2sRxConfRegT struct {
	Val c.Uint32T
}

/** Type of rx_conf1 register
 *  I2S RX configure register 1
 */

type I2sRxConf1RegT struct {
	Val c.Uint32T
}

/** Type of tx_pcm2pdm_conf register
 *  I2S TX PCM2PDM configuration register
 */

type I2sTxPcm2pdmConfRegT struct {
	Val c.Uint32T
}

/** Type of tx_pcm2pdm_conf1 register
 *  I2S TX PCM2PDM configuration register
 */

type I2sTxPcm2pdmConf1RegT struct {
	Val c.Uint32T
}

/** Type of rx_tdm_ctrl register
 *  I2S TX TDM mode control register
 */

type I2sRxTdmCtrlRegT struct {
	Val c.Uint32T
}

/** Type of rx_eof_num register
 *  I2S RX data number control register.
 */

type I2sRxEofNumRegT struct {
	Val c.Uint32T
}

/** Group: TX Control and configuration registers */
/** Type of tx_conf register
 *  I2S TX configure register
 */

type I2sTxConfRegT struct {
	Val c.Uint32T
}

/** Type of tx_conf1 register
 *  I2S TX configure register 1
 */

type I2sTxConf1RegT struct {
	Val c.Uint32T
}

/** Type of tx_tdm_ctrl register
 *  I2S TX TDM mode control register
 */

type I2sTxTdmCtrlRegT struct {
	Val c.Uint32T
}

/** Group: RX clock and timing registers */
/** Type of rx_timing register
 *  I2S RX timing control register
 */

type I2sRxTimingRegT struct {
	Val c.Uint32T
}

/** Group: TX clock and timing registers */
/** Type of tx_timing register
 *  I2S TX timing control register
 */

type I2sTxTimingRegT struct {
	Val c.Uint32T
}

/** Group: Control and configuration registers */
/** Type of lc_hung_conf register
 *  I2S HUNG configure register.
 */

type I2sLcHungConfRegT struct {
	Val c.Uint32T
}

/** Type of conf_single_data register
 *  I2S signal data register
 */

type I2sConfSingleDataRegT struct {
	Val c.Uint32T
}

/** Group: TX status registers */
/** Type of state register
 *  I2S TX status register
 */

type I2sStateRegT struct {
	Val c.Uint32T
}

/** Group: ETM registers */
/** Type of etm_conf register
 *  I2S ETM configure register
 */

type I2sEtmConfRegT struct {
	Val c.Uint32T
}

/** Group: Version register */
/** Type of date register
 *  Version control register
 */

type I2sDateRegT struct {
	Val c.Uint32T
}

type I2sDevT struct {
	Reserved000    [3]c.Uint32T
	IntRaw         I2sIntRawRegT
	IntSt          I2sIntStRegT
	IntEna         I2sIntEnaRegT
	IntClr         I2sIntClrRegT
	Reserved01c    c.Uint32T
	RxConf         I2sRxConfRegT
	TxConf         I2sTxConfRegT
	RxConf1        I2sRxConf1RegT
	TxConf1        I2sTxConf1RegT
	Reserved030    [4]c.Uint32T
	TxPcm2pdmConf  I2sTxPcm2pdmConfRegT
	TxPcm2pdmConf1 I2sTxPcm2pdmConf1RegT
	Reserved048    [2]c.Uint32T
	RxTdmCtrl      I2sRxTdmCtrlRegT
	TxTdmCtrl      I2sTxTdmCtrlRegT
	RxTiming       I2sRxTimingRegT
	TxTiming       I2sTxTimingRegT
	LcHungConf     I2sLcHungConfRegT
	RxEofNum       I2sRxEofNumRegT
	ConfSingleData I2sConfSingleDataRegT
	State          I2sStateRegT
	EtmConf        I2sEtmConfRegT
	Reserved074    [3]c.Uint32T
	Date           I2sDateRegT
}

/*
Stores a bunch of per-I2S-peripheral data.
*/
type I2sSignalConnT struct {
	MckOutSig c.Uint8T
	MckInSig  c.Uint8T
	MTxBckSig c.Uint8T
	MRxBckSig c.Uint8T
	MTxWsSig  c.Uint8T
	MRxWsSig  c.Uint8T
	STxBckSig c.Uint8T
	SRxBckSig c.Uint8T
	STxWsSig  c.Uint8T
	SRxWsSig  c.Uint8T
	Irq       c.Uint8T
}

type I2sRegRetentionInfoT struct {
	RetentionModule PeriphRetentionModuleT
	EntryArray      *RegdmaEntriesConfigT
	ArraySize       c.Uint32T
}

/** Group: Timing registers */
/** Type of scl_low_period register
 *  Configures the low level width of the SCL
 *  Clock
 */

type I2cSclLowPeriodRegT struct {
	Val c.Uint32T
}

/** Type of sda_hold register
 *  Configures the hold time after a negative SCL edge.
 */

type I2cSdaHoldRegT struct {
	Val c.Uint32T
}

/** Type of sda_sample register
 *  Configures the sample time after a positive SCL edge.
 */

type I2cSdaSampleRegT struct {
	Val c.Uint32T
}

/** Type of scl_high_period register
 *  Configures the high level width of SCL
 */

type I2cSclHighPeriodRegT struct {
	Val c.Uint32T
}

/** Type of scl_start_hold register
 *  Configures the delay between the SDA and SCL negative edge for a start condition
 */

type I2cSclStartHoldRegT struct {
	Val c.Uint32T
}

/** Type of scl_rstart_setup register
 *  Configures the delay between the positive
 *  edge of SCL and the negative edge of SDA
 */

type I2cSclRstartSetupRegT struct {
	Val c.Uint32T
}

/** Type of scl_stop_hold register
 *  Configures the delay after the SCL clock
 *  edge for a stop condition
 */

type I2cSclStopHoldRegT struct {
	Val c.Uint32T
}

/** Type of scl_stop_setup register
 *  Configures the delay between the SDA and
 *  SCL positive edge for a stop condition
 */

type I2cSclStopSetupRegT struct {
	Val c.Uint32T
}

/** Type of scl_st_time_out register
 *  SCL status time out register
 */

type I2cSclStTimeOutRegT struct {
	Val c.Uint32T
}

/** Type of scl_main_st_time_out register
 *  SCL main status time out register
 */

type I2cSclMainStTimeOutRegT struct {
	Val c.Uint32T
}

/** Group: Configuration registers */
/** Type of ctr register
 *  Transmission setting
 */

type I2cCtrRegT struct {
	Val c.Uint32T
}

/** Type of to register
 *  Setting time out control for receiving data.
 */

type I2cToRegT struct {
	Val c.Uint32T
}

/** Type of slave_addr register
 *  Local slave address setting
 */

type I2cSlaveAddrRegT struct {
	Val c.Uint32T
}

/** Type of fifo_conf register
 *  FIFO configuration register.
 */

type I2cFifoConfRegT struct {
	Val c.Uint32T
}

/** Type of filter_cfg register
 *  SCL and SDA filter configuration register
 */

type I2cFilterCfgRegT struct {
	Val c.Uint32T
}

/** Type of clk_conf register
 *  I2C CLK configuration register
 */

type I2cClkConfRegT struct {
	Val c.Uint32T
}

/** Type of scl_sp_conf register
 *  Power configuration register
 */

type I2cSclSpConfRegT struct {
	Val c.Uint32T
}

/** Type of scl_stretch_conf register
 *  Set SCL stretch of I2C slave
 */

type I2cSclStretchConfRegT struct {
	Val c.Uint32T
}

/** Group: Status registers */
/** Type of sr register
 *  Describe I2C work status.
 */

type I2cSrRegT struct {
	Val c.Uint32T
}

/** Type of fifo_st register
 *  FIFO status register.
 */

type I2cFifoStRegT struct {
	Val c.Uint32T
}

/** Type of data register
 *  Rx FIFO read data.
 */

type I2cDataRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt registers */
/** Type of int_raw register
 *  Raw interrupt status
 */

type I2cIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Interrupt clear bits
 */

type I2cIntClrRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  Interrupt enable bits
 */

type I2cIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_status register
 *  Status of captured I2C communication events
 */

type I2cIntStatusRegT struct {
	Val c.Uint32T
}

/** Group: Command registers */
/** Type of comd register
 *  I2C command register 0~7
 */

type I2cComdRegT struct {
	Val c.Uint32T
}

/** Group: Version register */
/** Type of date register
 *  Version register
 */

type I2cDateRegT struct {
	Val c.Uint32T
}

type I2cDevT struct {
	SclLowPeriod     I2cSclLowPeriodRegT
	Ctr              I2cCtrRegT
	Sr               I2cSrRegT
	To               I2cToRegT
	SlaveAddr        I2cSlaveAddrRegT
	FifoSt           I2cFifoStRegT
	FifoConf         I2cFifoConfRegT
	Data             I2cDataRegT
	IntRaw           I2cIntRawRegT
	IntClr           I2cIntClrRegT
	IntEna           I2cIntEnaRegT
	IntStatus        I2cIntStatusRegT
	SdaHold          I2cSdaHoldRegT
	SdaSample        I2cSdaSampleRegT
	SclHighPeriod    I2cSclHighPeriodRegT
	Reserved03c      c.Uint32T
	SclStartHold     I2cSclStartHoldRegT
	SclRstartSetup   I2cSclRstartSetupRegT
	SclStopHold      I2cSclStopHoldRegT
	SclStopSetup     I2cSclStopSetupRegT
	FilterCfg        I2cFilterCfgRegT
	ClkConf          I2cClkConfRegT
	Command          [8]I2cComdRegT
	SclStTimeOut     I2cSclStTimeOutRegT
	SclMainStTimeOut I2cSclMainStTimeOutRegT
	SclSpConf        I2cSclSpConfRegT
	SclStretchConf   I2cSclStretchConfRegT
	Reserved088      [28]c.Uint32T
	Date             I2cDateRegT
	Reserved0fc      c.Uint32T
	TxfifoMem        [32]c.Uint32T
	RxfifoMem        [32]c.Uint32T
}

type I2cSignalConnT struct {
	SdaOutSig c.Uint8T
	SdaInSig  c.Uint8T
	SclOutSig c.Uint8T
	SclInSig  c.Uint8T
	IomuxFunc c.Uint8T
	Irq       c.Uint8T
}

type I2cRegCtxLinkT struct {
	LinkList *RegdmaEntriesConfigT
	LinkNum  c.Uint32T
	ModuleId PeriphRetentionModuleT
}

/**
 * @brief Pin function information for a single RTCIO pad's.
 *
 * This is an internal function of the driver, and is not usually useful
 * for external use.
 */

type RtcIoDescT struct {
	Reg       c.Uint32T
	Mux       c.Uint32T
	Func      c.Uint32T
	Ie        c.Uint32T
	Pullup    c.Uint32T
	Pulldown  c.Uint32T
	Slpsel    c.Uint32T
	Slpie     c.Uint32T
	Slpoe     c.Uint32T
	Hold      c.Uint32T
	HoldForce c.Uint32T
	DrvV      c.Uint32T
	DrvS      c.Uint32T
	RtcNum    c.Int
}

/** Group: configuration register */
/** Type of bt_select register
 *  GPIO bit select register
 */

type GpioBtSelectRegT struct {
	Val c.Uint32T
}

/** Type of out register
 *  GPIO output register for GPIO0-31
 */

type GpioOutRegT struct {
	Val c.Uint32T
}

/** Type of out_w1ts register
 *  GPIO output set register for GPIO0-31
 */

type GpioOutW1tsRegT struct {
	Val c.Uint32T
}

/** Type of out_w1tc register
 *  GPIO output clear register for GPIO0-31
 */

type GpioOutW1tcRegT struct {
	Val c.Uint32T
}

/** Type of out1 register
 *  GPIO output register for GPIO32-34
 */

type GpioOut1RegT struct {
	Val c.Uint32T
}

/** Type of out1_w1ts register
 *  GPIO output set register for GPIO32-34
 */

type GpioOut1W1tsRegT struct {
	Val c.Uint32T
}

/** Type of out1_w1tc register
 *  GPIO output clear register for GPIO32-34
 */

type GpioOut1W1tcRegT struct {
	Val c.Uint32T
}

/** Type of sdio_select register
 *  GPIO sdio select register
 */

type GpioSdioSelectRegT struct {
	Val c.Uint32T
}

/** Type of enable register
 *  GPIO output enable register for GPIO0-31
 */

type GpioEnableRegT struct {
	Val c.Uint32T
}

/** Type of enable_w1ts register
 *  GPIO output enable set register for GPIO0-31
 */

type GpioEnableW1tsRegT struct {
	Val c.Uint32T
}

/** Type of enable_w1tc register
 *  GPIO output enable clear register for GPIO0-31
 */

type GpioEnableW1tcRegT struct {
	Val c.Uint32T
}

/** Type of enable1 register
 *  GPIO output enable register for GPIO32-34
 */

type GpioEnable1RegT struct {
	Val c.Uint32T
}

/** Type of enable1_w1ts register
 *  GPIO output enable set register for GPIO32-34
 */

type GpioEnable1W1tsRegT struct {
	Val c.Uint32T
}

/** Type of enable1_w1tc register
 *  GPIO output enable clear register for GPIO32-34
 */

type GpioEnable1W1tcRegT struct {
	Val c.Uint32T
}

/** Type of strap register
 *  pad strapping register
 */

type GpioStrapRegT struct {
	Val c.Uint32T
}

/** Type of in register
 *  GPIO input register for GPIO0-31
 */

type GpioInRegT struct {
	Val c.Uint32T
}

/** Type of in1 register
 *  GPIO input register for GPIO32-34
 */

type GpioIn1RegT struct {
	Val c.Uint32T
}

/** Type of status register
 *  GPIO interrupt status register for GPIO0-31
 */

type GpioStatusRegT struct {
	Val c.Uint32T
}

/** Type of status_w1ts register
 *  GPIO interrupt status set register for GPIO0-31
 */

type GpioStatusW1tsRegT struct {
	Val c.Uint32T
}

/** Type of status_w1tc register
 *  GPIO interrupt status clear register for GPIO0-31
 */

type GpioStatusW1tcRegT struct {
	Val c.Uint32T
}

/** Type of status1 register
 *  GPIO interrupt status register for GPIO32-34
 */

type GpioStatus1RegT struct {
	Val c.Uint32T
}

/** Type of status1_w1ts register
 *  GPIO interrupt status set register for GPIO32-34
 */

type GpioStatus1W1tsRegT struct {
	Val c.Uint32T
}

/** Type of status1_w1tc register
 *  GPIO interrupt status clear register for GPIO32-34
 */

type GpioStatus1W1tcRegT struct {
	Val c.Uint32T
}

/** Type of pcpu_int register
 *  GPIO PRO_CPU interrupt status register for GPIO0-31
 */

type GpioPcpuIntRegT struct {
	Val c.Uint32T
}

/** Type of pcpu_nmi_int register
 *  GPIO PRO_CPU(not shielded) interrupt status register for GPIO0-31
 */

type GpioPcpuNmiIntRegT struct {
	Val c.Uint32T
}

/** Type of cpusdio_int register
 *  GPIO CPUSDIO interrupt status register for GPIO0-31
 */

type GpioCpusdioIntRegT struct {
	Val c.Uint32T
}

/** Type of pcpu_int1 register
 *  GPIO PRO_CPU interrupt status register for GPIO32-34
 */

type GpioPcpuInt1RegT struct {
	Val c.Uint32T
}

/** Type of pcpu_nmi_int1 register
 *  GPIO PRO_CPU(not shielded) interrupt status register for GPIO32-34
 */

type GpioPcpuNmiInt1RegT struct {
	Val c.Uint32T
}

/** Type of cpusdio_int1 register
 *  GPIO CPUSDIO interrupt status register for GPIO32-34
 */

type GpioCpusdioInt1RegT struct {
	Val c.Uint32T
}

/** Type of pin register
 *  GPIO pin configuration register
 */

type GpioPinRegT struct {
	Val c.Uint32T
}

/** Type of status_next register
 *  GPIO interrupt source register for GPIO0-31
 */

type GpioStatusNextRegT struct {
	Val c.Uint32T
}

/** Type of status_next1 register
 *  GPIO interrupt source register for GPIO32-34
 */

type GpioStatusNext1RegT struct {
	Val c.Uint32T
}

/** Type of func_in_sel_cfg register
 *  GPIO input function configuration register
 */

type GpioFuncInSelCfgRegT struct {
	Val c.Uint32T
}

/** Type of func_out_sel_cfg register
 *  GPIO output function select register
 */

type GpioFuncOutSelCfgRegT struct {
	Val c.Uint32T
}

/** Type of clock_gate register
 *  GPIO clock gate register
 */

type GpioClockGateRegT struct {
	Val c.Uint32T
}

/** Type of date register
 *  GPIO version register
 */

type GpioDateRegT struct {
	Val c.Uint32T
}

type GpioDevT struct {
	BtSelect      GpioBtSelectRegT
	Out           GpioOutRegT
	OutW1ts       GpioOutW1tsRegT
	OutW1tc       GpioOutW1tcRegT
	Out1          GpioOut1RegT
	Out1W1ts      GpioOut1W1tsRegT
	Out1W1tc      GpioOut1W1tcRegT
	SdioSelect    GpioSdioSelectRegT
	Enable        GpioEnableRegT
	EnableW1ts    GpioEnableW1tsRegT
	EnableW1tc    GpioEnableW1tcRegT
	Enable1       GpioEnable1RegT
	Enable1W1ts   GpioEnable1W1tsRegT
	Enable1W1tc   GpioEnable1W1tcRegT
	Strap         GpioStrapRegT
	In            GpioInRegT
	In1           GpioIn1RegT
	Status        GpioStatusRegT
	StatusW1ts    GpioStatusW1tsRegT
	StatusW1tc    GpioStatusW1tcRegT
	Status1       GpioStatus1RegT
	Status1W1ts   GpioStatus1W1tsRegT
	Status1W1tc   GpioStatus1W1tcRegT
	PcpuInt       GpioPcpuIntRegT
	PcpuNmiInt    GpioPcpuNmiIntRegT
	CpusdioInt    GpioCpusdioIntRegT
	PcpuInt1      GpioPcpuInt1RegT
	PcpuNmiInt1   GpioPcpuNmiInt1RegT
	CpusdioInt1   GpioCpusdioInt1RegT
	Pin           [35]GpioPinRegT
	Reserved100   [19]c.Uint32T
	StatusNext    GpioStatusNextRegT
	StatusNext1   GpioStatusNext1RegT
	FuncInSelCfg  [128]GpioFuncInSelCfgRegT
	Reserved34b   [128]c.Uint32T
	FuncOutSelCfg [35]GpioFuncOutSelCfgRegT
	Reserved5e0   [19]c.Uint32T
	ClockGate     GpioClockGateRegT
	Reserved630   [51]c.Uint32T
	Date          GpioDateRegT
}

/** Group: User-defined control registers */
/** Type of cmd register
 *  Command control register
 */

type SpiCmdRegT struct {
	Val c.Uint32T
}

/** Type of addr register
 *  Address value register
 */

type SpiAddrRegT struct {
	Val c.Uint32T
}

/** Type of user register
 *  SPI USER control register
 */

type SpiUserRegT struct {
	Val c.Uint32T
}

/** Type of user1 register
 *  SPI USER control register 1
 */

type SpiUser1RegT struct {
	Val c.Uint32T
}

/** Type of user2 register
 *  SPI USER control register 2
 */

type SpiUser2RegT struct {
	Val c.Uint32T
}

/** Group: Control and configuration registers */
/** Type of ctrl register
 *  SPI control register
 */

type SpiCtrlRegT struct {
	Val c.Uint32T
}

/** Type of ms_dlen register
 *  SPI data bit length control register
 */

type SpiMsDlenRegT struct {
	Val c.Uint32T
}

/** Type of misc register
 *  SPI misc register
 */

type SpiMiscRegT struct {
	Val c.Uint32T
}

/** Type of dma_conf register
 *  SPI DMA control register
 */

type SpiDmaConfRegT struct {
	Val c.Uint32T
}

/** Type of slave register
 *  SPI slave control register
 */

type SpiSlaveRegT struct {
	Val c.Uint32T
}

/** Type of slave1 register
 *  SPI slave control register 1
 */

type SpiSlave1RegT struct {
	Val c.Uint32T
}

/** Group: Clock control registers */
/** Type of clock register
 *  SPI clock control register
 */

type SpiClockRegT struct {
	Val c.Uint32T
}

/** Type of clk_gate register
 *  SPI module clock and register clock control
 */

type SpiClkGateRegT struct {
	Val c.Uint32T
}

/** Group: Timing registers */
/** Type of din_mode register
 *  SPI input delay mode configuration
 */

type SpiDinModeRegT struct {
	Val c.Uint32T
}

/** Type of din_num register
 *  SPI input delay number configuration
 */

type SpiDinNumRegT struct {
	Val c.Uint32T
}

/** Type of dout_mode register
 *  SPI output delay mode configuration
 */

type SpiDoutModeRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt registers */
/** Type of dma_int_ena register
 *  SPI interrupt enable register
 */

type SpiDmaIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of dma_int_clr register
 *  SPI interrupt clear register
 */

type SpiDmaIntClrRegT struct {
	Val c.Uint32T
}

/** Type of dma_int_raw register
 *  SPI interrupt raw register
 */

type SpiDmaIntRawRegT struct {
	Val c.Uint32T
}

/** Type of dma_int_st register
 *  SPI interrupt status register
 */

type SpiDmaIntStRegT struct {
	Val c.Uint32T
}

/** Type of dma_int_set register
 *  SPI interrupt software set register
 */

type SpiDmaIntSetRegT struct {
	Val c.Uint32T
}

/** Group: CPU-controlled data buffer */
/** Type of wn register
 *  SPI CPU-controlled buffer
 */

type SpiWnRegT struct {
	Val c.Uint32T
}

/** Group: Version register */
/** Type of date register
 *  Version control
 */

type SpiDateRegT struct {
	Val c.Uint32T
}

type SpiDevT struct {
	Cmd         SpiCmdRegT
	Addr        SpiAddrRegT
	Ctrl        SpiCtrlRegT
	Clock       SpiClockRegT
	User        SpiUserRegT
	User1       SpiUser1RegT
	User2       SpiUser2RegT
	MsDlen      SpiMsDlenRegT
	Misc        SpiMiscRegT
	DinMode     SpiDinModeRegT
	DinNum      SpiDinNumRegT
	DoutMode    SpiDoutModeRegT
	DmaConf     SpiDmaConfRegT
	DmaIntEna   SpiDmaIntEnaRegT
	DmaIntClr   SpiDmaIntClrRegT
	DmaIntRaw   SpiDmaIntRawRegT
	DmaIntSt    SpiDmaIntStRegT
	DmaIntSet   SpiDmaIntSetRegT
	Reserved048 [20]c.Uint32T
	DataBuf     [16]SpiWnRegT
	Reserved0d8 [2]c.Uint32T
	Slave       SpiSlaveRegT
	Slave1      SpiSlave1RegT
	ClkGate     SpiClkGateRegT
	Reserved0ec c.Uint32T
	Date        SpiDateRegT
}

/*
 * SPDX-FileCopyrightText: 2022 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: Apache-2.0
 */

type SpiMemDevS struct {
	Cmd struct {
		Val c.Uint32T
	}
	Addr c.Uint32T
	Ctrl struct {
		Val c.Uint32T
	}
	Ctrl1 struct {
		Val c.Uint32T
	}
	Ctrl2 struct {
		Val c.Uint32T
	}
	Clock struct {
		Val c.Uint32T
	}
	User struct {
		Val c.Uint32T
	}
	User1 struct {
		Val c.Uint32T
	}
	User2 struct {
		Val c.Uint32T
	}
	MosiDlen struct {
		Val c.Uint32T
	}
	MisoDlen struct {
		Val c.Uint32T
	}
	RdStatus struct {
		Val c.Uint32T
	}
	Reserved30 c.Uint32T
	Misc       struct {
		Val c.Uint32T
	}
	TxCrc      c.Uint32T
	CacheFctrl struct {
		Val c.Uint32T
	}
	CacheSctrl struct {
		Val c.Uint32T
	}
	SramCmd struct {
		Val c.Uint32T
	}
	SramDrdCmd struct {
		Val c.Uint32T
	}
	SramDwrCmd struct {
		Val c.Uint32T
	}
	SramClk struct {
		Val c.Uint32T
	}
	Fsm struct {
		Val c.Uint32T
	}
	DataBuf        [16]c.Uint32T
	FlashWaitiCtrl struct {
		Val c.Uint32T
	}
	FlashSusCtrl struct {
		Val c.Uint32T
	}
	FlashSusCmd struct {
		Val c.Uint32T
	}
	SusStatus struct {
		Val c.Uint32T
	}
	ReservedA8 c.Uint32T
	ReservedAc c.Uint32T
	ReservedB0 c.Uint32T
	ReservedB4 c.Uint32T
	ReservedB8 c.Uint32T
	ReservedBc c.Uint32T
	IntEna     struct {
		Val c.Uint32T
	}
	IntClr struct {
		Val c.Uint32T
	}
	IntRaw struct {
		Val c.Uint32T
	}
	IntSt struct {
		Val c.Uint32T
	}
	ReservedD0 c.Uint32T
	Ddr        struct {
		Val c.Uint32T
	}
	SpiSmemDdr struct {
		Val c.Uint32T
	}
	ReservedDc      c.Uint32T
	ReservedE0      c.Uint32T
	ReservedE4      c.Uint32T
	ReservedE8      c.Uint32T
	ReservedEc      c.Uint32T
	ReservedF0      c.Uint32T
	ReservedF4      c.Uint32T
	ReservedF8      c.Uint32T
	ReservedFc      c.Uint32T
	SpiFmemPms0Attr struct {
		Val c.Uint32T
	}
	SpiFmemPms1Attr struct {
		Val c.Uint32T
	}
	SpiFmemPms2Attr struct {
		Val c.Uint32T
	}
	SpiFmemPms3Attr struct {
		Val c.Uint32T
	}
	SpiFmemPms0Addr struct {
		Val c.Uint32T
	}
	SpiFmemPms1Addr struct {
		Val c.Uint32T
	}
	SpiFmemPms2Addr struct {
		Val c.Uint32T
	}
	SpiFmemPms3Addr struct {
		Val c.Uint32T
	}
	SpiFmemPms0Size struct {
		Val c.Uint32T
	}
	SpiFmemPms1Size struct {
		Val c.Uint32T
	}
	SpiFmemPms2Size struct {
		Val c.Uint32T
	}
	SpiFmemPms3Size struct {
		Val c.Uint32T
	}
	SpiSmemPms0Attr struct {
		Val c.Uint32T
	}
	SpiSmemPms1Attr struct {
		Val c.Uint32T
	}
	SpiSmemPms2Attr struct {
		Val c.Uint32T
	}
	SpiSmemPms3Attr struct {
		Val c.Uint32T
	}
	SpiSmemPms0Addr struct {
		Val c.Uint32T
	}
	SpiSmemPms1Addr struct {
		Val c.Uint32T
	}
	SpiSmemPms2Addr struct {
		Val c.Uint32T
	}
	SpiSmemPms3Addr struct {
		Val c.Uint32T
	}
	SpiSmemPms0Size struct {
		Val c.Uint32T
	}
	SpiSmemPms1Size struct {
		Val c.Uint32T
	}
	SpiSmemPms2Size struct {
		Val c.Uint32T
	}
	SpiSmemPms3Size struct {
		Val c.Uint32T
	}
	Reserved160 c.Uint32T
	PmsReject   struct {
		Val c.Uint32T
	}
	EccCtrl struct {
		Val c.Uint32T
	}
	EccErrAddr struct {
		Val c.Uint32T
	}
	AxiErrAddr struct {
		Val c.Uint32T
	}
	SpiSmemEccCtrl struct {
		Val c.Uint32T
	}
	Reserved178 c.Uint32T
	Reserved17c c.Uint32T
	TimingCali  struct {
		Val c.Uint32T
	}
	DinMode struct {
		Val c.Uint32T
	}
	DinNum struct {
		Val c.Uint32T
	}
	DoutMode struct {
		Val c.Uint32T
	}
	SpiSmemTimingCali struct {
		Val c.Uint32T
	}
	SpiSmemDinMode struct {
		Val c.Uint32T
	}
	SpiSmemDinNum struct {
		Val c.Uint32T
	}
	SpiSmemDoutMode struct {
		Val c.Uint32T
	}
	SpiSmemAc struct {
		Val c.Uint32T
	}
	Reserved1a4 c.Uint32T
	Reserved1a8 c.Uint32T
	Reserved1ac c.Uint32T
	Reserved1b0 c.Uint32T
	Reserved1b4 c.Uint32T
	Reserved1b8 c.Uint32T
	Reserved1bc c.Uint32T
	Reserved1c0 c.Uint32T
	Reserved1c4 c.Uint32T
	Reserved1c8 c.Uint32T
	Reserved1cc c.Uint32T
	Reserved1d0 c.Uint32T
	Reserved1d4 c.Uint32T
	Reserved1d8 c.Uint32T
	Reserved1dc c.Uint32T
	Reserved1e0 c.Uint32T
	Reserved1e4 c.Uint32T
	Reserved1e8 c.Uint32T
	Reserved1ec c.Uint32T
	Reserved1f0 c.Uint32T
	Reserved1f4 c.Uint32T
	Reserved1f8 c.Uint32T
	Reserved1fc c.Uint32T
	ClockGate   struct {
		Val c.Uint32T
	}
	Reserved204  c.Uint32T
	Reserved208  c.Uint32T
	Reserved20c  c.Uint32T
	Reserved210  c.Uint32T
	Reserved214  c.Uint32T
	Reserved218  c.Uint32T
	Reserved21c  c.Uint32T
	Reserved220  c.Uint32T
	Reserved224  c.Uint32T
	Reserved228  c.Uint32T
	Reserved22c  c.Uint32T
	Reserved230  c.Uint32T
	Reserved234  c.Uint32T
	Reserved238  c.Uint32T
	Reserved23c  c.Uint32T
	Reserved240  c.Uint32T
	Reserved244  c.Uint32T
	Reserved248  c.Uint32T
	Reserved24c  c.Uint32T
	Reserved250  c.Uint32T
	Reserved254  c.Uint32T
	Reserved258  c.Uint32T
	Reserved25c  c.Uint32T
	Reserved260  c.Uint32T
	Reserved264  c.Uint32T
	Reserved268  c.Uint32T
	Reserved26c  c.Uint32T
	Reserved270  c.Uint32T
	Reserved274  c.Uint32T
	Reserved278  c.Uint32T
	Reserved27c  c.Uint32T
	Reserved280  c.Uint32T
	Reserved284  c.Uint32T
	Reserved288  c.Uint32T
	Reserved28c  c.Uint32T
	Reserved290  c.Uint32T
	Reserved294  c.Uint32T
	Reserved298  c.Uint32T
	Reserved29c  c.Uint32T
	Reserved2a0  c.Uint32T
	Reserved2a4  c.Uint32T
	Reserved2a8  c.Uint32T
	Reserved2ac  c.Uint32T
	Reserved2b0  c.Uint32T
	Reserved2b4  c.Uint32T
	Reserved2b8  c.Uint32T
	Reserved2bc  c.Uint32T
	Reserved2c0  c.Uint32T
	Reserved2c4  c.Uint32T
	Reserved2c8  c.Uint32T
	Reserved2cc  c.Uint32T
	Reserved2d0  c.Uint32T
	Reserved2d4  c.Uint32T
	Reserved2d8  c.Uint32T
	Reserved2dc  c.Uint32T
	Reserved2e0  c.Uint32T
	Reserved2e4  c.Uint32T
	Reserved2e8  c.Uint32T
	Reserved2ec  c.Uint32T
	Reserved2f0  c.Uint32T
	Reserved2f4  c.Uint32T
	Reserved2f8  c.Uint32T
	Reserved2fc  c.Uint32T
	XtsPlainBase c.Uint32T
	Reserved304  c.Uint32T
	Reserved308  c.Uint32T
	Reserved30c  c.Uint32T
	Reserved310  c.Uint32T
	Reserved314  c.Uint32T
	Reserved318  c.Uint32T
	Reserved31c  c.Uint32T
	Reserved320  c.Uint32T
	Reserved324  c.Uint32T
	Reserved328  c.Uint32T
	Reserved32c  c.Uint32T
	Reserved330  c.Uint32T
	Reserved334  c.Uint32T
	Reserved338  c.Uint32T
	Reserved33c  c.Uint32T
	XtsLinesize  struct {
		Val c.Uint32T
	}
	XtsDestination struct {
		Val c.Uint32T
	}
	XtsPhysicalAddress struct {
		Val c.Uint32T
	}
	XtsTrigger struct {
		Val c.Uint32T
	}
	XtsRelease struct {
		Val c.Uint32T
	}
	XtsDestroy struct {
		Val c.Uint32T
	}
	XtsState struct {
		Val c.Uint32T
	}
	XtsDate struct {
		Val c.Uint32T
	}
	Reserved360    c.Uint32T
	Reserved364    c.Uint32T
	Reserved368    c.Uint32T
	Reserved36c    c.Uint32T
	Reserved370    c.Uint32T
	Reserved374    c.Uint32T
	Reserved378    c.Uint32T
	MmuItemContent c.Uint32T
	MmuItemIndex   c.Uint32T
	MmuPowerCtrl   struct {
		Val c.Uint32T
	}
	DpaCtrl struct {
		Val c.Uint32T
	}
	Reserved38c           c.Uint32T
	Reserved390           c.Uint32T
	Reserved394           c.Uint32T
	Reserved398           c.Uint32T
	Reserved39c           c.Uint32T
	Reserved3a0           c.Uint32T
	Reserved3a4           c.Uint32T
	Reserved3a8           c.Uint32T
	Reserved3ac           c.Uint32T
	Reserved3b0           c.Uint32T
	Reserved3b4           c.Uint32T
	Reserved3b8           c.Uint32T
	Reserved3bc           c.Uint32T
	Reserved3c0           c.Uint32T
	Reserved3c4           c.Uint32T
	Reserved3c8           c.Uint32T
	Reserved3cc           c.Uint32T
	Reserved3d0           c.Uint32T
	Reserved3d4           c.Uint32T
	Reserved3d8           c.Uint32T
	Reserved3dc           c.Uint32T
	Reserved3e0           c.Uint32T
	Reserved3e4           c.Uint32T
	Reserved3e8           c.Uint32T
	Reserved3ec           c.Uint32T
	SpiMemisterrndEcoHigh c.Uint32T
	SpiMemisterrndEcoLow  c.Uint32T
	Reserved3f8           c.Uint32T
	Date                  struct {
		Val c.Uint32T
	}
}
type SpiMemDevT SpiMemDevS

/*
Stores a bunch of per-spi-peripheral data.
*/
type SpiSignalConnT struct {
	SpiclkOut      c.Uint8T
	SpiclkIn       c.Uint8T
	SpidOut        c.Uint8T
	SpiqOut        c.Uint8T
	SpiwpOut       c.Uint8T
	SpihdOut       c.Uint8T
	SpidIn         c.Uint8T
	SpiqIn         c.Uint8T
	SpiwpIn        c.Uint8T
	SpihdIn        c.Uint8T
	SpicsOut       [6]c.Uint8T
	SpicsIn        c.Uint8T
	SpidqsOut      c.Uint8T
	SpicdOut       c.Uint8T
	SpiclkIomuxPin c.Uint8T
	SpidIomuxPin   c.Uint8T
	SpiqIomuxPin   c.Uint8T
	SpiwpIomuxPin  c.Uint8T
	SpihdIomuxPin  c.Uint8T
	Spics0IomuxPin c.Uint8T
	Irq            c.Uint8T
	IrqDma         c.Uint8T
	Func           c.Int
	Hw             *SpiDevT
}

type SpiRegRetentionInfoT struct {
	ModuleId   PeriphRetentionModuleT
	EntryArray *RegdmaEntriesConfigT
	ArraySize  c.Uint32T
}

/** Group: Timing registers */
/** Type of scl_low_period register
 *  Configures the low level width of the SCL
 *  Clock
 */

type LpI2cSclLowPeriodRegT struct {
	Val c.Uint32T
}

/** Type of sda_hold register
 *  Configures the hold time after a negative SCL edge.
 */

type LpI2cSdaHoldRegT struct {
	Val c.Uint32T
}

/** Type of sda_sample register
 *  Configures the sample time after a positive SCL edge.
 */

type LpI2cSdaSampleRegT struct {
	Val c.Uint32T
}

/** Type of scl_high_period register
 *  Configures the high level width of SCL
 */

type LpI2cSclHighPeriodRegT struct {
	Val c.Uint32T
}

/** Type of scl_start_hold register
 *  Configures the delay between the SDA and SCL negative edge for a start condition
 */

type LpI2cSclStartHoldRegT struct {
	Val c.Uint32T
}

/** Type of scl_rstart_setup register
 *  Configures the delay between the positive
 *  edge of SCL and the negative edge of SDA
 */

type LpI2cSclRstartSetupRegT struct {
	Val c.Uint32T
}

/** Type of scl_stop_hold register
 *  Configures the delay after the SCL clock
 *  edge for a stop condition
 */

type LpI2cSclStopHoldRegT struct {
	Val c.Uint32T
}

/** Type of scl_stop_setup register
 *  Configures the delay between the SDA and
 *  SCL positive edge for a stop condition
 */

type LpI2cSclStopSetupRegT struct {
	Val c.Uint32T
}

/** Type of scl_st_time_out register
 *  SCL status time out register
 */

type LpI2cSclStTimeOutRegT struct {
	Val c.Uint32T
}

/** Type of scl_main_st_time_out register
 *  SCL main status time out register
 */

type LpI2cSclMainStTimeOutRegT struct {
	Val c.Uint32T
}

/** Group: Configuration registers */
/** Type of ctr register
 *  Transmission setting
 */

type LpI2cCtrRegT struct {
	Val c.Uint32T
}

/** Type of to register
 *  Setting time out control for receiving data.
 */

type LpI2cToRegT struct {
	Val c.Uint32T
}

/** Type of fifo_conf register
 *  FIFO configuration register.
 */

type LpI2cFifoConfRegT struct {
	Val c.Uint32T
}

/** Type of filter_cfg register
 *  SCL and SDA filter configuration register
 */

type LpI2cFilterCfgRegT struct {
	Val c.Uint32T
}

/** Type of clk_conf register
 *  I2C CLK configuration register
 */

type LpI2cClkConfRegT struct {
	Val c.Uint32T
}

/** Type of scl_sp_conf register
 *  Power configuration register
 */

type LpI2cSclSpConfRegT struct {
	Val c.Uint32T
}

/** Group: Status registers */
/** Type of sr register
 *  Describe I2C work status.
 */

type LpI2cSrRegT struct {
	Val c.Uint32T
}

/** Type of fifo_st register
 *  FIFO status register.
 */

type LpI2cFifoStRegT struct {
	Val c.Uint32T
}

/** Type of data register
 *  Rx FIFO read data.
 */

type LpI2cDataRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt registers */
/** Type of int_raw register
 *  Raw interrupt status
 */

type LpI2cIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Interrupt clear bits
 */

type LpI2cIntClrRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  Interrupt enable bits
 */

type LpI2cIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_status register
 *  Status of captured I2C communication events
 */

type LpI2cIntStatusRegT struct {
	Val c.Uint32T
}

/** Group: Command registers */
/** Type of command register
 *  I2C command register
 */

type LpI2cCommandRegT struct {
	Val c.Uint32T
}

/** Group: Version register */
/** Type of date register
 *  Version register
 */

type LpI2cDateRegT struct {
	Val c.Uint32T
}

/** Group: Address register */
/** Type of txfifo_start_addr register
 *  I2C TXFIFO base address register
 */

type LpI2cTxfifoStartAddrRegT struct {
	Val c.Uint32T
}

/** Type of rxfifo_start_addr register
 *  I2C RXFIFO base address register
 */

type LpI2cRxfifoStartAddrRegT struct {
	Val c.Uint32T
}

type LpI2cDevT struct {
	SclLowPeriod     LpI2cSclLowPeriodRegT
	Ctr              LpI2cCtrRegT
	Sr               LpI2cSrRegT
	To               LpI2cToRegT
	Reserved010      c.Uint32T
	FifoSt           LpI2cFifoStRegT
	FifoConf         LpI2cFifoConfRegT
	Data             LpI2cDataRegT
	IntRaw           LpI2cIntRawRegT
	IntClr           LpI2cIntClrRegT
	IntEna           LpI2cIntEnaRegT
	IntStatus        LpI2cIntStatusRegT
	SdaHold          LpI2cSdaHoldRegT
	SdaSample        LpI2cSdaSampleRegT
	SclHighPeriod    LpI2cSclHighPeriodRegT
	Reserved03c      c.Uint32T
	SclStartHold     LpI2cSclStartHoldRegT
	SclRstartSetup   LpI2cSclRstartSetupRegT
	SclStopHold      LpI2cSclStopHoldRegT
	SclStopSetup     LpI2cSclStopSetupRegT
	FilterCfg        LpI2cFilterCfgRegT
	ClkConf          LpI2cClkConfRegT
	Command          [8]LpI2cCommandRegT
	SclStTimeOut     LpI2cSclStTimeOutRegT
	SclMainStTimeOut LpI2cSclMainStTimeOutRegT
	SclSpConf        LpI2cSclSpConfRegT
	Reserved084      [29]c.Uint32T
	Date             LpI2cDateRegT
	Reserved0fc      c.Uint32T
	TxfifoStartAddr  LpI2cTxfifoStartAddrRegT
	Reserved104      [31]c.Uint32T
	RxfifoStartAddr  LpI2cRxfifoStartAddrRegT
}

/** Group: FIFO Configuration */
/** Type of fifo register
 *  FIFO data register
 */

type LpUartFifoRegT struct {
	Val c.Uint32T
}

/** Type of mem_conf register
 *  UART memory power configuration
 */

type LpUartMemConfRegT struct {
	Val c.Uint32T
}

/** Type of tout_conf_sync register
 *  UART threshold and allocation configuration
 */

type LpUartToutConfSyncRegT struct {
	Val c.Uint32T
}

/** Group: Interrupt Register */
/** Type of int_raw register
 *  Raw interrupt status
 */

type LpUartIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  Masked interrupt status
 */

type LpUartIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  Interrupt enable bits
 */

type LpUartIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  Interrupt clear bits
 */

type LpUartIntClrRegT struct {
	Val c.Uint32T
}

/** Group: Configuration Register */
/** Type of clkdiv_sync register
 *  Clock divider configuration
 */

type LpUartClkdivSyncRegT struct {
	Val c.Uint32T
}

/** Type of rx_filt register
 *  Rx Filter configuration
 */

type LpUartRxFiltRegT struct {
	Val c.Uint32T
}

/** Type of conf0_sync register
 *  Configuration register 0
 */

type LpUartConf0SyncRegT struct {
	Val c.Uint32T
}

/** Type of conf1 register
 *  Configuration register 1
 */

type LpUartConf1RegT struct {
	Val c.Uint32T
}

/** Type of hwfc_conf_sync register
 *  Hardware flow-control configuration
 */

type LpUartHwfcConfSyncRegT struct {
	Val c.Uint32T
}

/** Type of sleep_conf0 register
 *  UART sleep configure register 0
 */

type LpUartSleepConf0RegT struct {
	Val c.Uint32T
}

/** Type of sleep_conf1 register
 *  UART sleep configure register 1
 */

type LpUartSleepConf1RegT struct {
	Val c.Uint32T
}

/** Type of sleep_conf2 register
 *  UART sleep configure register 2
 */

type LpUartSleepConf2RegT struct {
	Val c.Uint32T
}

/** Type of swfc_conf0_sync register
 *  Software flow-control character configuration
 */

type LpUartSwfcConf0SyncRegT struct {
	Val c.Uint32T
}

/** Type of swfc_conf1 register
 *  Software flow-control character configuration
 */

type LpUartSwfcConf1RegT struct {
	Val c.Uint32T
}

/** Type of txbrk_conf_sync register
 *  Tx Break character configuration
 */

type LpUartTxbrkConfSyncRegT struct {
	Val c.Uint32T
}

/** Type of idle_conf_sync register
 *  Frame-end idle configuration
 */

type LpUartIdleConfSyncRegT struct {
	Val c.Uint32T
}

/** Type of rs485_conf_sync register
 *  RS485 mode configuration
 */

type LpUartRs485ConfSyncRegT struct {
	Val c.Uint32T
}

/** Type of clk_conf register
 *  UART core clock configuration
 */

type LpUartClkConfRegT struct {
	Val c.Uint32T
}

/** Group: Status Register */
/** Type of status register
 *  UART status register
 */

type LpUartStatusRegT struct {
	Val c.Uint32T
}

/** Type of mem_tx_status register
 *  Tx-SRAM write and read offset address.
 */

type LpUartMemTxStatusRegT struct {
	Val c.Uint32T
}

/** Type of mem_rx_status register
 *  Rx-SRAM write and read offset address.
 */

type LpUartMemRxStatusRegT struct {
	Val c.Uint32T
}

/** Type of fsm_status register
 *  UART transmit and receive status.
 */

type LpUartFsmStatusRegT struct {
	Val c.Uint32T
}

/** Type of afifo_status register
 *  UART AFIFO Status
 */

type LpUartAfifoStatusRegT struct {
	Val c.Uint32T
}

/** Group: AT Escape Sequence Selection Configuration */
/** Type of at_cmd_precnt_sync register
 *  Pre-sequence timing configuration
 */

type LpUartAtCmdPrecntSyncRegT struct {
	Val c.Uint32T
}

/** Type of at_cmd_postcnt_sync register
 *  Post-sequence timing configuration
 */

type LpUartAtCmdPostcntSyncRegT struct {
	Val c.Uint32T
}

/** Type of at_cmd_gaptout_sync register
 *  Timeout configuration
 */

type LpUartAtCmdGaptoutSyncRegT struct {
	Val c.Uint32T
}

/** Type of at_cmd_char_sync register
 *  AT escape sequence detection configuration
 */

type LpUartAtCmdCharSyncRegT struct {
	Val c.Uint32T
}

/** Group: Version Register */
/** Type of date register
 *  UART Version register
 */

type LpUartDateRegT struct {
	Val c.Uint32T
}

/** Type of reg_update register
 *  UART Registers Configuration Update register
 */

type LpUartRegUpdateRegT struct {
	Val c.Uint32T
}

/** Type of id register
 *  UART ID register
 */

type LpUartIdRegT struct {
	Val c.Uint32T
}

type LpUartDevT struct {
	Fifo             LpUartFifoRegT
	IntRaw           LpUartIntRawRegT
	IntSt            LpUartIntStRegT
	IntEna           LpUartIntEnaRegT
	IntClr           LpUartIntClrRegT
	ClkdivSync       LpUartClkdivSyncRegT
	RxFilt           LpUartRxFiltRegT
	Status           LpUartStatusRegT
	Conf0Sync        LpUartConf0SyncRegT
	Conf1            LpUartConf1RegT
	Reserved028      c.Uint32T
	HwfcConfSync     LpUartHwfcConfSyncRegT
	SleepConf0       LpUartSleepConf0RegT
	SleepConf1       LpUartSleepConf1RegT
	SleepConf2       LpUartSleepConf2RegT
	SwfcConf0Sync    LpUartSwfcConf0SyncRegT
	SwfcConf1        LpUartSwfcConf1RegT
	TxbrkConfSync    LpUartTxbrkConfSyncRegT
	IdleConfSync     LpUartIdleConfSyncRegT
	Rs485ConfSync    LpUartRs485ConfSyncRegT
	AtCmdPrecntSync  LpUartAtCmdPrecntSyncRegT
	AtCmdPostcntSync LpUartAtCmdPostcntSyncRegT
	AtCmdGaptoutSync LpUartAtCmdGaptoutSyncRegT
	AtCmdCharSync    LpUartAtCmdCharSyncRegT
	MemConf          LpUartMemConfRegT
	ToutConfSync     LpUartToutConfSyncRegT
	MemTxStatus      LpUartMemTxStatusRegT
	MemRxStatus      LpUartMemRxStatusRegT
	FsmStatus        LpUartFsmStatusRegT
	Reserved074      [5]c.Uint32T
	ClkConf          LpUartClkConfRegT
	Date             LpUartDateRegT
	AfifoStatus      LpUartAfifoStatusRegT
	Reserved094      c.Uint32T
	RegUpdate        LpUartRegUpdateRegT
	Id               LpUartIdRegT
}

/** Group: configure_register */
/** Type of config0 register
 *  need_des
 */

type LpWdtConfig0RegT struct {
	Val c.Uint32T
}

/** Type of config1 register
 *  need_des
 */

type LpWdtConfig1RegT struct {
	Val c.Uint32T
}

/** Type of config2 register
 *  need_des
 */

type LpWdtConfig2RegT struct {
	Val c.Uint32T
}

/** Type of config3 register
 *  need_des
 */

type LpWdtConfig3RegT struct {
	Val c.Uint32T
}

/** Type of config4 register
 *  need_des
 */

type LpWdtConfig4RegT struct {
	Val c.Uint32T
}

/** Type of feed register
 *  need_des
 */

type LpWdtFeedRegT struct {
	Val c.Uint32T
}

/** Type of wprotect register
 *  need_des
 */

type LpWdtWprotectRegT struct {
	Val c.Uint32T
}

/** Type of swd_config register
 *  need_des
 */

type LpWdtSwdConfigRegT struct {
	Val c.Uint32T
}

/** Type of swd_wprotect register
 *  need_des
 */

type LpWdtSwdWprotectRegT struct {
	Val c.Uint32T
}

/** Type of int_raw register
 *  need_des
 */

type LpWdtIntRawRegT struct {
	Val c.Uint32T
}

/** Type of int_st register
 *  need_des
 */

type LpWdtIntStRegT struct {
	Val c.Uint32T
}

/** Type of int_ena register
 *  need_des
 */

type LpWdtIntEnaRegT struct {
	Val c.Uint32T
}

/** Type of int_clr register
 *  need_des
 */

type LpWdtIntClrRegT struct {
	Val c.Uint32T
}

/** Type of date register
 *  need_des
 */

type LpWdtDateRegT struct {
	Val c.Uint32T
}

type LpWdtDevT struct {
	Config0     LpWdtConfig0RegT
	Config1     LpWdtConfig1RegT
	Config2     LpWdtConfig2RegT
	Config3     LpWdtConfig3RegT
	Config4     LpWdtConfig4RegT
	Feed        LpWdtFeedRegT
	Wprotect    LpWdtWprotectRegT
	SwdConfig   LpWdtSwdConfigRegT
	SwdWprotect LpWdtSwdWprotectRegT
	IntRaw      LpWdtIntRawRegT
	IntSt       LpWdtIntStRegT
	IntEna      LpWdtIntEnaRegT
	IntClr      LpWdtIntClrRegT
	Reserved034 [242]c.Uint32T
	Date        LpWdtDateRegT
}
