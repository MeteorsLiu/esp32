package esp_driver_spi

import (
	"github.com/goplus/lib/c"
	_ "unsafe"
)

const X__bool_true_false_are_defined = 1
const True = 1
const False = 0
const X_NEWLIB_VERSION_H__ = 1
const X_NEWLIB_VERSION = "4.3.0"
const X__NEWLIB__ = 4
const X__NEWLIB_MINOR__ = 3
const X__NEWLIB_PATCHLEVEL__ = 0
const X_ATFILE_SOURCE = 1
const X_DEFAULT_SOURCE = 1
const X_ISOC99_SOURCE = 1
const X_ISOC11_SOURCE = 1
const X_POSIX_SOURCE = 1
const X_XOPEN_SOURCE = 700
const X_XOPEN_SOURCE_EXTENDED = 1
const X__ATFILE_VISIBLE = 1
const X__BSD_VISIBLE = 1
const X__GNU_VISIBLE = 1
const X__ISO_C_VISIBLE = 2011
const X__LARGEFILE_VISIBLE = 1
const X__MISC_VISIBLE = 1
const X__POSIX_VISIBLE = 200809
const X__SVID_VISIBLE = 1
const X__XSI_VISIBLE = 700
const X__SSP_FORTIFY_LEVEL = 0
const X_POSIX_THREADS = 1
const X_POSIX_TIMEOUTS = 1
const X_POSIX_TIMERS = 1
const X_UNIX98_THREAD_MUTEX_ATTRIBUTES = 1
const X__have_longlong64 = 1
const X__have_long32 = 1
const X___int8_t_defined = 1
const X___int16_t_defined = 1
const X___int32_t_defined = 1
const X___int64_t_defined = 1
const X___int_least8_t_defined = 1
const X___int_least16_t_defined = 1
const X___int_least32_t_defined = 1
const X___int_least64_t_defined = 1
const X__INT8 = "hh"
const X__INT16 = "h"
const X__INT64 = "ll"
const X__FAST8 = "hh"
const X__FAST16 = "h"
const X__FAST64 = "ll"
const X__LEAST8 = "hh"
const X__LEAST16 = "h"
const X__LEAST64 = "ll"
const X__int8_t_defined = 1
const X__int16_t_defined = 1
const X__int32_t_defined = 1
const X__int64_t_defined = 1
const X__int_least8_t_defined = 1
const X__int_least16_t_defined = 1
const X__int_least32_t_defined = 1
const X__int_least64_t_defined = 1
const X__int_fast8_t_defined = 1
const X__int_fast16_t_defined = 1
const X__int_fast32_t_defined = 1
const X__int_fast64_t_defined = 1
const CONFIG_SOC_ADC_SUPPORTED = 1
const CONFIG_SOC_DEDICATED_GPIO_SUPPORTED = 1
const CONFIG_SOC_UART_SUPPORTED = 1
const CONFIG_SOC_GDMA_SUPPORTED = 1
const CONFIG_SOC_AHB_GDMA_SUPPORTED = 1
const CONFIG_SOC_GPTIMER_SUPPORTED = 1
const CONFIG_SOC_PHY_SUPPORTED = 1
const CONFIG_SOC_BT_SUPPORTED = 1
const CONFIG_SOC_WIFI_SUPPORTED = 1
const CONFIG_SOC_ASYNC_MEMCPY_SUPPORTED = 1
const CONFIG_SOC_SUPPORTS_SECURE_DL_MODE = 1
const CONFIG_SOC_EFUSE_CONSISTS_OF_ONE_KEY_BLOCK = 1
const CONFIG_SOC_EFUSE_SUPPORTED = 1
const CONFIG_SOC_TEMP_SENSOR_SUPPORTED = 1
const CONFIG_SOC_LEDC_SUPPORTED = 1
const CONFIG_SOC_I2C_SUPPORTED = 1
const CONFIG_SOC_GPSPI_SUPPORTED = 1
const CONFIG_SOC_SHA_SUPPORTED = 1
const CONFIG_SOC_ECC_SUPPORTED = 1
const CONFIG_SOC_FLASH_ENC_SUPPORTED = 1
const CONFIG_SOC_SECURE_BOOT_SUPPORTED = 1
const CONFIG_SOC_SYSTIMER_SUPPORTED = 1
const CONFIG_SOC_BOD_SUPPORTED = 1
const CONFIG_SOC_CLK_TREE_SUPPORTED = 1
const CONFIG_SOC_ASSIST_DEBUG_SUPPORTED = 1
const CONFIG_SOC_WDT_SUPPORTED = 1
const CONFIG_SOC_SPI_FLASH_SUPPORTED = 1
const CONFIG_SOC_RNG_SUPPORTED = 1
const CONFIG_SOC_LIGHT_SLEEP_SUPPORTED = 1
const CONFIG_SOC_DEEP_SLEEP_SUPPORTED = 1
const CONFIG_SOC_LP_PERIPH_SHARE_INTERRUPT = 1
const CONFIG_SOC_PM_SUPPORTED = 1
const CONFIG_SOC_XTAL_SUPPORT_26M = 1
const CONFIG_SOC_XTAL_SUPPORT_40M = 1
const CONFIG_SOC_ADC_DIG_CTRL_SUPPORTED = 1
const CONFIG_SOC_ADC_DIG_IIR_FILTER_SUPPORTED = 1
const CONFIG_SOC_ADC_MONITOR_SUPPORTED = 1
const CONFIG_SOC_ADC_PERIPH_NUM = 1
const CONFIG_SOC_ADC_MAX_CHANNEL_NUM = 5
const CONFIG_SOC_ADC_ATTEN_NUM = 4
const CONFIG_SOC_ADC_DIGI_CONTROLLER_NUM = 1
const CONFIG_SOC_ADC_PATT_LEN_MAX = 8
const CONFIG_SOC_ADC_DIGI_MIN_BITWIDTH = 12
const CONFIG_SOC_ADC_DIGI_MAX_BITWIDTH = 12
const CONFIG_SOC_ADC_DIGI_IIR_FILTER_NUM = 2
const CONFIG_SOC_ADC_DIGI_MONITOR_NUM = 2
const CONFIG_SOC_ADC_SAMPLE_FREQ_THRES_HIGH = 83333
const CONFIG_SOC_ADC_SAMPLE_FREQ_THRES_LOW = 611
const CONFIG_SOC_ADC_RTC_MIN_BITWIDTH = 12
const CONFIG_SOC_ADC_RTC_MAX_BITWIDTH = 12
const CONFIG_SOC_ADC_CALIBRATION_V1_SUPPORTED = 1
const CONFIG_SOC_ADC_SELF_HW_CALI_SUPPORTED = 1
const CONFIG_SOC_ADC_SHARED_POWER = 1
const CONFIG_SOC_BROWNOUT_RESET_SUPPORTED = 1
const CONFIG_SOC_SHARED_IDCACHE_SUPPORTED = 1
const CONFIG_SOC_CPU_CORES_NUM = 1
const CONFIG_SOC_CPU_INTR_NUM = 32
const CONFIG_SOC_CPU_HAS_FLEXIBLE_INTC = 1
const CONFIG_SOC_CPU_HAS_CSR_PC = 1
const CONFIG_SOC_CPU_BREAKPOINTS_NUM = 2
const CONFIG_SOC_CPU_WATCHPOINTS_NUM = 2
const CONFIG_SOC_CPU_WATCHPOINT_MAX_REGION_SIZE = 0x80000000
const CONFIG_SOC_CPU_IDRAM_SPLIT_USING_PMP = 1
const CONFIG_SOC_ECC_SUPPORT_POINT_VERIFY_QUIRK = 1
const CONFIG_SOC_AHB_GDMA_VERSION = 1
const CONFIG_SOC_GDMA_NUM_GROUPS_MAX = 1
const CONFIG_SOC_GDMA_PAIRS_PER_GROUP_MAX = 1
const CONFIG_SOC_GPIO_PORT = 1
const CONFIG_SOC_GPIO_PIN_COUNT = 21
const CONFIG_SOC_GPIO_SUPPORT_PIN_GLITCH_FILTER = 1
const CONFIG_SOC_GPIO_FILTER_CLK_SUPPORT_APB = 1
const CONFIG_SOC_GPIO_SUPPORT_FORCE_HOLD = 1
const CONFIG_SOC_GPIO_SUPPORT_DEEPSLEEP_WAKEUP = 1
const CONFIG_SOC_GPIO_IN_RANGE_MAX = 20
const CONFIG_SOC_GPIO_OUT_RANGE_MAX = 20
const CONFIG_SOC_GPIO_DEEP_SLEEP_WAKE_VALID_GPIO_MASK = 0
const CONFIG_SOC_GPIO_DEEP_SLEEP_WAKE_SUPPORTED_PIN_CNT = 6
const CONFIG_SOC_GPIO_VALID_DIGITAL_IO_PAD_MASK = 0x00000000001FFFC0
const CONFIG_SOC_GPIO_CLOCKOUT_BY_GPIO_MATRIX = 1
const CONFIG_SOC_GPIO_CLOCKOUT_CHANNEL_NUM = 3
const CONFIG_SOC_GPIO_SUPPORT_HOLD_IO_IN_DSLP = 1
const CONFIG_SOC_DEDIC_GPIO_OUT_CHANNELS_NUM = 8
const CONFIG_SOC_DEDIC_GPIO_IN_CHANNELS_NUM = 8
const CONFIG_SOC_DEDIC_PERIPH_ALWAYS_ENABLE = 1
const CONFIG_SOC_I2C_NUM = 1
const CONFIG_SOC_HP_I2C_NUM = 1
const CONFIG_SOC_I2C_FIFO_LEN = 16
const CONFIG_SOC_I2C_CMD_REG_NUM = 8
const CONFIG_SOC_I2C_SUPPORT_HW_CLR_BUS = 1
const CONFIG_SOC_I2C_SUPPORT_XTAL = 1
const CONFIG_SOC_I2C_SUPPORT_RTC = 1
const CONFIG_SOC_I2C_SUPPORT_10BIT_ADDR = 1
const CONFIG_SOC_LEDC_SUPPORT_PLL_DIV_CLOCK = 1
const CONFIG_SOC_LEDC_SUPPORT_XTAL_CLOCK = 1
const CONFIG_SOC_LEDC_TIMER_NUM = 4
const CONFIG_SOC_LEDC_CHANNEL_NUM = 6
const CONFIG_SOC_LEDC_TIMER_BIT_WIDTH = 14
const CONFIG_SOC_LEDC_SUPPORT_FADE_STOP = 1
const CONFIG_SOC_MMU_PAGE_SIZE_CONFIGURABLE = 1
const CONFIG_SOC_MMU_LINEAR_ADDRESS_REGION_NUM = 1
const CONFIG_SOC_MMU_PERIPH_NUM = 1
const CONFIG_SOC_MPU_MIN_REGION_SIZE = 0x20000000
const CONFIG_SOC_MPU_REGIONS_MAX_NUM = 8
const CONFIG_SOC_RTC_CNTL_CPU_PD_DMA_BUS_WIDTH = 128
const CONFIG_SOC_RTC_CNTL_CPU_PD_REG_FILE_NUM = 108
const CONFIG_SOC_RTCIO_PIN_COUNT = 0
const CONFIG_SOC_SHA_SUPPORT_RESUME = 1
const CONFIG_SOC_SHA_SUPPORT_SHA1 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA224 = 1
const CONFIG_SOC_SHA_SUPPORT_SHA256 = 1
const CONFIG_SOC_SPI_PERIPH_NUM = 2
const CONFIG_SOC_SPI_MAX_CS_NUM = 6
const CONFIG_SOC_SPI_MAXIMUM_BUFFER_SIZE = 64
const CONFIG_SOC_SPI_SUPPORT_DDRCLK = 1
const CONFIG_SOC_SPI_SLAVE_SUPPORT_SEG_TRANS = 1
const CONFIG_SOC_SPI_SUPPORT_CD_SIG = 1
const CONFIG_SOC_SPI_SUPPORT_CONTINUOUS_TRANS = 1
const CONFIG_SOC_SPI_SUPPORT_SLAVE_HD_VER2 = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_XTAL = 1
const CONFIG_SOC_SPI_SUPPORT_CLK_PLL_F40M = 1
const CONFIG_SOC_SPI_PERIPH_SUPPORT_CONTROL_DUMMY_OUT = 1
const CONFIG_SOC_SPI_SCT_SUPPORTED = 1
const CONFIG_SOC_SPI_SCT_REG_NUM = 14
const CONFIG_SOC_SPI_SCT_BUFFER_NUM_MAX = 1
const CONFIG_SOC_SPI_SCT_CONF_BITLEN_MAX = 0x3FFFA
const CONFIG_SOC_MEMSPI_IS_INDEPENDENT = 1
const CONFIG_SOC_SPI_MAX_PRE_DIVIDER = 16
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_WAIT_IDLE = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_SUSPEND = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_AUTO_RESUME = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_IDLE_INTR = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_SW_SUSPEND = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_CHECK_SUS = 1
const CONFIG_SOC_SPI_MEM_SUPPORT_WRAP = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_60M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_30M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_20M_SUPPORTED = 1
const CONFIG_SOC_MEMSPI_SRC_FREQ_15M_SUPPORTED = 1
const CONFIG_SOC_SYSTIMER_COUNTER_NUM = 2
const CONFIG_SOC_SYSTIMER_ALARM_NUM = 3
const CONFIG_SOC_SYSTIMER_BIT_WIDTH_LO = 32
const CONFIG_SOC_SYSTIMER_BIT_WIDTH_HI = 20
const CONFIG_SOC_SYSTIMER_FIXED_DIVIDER = 1
const CONFIG_SOC_SYSTIMER_INT_LEVEL = 1
const CONFIG_SOC_SYSTIMER_ALARM_MISS_COMPENSATE = 1
const CONFIG_SOC_TIMER_GROUPS = 1
const CONFIG_SOC_TIMER_GROUP_TIMERS_PER_GROUP = 1
const CONFIG_SOC_TIMER_GROUP_COUNTER_BIT_WIDTH = 54
const CONFIG_SOC_TIMER_GROUP_SUPPORT_XTAL = 1
const CONFIG_SOC_TIMER_GROUP_TOTAL_TIMERS = 1
const CONFIG_SOC_LP_TIMER_BIT_WIDTH_LO = 32
const CONFIG_SOC_LP_TIMER_BIT_WIDTH_HI = 16
const CONFIG_SOC_MWDT_SUPPORT_XTAL = 1
const CONFIG_SOC_EFUSE_DIS_DOWNLOAD_ICACHE = 1
const CONFIG_SOC_EFUSE_DIS_PAD_JTAG = 1
const CONFIG_SOC_EFUSE_DIS_DIRECT_BOOT = 1
const CONFIG_SOC_SECURE_BOOT_V2_ECC = 1
const CONFIG_SOC_EFUSE_SECURE_BOOT_KEY_DIGESTS = 1
const CONFIG_SOC_FLASH_ENCRYPTED_XTS_AES_BLOCK_MAX = 32
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES = 1
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES_OPTIONS = 1
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES_128 = 1
const CONFIG_SOC_FLASH_ENCRYPTION_XTS_AES_128_DERIVED = 1
const CONFIG_SOC_UART_NUM = 2
const CONFIG_SOC_UART_HP_NUM = 2
const CONFIG_SOC_UART_FIFO_LEN = 128
const CONFIG_SOC_UART_BITRATE_MAX = 2500000
const CONFIG_SOC_UART_SUPPORT_WAKEUP_INT = 1
const CONFIG_SOC_UART_SUPPORT_PLL_F40M_CLK = 1
const CONFIG_SOC_UART_SUPPORT_RTC_CLK = 1
const CONFIG_SOC_UART_SUPPORT_XTAL_CLK = 1
const CONFIG_SOC_UART_SUPPORT_FSM_TX_WAIT_SEND = 1
const CONFIG_SOC_SUPPORT_COEXISTENCE = 1
const CONFIG_SOC_COEX_HW_PTI = 1
const CONFIG_SOC_EXTERNAL_COEX_ADVANCE = 1
const CONFIG_SOC_PHY_DIG_REGS_MEM_SIZE = 21
const CONFIG_SOC_WIFI_LIGHT_SLEEP_CLK_WIDTH = 12
const CONFIG_SOC_PM_SUPPORT_WIFI_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_BT_WAKEUP = 1
const CONFIG_SOC_PM_SUPPORT_RC_FAST_PD = 1
const CONFIG_SOC_PM_SUPPORT_VDDSDIO_PD = 1
const CONFIG_SOC_CLK_RC_FAST_D256_SUPPORTED = 1
const CONFIG_SOC_RTC_SLOW_CLK_SUPPORT_RC_FAST_D256 = 1
const CONFIG_SOC_CLK_RC_FAST_SUPPORT_CALIBRATION = 1
const CONFIG_SOC_CLK_OSC_SLOW_SUPPORTED = 1
const CONFIG_SOC_WIFI_HW_TSF = 1
const CONFIG_SOC_WIFI_FTM_SUPPORT = 1
const CONFIG_SOC_WIFI_SUPPORT_VARIABLE_BEACON_WINDOW = 1
const CONFIG_SOC_WIFI_PHY_NEEDS_USB_WORKAROUND = 1
const CONFIG_SOC_BLE_SUPPORTED = 1
const CONFIG_SOC_ESP_NIMBLE_CONTROLLER = 1
const CONFIG_SOC_BLE_50_SUPPORTED = 1
const CONFIG_SOC_BLE_DEVICE_PRIVACY_SUPPORTED = 1
const CONFIG_SOC_BLUFI_SUPPORTED = 1
const CONFIG_SOC_BLE_PERIODIC_ADV_ENH_SUPPORTED = 1
const CONFIG_SOC_PHY_IMPROVE_RX_11B = 1
const CONFIG_SOC_PHY_COMBO_MODULE = 1
const CONFIG_IDF_CMAKE = 1
const CONFIG_IDF_TOOLCHAIN = "gcc"
const CONFIG_IDF_TOOLCHAIN_GCC = 1
const CONFIG_IDF_TARGET_ARCH_RISCV = 1
const CONFIG_IDF_TARGET_ARCH = "riscv"
const CONFIG_IDF_TARGET = "esp32c2"
const CONFIG_IDF_INIT_VERSION = "5.4.2"
const CONFIG_IDF_TARGET_ESP32C2 = 1
const CONFIG_IDF_FIRMWARE_CHIP_ID = 0x000C
const CONFIG_APP_BUILD_TYPE_APP_2NDBOOT = 1
const CONFIG_APP_BUILD_GENERATE_BINARIES = 1
const CONFIG_APP_BUILD_BOOTLOADER = 1
const CONFIG_APP_BUILD_USE_FLASH_SECTIONS = 1
const CONFIG_BOOTLOADER_COMPILE_TIME_DATE = 1
const CONFIG_BOOTLOADER_PROJECT_VER = 1
const CONFIG_BOOTLOADER_OFFSET_IN_FLASH = 0x0
const CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_SIZE = 1
const CONFIG_BOOTLOADER_LOG_LEVEL_INFO = 1
const CONFIG_BOOTLOADER_LOG_LEVEL = 3
const CONFIG_BOOTLOADER_LOG_TIMESTAMP_SOURCE_CPU_TICKS = 1
const CONFIG_BOOTLOADER_FLASH_XMC_SUPPORT = 1
const CONFIG_BOOTLOADER_REGION_PROTECTION_ENABLE = 1
const CONFIG_BOOTLOADER_WDT_ENABLE = 1
const CONFIG_BOOTLOADER_WDT_TIME_MS = 9000
const CONFIG_SECURE_BOOT_V2_ECC_SUPPORTED = 1
const CONFIG_SECURE_BOOT_V2_PREFERRED = 1
const CONFIG_SECURE_ROM_DL_MODE_ENABLED = 1
const CONFIG_APP_COMPILE_TIME_DATE = 1
const CONFIG_APP_RETRIEVE_LEN_ELF_SHA = 9
const CONFIG_ESP_ROM_HAS_CRC_LE = 1
const CONFIG_ESP_ROM_HAS_CRC_BE = 1
const CONFIG_ESP_ROM_UART_CLK_IS_XTAL = 1
const CONFIG_ESP_ROM_HAS_RETARGETABLE_LOCKING = 1
const CONFIG_ESP_ROM_GET_CLK_FREQ = 1
const CONFIG_ESP_ROM_HAS_RVFPLIB = 1
const CONFIG_ESP_ROM_HAS_HAL_WDT = 1
const CONFIG_ESP_ROM_HAS_HAL_SYSTIMER = 1
const CONFIG_ESP_ROM_HAS_HEAP_TLSF = 1
const CONFIG_ESP_ROM_TLSF_CHECK_PATCH = 1
const CONFIG_ESP_ROM_MULTI_HEAP_WALK_PATCH = 1
const CONFIG_ESP_ROM_HAS_LAYOUT_TABLE = 1
const CONFIG_ESP_ROM_HAS_SPI_FLASH = 1
const CONFIG_ESP_ROM_HAS_NEWLIB = 1
const CONFIG_ESP_ROM_HAS_NEWLIB_NANO_FORMAT = 1
const CONFIG_ESP_ROM_NEEDS_SET_CACHE_MMU_SIZE = 1
const CONFIG_ESP_ROM_RAM_APP_NEEDS_MMU_INIT = 1
const CONFIG_ESP_ROM_HAS_MBEDTLS_CRYPTO_LIB = 1
const CONFIG_ESP_ROM_HAS_SW_FLOAT = 1
const CONFIG_ESP_ROM_HAS_VERSION = 1
const CONFIG_ESP_ROM_HAS_VPRINTF_FUNC = 1
const CONFIG_ESP_ROM_HAS_OUTPUT_PUTC_FUNC = 1
const CONFIG_BOOT_ROM_LOG_ALWAYS_ON = 1
const CONFIG_ESPTOOLPY_FLASHMODE_DIO = 1
const CONFIG_ESPTOOLPY_FLASH_SAMPLE_MODE_STR = 1
const CONFIG_ESPTOOLPY_FLASHMODE = "dio"
const CONFIG_ESPTOOLPY_FLASHFREQ_60M = 1
const CONFIG_ESPTOOLPY_FLASHFREQ = "60m"
const CONFIG_ESPTOOLPY_FLASHSIZE_2MB = 1
const CONFIG_ESPTOOLPY_FLASHSIZE = "2MB"
const CONFIG_ESPTOOLPY_BEFORE_RESET = 1
const CONFIG_ESPTOOLPY_BEFORE = "default_reset"
const CONFIG_ESPTOOLPY_AFTER_RESET = 1
const CONFIG_ESPTOOLPY_AFTER = "hard_reset"
const CONFIG_ESPTOOLPY_MONITOR_BAUD = 115200
const CONFIG_PARTITION_TABLE_SINGLE_APP = 1
const CONFIG_PARTITION_TABLE_CUSTOM_FILENAME = "partitions.csv"
const CONFIG_PARTITION_TABLE_FILENAME = "partitions_singleapp.csv"
const CONFIG_PARTITION_TABLE_OFFSET = 0x8000
const CONFIG_PARTITION_TABLE_MD5 = 1
const CONFIG_COMPILER_OPTIMIZATION_DEBUG = 1
const CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE = 1
const CONFIG_COMPILER_ASSERT_NDEBUG_EVALUATE = 1
const CONFIG_COMPILER_FLOAT_LIB_FROM_RVFPLIB = 1
const CONFIG_COMPILER_OPTIMIZATION_ASSERTION_LEVEL = 2
const CONFIG_COMPILER_HIDE_PATHS_MACROS = 1
const CONFIG_COMPILER_STACK_CHECK_MODE_NONE = 1
const CONFIG_COMPILER_DISABLE_DEFAULT_ERRORS = 1
const CONFIG_COMPILER_RT_LIB_GCCLIB = 1
const CONFIG_COMPILER_RT_LIB_NAME = "gcc"
const CONFIG_COMPILER_ORPHAN_SECTIONS_WARNING = 1
const CONFIG_APPTRACE_DEST_NONE = 1
const CONFIG_APPTRACE_DEST_UART_NONE = 1
const CONFIG_APPTRACE_UART_TASK_PRIO = 1
const CONFIG_APPTRACE_LOCK_ENABLE = 1
const CONFIG_EFUSE_MAX_BLK_LEN = 256
const CONFIG_ESP_TLS_USING_MBEDTLS = 1
const CONFIG_ESP_COEX_ENABLED = 1
const CONFIG_ESP_ERR_TO_NAME_LOOKUP = 1
const CONFIG_GPTIMER_ISR_HANDLER_IN_IRAM = 1
const CONFIG_GPTIMER_OBJ_CACHE_SAFE = 1
const CONFIG_SPI_MASTER_ISR_IN_IRAM = 1
const CONFIG_SPI_SLAVE_ISR_IN_IRAM = 1
const CONFIG_ETH_ENABLED = 1
const CONFIG_ETH_USE_SPI_ETHERNET = 1
const CONFIG_ESP_EVENT_POST_FROM_ISR = 1
const CONFIG_ESP_EVENT_POST_FROM_IRAM_ISR = 1
const CONFIG_ESP_GDBSTUB_ENABLED = 1
const CONFIG_ESP_GDBSTUB_SUPPORT_TASKS = 1
const CONFIG_ESP_GDBSTUB_MAX_TASKS = 32
const CONFIG_ESPHID_TASK_SIZE_BT = 2048
const CONFIG_ESPHID_TASK_SIZE_BLE = 4096
const CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS = 1
const CONFIG_ESP_HTTP_CLIENT_EVENT_POST_TIMEOUT = 2000
const CONFIG_HTTPD_MAX_REQ_HDR_LEN = 512
const CONFIG_HTTPD_MAX_URI_LEN = 512
const CONFIG_HTTPD_ERR_RESP_NO_DELAY = 1
const CONFIG_HTTPD_PURGE_BUF_LEN = 32
const CONFIG_HTTPD_SERVER_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP_HTTPS_OTA_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP_HTTPS_SERVER_EVENT_POST_TIMEOUT = 2000
const CONFIG_ESP32C2_REV_MIN_1 = 1
const CONFIG_ESP32C2_REV_MIN_FULL = 100
const CONFIG_ESP_REV_MIN_FULL = 100
const CONFIG_ESP32C2_REV_MAX_FULL = 299
const CONFIG_ESP_REV_MAX_FULL = 299
const CONFIG_ESP_EFUSE_BLOCK_REV_MIN_FULL = 0
const CONFIG_ESP_EFUSE_BLOCK_REV_MAX_FULL = 99
const CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_STA = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_AP = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_BT = 1
const CONFIG_ESP_MAC_ADDR_UNIVERSE_ETH = 1
const CONFIG_ESP_MAC_UNIVERSAL_MAC_ADDRESSES_FOUR = 1
const CONFIG_ESP_MAC_UNIVERSAL_MAC_ADDRESSES = 4
const CONFIG_ESP32C2_UNIVERSAL_MAC_ADDRESSES_FOUR = 1
const CONFIG_ESP32C2_UNIVERSAL_MAC_ADDRESSES = 4
const CONFIG_ESP_SLEEP_FLASH_LEAKAGE_WORKAROUND = 1
const CONFIG_ESP_SLEEP_MSPI_NEED_ALL_IO_PU = 1
const CONFIG_ESP_SLEEP_GPIO_RESET_WORKAROUND = 1
const CONFIG_ESP_SLEEP_WAIT_FLASH_READY_EXTRA_DELAY = 0
const CONFIG_ESP_SLEEP_GPIO_ENABLE_INTERNAL_RESISTORS = 1
const CONFIG_RTC_CLK_SRC_INT_RC = 1
const CONFIG_RTC_CLK_CAL_CYCLES = 1024
const CONFIG_GDMA_CTRL_FUNC_IN_IRAM = 1
const CONFIG_GDMA_ISR_HANDLER_IN_IRAM = 1
const CONFIG_GDMA_OBJ_DRAM_SAFE = 1
const CONFIG_XTAL_FREQ_40 = 1
const CONFIG_XTAL_FREQ = 40
const CONFIG_ESP_SPI_BUS_LOCK_ISR_FUNCS_IN_IRAM = 1
const CONFIG_ESP_NETIF_IP_LOST_TIMER_INTERVAL = 120
const CONFIG_ESP_NETIF_TCPIP_LWIP = 1
const CONFIG_ESP_NETIF_USES_TCPIP_WITH_BSD_API = 1
const CONFIG_ESP_NETIF_REPORT_DATA_TRAFFIC = 1
const CONFIG_ESP_PHY_ENABLED = 1
const CONFIG_ESP_PHY_CALIBRATION_AND_DATA_STORAGE = 1
const CONFIG_ESP_PHY_MAX_WIFI_TX_POWER = 20
const CONFIG_ESP_PHY_MAX_TX_POWER = 20
const CONFIG_ESP_PHY_RF_CAL_PARTIAL = 1
const CONFIG_ESP_PHY_CALIBRATION_MODE = 0
const CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ_120 = 1
const CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ = 120
const CONFIG_ESP_SYSTEM_PANIC_PRINT_REBOOT = 1
const CONFIG_ESP_SYSTEM_PANIC_REBOOT_DELAY_SECONDS = 0
const CONFIG_ESP_SYSTEM_SINGLE_CORE_MODE = 1
const CONFIG_ESP_SYSTEM_PMP_IDRAM_SPLIT = 1
const CONFIG_ESP_SYSTEM_EVENT_QUEUE_SIZE = 32
const CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE = 2304
const CONFIG_ESP_MAIN_TASK_STACK_SIZE = 3584
const CONFIG_ESP_MAIN_TASK_AFFINITY_CPU0 = 1
const CONFIG_ESP_MAIN_TASK_AFFINITY = 0x0
const CONFIG_ESP_MINIMAL_SHARED_STACK_SIZE = 2048
const CONFIG_ESP_CONSOLE_UART_DEFAULT = 1
const CONFIG_ESP_CONSOLE_UART = 1
const CONFIG_ESP_CONSOLE_UART_NUM = 0
const CONFIG_ESP_CONSOLE_ROM_SERIAL_PORT_NUM = 0
const CONFIG_ESP_CONSOLE_UART_BAUDRATE = 115200
const CONFIG_ESP_INT_WDT = 1
const CONFIG_ESP_INT_WDT_TIMEOUT_MS = 300
const CONFIG_ESP_TASK_WDT_EN = 1
const CONFIG_ESP_TASK_WDT_USE_ESP_TIMER = 1
const CONFIG_ESP_TASK_WDT_INIT = 1
const CONFIG_ESP_TASK_WDT_TIMEOUT_S = 5
const CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU0 = 1
const CONFIG_ESP_DEBUG_OCDAWARE = 1
const CONFIG_ESP_SYSTEM_CHECK_INT_LEVEL_4 = 1
const CONFIG_ESP_BROWNOUT_DET = 1
const CONFIG_ESP_BROWNOUT_DET_LVL_SEL_7 = 1
const CONFIG_ESP_BROWNOUT_DET_LVL = 7
const CONFIG_ESP_SYSTEM_BROWNOUT_INTR = 1
const CONFIG_ESP_SYSTEM_HW_STACK_GUARD = 1
const CONFIG_ESP_SYSTEM_BBPLL_RECALIB = 1
const CONFIG_ESP_SYSTEM_HW_PC_RECORD = 1
const CONFIG_ESP_IPC_TASK_STACK_SIZE = 1024
const CONFIG_ESP_TIME_FUNCS_USE_RTC_TIMER = 1
const CONFIG_ESP_TIME_FUNCS_USE_ESP_TIMER = 1
const CONFIG_ESP_TIMER_TASK_STACK_SIZE = 3584
const CONFIG_ESP_TIMER_INTERRUPT_LEVEL = 1
const CONFIG_ESP_TIMER_TASK_AFFINITY = 0x0
const CONFIG_ESP_TIMER_TASK_AFFINITY_CPU0 = 1
const CONFIG_ESP_TIMER_ISR_AFFINITY_CPU0 = 1
const CONFIG_ESP_TIMER_SUPPORTS_ISR_DISPATCH_METHOD = 1
const CONFIG_ESP_TIMER_IMPL_SYSTIMER = 1
const CONFIG_ESP_WIFI_ENABLED = 1
const CONFIG_ESP_WIFI_STATIC_RX_BUFFER_NUM = 10
const CONFIG_ESP_WIFI_DYNAMIC_RX_BUFFER_NUM = 32
const CONFIG_ESP_WIFI_DYNAMIC_TX_BUFFER = 1
const CONFIG_ESP_WIFI_TX_BUFFER_TYPE = 1
const CONFIG_ESP_WIFI_DYNAMIC_TX_BUFFER_NUM = 32
const CONFIG_ESP_WIFI_STATIC_RX_MGMT_BUFFER = 1
const CONFIG_ESP_WIFI_DYNAMIC_RX_MGMT_BUF = 0
const CONFIG_ESP_WIFI_RX_MGMT_BUF_NUM_DEF = 5
const CONFIG_ESP_WIFI_AMPDU_TX_ENABLED = 1
const CONFIG_ESP_WIFI_TX_BA_WIN = 6
const CONFIG_ESP_WIFI_AMPDU_RX_ENABLED = 1
const CONFIG_ESP_WIFI_RX_BA_WIN = 6
const CONFIG_ESP_WIFI_NVS_ENABLED = 1
const CONFIG_ESP_WIFI_SOFTAP_BEACON_MAX_LEN = 752
const CONFIG_ESP_WIFI_MGMT_SBUF_NUM = 32
const CONFIG_ESP_WIFI_IRAM_OPT = 1
const CONFIG_ESP_WIFI_RX_IRAM_OPT = 1
const CONFIG_ESP_WIFI_ENABLE_WPA3_SAE = 1
const CONFIG_ESP_WIFI_ENABLE_SAE_PK = 1
const CONFIG_ESP_WIFI_SOFTAP_SAE_SUPPORT = 1
const CONFIG_ESP_WIFI_ENABLE_WPA3_OWE_STA = 1
const CONFIG_ESP_WIFI_SLP_DEFAULT_MIN_ACTIVE_TIME = 50
const CONFIG_ESP_WIFI_SLP_DEFAULT_MAX_ACTIVE_TIME = 10
const CONFIG_ESP_WIFI_SLP_DEFAULT_WAIT_BROADCAST_DATA_TIME = 15
const CONFIG_ESP_WIFI_STA_DISCONNECTED_PM_ENABLE = 1
const CONFIG_ESP_WIFI_GMAC_SUPPORT = 1
const CONFIG_ESP_WIFI_SOFTAP_SUPPORT = 1
const CONFIG_ESP_WIFI_ESPNOW_MAX_ENCRYPT_NUM = 2
const CONFIG_ESP_WIFI_MBEDTLS_CRYPTO = 1
const CONFIG_ESP_WIFI_MBEDTLS_TLS_CLIENT = 1
const CONFIG_ESP_WIFI_ENTERPRISE_SUPPORT = 1
const CONFIG_ESP_WIFI_ENT_FREE_DYNAMIC_BUFFER = 1
const CONFIG_ESP_COREDUMP_ENABLE_TO_NONE = 1
const CONFIG_FATFS_VOLUME_COUNT = 2
const CONFIG_FATFS_LFN_NONE = 1
const CONFIG_FATFS_SECTOR_4096 = 1
const CONFIG_FATFS_CODEPAGE_437 = 1
const CONFIG_FATFS_CODEPAGE = 437
const CONFIG_FATFS_FS_LOCK = 0
const CONFIG_FATFS_TIMEOUT_MS = 10000
const CONFIG_FATFS_PER_FILE_CACHE = 1
const CONFIG_FATFS_USE_STRFUNC_NONE = 1
const CONFIG_FATFS_VFS_FSTAT_BLKSIZE = 0
const CONFIG_FATFS_LINK_LOCK = 1
const CONFIG_FATFS_DONT_TRUST_FREE_CLUSTER_CNT = 0
const CONFIG_FATFS_DONT_TRUST_LAST_ALLOC = 0
const CONFIG_FREERTOS_UNICORE = 1
const CONFIG_FREERTOS_HZ = 100
const CONFIG_FREERTOS_OPTIMIZED_SCHEDULER = 1
const CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY = 1
const CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS = 1
const CONFIG_FREERTOS_IDLE_TASK_STACKSIZE = 1536
const CONFIG_FREERTOS_MAX_TASK_NAME_LEN = 16
const CONFIG_FREERTOS_USE_TIMERS = 1
const CONFIG_FREERTOS_TIMER_SERVICE_TASK_NAME = "Tmr Svc"
const CONFIG_FREERTOS_TIMER_TASK_NO_AFFINITY = 1
const CONFIG_FREERTOS_TIMER_SERVICE_TASK_CORE_AFFINITY = 0x7FFFFFFF
const CONFIG_FREERTOS_TIMER_TASK_PRIORITY = 1
const CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH = 2048
const CONFIG_FREERTOS_TIMER_QUEUE_LENGTH = 10
const CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE = 0
const CONFIG_FREERTOS_TASK_NOTIFICATION_ARRAY_ENTRIES = 1
const CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER = 1
const CONFIG_FREERTOS_TLSP_DELETION_CALLBACKS = 1
const CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER = 1
const CONFIG_FREERTOS_ISR_STACKSIZE = 1536
const CONFIG_FREERTOS_INTERRUPT_BACKTRACE = 1
const CONFIG_FREERTOS_TICK_SUPPORT_SYSTIMER = 1
const CONFIG_FREERTOS_CORETIMER_SYSTIMER_LVL1 = 1
const CONFIG_FREERTOS_SYSTICK_USES_SYSTIMER = 1
const CONFIG_FREERTOS_PORT = 1
const CONFIG_FREERTOS_NO_AFFINITY = 0x7FFFFFFF
const CONFIG_FREERTOS_SUPPORT_STATIC_ALLOCATION = 1
const CONFIG_FREERTOS_DEBUG_OCDAWARE = 1
const CONFIG_FREERTOS_ENABLE_TASK_SNAPSHOT = 1
const CONFIG_FREERTOS_PLACE_SNAPSHOT_FUNS_INTO_FLASH = 1
const CONFIG_FREERTOS_NUMBER_OF_CORES = 1
const CONFIG_HAL_ASSERTION_EQUALS_SYSTEM = 1
const CONFIG_HAL_DEFAULT_ASSERTION_LEVEL = 2
const CONFIG_HAL_SYSTIMER_USE_ROM_IMPL = 1
const CONFIG_HAL_WDT_USE_ROM_IMPL = 1
const CONFIG_HAL_SPI_MASTER_FUNC_IN_IRAM = 1
const CONFIG_HAL_SPI_SLAVE_FUNC_IN_IRAM = 1
const CONFIG_HEAP_POISONING_DISABLED = 1
const CONFIG_HEAP_TRACING_OFF = 1
const CONFIG_HEAP_TLSF_USE_ROM_IMPL = 1
const CONFIG_LOG_DEFAULT_LEVEL_INFO = 1
const CONFIG_LOG_DEFAULT_LEVEL = 3
const CONFIG_LOG_MAXIMUM_EQUALS_DEFAULT = 1
const CONFIG_LOG_MAXIMUM_LEVEL = 3
const CONFIG_LOG_DYNAMIC_LEVEL_CONTROL = 1
const CONFIG_LOG_TAG_LEVEL_IMPL_CACHE_AND_LINKED_LIST = 1
const CONFIG_LOG_TAG_LEVEL_CACHE_BINARY_MIN_HEAP = 1
const CONFIG_LOG_TAG_LEVEL_IMPL_CACHE_SIZE = 31
const CONFIG_LOG_TIMESTAMP_SOURCE_RTOS = 1
const CONFIG_LWIP_ENABLE = 1
const CONFIG_LWIP_LOCAL_HOSTNAME = "espressif"
const CONFIG_LWIP_TCPIP_TASK_PRIO = 18
const CONFIG_LWIP_DNS_SUPPORT_MDNS_QUERIES = 1
const CONFIG_LWIP_TIMERS_ONDEMAND = 1
const CONFIG_LWIP_ND6 = 1
const CONFIG_LWIP_MAX_SOCKETS = 10
const CONFIG_LWIP_SO_REUSE = 1
const CONFIG_LWIP_SO_REUSE_RXTOALL = 1
const CONFIG_LWIP_IP_DEFAULT_TTL = 64
const CONFIG_LWIP_IP4_FRAG = 1
const CONFIG_LWIP_IP6_FRAG = 1
const CONFIG_LWIP_IP_REASS_MAX_PBUFS = 10
const CONFIG_LWIP_ESP_GRATUITOUS_ARP = 1
const CONFIG_LWIP_GARP_TMR_INTERVAL = 60
const CONFIG_LWIP_ESP_MLDV6_REPORT = 1
const CONFIG_LWIP_MLDV6_TMR_INTERVAL = 40
const CONFIG_LWIP_TCPIP_RECVMBOX_SIZE = 32
const CONFIG_LWIP_DHCP_DOES_ARP_CHECK = 1
const CONFIG_LWIP_DHCP_DISABLE_VENDOR_CLASS_ID = 1
const CONFIG_LWIP_DHCP_OPTIONS_LEN = 68
const CONFIG_LWIP_NUM_NETIF_CLIENT_DATA = 0
const CONFIG_LWIP_DHCP_COARSE_TIMER_SECS = 1
const CONFIG_LWIP_DHCPS = 1
const CONFIG_LWIP_DHCPS_LEASE_UNIT = 60
const CONFIG_LWIP_DHCPS_MAX_STATION_NUM = 8
const CONFIG_LWIP_DHCPS_STATIC_ENTRIES = 1
const CONFIG_LWIP_DHCPS_ADD_DNS = 1
const CONFIG_LWIP_IPV4 = 1
const CONFIG_LWIP_IPV6 = 1
const CONFIG_LWIP_IPV6_NUM_ADDRESSES = 3
const CONFIG_LWIP_NETIF_LOOPBACK = 1
const CONFIG_LWIP_LOOPBACK_MAX_PBUFS = 8
const CONFIG_LWIP_MAX_ACTIVE_TCP = 16
const CONFIG_LWIP_MAX_LISTENING_TCP = 16
const CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION = 1
const CONFIG_LWIP_TCP_MAXRTX = 12
const CONFIG_LWIP_TCP_SYNMAXRTX = 12
const CONFIG_LWIP_TCP_MSS = 1440
const CONFIG_LWIP_TCP_TMR_INTERVAL = 250
const CONFIG_LWIP_TCP_MSL = 60000
const CONFIG_LWIP_TCP_FIN_WAIT_TIMEOUT = 20000
const CONFIG_LWIP_TCP_SND_BUF_DEFAULT = 5760
const CONFIG_LWIP_TCP_WND_DEFAULT = 5760
const CONFIG_LWIP_TCP_RECVMBOX_SIZE = 6
const CONFIG_LWIP_TCP_ACCEPTMBOX_SIZE = 6
const CONFIG_LWIP_TCP_QUEUE_OOSEQ = 1
const CONFIG_LWIP_TCP_OOSEQ_TIMEOUT = 6
const CONFIG_LWIP_TCP_OOSEQ_MAX_PBUFS = 4
const CONFIG_LWIP_TCP_OVERSIZE_MSS = 1
const CONFIG_LWIP_TCP_RTO_TIME = 1500
const CONFIG_LWIP_MAX_UDP_PCBS = 16
const CONFIG_LWIP_UDP_RECVMBOX_SIZE = 6
const CONFIG_LWIP_CHECKSUM_CHECK_ICMP = 1
const CONFIG_LWIP_TCPIP_TASK_STACK_SIZE = 3072
const CONFIG_LWIP_TCPIP_TASK_AFFINITY_NO_AFFINITY = 1
const CONFIG_LWIP_TCPIP_TASK_AFFINITY = 0x7FFFFFFF
const CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE = 3
const CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS = 5
const CONFIG_LWIP_IPV6_ND6_NUM_PREFIXES = 5
const CONFIG_LWIP_IPV6_ND6_NUM_ROUTERS = 3
const CONFIG_LWIP_IPV6_ND6_NUM_DESTINATIONS = 10
const CONFIG_LWIP_ICMP = 1
const CONFIG_LWIP_MAX_RAW_PCBS = 16
const CONFIG_LWIP_SNTP_MAX_SERVERS = 1
const CONFIG_LWIP_SNTP_UPDATE_DELAY = 3600000
const CONFIG_LWIP_SNTP_STARTUP_DELAY = 1
const CONFIG_LWIP_SNTP_MAXIMUM_STARTUP_DELAY = 5000
const CONFIG_LWIP_DNS_MAX_HOST_IP = 1
const CONFIG_LWIP_DNS_MAX_SERVERS = 3
const CONFIG_LWIP_BRIDGEIF_MAX_PORTS = 7
const CONFIG_LWIP_ESP_LWIP_ASSERT = 1
const CONFIG_LWIP_HOOK_TCP_ISN_DEFAULT = 1
const CONFIG_LWIP_HOOK_IP6_ROUTE_NONE = 1
const CONFIG_LWIP_HOOK_ND6_GET_GW_NONE = 1
const CONFIG_LWIP_HOOK_IP6_SELECT_SRC_ADDR_NONE = 1
const CONFIG_LWIP_HOOK_NETCONN_EXT_RESOLVE_NONE = 1
const CONFIG_LWIP_HOOK_DNS_EXT_RESOLVE_NONE = 1
const CONFIG_LWIP_HOOK_IP6_INPUT_DEFAULT = 1
const CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC = 1
const CONFIG_MBEDTLS_ASYMMETRIC_CONTENT_LEN = 1
const CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN = 16384
const CONFIG_MBEDTLS_SSL_OUT_CONTENT_LEN = 4096
const CONFIG_MBEDTLS_SSL_KEEP_PEER_CERTIFICATE = 1
const CONFIG_MBEDTLS_PKCS7_C = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_FULL = 1
const CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_MAX_CERTS = 200
const CONFIG_MBEDTLS_CMAC_C = 1
const CONFIG_MBEDTLS_HARDWARE_SHA = 1
const CONFIG_MBEDTLS_HARDWARE_ECC = 1
const CONFIG_MBEDTLS_ECC_OTHER_CURVES_SOFT_FALLBACK = 1
const CONFIG_MBEDTLS_ROM_MD5 = 1
const CONFIG_MBEDTLS_HAVE_TIME = 1
const CONFIG_MBEDTLS_ECDSA_DETERMINISTIC = 1
const CONFIG_MBEDTLS_SHA1_C = 1
const CONFIG_MBEDTLS_SHA512_C = 1
const CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT = 1
const CONFIG_MBEDTLS_TLS_SERVER = 1
const CONFIG_MBEDTLS_TLS_CLIENT = 1
const CONFIG_MBEDTLS_TLS_ENABLED = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_RSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA = 1
const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA = 1
const CONFIG_MBEDTLS_SSL_RENEGOTIATION = 1
const CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 = 1
const CONFIG_MBEDTLS_SSL_ALPN = 1
const CONFIG_MBEDTLS_CLIENT_SSL_SESSION_TICKETS = 1
const CONFIG_MBEDTLS_SERVER_SSL_SESSION_TICKETS = 1
const CONFIG_MBEDTLS_AES_C = 1
const CONFIG_MBEDTLS_CCM_C = 1
const CONFIG_MBEDTLS_GCM_C = 1
const CONFIG_MBEDTLS_PEM_PARSE_C = 1
const CONFIG_MBEDTLS_PEM_WRITE_C = 1
const CONFIG_MBEDTLS_X509_CRL_PARSE_C = 1
const CONFIG_MBEDTLS_X509_CSR_PARSE_C = 1
const CONFIG_MBEDTLS_ECP_C = 1
const CONFIG_MBEDTLS_PK_PARSE_EC_EXTENDED = 1
const CONFIG_MBEDTLS_PK_PARSE_EC_COMPRESSED = 1
const CONFIG_MBEDTLS_ECDH_C = 1
const CONFIG_MBEDTLS_ECDSA_C = 1
const CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED = 1
const CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED = 1
const CONFIG_MBEDTLS_ECP_NIST_OPTIM = 1
const CONFIG_MBEDTLS_ERROR_STRINGS = 1
const CONFIG_MBEDTLS_FS_IO = 1
const CONFIG_MQTT_PROTOCOL_311 = 1
const CONFIG_MQTT_TRANSPORT_SSL = 1
const CONFIG_MQTT_TRANSPORT_WEBSOCKET = 1
const CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE = 1
const CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF = 1
const CONFIG_NEWLIB_STDIN_LINE_ENDING_CR = 1
const CONFIG_NEWLIB_NANO_FORMAT = 1
const CONFIG_NEWLIB_TIME_SYSCALL_USE_RTC_HRT = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_0 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_1 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_VERSION_2 = 1
const CONFIG_ESP_PROTOCOMM_SUPPORT_SECURITY_PATCH_VERSION = 1
const CONFIG_PTHREAD_TASK_PRIO_DEFAULT = 5
const CONFIG_PTHREAD_TASK_STACK_SIZE_DEFAULT = 3072
const CONFIG_PTHREAD_STACK_MIN = 768
const CONFIG_PTHREAD_TASK_NAME_DEFAULT = "pthread"
const CONFIG_MMU_PAGE_SIZE_32KB = 1
const CONFIG_MMU_PAGE_MODE = "32KB"
const CONFIG_MMU_PAGE_SIZE = 0x8000
const CONFIG_SPI_FLASH_BROWNOUT_RESET_XMC = 1
const CONFIG_SPI_FLASH_BROWNOUT_RESET = 1
const CONFIG_SPI_FLASH_SUSPEND_TSUS_VAL_US = 50
const CONFIG_SPI_FLASH_ROM_DRIVER_PATCH = 1
const CONFIG_SPI_FLASH_DANGEROUS_WRITE_ABORTS = 1
const CONFIG_SPI_FLASH_YIELD_DURING_ERASE = 1
const CONFIG_SPI_FLASH_ERASE_YIELD_DURATION_MS = 20
const CONFIG_SPI_FLASH_ERASE_YIELD_TICKS = 1
const CONFIG_SPI_FLASH_WRITE_CHUNK_SIZE = 8192
const CONFIG_SPI_FLASH_VENDOR_XMC_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_GD_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_ISSI_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_MXIC_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_WINBOND_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_BOYA_SUPPORTED = 1
const CONFIG_SPI_FLASH_VENDOR_TH_SUPPORTED = 1
const CONFIG_SPI_FLASH_SUPPORT_ISSI_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_MXIC_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_GD_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_WINBOND_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_BOYA_CHIP = 1
const CONFIG_SPI_FLASH_SUPPORT_TH_CHIP = 1
const CONFIG_SPI_FLASH_ENABLE_ENCRYPTED_READ_WRITE = 1
const CONFIG_SPIFFS_MAX_PARTITIONS = 3
const CONFIG_SPIFFS_CACHE = 1
const CONFIG_SPIFFS_CACHE_WR = 1
const CONFIG_SPIFFS_PAGE_CHECK = 1
const CONFIG_SPIFFS_GC_MAX_RUNS = 10
const CONFIG_SPIFFS_PAGE_SIZE = 256
const CONFIG_SPIFFS_OBJ_NAME_LEN = 32
const CONFIG_SPIFFS_USE_MAGIC = 1
const CONFIG_SPIFFS_USE_MAGIC_LENGTH = 1
const CONFIG_SPIFFS_META_LENGTH = 4
const CONFIG_SPIFFS_USE_MTIME = 1
const CONFIG_WS_TRANSPORT = 1
const CONFIG_WS_BUFFER_SIZE = 1024
const CONFIG_UNITY_ENABLE_FLOAT = 1
const CONFIG_UNITY_ENABLE_DOUBLE = 1
const CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER = 1
const CONFIG_VFS_SUPPORT_IO = 1
const CONFIG_VFS_SUPPORT_DIR = 1
const CONFIG_VFS_SUPPORT_SELECT = 1
const CONFIG_VFS_SUPPRESS_SELECT_DEBUG_OUTPUT = 1
const CONFIG_VFS_SUPPORT_TERMIOS = 1
const CONFIG_VFS_MAX_COUNT = 8
const CONFIG_VFS_SEMIHOSTFS_MAX_MOUNT_POINTS = 1
const CONFIG_VFS_INITIALIZE_DEV_NULL = 1
const CONFIG_WL_SECTOR_SIZE_4096 = 1
const CONFIG_WL_SECTOR_SIZE = 4096
const CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES = 16
const CONFIG_WIFI_PROV_AUTOSTOP_TIMEOUT = 30
const CONFIG_WIFI_PROV_STA_ALL_CHANNEL_SCAN = 1
const BIT31 = 0x80000000
const BIT30 = 0x40000000
const BIT29 = 0x20000000
const BIT28 = 0x10000000
const BIT27 = 0x08000000
const BIT26 = 0x04000000
const BIT25 = 0x02000000
const BIT24 = 0x01000000
const BIT23 = 0x00800000
const BIT22 = 0x00400000
const BIT21 = 0x00200000
const BIT20 = 0x00100000
const BIT19 = 0x00080000
const BIT18 = 0x00040000
const BIT17 = 0x00020000
const BIT16 = 0x00010000
const BIT15 = 0x00008000
const BIT14 = 0x00004000
const BIT13 = 0x00002000
const BIT12 = 0x00001000
const BIT11 = 0x00000800
const BIT10 = 0x00000400
const BIT9 = 0x00000200
const BIT8 = 0x00000100
const BIT7 = 0x00000080
const BIT6 = 0x00000040
const BIT5 = 0x00000020
const BIT4 = 0x00000010
const BIT3 = 0x00000008
const BIT2 = 0x00000004
const BIT1 = 0x00000002
const BIT0 = 0x00000001
const SOC_CLK_RC_FAST_FREQ_APPROX = 17500000
const SOC_CLK_RC_SLOW_FREQ_APPROX = 136000
const SOC_CLK_OSC_SLOW_FREQ_APPROX = 32768
const SOC_ADC_SUPPORTED = 1
const SOC_DEDICATED_GPIO_SUPPORTED = 1
const SOC_UART_SUPPORTED = 1
const SOC_GDMA_SUPPORTED = 1
const SOC_AHB_GDMA_SUPPORTED = 1
const SOC_GPTIMER_SUPPORTED = 1
const SOC_PHY_SUPPORTED = 1
const SOC_BT_SUPPORTED = 1
const SOC_WIFI_SUPPORTED = 1
const SOC_ASYNC_MEMCPY_SUPPORTED = 1
const SOC_SUPPORTS_SECURE_DL_MODE = 1
const SOC_EFUSE_KEY_PURPOSE_FIELD = 0
const SOC_EFUSE_CONSISTS_OF_ONE_KEY_BLOCK = 1
const SOC_EFUSE_SUPPORTED = 1
const SOC_TEMP_SENSOR_SUPPORTED = 1
const SOC_LEDC_SUPPORTED = 1
const SOC_I2C_SUPPORTED = 1
const SOC_GPSPI_SUPPORTED = 1
const SOC_SHA_SUPPORTED = 1
const SOC_ECC_SUPPORTED = 1
const SOC_FLASH_ENC_SUPPORTED = 1
const SOC_SECURE_BOOT_SUPPORTED = 1
const SOC_SYSTIMER_SUPPORTED = 1
const SOC_BOD_SUPPORTED = 1
const SOC_CLK_TREE_SUPPORTED = 1
const SOC_ASSIST_DEBUG_SUPPORTED = 1
const SOC_WDT_SUPPORTED = 1
const SOC_SPI_FLASH_SUPPORTED = 1
const SOC_RNG_SUPPORTED = 1
const SOC_LIGHT_SLEEP_SUPPORTED = 1
const SOC_DEEP_SLEEP_SUPPORTED = 1
const SOC_LP_PERIPH_SHARE_INTERRUPT = 1
const SOC_PM_SUPPORTED = 1
const SOC_XTAL_SUPPORT_26M = 1
const SOC_XTAL_SUPPORT_40M = 1
const SOC_ADC_DIG_CTRL_SUPPORTED = 1
const SOC_ADC_DIG_IIR_FILTER_SUPPORTED = 1
const SOC_ADC_MONITOR_SUPPORTED = 1
const SOC_ADC_SAMPLE_FREQ_THRES_HIGH = 83333
const SOC_ADC_SAMPLE_FREQ_THRES_LOW = 611
const SOC_ADC_SHARED_POWER = 1
const SOC_BROWNOUT_RESET_SUPPORTED = 1
const SOC_SHARED_IDCACHE_SUPPORTED = 1
const SOC_CPU_INTR_NUM = 32
const SOC_CPU_HAS_FLEXIBLE_INTC = 1
const SOC_CPU_HAS_CSR_PC = 1
const SOC_CPU_BREAKPOINTS_NUM = 2
const SOC_CPU_WATCHPOINTS_NUM = 2
const SOC_CPU_WATCHPOINT_MAX_REGION_SIZE = 0x80000000
const SOC_CPU_IDRAM_SPLIT_USING_PMP = 1
const SOC_ECC_SUPPORT_POINT_VERIFY_QUIRK = 1
const SOC_GPIO_PIN_COUNT = 21
const SOC_GPIO_SUPPORT_PIN_GLITCH_FILTER = 1
const SOC_GPIO_FILTER_CLK_SUPPORT_APB = 1
const SOC_GPIO_IN_RANGE_MAX = 20
const SOC_GPIO_OUT_RANGE_MAX = 20
const SOC_MPU_CONFIGURABLE_REGIONS_SUPPORTED = 0
const SOC_MPU_REGIONS_MAX_NUM = 8
const SOC_MPU_REGION_RO_SUPPORTED = 0
const SOC_MPU_REGION_WO_SUPPORTED = 0
const SOC_SPI_PERIPH_NUM = 2
const SOC_SPI_MAX_CS_NUM = 6
const SOC_SPI_MAXIMUM_BUFFER_SIZE = 64
const SOC_SPI_SUPPORT_DDRCLK = 1
const SOC_SPI_SLAVE_SUPPORT_SEG_TRANS = 1
const SOC_SPI_SUPPORT_CD_SIG = 1
const SOC_SPI_SUPPORT_CONTINUOUS_TRANS = 1
const SOC_SPI_SUPPORT_SLAVE_HD_VER2 = 1
const SOC_SPI_SUPPORT_CLK_XTAL = 1
const SOC_SPI_SUPPORT_CLK_PLL_F40M = 1
const SOC_SPI_PERIPH_SUPPORT_CONTROL_DUMMY_OUT = 1
const SOC_SPI_SCT_SUPPORTED = 1
const SOC_SPI_SCT_REG_NUM = 14
const SOC_SPI_SCT_CONF_BITLEN_MAX = 0x3FFFA
const SOC_MEMSPI_IS_INDEPENDENT = 1
const SOC_SPI_MAX_PRE_DIVIDER = 16
const SOC_MEMSPI_SRC_FREQ_60M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_30M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_20M_SUPPORTED = 1
const SOC_MEMSPI_SRC_FREQ_15M_SUPPORTED = 1
const SOC_SYSTIMER_COUNTER_NUM = 2
const SOC_SYSTIMER_ALARM_NUM = 3
const SOC_SYSTIMER_BIT_WIDTH_LO = 32
const SOC_SYSTIMER_BIT_WIDTH_HI = 20
const SOC_SYSTIMER_FIXED_DIVIDER = 1
const SOC_SYSTIMER_INT_LEVEL = 1
const SOC_SYSTIMER_ALARM_MISS_COMPENSATE = 1
const SOC_LP_TIMER_BIT_WIDTH_LO = 32
const SOC_LP_TIMER_BIT_WIDTH_HI = 16
const SOC_EFUSE_DIS_DOWNLOAD_ICACHE = 1
const SOC_EFUSE_DIS_PAD_JTAG = 1
const SOC_EFUSE_DIS_DIRECT_BOOT = 1
const SOC_SECURE_BOOT_V2_ECC = 1
const SOC_FLASH_ENCRYPTION_XTS_AES = 1
const SOC_FLASH_ENCRYPTION_XTS_AES_OPTIONS = 1
const SOC_FLASH_ENCRYPTION_XTS_AES_128 = 1
const SOC_FLASH_ENCRYPTION_XTS_AES_128_DERIVED = 1
const X__NEWLIB_H__ = 1
const X_ATEXIT_DYNAMIC_ALLOC = 1
const X_FSEEK_OPTIMIZATION = 1
const X_FVWRITE_IN_STREAMIO = 1
const X_HAVE_INITFINI_ARRAY = 1
const X_HAVE_LONG_DOUBLE = 1
const X_ICONV_ENABLED = 1
const X_MB_LEN_MAX = 1
const X_NANO_MALLOC = 1
const X_REENT_CHECK_VERIFY = 1
const X_RETARGETABLE_LOCKING = 1
const X_UNBUF_STREAM_OPT = 1
const X_WANT_IO_C99_FORMATS = 1
const X_WANT_IO_LONG_LONG = 1
const X_WANT_IO_POS_ARGS = 1
const X_WANT_REENT_BACKWARD_BINARY_COMPAT = 1
const X_WANT_REENT_SMALL = 1
const X_WANT_USE_GDTOA = 1
const X__OBSOLETE_MATH_DEFAULT = 1
const X__BUFSIZ__ = 128
const X__RAND_MAX = 0x7fffffff
const X__GNUCLIKE_ASM = 3
const X__GNUCLIKE___TYPEOF = 1
const X__GNUCLIKE___SECTION = 1
const X__GNUCLIKE_CTOR_SECTION_HANDLING = 1
const X__GNUCLIKE_BUILTIN_CONSTANT_P = 1
const X__GNUCLIKE_BUILTIN_VARARGS = 1
const X__GNUCLIKE_BUILTIN_STDARG = 1
const X__GNUCLIKE_BUILTIN_VAALIST = 1
const X__GNUC_VA_LIST_COMPATIBILITY = 1
const X__GNUCLIKE_BUILTIN_NEXT_ARG = 1
const X__GNUCLIKE_BUILTIN_MEMCPY = 1
const X__CC_SUPPORTS_INLINE = 1
const X__CC_SUPPORTS___INLINE = 1
const X__CC_SUPPORTS___INLINE__ = 1
const X__CC_SUPPORTS___FUNC__ = 1
const X__CC_SUPPORTS_WARNING = 1
const X__CC_SUPPORTS_VARADIC_XXX = 1
const X__CC_SUPPORTS_DYNAMIC_ARRAY_INIT = 1
const X_NULL = 0
const X_ATEXIT_SIZE = 32
const X_REENT_EMERGENCY_SIZE = 25
const X_REENT_ASCTIME_SIZE = 26
const X_REENT_SIGNAL_SIZE = 24
const EXIT_FAILURE = 1
const EXIT_SUCCESS = 0
const X__SLBF = 0x0001
const X__SNBF = 0x0002
const X__SRD = 0x0004
const X__SWR = 0x0008
const X__SRW = 0x0010
const X__SEOF = 0x0020
const X__SERR = 0x0040
const X__SMBF = 0x0080
const X__SAPP = 0x0100
const X__SSTR = 0x0200
const X__SOPT = 0x0400
const X__SNPT = 0x0800
const X__SOFF = 0x1000
const X__SORD = 0x2000
const X__SL64 = 0x8000
const X__SNLK = 0x0001
const X__SWID = 0x2000
const X_IOFBF = 0
const X_IOLBF = 1
const X_IONBF = 2
const FOPEN_MAX = 20
const FILENAME_MAX = 1024
const P_tmpdir = "/tmp"
const SEEK_SET = 0
const SEEK_CUR = 1
const SEEK_END = 2
const TMP_MAX = 26
const L_cuserid = 9
const L_ctermid = 16
const ESP_OK = 0
const ESP_ERR_NO_MEM = 0x101
const ESP_ERR_INVALID_ARG = 0x102
const ESP_ERR_INVALID_STATE = 0x103
const ESP_ERR_INVALID_SIZE = 0x104
const ESP_ERR_NOT_FOUND = 0x105
const ESP_ERR_NOT_SUPPORTED = 0x106
const ESP_ERR_TIMEOUT = 0x107
const ESP_ERR_INVALID_RESPONSE = 0x108
const ESP_ERR_INVALID_CRC = 0x109
const ESP_ERR_INVALID_VERSION = 0x10A
const ESP_ERR_INVALID_MAC = 0x10B
const ESP_ERR_NOT_FINISHED = 0x10C
const ESP_ERR_NOT_ALLOWED = 0x10D
const ESP_ERR_WIFI_BASE = 0x3000
const ESP_ERR_MESH_BASE = 0x4000
const ESP_ERR_FLASH_BASE = 0x6000
const ESP_ERR_HW_CRYPTO_BASE = 0xc000
const ESP_ERR_MEMPROT_BASE = 0xd000
const STACK_OVERHEAD_CHECKER = 0
const STACK_OVERHEAD_OPTIMIZATION = 0
const STACK_OVERHEAD_APPTRACE = 0
const STACK_OVERHEAD_WATCHPOINT = 0
const ConfigUSE_PORT_OPTIMISED_TASK_SELECTION = 1
const ConfigMAX_API_CALL_INTERRUPT_PRIORITY = 0
const ConfigUSE_NEWLIB_REENTRANT = 1
const ConfigINCLUDE_FREERTOS_TASK_C_ADDITIONS_H = 1
const INCLUDE_xTaskDelayUntil = 1
const INCLUDE_uxTaskGetStackHighWaterMark2 = 1
const ConfigUSE_PREEMPTION = 1
const ConfigUSE_TIME_SLICING = 1
const ConfigUSE_16_BIT_TICKS = 0
const ConfigIDLE_SHOULD_YIELD = 0
const ConfigKERNEL_INTERRUPT_PRIORITY = 1
const ConfigUSE_MUTEXES = 1
const ConfigUSE_RECURSIVE_MUTEXES = 1
const ConfigUSE_COUNTING_SEMAPHORES = 1
const ConfigUSE_QUEUE_SETS = 1
const ConfigUSE_TASK_NOTIFICATIONS = 1
const ConfigENABLE_BACKWARD_COMPATIBILITY = 0
const ConfigSUPPORT_STATIC_ALLOCATION = 1
const ConfigSUPPORT_DYNAMIC_ALLOCATION = 1
const ConfigAPPLICATION_ALLOCATED_HEAP = 1
const ConfigSTACK_ALLOCATION_FROM_SEPARATE_HEAP = 0
const ConfigUSE_IDLE_HOOK = 0
const ConfigUSE_TICK_HOOK = 0
const ConfigCHECK_FOR_STACK_OVERFLOW = 2
const ConfigRECORD_STACK_HIGH_ADDRESS = 1
const ConfigUSE_CO_ROUTINES = 0
const ConfigMAX_CO_ROUTINE_PRIORITIES = 2
const ConfigUSE_TIMERS = 1
const INCLUDE_vTaskPrioritySet = 1
const INCLUDE_uxTaskPriorityGet = 1
const INCLUDE_vTaskDelete = 1
const INCLUDE_vTaskSuspend = 1
const INCLUDE_vTaskDelay = 1
const INCLUDE_xTaskGetIdleTaskHandle = 1
const INCLUDE_xTaskAbortDelay = 1
const INCLUDE_xSemaphoreGetMutexHolder = 1
const INCLUDE_xTaskGetHandle = 1
const INCLUDE_uxTaskGetStackHighWaterMark = 1
const INCLUDE_eTaskGetState = 1
const INCLUDE_xTaskResumeFromISR = 1
const INCLUDE_xTimerPendFunctionCall = 1
const INCLUDE_xTaskGetSchedulerState = 1
const INCLUDE_xTaskGetCurrentTaskHandle = 1
const ConfigTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS = 1
const ConfigCHECK_MUTEX_GIVEN_BY_OWNER = 1
const PdFREERTOS_ERRNO_NONE = 0
const PdFREERTOS_ERRNO_ENOENT = 2
const PdFREERTOS_ERRNO_EINTR = 4
const PdFREERTOS_ERRNO_EIO = 5
const PdFREERTOS_ERRNO_ENXIO = 6
const PdFREERTOS_ERRNO_EBADF = 9
const PdFREERTOS_ERRNO_EAGAIN = 11
const PdFREERTOS_ERRNO_EWOULDBLOCK = 11
const PdFREERTOS_ERRNO_ENOMEM = 12
const PdFREERTOS_ERRNO_EACCES = 13
const PdFREERTOS_ERRNO_EFAULT = 14
const PdFREERTOS_ERRNO_EBUSY = 16
const PdFREERTOS_ERRNO_EEXIST = 17
const PdFREERTOS_ERRNO_EXDEV = 18
const PdFREERTOS_ERRNO_ENODEV = 19
const PdFREERTOS_ERRNO_ENOTDIR = 20
const PdFREERTOS_ERRNO_EISDIR = 21
const PdFREERTOS_ERRNO_EINVAL = 22
const PdFREERTOS_ERRNO_ENOSPC = 28
const PdFREERTOS_ERRNO_ESPIPE = 29
const PdFREERTOS_ERRNO_EROFS = 30
const PdFREERTOS_ERRNO_EUNATCH = 42
const PdFREERTOS_ERRNO_EBADE = 50
const PdFREERTOS_ERRNO_EFTYPE = 79
const PdFREERTOS_ERRNO_ENMFILE = 89
const PdFREERTOS_ERRNO_ENOTEMPTY = 90
const PdFREERTOS_ERRNO_ENAMETOOLONG = 91
const PdFREERTOS_ERRNO_EOPNOTSUPP = 95
const PdFREERTOS_ERRNO_ENOBUFS = 105
const PdFREERTOS_ERRNO_ENOPROTOOPT = 109
const PdFREERTOS_ERRNO_EADDRINUSE = 112
const PdFREERTOS_ERRNO_ETIMEDOUT = 116
const PdFREERTOS_ERRNO_EINPROGRESS = 119
const PdFREERTOS_ERRNO_EALREADY = 120
const PdFREERTOS_ERRNO_EADDRNOTAVAIL = 125
const PdFREERTOS_ERRNO_EISCONN = 127
const PdFREERTOS_ERRNO_ENOTCONN = 128
const PdFREERTOS_ERRNO_ENOMEDIUM = 135
const PdFREERTOS_ERRNO_EILSEQ = 138
const PdFREERTOS_ERRNO_ECANCELED = 140
const PdFREERTOS_LITTLE_ENDIAN = 0
const PdFREERTOS_BIG_ENDIAN = 1
const PORT_OFFSET_PX_STACK = 0x30
const CORE_ID_SIZE = 0
const DR_REG_SYSTEM_BASE = 0x600c0000
const DR_REG_SENSITIVE_BASE = 0x600c1000
const DR_REG_INTERRUPT_BASE = 0x600c2000
const DR_REG_EXTMEM_BASE = 0x600c4000
const DR_REG_MMU_TABLE = 0x600c5000
const DR_REG_SHA_BASE = 0x6003b000
const DR_REG_ECC_MULT_BASE = 0x6003e000
const DR_REG_GDMA_BASE = 0x6003f000
const DR_REG_ASSIST_DEBUG_BASE = 0x600ce000
const DR_REG_DEDICATED_GPIO_BASE = 0x600cf000
const DR_REG_WORLD_CNTL_BASE = 0x600d0000
const DR_REG_UART_BASE = 0x60000000
const DR_REG_SPI1_BASE = 0x60002000
const DR_REG_SPI0_BASE = 0x60003000
const DR_REG_GPIO_BASE = 0x60004000
const DR_REG_FE2_BASE = 0x60005000
const DR_REG_FE_BASE = 0x60006000
const DR_REG_RTCCNTL_BASE = 0x60008000
const DR_REG_IO_MUX_BASE = 0x60009000
const DR_REG_RTC_I2C_BASE = 0x6000e000
const DR_REG_UART1_BASE = 0x60010000
const DR_REG_I2C_EXT_BASE = 0x60013000
const DR_REG_LEDC_BASE = 0x60019000
const DR_REG_EFUSE_BASE = 0x60008800
const DR_REG_NRX_BASE = 0x6001CC00
const DR_REG_BB_BASE = 0x6001D000
const DR_REG_TIMERGROUP0_BASE = 0x6001F000
const DR_REG_SYSTIMER_BASE = 0x60023000
const DR_REG_SPI2_BASE = 0x60024000
const DR_REG_SYSCON_BASE = 0x60026000
const DR_REG_APB_SARADC_BASE = 0x60040000
const DR_REG_WDEVLE_BASE = 0x60045000
const DR_REG_ETM_BIT_BASE = 0x6004B000
const DR_REG_BLE_TIMER_BASE = 0x6004B800
const DR_REG_BLE_SEC_BASE = 0x6004C000
const DR_REG_COEX_BIT_BASE = 0x6004C400
const DR_REG_MODEM_CLKRST_BASE = 0x6004d800
const DR_REG_I2C_MST_BASE = 0x6004E800
const DR_REG_XTS_AES_BASE = 0x600CC000
const SPI_CLK_DIV = 4
const TICKS_PER_US_ROM = 40
const SOC_DROM_LOW = 0x3C000000
const SOC_DROM_HIGH = 0x3C400000
const SOC_IROM_LOW = 0x42000000
const SOC_IROM_HIGH = 0x42400000
const SOC_IROM_MASK_LOW = 0x40000000
const SOC_IROM_MASK_HIGH = 0x40090000
const SOC_DROM_MASK_LOW = 0x3FF00000
const SOC_DROM_MASK_HIGH = 0x3FF50000
const SOC_IRAM_LOW = 0x4037C000
const SOC_IRAM_HIGH = 0x403C0000
const SOC_DRAM_LOW = 0x3FCA0000
const SOC_DRAM_HIGH = 0x3FCE0000
const SOC_DIRAM_IRAM_LOW = 0x40380000
const SOC_DIRAM_IRAM_HIGH = 0x403C0000
const SOC_DIRAM_DRAM_LOW = 0x3FCA0000
const SOC_DIRAM_DRAM_HIGH = 0x3FCE0000
const SOC_DMA_LOW = 0x3FCA0000
const SOC_DMA_HIGH = 0x3FCE0000
const SOC_BYTE_ACCESSIBLE_LOW = 0x3FCA0000
const SOC_BYTE_ACCESSIBLE_HIGH = 0x3FCE0000
const SOC_MEM_INTERNAL_LOW = 0x3FCA0000
const SOC_MEM_INTERNAL_HIGH = 0x3FCE0000
const SOC_PERIPHERAL_LOW = 0x60000000
const SOC_PERIPHERAL_HIGH = 0x60100000
const SOC_DEBUG_LOW = 0x20000000
const SOC_DEBUG_HIGH = 0x28000000
const SOC_ROM_STACK_START = 0x3fcdeb70
const SOC_ROM_STACK_SIZE = 0x2000
const ETS_T0_WDT_INUM = 24
const ETS_CACHEERR_INUM = 25
const ETS_MEMPROT_ERR_INUM = 26
const ETS_ASSIST_DEBUG_INUM = 27
const ETS_MAX_INUM = 31
const ETS_SLC_INUM = 1
const ETS_UART0_INUM = 5
const ETS_UART1_INUM = 5
const ETS_SPI2_INUM = 1
const ETS_GPIO_INUM = 4
const ETS_INVALID_INUM = 0
const SOC_INTERRUPT_LEVEL_MEDIUM = 4
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_ENA_S = 0
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_ENA_S = 1
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_RAW_S = 0
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_RAW_S = 1
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_RLS_S = 0
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_RLS_S = 1
const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_CLR_S = 0
const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_CLR_S = 1
const ASSIST_DEBUG_CORE_0_SP_MIN_S = 0
const ASSIST_DEBUG_CORE_0_SP_MAX_S = 0
const ASSIST_DEBUG_CORE_0_SP_PC_S = 0
const ASSIST_DEBUG_CORE_0_RCD_RECORDEN_S = 0
const ASSIST_DEBUG_CORE_0_RCD_PDEBUGEN_S = 1
const ASSIST_DEBUG_CORE_0_RCD_PDEBUGPC_S = 0
const ASSIST_DEBUG_CORE_0_RCD_PDEBUGSP_S = 0
const ASSIST_DEBUG_CORE_0_LASTPC_BEFORE_EXC_S = 0
const ASSIST_DEBUG_CORE_0_DEBUG_MODE_S = 0
const ASSIST_DEBUG_CORE_0_DEBUG_MODULE_ACTIVE_S = 1
const ASSIST_DEBUG_CLK_EN_S = 0
const ASSIST_DEBUG_DATE_S = 0
const INTERRUPT_CORE0_WIFI_MAC_INT_MAP_S = 0
const INTERRUPT_CORE0_WIFI_MAC_NMI_MAP_S = 0
const INTERRUPT_CORE0_WIFI_PWR_INT_MAP_S = 0
const INTERRUPT_CORE0_WIFI_BB_INT_MAP_S = 0
const INTERRUPT_CORE0_BT_MAC_INT_MAP_S = 0
const INTERRUPT_CORE0_BT_BB_INT_MAP_S = 0
const INTERRUPT_CORE0_BT_BB_NMI_MAP_S = 0
const INTERRUPT_CORE0_LP_TIMER_INT_MAP_S = 0
const INTERRUPT_CORE0_COEX_INT_MAP_S = 0
const INTERRUPT_CORE0_BLE_TIMER_INT_MAP_S = 0
const INTERRUPT_CORE0_BLE_SEC_INT_MAP_S = 0
const INTERRUPT_CORE0_I2C_MST_INT_MAP_S = 0
const INTERRUPT_CORE0_APB_CTRL_INTR_MAP_S = 0
const INTERRUPT_CORE0_GPIO_INTERRUPT_PRO_MAP_S = 0
const INTERRUPT_CORE0_GPIO_INTERRUPT_PRO_NMI_MAP_S = 0
const INTERRUPT_CORE0_SPI_INTR_1_MAP_S = 0
const INTERRUPT_CORE0_SPI_INTR_2_MAP_S = 0
const INTERRUPT_CORE0_UART_INTR_MAP_S = 0
const INTERRUPT_CORE0_UART1_INTR_MAP_S = 0
const INTERRUPT_CORE0_LEDC_INT_MAP_S = 0
const INTERRUPT_CORE0_EFUSE_INT_MAP_S = 0
const INTERRUPT_CORE0_RTC_CORE_INTR_MAP_S = 0
const INTERRUPT_CORE0_I2C_EXT0_INTR_MAP_S = 0
const INTERRUPT_CORE0_TG_T0_INT_MAP_S = 0
const INTERRUPT_CORE0_TG_WDT_INT_MAP_S = 0
const INTERRUPT_CORE0_CACHE_IA_INT_MAP_S = 0
const INTERRUPT_CORE0_SYSTIMER_TARGET0_INT_MAP_S = 0
const INTERRUPT_CORE0_SYSTIMER_TARGET1_INT_MAP_S = 0
const INTERRUPT_CORE0_SYSTIMER_TARGET2_INT_MAP_S = 0
const INTERRUPT_CORE0_SPI_MEM_REJECT_INTR_MAP_S = 0
const INTERRUPT_CORE0_ICACHE_PRELOAD_INT_MAP_S = 0
const INTERRUPT_CORE0_ICACHE_SYNC_INT_MAP_S = 0
const INTERRUPT_CORE0_APB_ADC_INT_MAP_S = 0
const INTERRUPT_CORE0_DMA_CH0_INT_MAP_S = 0
const INTERRUPT_CORE0_SHA_INT_MAP_S = 0
const INTERRUPT_CORE0_ECC_INT_MAP_S = 0
const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_0_MAP_S = 0
const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_1_MAP_S = 0
const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_2_MAP_S = 0
const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_3_MAP_S = 0
const INTERRUPT_CORE0_ASSIST_DEBUG_INTR_MAP_S = 0
const INTERRUPT_CORE0_CORE_0_PIF_PMS_MONITOR_VIOLATE_SIZE_INTR_MAP_S = 0
const INTERRUPT_CORE0_CACHE_CORE0_ACS_INT_MAP_S = 0
const INTERRUPT_CORE0_INTR_STATUS_0_S = 0
const INTERRUPT_CORE0_INTR_STATUS_1_S = 0
const INTERRUPT_CORE0_REG_CLK_EN_S = 0
const INTERRUPT_CORE0_CPU_INT_ENABLE_S = 0
const INTERRUPT_CORE0_CPU_INT_TYPE_S = 0
const INTERRUPT_CORE0_CPU_INT_CLEAR_S = 0
const INTERRUPT_CORE0_CPU_INT_EIP_STATUS_S = 0
const INTERRUPT_CORE0_CPU_PRI_0_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_1_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_2_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_3_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_4_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_5_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_6_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_7_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_8_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_9_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_10_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_11_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_12_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_13_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_14_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_15_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_16_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_17_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_18_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_19_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_20_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_21_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_22_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_23_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_24_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_25_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_26_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_27_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_28_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_29_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_30_MAP_S = 0
const INTERRUPT_CORE0_CPU_PRI_31_MAP_S = 0
const INTERRUPT_CORE0_CPU_INT_THRESH_S = 0
const INTERRUPT_CORE0_INTERRUPT_REG_DATE_S = 0
const ARG_MAX = 65536
const CHILD_MAX = 40
const LINK_MAX = 32767
const MAX_CANON = 255
const MAX_INPUT = 255
const NAME_MAX = 255
const NGROUPS_MAX = 16
const OPEN_MAX = 64
const PATH_MAX = 1024
const PIPE_BUF = 512
const IOV_MAX = 1024
const BC_BASE_MAX = 99
const BC_DIM_MAX = 2048
const BC_SCALE_MAX = 99
const BC_STRING_MAX = 1000
const COLL_WEIGHTS_MAX = 0
const EXPR_NEST_MAX = 32
const LINE_MAX = 2048
const RE_DUP_MAX = 255
const X_LITTLE_ENDIAN = 1234
const X_BIG_ENDIAN = 4321
const X_PDP_ENDIAN = 3412
const X_QUAD_HIGHWORD = 1
const X_QUAD_LOWWORD = 0
const NBBY = 8
const MSTATUS_UIE = 0x00000001
const MSTATUS_SIE = 0x00000002
const MSTATUS_HIE = 0x00000004
const MSTATUS_MIE = 0x00000008
const MSTATUS_UPIE = 0x00000010
const MSTATUS_SPIE = 0x00000020
const MSTATUS_HPIE = 0x00000040
const MSTATUS_MPIE = 0x00000080
const MSTATUS_SPP = 0x00000100
const MSTATUS_VS = 0x00000600
const MSTATUS_MPP = 0x00001800
const MSTATUS_FS = 0x00006000
const MSTATUS_XS = 0x00018000
const MSTATUS_MPRV = 0x00020000
const MSTATUS_SUM = 0x00040000
const MSTATUS_MXR = 0x00080000
const MSTATUS_TVM = 0x00100000
const MSTATUS_TW = 0x00200000
const MSTATUS_TSR = 0x00400000
const MSTATUS32_SD = 0x80000000
const MSTATUS_UXL = 0x0000000300000000
const MSTATUS_SXL = 0x0000000C00000000
const MSTATUS64_SD = 0x8000000000000000
const MEXSTATUS_SOFT_RST = 0x00000003
const MEXSTATUS_LPMD = 0x0000000C
const MEXSTATUS_WFFEN = 0x00000010
const MEXSTATUS_EXPT_VLD = 0x00000020
const MEXSTATUS_LOCKUP = 0x00000040
const MEXSTATUS_NMISTS = 0x00000080
const MEXSTATUS_BUSEER = 0x00000100
const SSTATUS_UIE = 0x00000001
const SSTATUS_SIE = 0x00000002
const SSTATUS_UPIE = 0x00000010
const SSTATUS_SPIE = 0x00000020
const SSTATUS_SPP = 0x00000100
const SSTATUS_VS = 0x00000600
const SSTATUS_FS = 0x00006000
const SSTATUS_XS = 0x00018000
const SSTATUS_SUM = 0x00040000
const SSTATUS_MXR = 0x00080000
const SSTATUS32_SD = 0x80000000
const SSTATUS_UXL = 0x0000000300000000
const SSTATUS64_SD = 0x8000000000000000
const USTATUS_UIE = 0x00000001
const USTATUS_UPIE = 0x00000010
const DCSR_CAUSE_NONE = 0
const DCSR_CAUSE_SWBP = 1
const DCSR_CAUSE_HWBP = 2
const DCSR_CAUSE_DEBUGINT = 3
const DCSR_CAUSE_STEP = 4
const DCSR_CAUSE_HALT = 5
const DCSR_CAUSE_GROUP = 6
const MCONTROL_TYPE_NONE = 0
const MCONTROL_TYPE_MATCH = 2
const MCONTROL_ACTION_DEBUG_EXCEPTION = 0
const MCONTROL_ACTION_DEBUG_MODE = 1
const MCONTROL_ACTION_TRACE_START = 2
const MCONTROL_ACTION_TRACE_STOP = 3
const MCONTROL_ACTION_TRACE_EMIT = 4
const MCONTROL_MATCH_EQUAL = 0
const MCONTROL_MATCH_NAPOT = 1
const MCONTROL_MATCH_GE = 2
const MCONTROL_MATCH_LT = 3
const MCONTROL_MATCH_MASK_LOW = 4
const MCONTROL_MATCH_MASK_HIGH = 5
const PRV_U = 0
const PRV_S = 1
const PRV_H = 2
const PRV_M = 3
const SATP32_MODE = 0x80000000
const SATP32_ASID = 0x7FC00000
const SATP32_PPN = 0x003FFFFF
const SATP64_MODE = 0xF000000000000000
const SATP64_ASID = 0x0FFFF00000000000
const SATP64_PPN = 0x00000FFFFFFFFFFF
const SATP_MODE_OFF = 0
const SATP_MODE_SV32 = 1
const SATP_MODE_SV39 = 8
const SATP_MODE_SV48 = 9
const SATP_MODE_SV57 = 10
const SATP_MODE_SV64 = 11
const PMP_R = 0x01
const PMP_W = 0x02
const PMP_X = 0x04
const PMP_A = 0x18
const PMP_L = 0x80
const PMP_SHIFT = 2
const PMP_TOR = 0x08
const PMP_NA4 = 0x10
const PMP_NAPOT = 0x18
const IRQ_U_SOFT = 0
const IRQ_S_SOFT = 1
const IRQ_H_SOFT = 2
const IRQ_M_SOFT = 3
const IRQ_U_TIMER = 4
const IRQ_S_TIMER = 5
const IRQ_H_TIMER = 6
const IRQ_M_TIMER = 7
const IRQ_U_EXT = 8
const IRQ_S_EXT = 9
const IRQ_H_EXT = 10
const IRQ_M_EXT = 11
const IRQ_COP = 12
const IRQ_HOST = 13
const DEFAULT_RSTVEC = 0x00001000
const CLINT_BASE = 0x02000000
const CLINT_SIZE = 0x000c0000
const EXT_IO_BASE = 0x40000000
const DRAM_BASE = 0x80000000
const PTE_V = 0x001
const PTE_R = 0x002
const PTE_W = 0x004
const PTE_X = 0x008
const PTE_U = 0x010
const PTE_G = 0x020
const PTE_A = 0x040
const PTE_D = 0x080
const PTE_SOFT = 0x300
const PTE_PPN_SHIFT = 10
const RISCV_PGLEVEL_BITS = 10
const RISCV_PGSHIFT = 12
const CSR_PMACFG0 = 0xBC0
const CSR_PMAADDR0 = 0xBD0
const PMA_SHIFT = 2
const PMA_TOR = 0x40000000
const PMA_NA4 = 0x80000000
const PMA_NAPOT = 0xC0000000
const CSR_PMPCFG0 = 0x3A0
const CSR_PMPADDR0 = 0x3B0
const PMPADDR_ALL = 0xFFFFFFFF
const MEXSTATUS = 0x7E1
const MHINT = 0x7C5
const LDPC0 = 0xBE0
const LDPC1 = 0xBE1
const STPC0 = 0xBF0
const STPC1 = 0xBF1
const STPC2 = 0xBF2
const RVHAL_INTR_ENABLE_THRESH = 1
const MTVEC_MODE_CSR = 1
const RV_EXTERNAL_INT_COUNT = 32
const RV_EXTERNAL_INT_OFFSET = 0
const CSR_PCER_MACHINE = 0x7e0
const CSR_PCMR_MACHINE = 0x7e1
const CSR_PCCR_MACHINE = 0x7e2
const RVHAL_EXCM_LEVEL = 4
const ESP_CPU_INTR_DESC_FLAG_SPECIAL = 0x01
const ESP_CPU_INTR_DESC_FLAG_RESVD = 0x02
const SPINLOCK_FREE = 0xB33FFFFF
const SPINLOCK_NO_WAIT = 0
const SPINLOCK_OWNER_ID_0 = 0xCDCD
const SPINLOCK_OWNER_ID_1 = 0xABAB
const ESP_IDF_VERSION_MAJOR = 5
const ESP_IDF_VERSION_MINOR = 4
const ESP_IDF_VERSION_PATCH = 2
const X_LIBC_LIMITS_H_ = 1
const NL_ARGMAX = 32
const X_POSIX2_RE_DUP_MAX = 255
const CHAR_MIN = 0
const PortCRITICAL_NESTING_IN_TCB = 0
const PortBYTE_ALIGNMENT = 16
const PortTICK_TYPE_IS_ATOMIC = 1
const PortUSING_MPU_WRAPPERS = 0
const PortNUM_CONFIGURABLE_REGIONS = 1
const PortHAS_STACK_OVERFLOW_CHECKING = 0
const ConfigUSE_C_RUNTIME_TLS_SUPPORT = 1
const INCLUDE_xQueueGetMutexHolder = 0
const ConfigUSE_DAEMON_TASK_STARTUP_HOOK = 0
const ConfigUSE_APPLICATION_TASK_TAG = 0
const ConfigUSE_ALTERNATIVE_API = 0
const ConfigASSERT_DEFINED = 1
const ConfigPRECONDITION_DEFINED = 0
const ConfigUSE_MINI_LIST_ITEM = 1
const ConfigGENERATE_RUN_TIME_STATS = 0
const ConfigUSE_MALLOC_FAILED_HOOK = 0
const ConfigEXPECTED_IDLE_TIME_BEFORE_SLEEP = 2
const ConfigINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS = 0
const ConfigUSE_STATS_FORMATTING_FUNCTIONS = 0
const ConfigUSE_TRACE_FACILITY = 0
const ConfigUSE_POSIX_ERRNO = 0
const ConfigUSE_SB_COMPLETED_CALLBACK = 0
const ConfigINITIAL_TICK_COUNT = 0
const ConfigUSE_TASK_FPU_SUPPORT = 1
const ConfigENABLE_MPU = 0
const ConfigENABLE_FPU = 1
const ConfigENABLE_MVE = 0
const ConfigENABLE_TRUSTZONE = 1
const ConfigRUN_FREERTOS_SECURE_ONLY = 0
const ConfigRUN_ADDITIONAL_TESTS = 0
const TskKERNEL_VERSION_NUMBER = "V10.5.1"
const TskKERNEL_VERSION_MAJOR = 10
const TskKERNEL_VERSION_MINOR = 5
const TskKERNEL_VERSION_BUILD = 1
const SOC_IRAM0_ADDRESS_LOW = 0x4037C000
const SOC_IRAM0_ADDRESS_HIGH = 0x403C0000
const SOC_IRAM0_CACHE_ADDRESS_LOW = 0x42000000
const SOC_DRAM0_ADDRESS_LOW = 0x3FCA0000
const SOC_DRAM0_ADDRESS_HIGH = 0x3FCE0000
const SOC_DRAM0_CACHE_ADDRESS_LOW = 0x3C000000
const SOC_MMU_VALID = 0
const SOC_MMU_TYPE = 0
const SOC_MMU_ACCESS_FLASH = 0
const SOC_MMU_VALID_VAL_MASK = 0x3f
const SOC_MMU_MAX_PADDR_PAGE_NUM = 64
const SOC_MMU_ENTRY_NUM = 64
const SOC_MMU_DBUS_VADDR_BASE = 0x3C000000
const SOC_MMU_IBUS_VADDR_BASE = 0x42000000
const SOC_MMU_LINEAR_ADDR_MASK = 0x1FFFFF
const CACHE_IBUS = 0
const CACHE_IBUS_MMU_START = 0
const CACHE_IBUS_MMU_END = 0x100
const CACHE_DBUS = 1
const CACHE_DBUS_MMU_START = 0
const CACHE_DBUS_MMU_END = 0x100
const CACHE_IROM_MMU_START = 0
const CACHE_DROM_MMU_MAX_END = 0x100
const ICACHE_MMU_SIZE = 0x100
const DCACHE_MMU_SIZE = 0x100
const MSPI_FUNC_NUM = 0
const MSPI_IOMUX_PIN_NUM_HD = 12
const MSPI_IOMUX_PIN_NUM_WP = 13
const MSPI_IOMUX_PIN_NUM_CS0 = 14
const MSPI_IOMUX_PIN_NUM_CLK = 15
const MSPI_IOMUX_PIN_NUM_MOSI = 16
const MSPI_IOMUX_PIN_NUM_MISO = 17
const SPI2_FUNC_NUM = 2
const SPI2_IOMUX_PIN_NUM_MISO = 2
const SPI2_IOMUX_PIN_NUM_HD = 4
const SPI2_IOMUX_PIN_NUM_WP = 5
const SPI2_IOMUX_PIN_NUM_CLK = 6
const SPI2_IOMUX_PIN_NUM_MOSI = 7
const SPI2_IOMUX_PIN_NUM_CS = 10
const SPI_USR_V = 0x1
const SPI_USR_S = 24
const SPI_UPDATE_V = 0x1
const SPI_UPDATE_S = 23
const SPI_CONF_BITLEN = 0x0003FFFF
const SPI_CONF_BITLEN_V = 0x3FFFF
const SPI_CONF_BITLEN_S = 0
const SPI_USR_ADDR_VALUE = 0xFFFFFFFF
const SPI_USR_ADDR_VALUE_V = 0xFFFFFFFF
const SPI_USR_ADDR_VALUE_S = 0
const SPI_WR_BIT_ORDER = 0x00000003
const SPI_WR_BIT_ORDER_V = 0x3
const SPI_WR_BIT_ORDER_S = 25
const SPI_RD_BIT_ORDER = 0x00000003
const SPI_RD_BIT_ORDER_V = 0x3
const SPI_RD_BIT_ORDER_S = 23
const SPI_WP_POL_V = 0x1
const SPI_WP_POL_S = 21
const SPI_HOLD_POL_V = 0x1
const SPI_HOLD_POL_S = 20
const SPI_D_POL_V = 0x1
const SPI_D_POL_S = 19
const SPI_Q_POL_V = 0x1
const SPI_Q_POL_S = 18
const SPI_FREAD_OCT_V = 0x1
const SPI_FREAD_OCT_S = 16
const SPI_FREAD_QUAD_V = 0x1
const SPI_FREAD_QUAD_S = 15
const SPI_FREAD_DUAL_V = 0x1
const SPI_FREAD_DUAL_S = 14
const SPI_FCMD_OCT_V = 0x1
const SPI_FCMD_OCT_S = 10
const SPI_FCMD_QUAD_V = 0x1
const SPI_FCMD_QUAD_S = 9
const SPI_FCMD_DUAL_V = 0x1
const SPI_FCMD_DUAL_S = 8
const SPI_FADDR_OCT_V = 0x1
const SPI_FADDR_OCT_S = 7
const SPI_FADDR_QUAD_V = 0x1
const SPI_FADDR_QUAD_S = 6
const SPI_FADDR_DUAL_V = 0x1
const SPI_FADDR_DUAL_S = 5
const SPI_DUMMY_OUT_V = 0x1
const SPI_DUMMY_OUT_S = 3
const SPI_CLK_EQU_SYSCLK_V = 0x1
const SPI_CLK_EQU_SYSCLK_S = 31
const SPI_CLKDIV_PRE = 0x0000000F
const SPI_CLKDIV_PRE_V = 0xF
const SPI_CLKDIV_PRE_S = 18
const SPI_CLKCNT_N = 0x0000003F
const SPI_CLKCNT_N_V = 0x3F
const SPI_CLKCNT_N_S = 12
const SPI_CLKCNT_H = 0x0000003F
const SPI_CLKCNT_H_V = 0x3F
const SPI_CLKCNT_H_S = 6
const SPI_CLKCNT_L = 0x0000003F
const SPI_CLKCNT_L_V = 0x3F
const SPI_CLKCNT_L_S = 0
const SPI_USR_COMMAND_V = 0x1
const SPI_USR_COMMAND_S = 31
const SPI_USR_ADDR_V = 0x1
const SPI_USR_ADDR_S = 30
const SPI_USR_DUMMY_V = 0x1
const SPI_USR_DUMMY_S = 29
const SPI_USR_MISO_V = 0x1
const SPI_USR_MISO_S = 28
const SPI_USR_MOSI_V = 0x1
const SPI_USR_MOSI_S = 27
const SPI_USR_DUMMY_IDLE_V = 0x1
const SPI_USR_DUMMY_IDLE_S = 26
const SPI_USR_MOSI_HIGHPART_V = 0x1
const SPI_USR_MOSI_HIGHPART_S = 25
const SPI_USR_MISO_HIGHPART_V = 0x1
const SPI_USR_MISO_HIGHPART_S = 24
const SPI_SIO_V = 0x1
const SPI_SIO_S = 17
const SPI_USR_CONF_NXT_V = 0x1
const SPI_USR_CONF_NXT_S = 15
const SPI_FWRITE_OCT_V = 0x1
const SPI_FWRITE_OCT_S = 14
const SPI_FWRITE_QUAD_V = 0x1
const SPI_FWRITE_QUAD_S = 13
const SPI_FWRITE_DUAL_V = 0x1
const SPI_FWRITE_DUAL_S = 12
const SPI_CK_OUT_EDGE_V = 0x1
const SPI_CK_OUT_EDGE_S = 9
const SPI_RSCK_I_EDGE_V = 0x1
const SPI_RSCK_I_EDGE_S = 8
const SPI_CS_SETUP_V = 0x1
const SPI_CS_SETUP_S = 7
const SPI_CS_HOLD_V = 0x1
const SPI_CS_HOLD_S = 6
const SPI_TSCK_I_EDGE_V = 0x1
const SPI_TSCK_I_EDGE_S = 5
const SPI_OPI_MODE_V = 0x1
const SPI_OPI_MODE_S = 4
const SPI_QPI_MODE_V = 0x1
const SPI_QPI_MODE_S = 3
const SPI_DOUTDIN_V = 0x1
const SPI_DOUTDIN_S = 0
const SPI_USR_ADDR_BITLEN = 0x0000001F
const SPI_USR_ADDR_BITLEN_V = 0x1F
const SPI_USR_ADDR_BITLEN_S = 27
const SPI_CS_HOLD_TIME = 0x0000001F
const SPI_CS_HOLD_TIME_V = 0x1F
const SPI_CS_HOLD_TIME_S = 22
const SPI_CS_SETUP_TIME = 0x0000001F
const SPI_CS_SETUP_TIME_V = 0x1F
const SPI_CS_SETUP_TIME_S = 17
const SPI_MST_WFULL_ERR_END_EN_V = 0x1
const SPI_MST_WFULL_ERR_END_EN_S = 16
const SPI_USR_DUMMY_CYCLELEN = 0x000000FF
const SPI_USR_DUMMY_CYCLELEN_V = 0xFF
const SPI_USR_DUMMY_CYCLELEN_S = 0
const SPI_USR_COMMAND_BITLEN = 0x0000000F
const SPI_USR_COMMAND_BITLEN_V = 0xF
const SPI_USR_COMMAND_BITLEN_S = 28
const SPI_MST_REMPTY_ERR_END_EN_V = 0x1
const SPI_MST_REMPTY_ERR_END_EN_S = 27
const SPI_USR_COMMAND_VALUE = 0x0000FFFF
const SPI_USR_COMMAND_VALUE_V = 0xFFFF
const SPI_USR_COMMAND_VALUE_S = 0
const SPI_MS_DATA_BITLEN = 0x0003FFFF
const SPI_MS_DATA_BITLEN_V = 0x3FFFF
const SPI_MS_DATA_BITLEN_S = 0
const SPI_QUAD_DIN_PIN_SWAP_V = 0x1
const SPI_QUAD_DIN_PIN_SWAP_S = 31
const SPI_CS_KEEP_ACTIVE_V = 0x1
const SPI_CS_KEEP_ACTIVE_S = 30
const SPI_CK_IDLE_EDGE_V = 0x1
const SPI_CK_IDLE_EDGE_S = 29
const SPI_DQS_IDLE_EDGE_V = 0x1
const SPI_DQS_IDLE_EDGE_S = 24
const SPI_SLAVE_CS_POL_V = 0x1
const SPI_SLAVE_CS_POL_S = 23
const SPI_CMD_DTR_EN_V = 0x1
const SPI_CMD_DTR_EN_S = 19
const SPI_ADDR_DTR_EN_V = 0x1
const SPI_ADDR_DTR_EN_S = 18
const SPI_DATA_DTR_EN_V = 0x1
const SPI_DATA_DTR_EN_S = 17
const SPI_CLK_DATA_DTR_EN_V = 0x1
const SPI_CLK_DATA_DTR_EN_S = 16
const SPI_MASTER_CS_POL = 0x0000003F
const SPI_MASTER_CS_POL_V = 0x3F
const SPI_MASTER_CS_POL_S = 7
const SPI_CK_DIS_V = 0x1
const SPI_CK_DIS_S = 6
const SPI_CS5_DIS_V = 0x1
const SPI_CS5_DIS_S = 5
const SPI_CS4_DIS_V = 0x1
const SPI_CS4_DIS_S = 4
const SPI_CS3_DIS_V = 0x1
const SPI_CS3_DIS_S = 3
const SPI_CS2_DIS_V = 0x1
const SPI_CS2_DIS_S = 2
const SPI_CS1_DIS_V = 0x1
const SPI_CS1_DIS_S = 1
const SPI_CS0_DIS_V = 0x1
const SPI_CS0_DIS_S = 0
const SPI_TIMING_HCLK_ACTIVE_V = 0x1
const SPI_TIMING_HCLK_ACTIVE_S = 16
const SPI_DIN7_MODE = 0x00000003
const SPI_DIN7_MODE_V = 0x3
const SPI_DIN7_MODE_S = 14
const SPI_DIN6_MODE = 0x00000003
const SPI_DIN6_MODE_V = 0x3
const SPI_DIN6_MODE_S = 12
const SPI_DIN5_MODE = 0x00000003
const SPI_DIN5_MODE_V = 0x3
const SPI_DIN5_MODE_S = 10
const SPI_DIN4_MODE = 0x00000003
const SPI_DIN4_MODE_V = 0x3
const SPI_DIN4_MODE_S = 8
const SPI_DIN3_MODE = 0x00000003
const SPI_DIN3_MODE_V = 0x3
const SPI_DIN3_MODE_S = 6
const SPI_DIN2_MODE = 0x00000003
const SPI_DIN2_MODE_V = 0x3
const SPI_DIN2_MODE_S = 4
const SPI_DIN1_MODE = 0x00000003
const SPI_DIN1_MODE_V = 0x3
const SPI_DIN1_MODE_S = 2
const SPI_DIN0_MODE = 0x00000003
const SPI_DIN0_MODE_V = 0x3
const SPI_DIN0_MODE_S = 0
const SPI_DIN7_NUM = 0x00000003
const SPI_DIN7_NUM_V = 0x3
const SPI_DIN7_NUM_S = 14
const SPI_DIN6_NUM = 0x00000003
const SPI_DIN6_NUM_V = 0x3
const SPI_DIN6_NUM_S = 12
const SPI_DIN5_NUM = 0x00000003
const SPI_DIN5_NUM_V = 0x3
const SPI_DIN5_NUM_S = 10
const SPI_DIN4_NUM = 0x00000003
const SPI_DIN4_NUM_V = 0x3
const SPI_DIN4_NUM_S = 8
const SPI_DIN3_NUM = 0x00000003
const SPI_DIN3_NUM_V = 0x3
const SPI_DIN3_NUM_S = 6
const SPI_DIN2_NUM = 0x00000003
const SPI_DIN2_NUM_V = 0x3
const SPI_DIN2_NUM_S = 4
const SPI_DIN1_NUM = 0x00000003
const SPI_DIN1_NUM_V = 0x3
const SPI_DIN1_NUM_S = 2
const SPI_DIN0_NUM = 0x00000003
const SPI_DIN0_NUM_V = 0x3
const SPI_DIN0_NUM_S = 0
const SPI_D_DQS_MODE_V = 0x1
const SPI_D_DQS_MODE_S = 8
const SPI_DOUT7_MODE_V = 0x1
const SPI_DOUT7_MODE_S = 7
const SPI_DOUT6_MODE_V = 0x1
const SPI_DOUT6_MODE_S = 6
const SPI_DOUT5_MODE_V = 0x1
const SPI_DOUT5_MODE_S = 5
const SPI_DOUT4_MODE_V = 0x1
const SPI_DOUT4_MODE_S = 4
const SPI_DOUT3_MODE_V = 0x1
const SPI_DOUT3_MODE_S = 3
const SPI_DOUT2_MODE_V = 0x1
const SPI_DOUT2_MODE_S = 2
const SPI_DOUT1_MODE_V = 0x1
const SPI_DOUT1_MODE_S = 1
const SPI_DOUT0_MODE_V = 0x1
const SPI_DOUT0_MODE_S = 0
const SPI_DMA_AFIFO_RST_V = 0x1
const SPI_DMA_AFIFO_RST_S = 31
const SPI_BUF_AFIFO_RST_V = 0x1
const SPI_BUF_AFIFO_RST_S = 30
const SPI_RX_AFIFO_RST_V = 0x1
const SPI_RX_AFIFO_RST_S = 29
const SPI_DMA_TX_ENA_V = 0x1
const SPI_DMA_TX_ENA_S = 28
const SPI_DMA_RX_ENA_V = 0x1
const SPI_DMA_RX_ENA_S = 27
const SPI_RX_EOF_EN_V = 0x1
const SPI_RX_EOF_EN_S = 21
const SPI_SLV_TX_SEG_TRANS_CLR_EN_V = 0x1
const SPI_SLV_TX_SEG_TRANS_CLR_EN_S = 20
const SPI_SLV_RX_SEG_TRANS_CLR_EN_V = 0x1
const SPI_SLV_RX_SEG_TRANS_CLR_EN_S = 19
const SPI_DMA_SLV_SEG_TRANS_EN_V = 0x1
const SPI_DMA_SLV_SEG_TRANS_EN_S = 18
const SPI_DMA_INFIFO_FULL_V = 0x1
const SPI_DMA_INFIFO_FULL_S = 1
const SPI_DMA_OUTFIFO_EMPTY_V = 0x1
const SPI_DMA_OUTFIFO_EMPTY_S = 0
const SPI_APP1_INT_ENA_V = 0x1
const SPI_APP1_INT_ENA_S = 20
const SPI_APP2_INT_ENA_V = 0x1
const SPI_APP2_INT_ENA_S = 19
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ENA_V = 0x1
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ENA_S = 18
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ENA_V = 0x1
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ENA_S = 17
const SPI_SLV_CMD_ERR_INT_ENA_V = 0x1
const SPI_SLV_CMD_ERR_INT_ENA_S = 16
const SPI_SLV_BUF_ADDR_ERR_INT_ENA_V = 0x1
const SPI_SLV_BUF_ADDR_ERR_INT_ENA_S = 15
const SPI_SEG_MAGIC_ERR_INT_ENA_V = 0x1
const SPI_SEG_MAGIC_ERR_INT_ENA_S = 14
const SPI_DMA_SEG_TRANS_DONE_INT_ENA_V = 0x1
const SPI_DMA_SEG_TRANS_DONE_INT_ENA_S = 13
const SPI_TRANS_DONE_INT_ENA_V = 0x1
const SPI_TRANS_DONE_INT_ENA_S = 12
const SPI_SLV_WR_BUF_DONE_INT_ENA_V = 0x1
const SPI_SLV_WR_BUF_DONE_INT_ENA_S = 11
const SPI_SLV_RD_BUF_DONE_INT_ENA_V = 0x1
const SPI_SLV_RD_BUF_DONE_INT_ENA_S = 10
const SPI_SLV_WR_DMA_DONE_INT_ENA_V = 0x1
const SPI_SLV_WR_DMA_DONE_INT_ENA_S = 9
const SPI_SLV_RD_DMA_DONE_INT_ENA_V = 0x1
const SPI_SLV_RD_DMA_DONE_INT_ENA_S = 8
const SPI_SLV_CMDA_INT_ENA_V = 0x1
const SPI_SLV_CMDA_INT_ENA_S = 7
const SPI_SLV_CMD9_INT_ENA_V = 0x1
const SPI_SLV_CMD9_INT_ENA_S = 6
const SPI_SLV_CMD8_INT_ENA_V = 0x1
const SPI_SLV_CMD8_INT_ENA_S = 5
const SPI_SLV_CMD7_INT_ENA_V = 0x1
const SPI_SLV_CMD7_INT_ENA_S = 4
const SPI_SLV_EN_QPI_INT_ENA_V = 0x1
const SPI_SLV_EN_QPI_INT_ENA_S = 3
const SPI_SLV_EX_QPI_INT_ENA_V = 0x1
const SPI_SLV_EX_QPI_INT_ENA_S = 2
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ENA_V = 0x1
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ENA_S = 1
const SPI_DMA_INFIFO_FULL_ERR_INT_ENA_V = 0x1
const SPI_DMA_INFIFO_FULL_ERR_INT_ENA_S = 0
const SPI_APP1_INT_CLR_V = 0x1
const SPI_APP1_INT_CLR_S = 20
const SPI_APP2_INT_CLR_V = 0x1
const SPI_APP2_INT_CLR_S = 19
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_CLR_V = 0x1
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_CLR_S = 18
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_CLR_V = 0x1
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_CLR_S = 17
const SPI_SLV_CMD_ERR_INT_CLR_V = 0x1
const SPI_SLV_CMD_ERR_INT_CLR_S = 16
const SPI_SLV_BUF_ADDR_ERR_INT_CLR_V = 0x1
const SPI_SLV_BUF_ADDR_ERR_INT_CLR_S = 15
const SPI_SEG_MAGIC_ERR_INT_CLR_V = 0x1
const SPI_SEG_MAGIC_ERR_INT_CLR_S = 14
const SPI_DMA_SEG_TRANS_DONE_INT_CLR_V = 0x1
const SPI_DMA_SEG_TRANS_DONE_INT_CLR_S = 13
const SPI_TRANS_DONE_INT_CLR_V = 0x1
const SPI_TRANS_DONE_INT_CLR_S = 12
const SPI_SLV_WR_BUF_DONE_INT_CLR_V = 0x1
const SPI_SLV_WR_BUF_DONE_INT_CLR_S = 11
const SPI_SLV_RD_BUF_DONE_INT_CLR_V = 0x1
const SPI_SLV_RD_BUF_DONE_INT_CLR_S = 10
const SPI_SLV_WR_DMA_DONE_INT_CLR_V = 0x1
const SPI_SLV_WR_DMA_DONE_INT_CLR_S = 9
const SPI_SLV_RD_DMA_DONE_INT_CLR_V = 0x1
const SPI_SLV_RD_DMA_DONE_INT_CLR_S = 8
const SPI_SLV_CMDA_INT_CLR_V = 0x1
const SPI_SLV_CMDA_INT_CLR_S = 7
const SPI_SLV_CMD9_INT_CLR_V = 0x1
const SPI_SLV_CMD9_INT_CLR_S = 6
const SPI_SLV_CMD8_INT_CLR_V = 0x1
const SPI_SLV_CMD8_INT_CLR_S = 5
const SPI_SLV_CMD7_INT_CLR_V = 0x1
const SPI_SLV_CMD7_INT_CLR_S = 4
const SPI_SLV_EN_QPI_INT_CLR_V = 0x1
const SPI_SLV_EN_QPI_INT_CLR_S = 3
const SPI_SLV_EX_QPI_INT_CLR_V = 0x1
const SPI_SLV_EX_QPI_INT_CLR_S = 2
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_CLR_V = 0x1
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_CLR_S = 1
const SPI_DMA_INFIFO_FULL_ERR_INT_CLR_V = 0x1
const SPI_DMA_INFIFO_FULL_ERR_INT_CLR_S = 0
const SPI_APP1_INT_RAW_V = 0x1
const SPI_APP1_INT_RAW_S = 20
const SPI_APP2_INT_RAW_V = 0x1
const SPI_APP2_INT_RAW_S = 19
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_RAW_V = 0x1
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_RAW_S = 18
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_RAW_V = 0x1
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_RAW_S = 17
const SPI_SLV_CMD_ERR_INT_RAW_V = 0x1
const SPI_SLV_CMD_ERR_INT_RAW_S = 16
const SPI_SLV_BUF_ADDR_ERR_INT_RAW_V = 0x1
const SPI_SLV_BUF_ADDR_ERR_INT_RAW_S = 15
const SPI_SEG_MAGIC_ERR_INT_RAW_V = 0x1
const SPI_SEG_MAGIC_ERR_INT_RAW_S = 14
const SPI_DMA_SEG_TRANS_DONE_INT_RAW_V = 0x1
const SPI_DMA_SEG_TRANS_DONE_INT_RAW_S = 13
const SPI_TRANS_DONE_INT_RAW_V = 0x1
const SPI_TRANS_DONE_INT_RAW_S = 12
const SPI_SLV_WR_BUF_DONE_INT_RAW_V = 0x1
const SPI_SLV_WR_BUF_DONE_INT_RAW_S = 11
const SPI_SLV_RD_BUF_DONE_INT_RAW_V = 0x1
const SPI_SLV_RD_BUF_DONE_INT_RAW_S = 10
const SPI_SLV_WR_DMA_DONE_INT_RAW_V = 0x1
const SPI_SLV_WR_DMA_DONE_INT_RAW_S = 9
const SPI_SLV_RD_DMA_DONE_INT_RAW_V = 0x1
const SPI_SLV_RD_DMA_DONE_INT_RAW_S = 8
const SPI_SLV_CMDA_INT_RAW_V = 0x1
const SPI_SLV_CMDA_INT_RAW_S = 7
const SPI_SLV_CMD9_INT_RAW_V = 0x1
const SPI_SLV_CMD9_INT_RAW_S = 6
const SPI_SLV_CMD8_INT_RAW_V = 0x1
const SPI_SLV_CMD8_INT_RAW_S = 5
const SPI_SLV_CMD7_INT_RAW_V = 0x1
const SPI_SLV_CMD7_INT_RAW_S = 4
const SPI_SLV_EN_QPI_INT_RAW_V = 0x1
const SPI_SLV_EN_QPI_INT_RAW_S = 3
const SPI_SLV_EX_QPI_INT_RAW_V = 0x1
const SPI_SLV_EX_QPI_INT_RAW_S = 2
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_RAW_V = 0x1
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_RAW_S = 1
const SPI_DMA_INFIFO_FULL_ERR_INT_RAW_V = 0x1
const SPI_DMA_INFIFO_FULL_ERR_INT_RAW_S = 0
const SPI_APP1_INT_ST_V = 0x1
const SPI_APP1_INT_ST_S = 20
const SPI_APP2_INT_ST_V = 0x1
const SPI_APP2_INT_ST_S = 19
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ST_V = 0x1
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ST_S = 18
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ST_V = 0x1
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ST_S = 17
const SPI_SLV_CMD_ERR_INT_ST_V = 0x1
const SPI_SLV_CMD_ERR_INT_ST_S = 16
const SPI_SLV_BUF_ADDR_ERR_INT_ST_V = 0x1
const SPI_SLV_BUF_ADDR_ERR_INT_ST_S = 15
const SPI_SEG_MAGIC_ERR_INT_ST_V = 0x1
const SPI_SEG_MAGIC_ERR_INT_ST_S = 14
const SPI_DMA_SEG_TRANS_DONE_INT_ST_V = 0x1
const SPI_DMA_SEG_TRANS_DONE_INT_ST_S = 13
const SPI_TRANS_DONE_INT_ST_V = 0x1
const SPI_TRANS_DONE_INT_ST_S = 12
const SPI_SLV_WR_BUF_DONE_INT_ST_V = 0x1
const SPI_SLV_WR_BUF_DONE_INT_ST_S = 11
const SPI_SLV_RD_BUF_DONE_INT_ST_V = 0x1
const SPI_SLV_RD_BUF_DONE_INT_ST_S = 10
const SPI_SLV_WR_DMA_DONE_INT_ST_V = 0x1
const SPI_SLV_WR_DMA_DONE_INT_ST_S = 9
const SPI_SLV_RD_DMA_DONE_INT_ST_V = 0x1
const SPI_SLV_RD_DMA_DONE_INT_ST_S = 8
const SPI_SLV_CMDA_INT_ST_V = 0x1
const SPI_SLV_CMDA_INT_ST_S = 7
const SPI_SLV_CMD9_INT_ST_V = 0x1
const SPI_SLV_CMD9_INT_ST_S = 6
const SPI_SLV_CMD8_INT_ST_V = 0x1
const SPI_SLV_CMD8_INT_ST_S = 5
const SPI_SLV_CMD7_INT_ST_V = 0x1
const SPI_SLV_CMD7_INT_ST_S = 4
const SPI_SLV_EN_QPI_INT_ST_V = 0x1
const SPI_SLV_EN_QPI_INT_ST_S = 3
const SPI_SLV_EX_QPI_INT_ST_V = 0x1
const SPI_SLV_EX_QPI_INT_ST_S = 2
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ST_V = 0x1
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ST_S = 1
const SPI_DMA_INFIFO_FULL_ERR_INT_ST_V = 0x1
const SPI_DMA_INFIFO_FULL_ERR_INT_ST_S = 0
const SPI_APP1_INT_SET_V = 0x1
const SPI_APP1_INT_SET_S = 20
const SPI_APP2_INT_SET_V = 0x1
const SPI_APP2_INT_SET_S = 19
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_SET_V = 0x1
const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_SET_S = 18
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_SET_V = 0x1
const SPI_MST_RX_AFIFO_WFULL_ERR_INT_SET_S = 17
const SPI_SLV_CMD_ERR_INT_SET_V = 0x1
const SPI_SLV_CMD_ERR_INT_SET_S = 16
const SPI_SLV_BUF_ADDR_ERR_INT_SET_V = 0x1
const SPI_SLV_BUF_ADDR_ERR_INT_SET_S = 15
const SPI_SEG_MAGIC_ERR_INT_SET_V = 0x1
const SPI_SEG_MAGIC_ERR_INT_SET_S = 14
const SPI_DMA_SEG_TRANS_DONE_INT_SET_V = 0x1
const SPI_DMA_SEG_TRANS_DONE_INT_SET_S = 13
const SPI_TRANS_DONE_INT_SET_V = 0x1
const SPI_TRANS_DONE_INT_SET_S = 12
const SPI_SLV_WR_BUF_DONE_INT_SET_V = 0x1
const SPI_SLV_WR_BUF_DONE_INT_SET_S = 11
const SPI_SLV_RD_BUF_DONE_INT_SET_V = 0x1
const SPI_SLV_RD_BUF_DONE_INT_SET_S = 10
const SPI_SLV_WR_DMA_DONE_INT_SET_V = 0x1
const SPI_SLV_WR_DMA_DONE_INT_SET_S = 9
const SPI_SLV_RD_DMA_DONE_INT_SET_V = 0x1
const SPI_SLV_RD_DMA_DONE_INT_SET_S = 8
const SPI_SLV_CMDA_INT_SET_V = 0x1
const SPI_SLV_CMDA_INT_SET_S = 7
const SPI_SLV_CMD9_INT_SET_V = 0x1
const SPI_SLV_CMD9_INT_SET_S = 6
const SPI_SLV_CMD8_INT_SET_V = 0x1
const SPI_SLV_CMD8_INT_SET_S = 5
const SPI_SLV_CMD7_INT_SET_V = 0x1
const SPI_SLV_CMD7_INT_SET_S = 4
const SPI_SLV_EN_QPI_INT_SET_V = 0x1
const SPI_SLV_EN_QPI_INT_SET_S = 3
const SPI_SLV_EX_QPI_INT_SET_V = 0x1
const SPI_SLV_EX_QPI_INT_SET_S = 2
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_SET_V = 0x1
const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_SET_S = 1
const SPI_DMA_INFIFO_FULL_ERR_INT_SET_V = 0x1
const SPI_DMA_INFIFO_FULL_ERR_INT_SET_S = 0
const SPI_BUF0 = 0xFFFFFFFF
const SPI_BUF0_V = 0xFFFFFFFF
const SPI_BUF0_S = 0
const SPI_BUF1 = 0xFFFFFFFF
const SPI_BUF1_V = 0xFFFFFFFF
const SPI_BUF1_S = 0
const SPI_BUF2 = 0xFFFFFFFF
const SPI_BUF2_V = 0xFFFFFFFF
const SPI_BUF2_S = 0
const SPI_BUF3 = 0xFFFFFFFF
const SPI_BUF3_V = 0xFFFFFFFF
const SPI_BUF3_S = 0
const SPI_BUF4 = 0xFFFFFFFF
const SPI_BUF4_V = 0xFFFFFFFF
const SPI_BUF4_S = 0
const SPI_BUF5 = 0xFFFFFFFF
const SPI_BUF5_V = 0xFFFFFFFF
const SPI_BUF5_S = 0
const SPI_BUF6 = 0xFFFFFFFF
const SPI_BUF6_V = 0xFFFFFFFF
const SPI_BUF6_S = 0
const SPI_BUF7 = 0xFFFFFFFF
const SPI_BUF7_V = 0xFFFFFFFF
const SPI_BUF7_S = 0
const SPI_BUF8 = 0xFFFFFFFF
const SPI_BUF8_V = 0xFFFFFFFF
const SPI_BUF8_S = 0
const SPI_BUF9 = 0xFFFFFFFF
const SPI_BUF9_V = 0xFFFFFFFF
const SPI_BUF9_S = 0
const SPI_BUF10 = 0xFFFFFFFF
const SPI_BUF10_V = 0xFFFFFFFF
const SPI_BUF10_S = 0
const SPI_BUF11 = 0xFFFFFFFF
const SPI_BUF11_V = 0xFFFFFFFF
const SPI_BUF11_S = 0
const SPI_BUF12 = 0xFFFFFFFF
const SPI_BUF12_V = 0xFFFFFFFF
const SPI_BUF12_S = 0
const SPI_BUF13 = 0xFFFFFFFF
const SPI_BUF13_V = 0xFFFFFFFF
const SPI_BUF13_S = 0
const SPI_BUF14 = 0xFFFFFFFF
const SPI_BUF14_V = 0xFFFFFFFF
const SPI_BUF14_S = 0
const SPI_BUF15 = 0xFFFFFFFF
const SPI_BUF15_V = 0xFFFFFFFF
const SPI_BUF15_S = 0
const SPI_USR_CONF_V = 0x1
const SPI_USR_CONF_S = 28
const SPI_SOFT_RESET_V = 0x1
const SPI_SOFT_RESET_S = 27
const SPI_SLAVE_MODE_V = 0x1
const SPI_SLAVE_MODE_S = 26
const SPI_DMA_SEG_MAGIC_VALUE = 0x0000000F
const SPI_DMA_SEG_MAGIC_VALUE_V = 0xF
const SPI_DMA_SEG_MAGIC_VALUE_S = 22
const SPI_SLV_WRBUF_BITLEN_EN_V = 0x1
const SPI_SLV_WRBUF_BITLEN_EN_S = 11
const SPI_SLV_RDBUF_BITLEN_EN_V = 0x1
const SPI_SLV_RDBUF_BITLEN_EN_S = 10
const SPI_SLV_WRDMA_BITLEN_EN_V = 0x1
const SPI_SLV_WRDMA_BITLEN_EN_S = 9
const SPI_SLV_RDDMA_BITLEN_EN_V = 0x1
const SPI_SLV_RDDMA_BITLEN_EN_S = 8
const SPI_RSCK_DATA_OUT_V = 0x1
const SPI_RSCK_DATA_OUT_S = 3
const SPI_CLK_MODE_13_V = 0x1
const SPI_CLK_MODE_13_S = 2
const SPI_CLK_MODE = 0x00000003
const SPI_CLK_MODE_V = 0x3
const SPI_CLK_MODE_S = 0
const SPI_SLV_LAST_ADDR = 0x0000003F
const SPI_SLV_LAST_ADDR_V = 0x3F
const SPI_SLV_LAST_ADDR_S = 26
const SPI_SLV_LAST_COMMAND = 0x000000FF
const SPI_SLV_LAST_COMMAND_V = 0xFF
const SPI_SLV_LAST_COMMAND_S = 18
const SPI_SLV_DATA_BITLEN = 0x0003FFFF
const SPI_SLV_DATA_BITLEN_V = 0x3FFFF
const SPI_SLV_DATA_BITLEN_S = 0
const SPI_MST_CLK_SEL_V = 0x1
const SPI_MST_CLK_SEL_S = 2
const SPI_MST_CLK_ACTIVE_V = 0x1
const SPI_MST_CLK_ACTIVE_S = 1
const SPI_CLK_EN_V = 0x1
const SPI_CLK_EN_S = 0
const SPI_DATE = 0x0FFFFFFF
const SPI_DATE_V = 0xFFFFFFF
const SPI_DATE_S = 0
const SPIQ_IN_IDX = 0
const SPIQ_OUT_IDX = 0
const SPID_IN_IDX = 1
const SPID_OUT_IDX = 1
const SPIHD_IN_IDX = 2
const SPIHD_OUT_IDX = 2
const SPIWP_IN_IDX = 3
const SPIWP_OUT_IDX = 3
const SPICLK_OUT_IDX = 4
const SPICS0_OUT_IDX = 5
const U0RXD_IN_IDX = 6
const U0TXD_OUT_IDX = 6
const U0CTS_IN_IDX = 7
const U0RTS_OUT_IDX = 7
const U0DSR_IN_IDX = 8
const U0DTR_OUT_IDX = 8
const U1RXD_IN_IDX = 9
const U1TXD_OUT_IDX = 9
const U1CTS_IN_IDX = 10
const U1RTS_OUT_IDX = 10
const U1DSR_IN_IDX = 11
const U1DTR_OUT_IDX = 11
const SPIQ_MONITOR_IDX = 15
const SPID_MONITOR_IDX = 16
const SPIHD_MONITOR_IDX = 17
const SPIWP_MONITOR_IDX = 18
const SPICS1_OUT_IDX = 19
const CPU_TESTBUS0_IDX = 20
const CPU_TESTBUS1_IDX = 21
const CPU_TESTBUS2_IDX = 22
const CPU_TESTBUS3_IDX = 23
const CPU_TESTBUS4_IDX = 24
const CPU_TESTBUS5_IDX = 25
const CPU_TESTBUS6_IDX = 26
const CPU_TESTBUS7_IDX = 27
const CPU_GPIO_IN0_IDX = 28
const CPU_GPIO_OUT0_IDX = 28
const CPU_GPIO_IN1_IDX = 29
const CPU_GPIO_OUT1_IDX = 29
const CPU_GPIO_IN2_IDX = 30
const CPU_GPIO_OUT2_IDX = 30
const CPU_GPIO_IN3_IDX = 31
const CPU_GPIO_OUT3_IDX = 31
const CPU_GPIO_IN4_IDX = 32
const CPU_GPIO_OUT4_IDX = 32
const CPU_GPIO_IN5_IDX = 33
const CPU_GPIO_OUT5_IDX = 33
const CPU_GPIO_IN6_IDX = 34
const CPU_GPIO_OUT6_IDX = 34
const CPU_GPIO_IN7_IDX = 35
const CPU_GPIO_OUT7_IDX = 35
const EXT_ADC_START_IDX = 45
const LEDC_LS_SIG_OUT0_IDX = 45
const LEDC_LS_SIG_OUT1_IDX = 46
const LEDC_LS_SIG_OUT2_IDX = 47
const LEDC_LS_SIG_OUT3_IDX = 48
const LEDC_LS_SIG_OUT4_IDX = 49
const LEDC_LS_SIG_OUT5_IDX = 50
const RMT_SIG_IN0_IDX = 51
const RMT_SIG_OUT0_IDX = 51
const RMT_SIG_IN1_IDX = 52
const RMT_SIG_OUT1_IDX = 52
const I2CEXT0_SCL_IN_IDX = 53
const I2CEXT0_SCL_OUT_IDX = 53
const I2CEXT0_SDA_IN_IDX = 54
const I2CEXT0_SDA_OUT_IDX = 54
const FSPICLK_IN_IDX = 63
const FSPICLK_OUT_IDX = 63
const FSPIQ_IN_IDX = 64
const FSPIQ_OUT_IDX = 64
const FSPID_IN_IDX = 65
const FSPID_OUT_IDX = 65
const FSPIHD_IN_IDX = 66
const FSPIHD_OUT_IDX = 66
const FSPIWP_IN_IDX = 67
const FSPIWP_OUT_IDX = 67
const FSPICS0_IN_IDX = 68
const FSPICS0_OUT_IDX = 68
const FSPICS1_OUT_IDX = 69
const FSPICS2_OUT_IDX = 70
const FSPICS3_OUT_IDX = 71
const FSPICS4_OUT_IDX = 72
const FSPICS5_OUT_IDX = 73
const EXTERN_PRIORITY_I_IDX = 77
const EXTERN_PRIORITY_O_IDX = 77
const EXTERN_ACTIVE_I_IDX = 78
const EXTERN_ACTIVE_O_IDX = 78
const GPIO_EVENT_MATRIX_IN0_IDX = 79
const GPIO_TASK_MATRIX_OUT0_IDX = 79
const GPIO_EVENT_MATRIX_IN1_IDX = 80
const GPIO_TASK_MATRIX_OUT1_IDX = 80
const GPIO_EVENT_MATRIX_IN2_IDX = 81
const GPIO_TASK_MATRIX_OUT2_IDX = 81
const GPIO_EVENT_MATRIX_IN3_IDX = 82
const GPIO_TASK_MATRIX_OUT3_IDX = 82
const BB_DIAG8_OUT_IDX = 83
const BB_DIAG9_OUT_IDX = 84
const BB_DIAG10_OUT_IDX = 85
const BB_DIAG11_OUT_IDX = 86
const BB_DIAG12_OUT_IDX = 87
const BB_DIAG13_OUT_IDX = 88
const ANT_SEL0_IDX = 89
const ANT_SEL1_IDX = 90
const ANT_SEL2_IDX = 91
const ANT_SEL3_IDX = 92
const ANT_SEL4_IDX = 93
const ANT_SEL5_IDX = 94
const ANT_SEL6_IDX = 95
const ANT_SEL7_IDX = 96
const SIG_IN_FUNC_97_IDX = 97
const SIG_IN_FUNC97_IDX = 97
const SIG_IN_FUNC_98_IDX = 98
const SIG_IN_FUNC98_IDX = 98
const SIG_IN_FUNC_99_IDX = 99
const SIG_IN_FUNC99_IDX = 99
const SIG_IN_FUNC_100_IDX = 100
const SIG_IN_FUNC100_IDX = 100
const BLE_DBG_SYNCERR_IDX = 101
const BLE_DBG_SYNC_FOUND_IDX = 102
const BLE_DBG_CH_IDX_IDX = 103
const BLE_DBG_SYNC_WINDOW_IDX = 104
const BLE_DBG_DATA_EN_IDX = 105
const BLE_DBG_DATA_IDX = 106
const BLE_DBG_PKT_TX_ON_IDX = 107
const BLE_DBG_PKT_RX_ON_IDX = 108
const BLE_DBG_TXRU_ON_IDX = 109
const BLE_DBG_RXRU_ON_IDX = 110
const BLE_DBG_LELC_ST0_IDX = 111
const BLE_DBG_LELC_ST1_IDX = 112
const BLE_DBG_LELC_ST2_IDX = 113
const BLE_DBG_LELC_ST3_IDX = 114
const BLE_DBG_CRCOK_IDX = 115
const BLE_DBG_CLK_GPIO_IDX = 116
const BLE_DBG_RADIO_START_IDX = 117
const BLE_DBG_SEQUENCE_ON_IDX = 118
const BLE_DBG_COEX_BT_ON_IDX = 119
const BLE_DBG_COEX_WIFI_ON_IDX = 120
const CLK_OUT_OUT1_IDX = 123
const CLK_OUT_OUT2_IDX = 124
const CLK_OUT_OUT3_IDX = 125
const SIG_GPIO_OUT_IDX = 128
const GPIO_MAP_DATE_IDX = 0x2106190
const SPI_MEM_FLASH_READ_V = 0x1
const SPI_MEM_FLASH_READ_S = 31
const SPI_MEM_FLASH_WREN_V = 0x1
const SPI_MEM_FLASH_WREN_S = 30
const SPI_MEM_FLASH_WRDI_V = 0x1
const SPI_MEM_FLASH_WRDI_S = 29
const SPI_MEM_FLASH_RDID_V = 0x1
const SPI_MEM_FLASH_RDID_S = 28
const SPI_MEM_FLASH_RDSR_V = 0x1
const SPI_MEM_FLASH_RDSR_S = 27
const SPI_MEM_FLASH_WRSR_V = 0x1
const SPI_MEM_FLASH_WRSR_S = 26
const SPI_MEM_FLASH_PP_V = 0x1
const SPI_MEM_FLASH_PP_S = 25
const SPI_MEM_FLASH_SE_V = 0x1
const SPI_MEM_FLASH_SE_S = 24
const SPI_MEM_FLASH_BE_V = 0x1
const SPI_MEM_FLASH_BE_S = 23
const SPI_MEM_FLASH_CE_V = 0x1
const SPI_MEM_FLASH_CE_S = 22
const SPI_MEM_FLASH_DP_V = 0x1
const SPI_MEM_FLASH_DP_S = 21
const SPI_MEM_FLASH_RES_V = 0x1
const SPI_MEM_FLASH_RES_S = 20
const SPI_MEM_FLASH_HPM_V = 0x1
const SPI_MEM_FLASH_HPM_S = 19
const SPI_MEM_USR_V = 0x1
const SPI_MEM_USR_S = 18
const SPI_MEM_FLASH_PE_V = 0x1
const SPI_MEM_FLASH_PE_S = 17
const SPI_MEM_MSPI_ST = 0x0000000F
const SPI_MEM_MSPI_ST_V = 0xF
const SPI_MEM_MSPI_ST_S = 4
const SPI_MEM_MST_ST = 0x0000000F
const SPI_MEM_MST_ST_V = 0xF
const SPI_MEM_MST_ST_S = 0
const SPI_MEM_USR_ADDR_VALUE = 0xFFFFFFFF
const SPI_MEM_USR_ADDR_VALUE_V = 0xFFFFFFFF
const SPI_MEM_USR_ADDR_VALUE_S = 0
const SPI_MEM_FREAD_QIO_V = 0x1
const SPI_MEM_FREAD_QIO_S = 24
const SPI_MEM_FREAD_DIO_V = 0x1
const SPI_MEM_FREAD_DIO_S = 23
const SPI_MEM_WRSR_2B_V = 0x1
const SPI_MEM_WRSR_2B_S = 22
const SPI_MEM_WP_REG_V = 0x1
const SPI_MEM_WP_REG_S = 21
const SPI_MEM_FREAD_QUAD_V = 0x1
const SPI_MEM_FREAD_QUAD_S = 20
const SPI_MEM_D_POL_V = 0x1
const SPI_MEM_D_POL_S = 19
const SPI_MEM_Q_POL_V = 0x1
const SPI_MEM_Q_POL_S = 18
const SPI_MEM_RESANDRES_V = 0x1
const SPI_MEM_RESANDRES_S = 15
const SPI_MEM_FREAD_DUAL_V = 0x1
const SPI_MEM_FREAD_DUAL_S = 14
const SPI_MEM_FASTRD_MODE_V = 0x1
const SPI_MEM_FASTRD_MODE_S = 13
const SPI_MEM_TX_CRC_EN_V = 0x1
const SPI_MEM_TX_CRC_EN_S = 11
const SPI_MEM_FCS_CRC_EN_V = 0x1
const SPI_MEM_FCS_CRC_EN_S = 10
const SPI_MEM_FCMD_QUAD_V = 0x1
const SPI_MEM_FCMD_QUAD_S = 8
const SPI_MEM_FCMD_DUAL_V = 0x1
const SPI_MEM_FCMD_DUAL_S = 7
const SPI_MEM_FDUMMY_OUT_V = 0x1
const SPI_MEM_FDUMMY_OUT_S = 3
const SPI_MEM_RXFIFO_RST_V = 0x1
const SPI_MEM_RXFIFO_RST_S = 30
const SPI_MEM_CS_HOLD_DLY_RES = 0x000003FF
const SPI_MEM_CS_HOLD_DLY_RES_V = 0x3FF
const SPI_MEM_CS_HOLD_DLY_RES_S = 2
const SPI_MEM_CLK_MODE = 0x00000003
const SPI_MEM_CLK_MODE_V = 0x3
const SPI_MEM_CLK_MODE_S = 0
const SPI_MEM_SYNC_RESET_V = 0x1
const SPI_MEM_SYNC_RESET_S = 31
const SPI_MEM_CS_HOLD_DELAY = 0x0000003F
const SPI_MEM_CS_HOLD_DELAY_V = 0x3F
const SPI_MEM_CS_HOLD_DELAY_S = 25
const SPI_MEM_CS_HOLD_TIME = 0x0000001F
const SPI_MEM_CS_HOLD_TIME_V = 0x1F
const SPI_MEM_CS_HOLD_TIME_S = 5
const SPI_MEM_CS_SETUP_TIME = 0x0000001F
const SPI_MEM_CS_SETUP_TIME_V = 0x1F
const SPI_MEM_CS_SETUP_TIME_S = 0
const SPI_MEM_CLK_EQU_SYSCLK_V = 0x1
const SPI_MEM_CLK_EQU_SYSCLK_S = 31
const SPI_MEM_CLKCNT_N = 0x000000FF
const SPI_MEM_CLKCNT_N_V = 0xFF
const SPI_MEM_CLKCNT_N_S = 16
const SPI_MEM_CLKCNT_H = 0x000000FF
const SPI_MEM_CLKCNT_H_V = 0xFF
const SPI_MEM_CLKCNT_H_S = 8
const SPI_MEM_CLKCNT_L = 0x000000FF
const SPI_MEM_CLKCNT_L_V = 0xFF
const SPI_MEM_CLKCNT_L_S = 0
const SPI_MEM_USR_COMMAND_V = 0x1
const SPI_MEM_USR_COMMAND_S = 31
const SPI_MEM_USR_ADDR_V = 0x1
const SPI_MEM_USR_ADDR_S = 30
const SPI_MEM_USR_DUMMY_V = 0x1
const SPI_MEM_USR_DUMMY_S = 29
const SPI_MEM_USR_MISO_V = 0x1
const SPI_MEM_USR_MISO_S = 28
const SPI_MEM_USR_MOSI_V = 0x1
const SPI_MEM_USR_MOSI_S = 27
const SPI_MEM_USR_DUMMY_IDLE_V = 0x1
const SPI_MEM_USR_DUMMY_IDLE_S = 26
const SPI_MEM_USR_MOSI_HIGHPART_V = 0x1
const SPI_MEM_USR_MOSI_HIGHPART_S = 25
const SPI_MEM_USR_MISO_HIGHPART_V = 0x1
const SPI_MEM_USR_MISO_HIGHPART_S = 24
const SPI_MEM_FWRITE_QIO_V = 0x1
const SPI_MEM_FWRITE_QIO_S = 15
const SPI_MEM_FWRITE_DIO_V = 0x1
const SPI_MEM_FWRITE_DIO_S = 14
const SPI_MEM_FWRITE_QUAD_V = 0x1
const SPI_MEM_FWRITE_QUAD_S = 13
const SPI_MEM_FWRITE_DUAL_V = 0x1
const SPI_MEM_FWRITE_DUAL_S = 12
const SPI_MEM_CK_OUT_EDGE_V = 0x1
const SPI_MEM_CK_OUT_EDGE_S = 9
const SPI_MEM_CS_SETUP_V = 0x1
const SPI_MEM_CS_SETUP_S = 7
const SPI_MEM_CS_HOLD_V = 0x1
const SPI_MEM_CS_HOLD_S = 6
const SPI_MEM_USR_ADDR_BITLEN = 0x0000003F
const SPI_MEM_USR_ADDR_BITLEN_V = 0x3F
const SPI_MEM_USR_ADDR_BITLEN_S = 26
const SPI_MEM_USR_DUMMY_CYCLELEN = 0x0000003F
const SPI_MEM_USR_DUMMY_CYCLELEN_V = 0x3F
const SPI_MEM_USR_DUMMY_CYCLELEN_S = 0
const SPI_MEM_USR_COMMAND_BITLEN = 0x0000000F
const SPI_MEM_USR_COMMAND_BITLEN_V = 0xF
const SPI_MEM_USR_COMMAND_BITLEN_S = 28
const SPI_MEM_USR_COMMAND_VALUE = 0x0000FFFF
const SPI_MEM_USR_COMMAND_VALUE_V = 0xFFFF
const SPI_MEM_USR_COMMAND_VALUE_S = 0
const SPI_MEM_USR_MOSI_DBITLEN = 0x000003FF
const SPI_MEM_USR_MOSI_DBITLEN_V = 0x3FF
const SPI_MEM_USR_MOSI_DBITLEN_S = 0
const SPI_MEM_USR_MISO_DBITLEN = 0x000003FF
const SPI_MEM_USR_MISO_DBITLEN_V = 0x3FF
const SPI_MEM_USR_MISO_DBITLEN_S = 0
const SPI_MEM_WB_MODE = 0x000000FF
const SPI_MEM_WB_MODE_V = 0xFF
const SPI_MEM_WB_MODE_S = 16
const SPI_MEM_STATUS = 0x0000FFFF
const SPI_MEM_STATUS_V = 0xFFFF
const SPI_MEM_STATUS_S = 0
const SPI_MEM_CS_KEEP_ACTIVE_V = 0x1
const SPI_MEM_CS_KEEP_ACTIVE_S = 10
const SPI_MEM_CK_IDLE_EDGE_V = 0x1
const SPI_MEM_CK_IDLE_EDGE_S = 9
const SPI_MEM_CSPI_ST_TRANS_END_INT_ENA_V = 0x1
const SPI_MEM_CSPI_ST_TRANS_END_INT_ENA_S = 6
const SPI_MEM_CSPI_ST_TRANS_END_V = 0x1
const SPI_MEM_CSPI_ST_TRANS_END_S = 5
const SPI_MEM_TRANS_END_INT_ENA_V = 0x1
const SPI_MEM_TRANS_END_INT_ENA_S = 4
const SPI_MEM_TRANS_END_V = 0x1
const SPI_MEM_TRANS_END_S = 3
const SPI_MEM_CS1_DIS_V = 0x1
const SPI_MEM_CS1_DIS_S = 1
const SPI_MEM_CS0_DIS_V = 0x1
const SPI_MEM_CS0_DIS_S = 0
const SPI_MEM_TX_CRC_DATA = 0xFFFFFFFF
const SPI_MEM_TX_CRC_DATA_V = 0xFFFFFFFF
const SPI_MEM_TX_CRC_DATA_S = 0
const SPI_MEM_FADDR_QUAD_V = 0x1
const SPI_MEM_FADDR_QUAD_S = 8
const SPI_MEM_FDOUT_QUAD_V = 0x1
const SPI_MEM_FDOUT_QUAD_S = 7
const SPI_MEM_FDIN_QUAD_V = 0x1
const SPI_MEM_FDIN_QUAD_S = 6
const SPI_MEM_FADDR_DUAL_V = 0x1
const SPI_MEM_FADDR_DUAL_S = 5
const SPI_MEM_FDOUT_DUAL_V = 0x1
const SPI_MEM_FDOUT_DUAL_S = 4
const SPI_MEM_FDIN_DUAL_V = 0x1
const SPI_MEM_FDIN_DUAL_S = 3
const SPI_MEM_CACHE_FLASH_USR_CMD_V = 0x1
const SPI_MEM_CACHE_FLASH_USR_CMD_S = 2
const SPI_MEM_CACHE_USR_ADDR_4BYTE_V = 0x1
const SPI_MEM_CACHE_USR_ADDR_4BYTE_S = 1
const SPI_MEM_CACHE_REQ_EN_V = 0x1
const SPI_MEM_CACHE_REQ_EN_S = 0
const SPI_MEM_CSPI_LOCK_DELAY_TIME = 0x0000001F
const SPI_MEM_CSPI_LOCK_DELAY_TIME_V = 0x1F
const SPI_MEM_CSPI_LOCK_DELAY_TIME_S = 7
const SPI_MEM_EM_ST = 0x00000007
const SPI_MEM_EM_ST_V = 0x7
const SPI_MEM_EM_ST_S = 4
const SPI_MEM_CSPI_ST = 0x0000000F
const SPI_MEM_CSPI_ST_V = 0xF
const SPI_MEM_CSPI_ST_S = 0
const SPI_MEM_BUF0 = 0xFFFFFFFF
const SPI_MEM_BUF0_V = 0xFFFFFFFF
const SPI_MEM_BUF0_S = 0
const SPI_MEM_BUF1 = 0xFFFFFFFF
const SPI_MEM_BUF1_V = 0xFFFFFFFF
const SPI_MEM_BUF1_S = 0
const SPI_MEM_BUF2 = 0xFFFFFFFF
const SPI_MEM_BUF2_V = 0xFFFFFFFF
const SPI_MEM_BUF2_S = 0
const SPI_MEM_BUF3 = 0xFFFFFFFF
const SPI_MEM_BUF3_V = 0xFFFFFFFF
const SPI_MEM_BUF3_S = 0
const SPI_MEM_BUF4 = 0xFFFFFFFF
const SPI_MEM_BUF4_V = 0xFFFFFFFF
const SPI_MEM_BUF4_S = 0
const SPI_MEM_BUF5 = 0xFFFFFFFF
const SPI_MEM_BUF5_V = 0xFFFFFFFF
const SPI_MEM_BUF5_S = 0
const SPI_MEM_BUF6 = 0xFFFFFFFF
const SPI_MEM_BUF6_V = 0xFFFFFFFF
const SPI_MEM_BUF6_S = 0
const SPI_MEM_BUF7 = 0xFFFFFFFF
const SPI_MEM_BUF7_V = 0xFFFFFFFF
const SPI_MEM_BUF7_S = 0
const SPI_MEM_BUF8 = 0xFFFFFFFF
const SPI_MEM_BUF8_V = 0xFFFFFFFF
const SPI_MEM_BUF8_S = 0
const SPI_MEM_BUF9 = 0xFFFFFFFF
const SPI_MEM_BUF9_V = 0xFFFFFFFF
const SPI_MEM_BUF9_S = 0
const SPI_MEM_BUF10 = 0xFFFFFFFF
const SPI_MEM_BUF10_V = 0xFFFFFFFF
const SPI_MEM_BUF10_S = 0
const SPI_MEM_BUF11 = 0xFFFFFFFF
const SPI_MEM_BUF11_V = 0xFFFFFFFF
const SPI_MEM_BUF11_S = 0
const SPI_MEM_BUF12 = 0xFFFFFFFF
const SPI_MEM_BUF12_V = 0xFFFFFFFF
const SPI_MEM_BUF12_S = 0
const SPI_MEM_BUF13 = 0xFFFFFFFF
const SPI_MEM_BUF13_V = 0xFFFFFFFF
const SPI_MEM_BUF13_S = 0
const SPI_MEM_BUF14 = 0xFFFFFFFF
const SPI_MEM_BUF14_V = 0xFFFFFFFF
const SPI_MEM_BUF14_S = 0
const SPI_MEM_BUF15 = 0xFFFFFFFF
const SPI_MEM_BUF15_V = 0xFFFFFFFF
const SPI_MEM_BUF15_S = 0
const SPI_MEM_WAITI_DUMMY_CYCLELEN = 0x0000003F
const SPI_MEM_WAITI_DUMMY_CYCLELEN_V = 0x3F
const SPI_MEM_WAITI_DUMMY_CYCLELEN_S = 10
const SPI_MEM_WAITI_CMD = 0x000000FF
const SPI_MEM_WAITI_CMD_V = 0xFF
const SPI_MEM_WAITI_CMD_S = 2
const SPI_MEM_WAITI_DUMMY_V = 0x1
const SPI_MEM_WAITI_DUMMY_S = 1
const SPI_MEM_SUS_TIMEOUT_CNT = 0x0000007F
const SPI_MEM_SUS_TIMEOUT_CNT_V = 0x7F
const SPI_MEM_SUS_TIMEOUT_CNT_S = 25
const SPI_MEM_PES_END_EN_V = 0x1
const SPI_MEM_PES_END_EN_S = 24
const SPI_MEM_PER_END_EN_V = 0x1
const SPI_MEM_PER_END_EN_S = 23
const SPI_MEM_FMEM_RD_SUS_2B_V = 0x1
const SPI_MEM_FMEM_RD_SUS_2B_S = 22
const SPI_MEM_PESR_END_MSK = 0x0000FFFF
const SPI_MEM_PESR_END_MSK_V = 0xFFFF
const SPI_MEM_PESR_END_MSK_S = 6
const SPI_MEM_FLASH_PES_EN_V = 0x1
const SPI_MEM_FLASH_PES_EN_S = 5
const SPI_MEM_PES_PER_EN_V = 0x1
const SPI_MEM_PES_PER_EN_S = 4
const SPI_MEM_FLASH_PES_WAIT_EN_V = 0x1
const SPI_MEM_FLASH_PES_WAIT_EN_S = 3
const SPI_MEM_FLASH_PER_WAIT_EN_V = 0x1
const SPI_MEM_FLASH_PER_WAIT_EN_S = 2
const SPI_MEM_FLASH_PES_V = 0x1
const SPI_MEM_FLASH_PES_S = 1
const SPI_MEM_FLASH_PER_V = 0x1
const SPI_MEM_FLASH_PER_S = 0
const SPI_MEM_WAIT_PESR_COMMAND = 0x0000FFFF
const SPI_MEM_WAIT_PESR_COMMAND_V = 0xFFFF
const SPI_MEM_WAIT_PESR_COMMAND_S = 16
const SPI_MEM_FLASH_PES_COMMAND = 0x000000FF
const SPI_MEM_FLASH_PES_COMMAND_V = 0xFF
const SPI_MEM_FLASH_PES_COMMAND_S = 8
const SPI_MEM_FLASH_PER_COMMAND = 0x000000FF
const SPI_MEM_FLASH_PER_COMMAND_V = 0xFF
const SPI_MEM_FLASH_PER_COMMAND_S = 0
const SPI_MEM_SPI0_LOCK_EN_V = 0x1
const SPI_MEM_SPI0_LOCK_EN_S = 7
const SPI_MEM_FLASH_PES_DLY_128_V = 0x1
const SPI_MEM_FLASH_PES_DLY_128_S = 6
const SPI_MEM_FLASH_PER_DLY_128_V = 0x1
const SPI_MEM_FLASH_PER_DLY_128_S = 5
const SPI_MEM_FLASH_DP_DLY_128_V = 0x1
const SPI_MEM_FLASH_DP_DLY_128_S = 4
const SPI_MEM_FLASH_RES_DLY_128_V = 0x1
const SPI_MEM_FLASH_RES_DLY_128_S = 3
const SPI_MEM_FLASH_HPM_DLY_128_V = 0x1
const SPI_MEM_FLASH_HPM_DLY_128_S = 2
const SPI_MEM_WAIT_PESR_CMD_2B_V = 0x1
const SPI_MEM_WAIT_PESR_CMD_2B_S = 1
const SPI_MEM_FLASH_SUS_V = 0x1
const SPI_MEM_FLASH_SUS_S = 0
const SPI_MEM_EXTRA_DUMMY_CYCLELEN = 0x00000007
const SPI_MEM_EXTRA_DUMMY_CYCLELEN_V = 0x7
const SPI_MEM_EXTRA_DUMMY_CYCLELEN_S = 2
const SPI_MEM_TIMING_CALI_V = 0x1
const SPI_MEM_TIMING_CALI_S = 1
const SPI_MEM_TIMING_CLK_ENA_V = 0x1
const SPI_MEM_TIMING_CLK_ENA_S = 0
const SPI_MEM_DIN3_MODE = 0x00000003
const SPI_MEM_DIN3_MODE_V = 0x3
const SPI_MEM_DIN3_MODE_S = 6
const SPI_MEM_DIN2_MODE = 0x00000003
const SPI_MEM_DIN2_MODE_V = 0x3
const SPI_MEM_DIN2_MODE_S = 4
const SPI_MEM_DIN1_MODE = 0x00000003
const SPI_MEM_DIN1_MODE_V = 0x3
const SPI_MEM_DIN1_MODE_S = 2
const SPI_MEM_DIN0_MODE = 0x00000003
const SPI_MEM_DIN0_MODE_V = 0x3
const SPI_MEM_DIN0_MODE_S = 0
const SPI_MEM_DIN3_NUM_V = 0x1
const SPI_MEM_DIN3_NUM_S = 3
const SPI_MEM_DIN2_NUM_V = 0x1
const SPI_MEM_DIN2_NUM_S = 2
const SPI_MEM_DIN1_NUM_V = 0x1
const SPI_MEM_DIN1_NUM_S = 1
const SPI_MEM_DIN0_NUM_V = 0x1
const SPI_MEM_DIN0_NUM_S = 0
const SPI_MEM_DOUT3_MODE_V = 0x1
const SPI_MEM_DOUT3_MODE_S = 3
const SPI_MEM_DOUT2_MODE_V = 0x1
const SPI_MEM_DOUT2_MODE_S = 2
const SPI_MEM_DOUT1_MODE_V = 0x1
const SPI_MEM_DOUT1_MODE_S = 1
const SPI_MEM_DOUT0_MODE_V = 0x1
const SPI_MEM_DOUT0_MODE_S = 0
const SPI_MEM_BROWN_OUT_INT_ENA_V = 0x1
const SPI_MEM_BROWN_OUT_INT_ENA_S = 5
const SPI_MEM_MST_ST_END_INT_ENA_V = 0x1
const SPI_MEM_MST_ST_END_INT_ENA_S = 4
const SPI_MEM_SLV_ST_END_INT_ENA_V = 0x1
const SPI_MEM_SLV_ST_END_INT_ENA_S = 3
const SPI_MEM_WPE_END_INT_ENA_V = 0x1
const SPI_MEM_WPE_END_INT_ENA_S = 2
const SPI_MEM_PES_END_INT_ENA_V = 0x1
const SPI_MEM_PES_END_INT_ENA_S = 1
const SPI_MEM_PER_END_INT_ENA_V = 0x1
const SPI_MEM_PER_END_INT_ENA_S = 0
const SPI_MEM_BROWN_OUT_INT_CLR_V = 0x1
const SPI_MEM_BROWN_OUT_INT_CLR_S = 5
const SPI_MEM_MST_ST_END_INT_CLR_V = 0x1
const SPI_MEM_MST_ST_END_INT_CLR_S = 4
const SPI_MEM_SLV_ST_END_INT_CLR_V = 0x1
const SPI_MEM_SLV_ST_END_INT_CLR_S = 3
const SPI_MEM_WPE_END_INT_CLR_V = 0x1
const SPI_MEM_WPE_END_INT_CLR_S = 2
const SPI_MEM_PES_END_INT_CLR_V = 0x1
const SPI_MEM_PES_END_INT_CLR_S = 1
const SPI_MEM_PER_END_INT_CLR_V = 0x1
const SPI_MEM_PER_END_INT_CLR_S = 0
const SPI_MEM_BROWN_OUT_INT_RAW_V = 0x1
const SPI_MEM_BROWN_OUT_INT_RAW_S = 5
const SPI_MEM_MST_ST_END_INT_RAW_V = 0x1
const SPI_MEM_MST_ST_END_INT_RAW_S = 4
const SPI_MEM_SLV_ST_END_INT_RAW_V = 0x1
const SPI_MEM_SLV_ST_END_INT_RAW_S = 3
const SPI_MEM_WPE_END_INT_RAW_V = 0x1
const SPI_MEM_WPE_END_INT_RAW_S = 2
const SPI_MEM_PES_END_INT_RAW_V = 0x1
const SPI_MEM_PES_END_INT_RAW_S = 1
const SPI_MEM_PER_END_INT_RAW_V = 0x1
const SPI_MEM_PER_END_INT_RAW_S = 0
const SPI_MEM_BROWN_OUT_INT_ST_V = 0x1
const SPI_MEM_BROWN_OUT_INT_ST_S = 5
const SPI_MEM_MST_ST_END_INT_ST_V = 0x1
const SPI_MEM_MST_ST_END_INT_ST_S = 4
const SPI_MEM_SLV_ST_END_INT_ST_V = 0x1
const SPI_MEM_SLV_ST_END_INT_ST_S = 3
const SPI_MEM_WPE_END_INT_ST_V = 0x1
const SPI_MEM_WPE_END_INT_ST_S = 2
const SPI_MEM_PES_END_INT_ST_V = 0x1
const SPI_MEM_PES_END_INT_ST_S = 1
const SPI_MEM_PER_END_INT_ST_V = 0x1
const SPI_MEM_PER_END_INT_ST_S = 0
const SPI_MEM_CLK_EN_V = 0x1
const SPI_MEM_CLK_EN_S = 0
const SPI_MEM_SPI01_CLK_SEL = 0x00000003
const SPI_MEM_SPI01_CLK_SEL_V = 0x3
const SPI_MEM_SPI01_CLK_SEL_S = 0
const SPI_MEM_DATE = 0x0FFFFFFF
const SPI_MEM_DATE_V = 0xFFFFFFF
const SPI_MEM_DATE_S = 0
const BUS_LOCK_DEBUG = 0
const DEV_NUM_MAX = 6

type X__int8T c.Char
type X__uint8T c.Char
type X__int16T int16
type X__uint16T uint16
type X__int32T c.Int
type X__uint32T c.Uint
type X__int64T c.LongLong
type X__uint64T c.UlongLong
type X__intLeast8T c.Char
type X__uintLeast8T c.Char
type X__intLeast16T int16
type X__uintLeast16T uint16
type X__intLeast32T c.Int
type X__uintLeast32T c.Uint
type X__intLeast64T c.LongLong
type X__uintLeast64T c.UlongLong
type X__intmaxT c.LongLong
type X__uintmaxT c.UlongLong
type X__intptrT c.Int
type X__uintptrT c.Uint
type IntLeast8T X__intLeast8T
type UintLeast8T X__uintLeast8T
type IntLeast16T X__intLeast16T
type UintLeast16T X__uintLeast16T
type IntLeast32T X__intLeast32T
type UintLeast32T X__uintLeast32T
type IntLeast64T X__intLeast64T
type UintLeast64T X__uintLeast64T
type IntFast8T c.Char
type UintFast8T c.Char
type IntFast16T int16
type UintFast16T uint16
type IntFast32T c.Int
type UintFast32T c.Uint
type IntFast64T c.LongLong
type UintFast64T c.UlongLong
type SocRootClkT c.Int

const (
	SOC_ROOT_CLK_INT_RC_FAST  SocRootClkT = 0
	SOC_ROOT_CLK_INT_RC_SLOW  SocRootClkT = 1
	SOC_ROOT_CLK_EXT_XTAL     SocRootClkT = 2
	SOC_ROOT_CLK_EXT_OSC_SLOW SocRootClkT = 3
)

type SocCpuClkSrcT c.Int

const (
	SOC_CPU_CLK_SRC_XTAL    SocCpuClkSrcT = 0
	SOC_CPU_CLK_SRC_PLL     SocCpuClkSrcT = 1
	SOC_CPU_CLK_SRC_RC_FAST SocCpuClkSrcT = 2
	SOC_CPU_CLK_SRC_INVALID SocCpuClkSrcT = 3
)

type SocRtcSlowClkSrcT c.Int

const (
	SOC_RTC_SLOW_CLK_SRC_RC_SLOW      SocRtcSlowClkSrcT = 0
	SOC_RTC_SLOW_CLK_SRC_OSC_SLOW     SocRtcSlowClkSrcT = 1
	SOC_RTC_SLOW_CLK_SRC_RC_FAST_D256 SocRtcSlowClkSrcT = 2
	SOC_RTC_SLOW_CLK_SRC_INVALID      SocRtcSlowClkSrcT = 3
)

type SocRtcFastClkSrcT c.Int

const (
	SOC_RTC_FAST_CLK_SRC_XTAL_D2  SocRtcFastClkSrcT = 0
	SOC_RTC_FAST_CLK_SRC_XTAL_DIV SocRtcFastClkSrcT = 0
	SOC_RTC_FAST_CLK_SRC_RC_FAST  SocRtcFastClkSrcT = 1
	SOC_RTC_FAST_CLK_SRC_INVALID  SocRtcFastClkSrcT = 2
)

type SocXtalFreqT c.Int

const (
	SOC_XTAL_FREQ_26M SocXtalFreqT = 26
	SOC_XTAL_FREQ_32M SocXtalFreqT = 32
	SOC_XTAL_FREQ_40M SocXtalFreqT = 40
)

type SocModuleClkT c.Int

const (
	SOC_MOD_CLK_CPU          SocModuleClkT = 1
	SOC_MOD_CLK_RTC_FAST     SocModuleClkT = 2
	SOC_MOD_CLK_RTC_SLOW     SocModuleClkT = 3
	SOC_MOD_CLK_APB          SocModuleClkT = 4
	SOC_MOD_CLK_PLL_F40M     SocModuleClkT = 5
	SOC_MOD_CLK_PLL_F60M     SocModuleClkT = 6
	SOC_MOD_CLK_PLL_F80M     SocModuleClkT = 7
	SOC_MOD_CLK_OSC_SLOW     SocModuleClkT = 8
	SOC_MOD_CLK_RC_FAST      SocModuleClkT = 9
	SOC_MOD_CLK_RC_FAST_D256 SocModuleClkT = 10
	SOC_MOD_CLK_XTAL         SocModuleClkT = 11
	SOC_MOD_CLK_INVALID      SocModuleClkT = 12
)

type SocPeriphSystimerClkSrcT c.Int

const (
	SYSTIMER_CLK_SRC_XTAL    SocPeriphSystimerClkSrcT = 11
	SYSTIMER_CLK_SRC_DEFAULT SocPeriphSystimerClkSrcT = 11
)

type SocPeriphGptimerClkSrcT c.Int

const (
	GPTIMER_CLK_SRC_PLL_F40M SocPeriphGptimerClkSrcT = 5
	GPTIMER_CLK_SRC_XTAL     SocPeriphGptimerClkSrcT = 11
	GPTIMER_CLK_SRC_DEFAULT  SocPeriphGptimerClkSrcT = 5
)

type SocPeriphTgClkSrcLegacyT c.Int

const (
	TIMER_SRC_CLK_PLL_F40M SocPeriphTgClkSrcLegacyT = 5
	TIMER_SRC_CLK_XTAL     SocPeriphTgClkSrcLegacyT = 11
	TIMER_SRC_CLK_DEFAULT  SocPeriphTgClkSrcLegacyT = 5
)

type SocPeriphTemperatureSensorClkSrcT c.Int

const (
	TEMPERATURE_SENSOR_CLK_SRC_XTAL    SocPeriphTemperatureSensorClkSrcT = 11
	TEMPERATURE_SENSOR_CLK_SRC_RC_FAST SocPeriphTemperatureSensorClkSrcT = 9
	TEMPERATURE_SENSOR_CLK_SRC_DEFAULT SocPeriphTemperatureSensorClkSrcT = 11
)

type SocPeriphUartClkSrcLegacyT c.Int

const (
	UART_SCLK_PLL_F40M SocPeriphUartClkSrcLegacyT = 5
	UART_SCLK_RTC      SocPeriphUartClkSrcLegacyT = 9
	UART_SCLK_XTAL     SocPeriphUartClkSrcLegacyT = 11
	UART_SCLK_DEFAULT  SocPeriphUartClkSrcLegacyT = 5
)

type SocPeriphSpiClkSrcT c.Int

const (
	SPI_CLK_SRC_DEFAULT  SocPeriphSpiClkSrcT = 5
	SPI_CLK_SRC_PLL_F40M SocPeriphSpiClkSrcT = 5
	SPI_CLK_SRC_XTAL     SocPeriphSpiClkSrcT = 11
)

type SocPeriphI2cClkSrcT c.Int

const (
	I2C_CLK_SRC_XTAL    SocPeriphI2cClkSrcT = 11
	I2C_CLK_SRC_RC_FAST SocPeriphI2cClkSrcT = 9
	I2C_CLK_SRC_DEFAULT SocPeriphI2cClkSrcT = 11
)

type SocPeriphAdcDigiClkSrcT c.Int

const (
	ADC_DIGI_CLK_SRC_XTAL     SocPeriphAdcDigiClkSrcT = 11
	ADC_DIGI_CLK_SRC_PLL_F80M SocPeriphAdcDigiClkSrcT = 7
	ADC_DIGI_CLK_SRC_DEFAULT  SocPeriphAdcDigiClkSrcT = 7
)

type SocPeriphGlitchFilterClkSrcT c.Int

const (
	GLITCH_FILTER_CLK_SRC_APB     SocPeriphGlitchFilterClkSrcT = 4
	GLITCH_FILTER_CLK_SRC_DEFAULT SocPeriphGlitchFilterClkSrcT = 4
)

type SocPeriphMwdtClkSrcT c.Int

const (
	MWDT_CLK_SRC_XTAL     SocPeriphMwdtClkSrcT = 11
	MWDT_CLK_SRC_PLL_F40M SocPeriphMwdtClkSrcT = 5
	MWDT_CLK_SRC_DEFAULT  SocPeriphMwdtClkSrcT = 5
)

type SocPeriphLedcClkSrcLegacyT c.Int

const (
	LEDC_AUTO_CLK        SocPeriphLedcClkSrcLegacyT = 0
	LEDC_USE_PLL_DIV_CLK SocPeriphLedcClkSrcLegacyT = 6
	LEDC_USE_RC_FAST_CLK SocPeriphLedcClkSrcLegacyT = 9
	LEDC_USE_XTAL_CLK    SocPeriphLedcClkSrcLegacyT = 11
	LEDC_USE_RTC8M_CLK   SocPeriphLedcClkSrcLegacyT = 9
)

type SocClkoutSigIdT c.Int

const (
	CLKOUT_SIG_PLL      SocClkoutSigIdT = 1
	CLKOUT_SIG_RC_SLOW  SocClkoutSigIdT = 4
	CLKOUT_SIG_XTAL     SocClkoutSigIdT = 5
	CLKOUT_SIG_PLL_F80M SocClkoutSigIdT = 13
	CLKOUT_SIG_RC_FAST  SocClkoutSigIdT = 14
	CLKOUT_SIG_INVALID  SocClkoutSigIdT = 255
)

type SpiHostDeviceT c.Int

const (
	SPI1_HOST    SpiHostDeviceT = 0
	SPI2_HOST    SpiHostDeviceT = 1
	SPI_HOST_MAX SpiHostDeviceT = 2
)

type SpiClockSourceT SocPeriphSpiClkSrcT
type SpiEventT c.Int

const (
	SPI_EV_BUF_TX         SpiEventT = 1
	SPI_EV_BUF_RX         SpiEventT = 2
	SPI_EV_SEND_DMA_READY SpiEventT = 4
	SPI_EV_SEND           SpiEventT = 8
	SPI_EV_RECV_DMA_READY SpiEventT = 16
	SPI_EV_RECV           SpiEventT = 32
	SPI_EV_CMD9           SpiEventT = 64
	SPI_EV_CMDA           SpiEventT = 128
	SPI_EV_TRANS          SpiEventT = 256
)

/**
 * @brief Line mode of SPI transaction phases: CMD, ADDR, DOUT/DIN.
 */

type SpiLineModeT struct {
	CmdLines  c.Uint8T
	AddrLines c.Uint8T
	DataLines c.Uint8T
}
type SpiCommandT c.Int

const (
	SPI_CMD_HD_WRBUF   SpiCommandT = 1
	SPI_CMD_HD_RDBUF   SpiCommandT = 2
	SPI_CMD_HD_WRDMA   SpiCommandT = 4
	SPI_CMD_HD_RDDMA   SpiCommandT = 8
	SPI_CMD_HD_SEG_END SpiCommandT = 16
	SPI_CMD_HD_EN_QPI  SpiCommandT = 32
	SPI_CMD_HD_WR_END  SpiCommandT = 64
	SPI_CMD_HD_INT0    SpiCommandT = 128
	SPI_CMD_HD_INT1    SpiCommandT = 256
	SPI_CMD_HD_INT2    SpiCommandT = 512
)

type SpiSamplingPointT c.Int

const (
	SPI_SAMPLING_POINT_PHASE_0 SpiSamplingPointT = 0
	SPI_SAMPLING_POINT_PHASE_1 SpiSamplingPointT = 1
)

type PtrdiffT c.Int
type WcharT c.Int

type MaxAlignT struct {
	X__clangMaxAlignNonce1 c.LongLong
	X__clangMaxAlignNonce2 c.Double
}
type X__gnucVaList c.Pointer
type WintT c.Uint
type X__blkcntT c.Long
type X__blksizeT c.Long
type X__fsblkcntT X__uint64T
type X__fsfilcntT X__uint32T
type X_offT c.Long
type X__pidT c.Int
type X__devT int16
type X__uidT uint16
type X__gidT uint16
type X__idT X__uint32T
type X__inoT uint16
type X__modeT X__uint32T
type X_off64T c.LongLong
type X__offT X_offT
type X__loffT X_off64T
type X__keyT c.Long
type X_fposT c.Long
type X__sizeT c.Uint
type X_ssizeT c.Int
type X__ssizeT X_ssizeT

type X_mbstateT struct {
	X__count c.Int
	X__value struct {
		X__wch WintT
	}
}
type X_iconvT c.Pointer
type X__clockT c.Ulong
type X__timeT X__intLeast64T
type X__clockidT c.Ulong
type X__daddrT c.Long
type X__timerT c.Ulong
type X__saFamilyT X__uint8T
type X__socklenT X__uint32T
type X__nlItem c.Int
type X__nlinkT uint16
type X__susecondsT c.Long
type X__usecondsT c.Ulong
type X__vaList c.Pointer
type X__ULong c.Ulong

type X__lock struct {
	Unused [8]uint8
}
type X_LOCKT *X__lock
type X_lockT X_LOCKT
type X_flockT X_LOCKT

type X_reent struct {
	Unused [8]uint8
}

type X__localeT struct {
	Unused [8]uint8
}

type X_Bigint struct {
	X_next   *X_Bigint
	X_k      c.Int
	X_maxwds c.Int
	X_sign   c.Int
	X_wds    c.Int
	X_x      [1]X__ULong
}

type X__tm struct {
	X__tmSec   c.Int
	X__tmMin   c.Int
	X__tmHour  c.Int
	X__tmMday  c.Int
	X__tmMon   c.Int
	X__tmYear  c.Int
	X__tmWday  c.Int
	X__tmYday  c.Int
	X__tmIsdst c.Int
}

type X_onExitArgs struct {
	X_fnargs    [32]c.Pointer
	X_dsoHandle [32]c.Pointer
	X_fntypes   X__ULong
	X_isCxa     X__ULong
}

type X_atexit struct {
	X_next          *X_atexit
	X_ind           c.Int
	X_fns           [32]c.Pointer
	X_onExitArgsPtr *X_onExitArgs
}

type X__sbuf struct {
	X_base *c.Char
	X_size c.Int
}

type X__sFILE struct {
	X_p       *c.Char
	X_r       c.Int
	X_w       c.Int
	X_flags   int16
	X_file    int16
	X_bf      X__sbuf
	X_lbfsize c.Int
	X_data    *X_reent
	X_cookie  c.Pointer
	X_read    c.Pointer
	X_write   c.Pointer
	X_seek    c.Pointer
	X_close   c.Pointer
	X_ub      X__sbuf
	X_up      *c.Char
	X_ur      c.Int
	X_ubuf    [3]c.Char
	X_nbuf    [1]c.Char
	X_lb      X__sbuf
	X_blksize c.Int
	X_offset  X_offT
	X_lock    X_flockT
	X_mbstate X_mbstateT
	X_flags2  c.Int
}
type X__FILE X__sFILE

type X_glue struct {
	X_next  *X_glue
	X_niobs c.Int
	X_iobs  *X__FILE
}

type X_rand48 struct {
	X_seed     [3]uint16
	X_mult     [3]uint16
	X_add      uint16
	X_randNext c.UlongLong
}

type X_mprec struct {
	X_result   *X_Bigint
	X_resultK  c.Int
	X_p5s      *X_Bigint
	X_freelist **X_Bigint
}

type X_miscReent struct {
	X_strtokLast     *c.Char
	X_mblenState     X_mbstateT
	X_wctombState    X_mbstateT
	X_mbtowcState    X_mbstateT
	X_l64aBuf        [8]c.Char
	X_getdateErr     c.Int
	X_mbrlenState    X_mbstateT
	X_mbrtowcState   X_mbstateT
	X_mbsrtowcsState X_mbstateT
	X_wcrtombState   X_mbstateT
	X_wcsrtombsState X_mbstateT
}

type DivT struct {
	Quot c.Int
	Rem  c.Int
}

type LdivT struct {
	Quot c.Long
	Rem  c.Long
}

type LldivT struct {
	Quot c.LongLong
	Rem  c.LongLong
}

// llgo:type C
type X__comparFnT func(c.Pointer, c.Pointer) c.Int
type FposT X_fposT
type OffT X__offT

// llgo:type C
type CookieReadFunctionT func(c.Pointer, *c.Char, c.SizeT) c.SsizeT

// llgo:type C
type CookieWriteFunctionT func(c.Pointer, *c.Char, c.SizeT) c.SsizeT

// llgo:type C
type CookieSeekFunctionT func(c.Pointer, *OffT, c.Int) c.Int

// llgo:type C
type CookieCloseFunctionT func(c.Pointer) c.Int

type CookieIoFunctionsT struct {
	Read  *CookieReadFunctionT
	Write *CookieWriteFunctionT
	Seek  *CookieSeekFunctionT
	Close *CookieCloseFunctionT
}
type EspErrT c.Int

// llgo:type C
type IntrHandlerT func(c.Pointer)

type IntrHandleDataT struct {
	Unused [8]uint8
}
type IntrHandleT *IntrHandleDataT
type EspIntrCpuAffinityT c.Int

const (
	ESP_INTR_CPU_AFFINITY_AUTO EspIntrCpuAffinityT = 0
	ESP_INTR_CPU_AFFINITY_0    EspIntrCpuAffinityT = 1
	ESP_INTR_CPU_AFFINITY_1    EspIntrCpuAffinityT = 2
)

// llgo:type C
type TaskFunctionT func(c.Pointer)
type IntrType c.Int

const (
	INTR_TYPE_LEVEL IntrType = 0
	INTR_TYPE_EDGE  IntrType = 1
)

type EspCpuCycleCountT c.Uint32T
type EspCpuIntrTypeT c.Int

const (
	ESP_CPU_INTR_TYPE_LEVEL EspCpuIntrTypeT = 0
	ESP_CPU_INTR_TYPE_EDGE  EspCpuIntrTypeT = 1
	ESP_CPU_INTR_TYPE_NA    EspCpuIntrTypeT = 2
)

/**
 * @brief CPU interrupt descriptor
 *
 * Each particular CPU interrupt has an associated descriptor describing that
 * particular interrupt's characteristics. Call esp_cpu_intr_get_desc() to get
 * the descriptors of a particular interrupt.
 */

type EspCpuIntrDescT struct {
	Priority c.Int
	Type     EspCpuIntrTypeT
	Flags    c.Uint32T
}

// llgo:type C
type EspCpuIntrHandlerT func(c.Pointer)
type EspCpuWatchpointTriggerT c.Int

const (
	ESP_CPU_WATCHPOINT_LOAD   EspCpuWatchpointTriggerT = 0
	ESP_CPU_WATCHPOINT_STORE  EspCpuWatchpointTriggerT = 1
	ESP_CPU_WATCHPOINT_ACCESS EspCpuWatchpointTriggerT = 2
)

type SpinlockT struct {
	Owner c.Uint32T
	Count c.Uint32T
}

type ImaxdivT struct {
	Quot c.IntmaxT
	Rem  c.IntmaxT
}
type SocResetReasonT c.Int

const (
	RESET_REASON_CHIP_POWER_ON   SocResetReasonT = 1
	RESET_REASON_CORE_SW         SocResetReasonT = 3
	RESET_REASON_CORE_DEEP_SLEEP SocResetReasonT = 5
	RESET_REASON_CORE_MWDT0      SocResetReasonT = 7
	RESET_REASON_CORE_RTC_WDT    SocResetReasonT = 9
	RESET_REASON_CPU0_MWDT0      SocResetReasonT = 11
	RESET_REASON_CPU0_SW         SocResetReasonT = 12
	RESET_REASON_CPU0_RTC_WDT    SocResetReasonT = 13
	RESET_REASON_SYS_BROWN_OUT   SocResetReasonT = 15
	RESET_REASON_SYS_RTC_WDT     SocResetReasonT = 16
	RESET_REASON_SYS_SUPER_WDT   SocResetReasonT = 18
	RESET_REASON_SYS_CLK_GLITCH  SocResetReasonT = 19
	RESET_REASON_CORE_EFUSE_CRC  SocResetReasonT = 20
	RESET_REASON_CPU0_JTAG       SocResetReasonT = 24
)

type MultiHeapInfo struct {
	Unused [8]uint8
}
type MultiHeapHandleT *MultiHeapInfo

/** @brief Structure to access heap metadata via multi_heap_get_info */

type MultiHeapInfoT struct {
	TotalFreeBytes      c.SizeT
	TotalAllocatedBytes c.SizeT
	LargestFreeBlock    c.SizeT
	MinimumFreeBytes    c.SizeT
	AllocatedBlocks     c.SizeT
	FreeBlocks          c.SizeT
	TotalBlocks         c.SizeT
}

// llgo:type C
type MultiHeapWalkerCbT func(c.Pointer, c.SizeT, c.Int, c.Pointer) bool

// llgo:type C
type EspAllocFailedHookT func(c.SizeT, c.Uint32T, *c.Char)

/**
 * @brief Structure used to store heap related data passed to
 * the walker callback function
 */

type WalkerHeapInfo struct {
	Start c.IntptrT
	End   c.IntptrT
}
type WalkerHeapIntoT WalkerHeapInfo

/**
 * @brief Structure used to store block related data passed to
 * the walker callback function
 */

type WalkerBlockInfo struct {
	Ptr  c.Pointer
	Size c.SizeT
	Used bool
}
type WalkerBlockInfoT WalkerBlockInfo

// llgo:type C
type HeapCapsWalkerCbT func(WalkerHeapIntoT, WalkerBlockInfoT, c.Pointer) bool
type EspResetReasonT c.Int

const (
	ESP_RST_UNKNOWN    EspResetReasonT = 0
	ESP_RST_POWERON    EspResetReasonT = 1
	ESP_RST_EXT        EspResetReasonT = 2
	ESP_RST_SW         EspResetReasonT = 3
	ESP_RST_PANIC      EspResetReasonT = 4
	ESP_RST_INT_WDT    EspResetReasonT = 5
	ESP_RST_TASK_WDT   EspResetReasonT = 6
	ESP_RST_WDT        EspResetReasonT = 7
	ESP_RST_DEEPSLEEP  EspResetReasonT = 8
	ESP_RST_BROWNOUT   EspResetReasonT = 9
	ESP_RST_SDIO       EspResetReasonT = 10
	ESP_RST_USB        EspResetReasonT = 11
	ESP_RST_JTAG       EspResetReasonT = 12
	ESP_RST_EFUSE      EspResetReasonT = 13
	ESP_RST_PWR_GLITCH EspResetReasonT = 14
	ESP_RST_CPU_LOCKUP EspResetReasonT = 15
)

// llgo:type C
type ShutdownHandlerT func()
type StackTypeT c.Uint8T
type BaseTypeT c.Int
type UBaseTypeT c.Uint
type TickTypeT c.Uint32T
type PortMUXTYPE SpinlockT

/* Used by heap_5.c to define the start address and size of each memory region
 * that together comprise the total FreeRTOS heap space. */

type HeapRegion struct {
	PucStartAddress *c.Uint8T
	XSizeInBytes    c.SizeT
}
type HeapRegionT HeapRegion

/* Used to pass information about the heap out of vPortGetHeapStats(). */

type XHeapStats struct {
	XAvailableHeapSpaceInBytes      c.SizeT
	XSizeOfLargestFreeBlockInBytes  c.SizeT
	XSizeOfSmallestFreeBlockInBytes c.SizeT
	XNumberOfFreeBlocks             c.SizeT
	XMinimumEverFreeBytesRemaining  c.SizeT
	XNumberOfSuccessfulAllocations  c.SizeT
	XNumberOfSuccessfulFrees        c.SizeT
}
type HeapStatsT XHeapStats

type Stat struct {
	Unused [8]uint8
}

type Tms struct {
	Unused [8]uint8
}

type Timeval struct {
	Unused [8]uint8
}

type Timezone struct {
	Unused [8]uint8
}

/*
 * In line with software engineering best practice, FreeRTOS implements a strict
 * data hiding policy, so the real structures used by FreeRTOS to maintain the
 * state of tasks, queues, semaphores, etc. are not accessible to the application
 * code.  However, if the application writer wants to statically allocate such
 * an object then the size of the object needs to be known.  Dummy structures
 * that are guaranteed to have the same size and alignment requirements of the
 * real objects are used for this purpose.  The dummy list and list item
 * structures below are used for inclusion in such a dummy structure.
 */

type XSTATICLISTITEM struct {
	XDummy2  TickTypeT
	PvDummy3 [4]c.Pointer
}
type StaticListItemT XSTATICLISTITEM

/* See the comments above the struct xSTATIC_LIST_ITEM definition. */

type XSTATICMINILISTITEM struct {
	XDummy2  TickTypeT
	PvDummy3 [2]c.Pointer
}
type StaticMiniListItemT XSTATICMINILISTITEM

/* See the comments above the struct xSTATIC_LIST_ITEM definition. */

type XSTATICLIST struct {
	UxDummy2 UBaseTypeT
	PvDummy3 c.Pointer
	XDummy4  StaticMiniListItemT
}
type StaticListT XSTATICLIST

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the Task structure used internally by
 * FreeRTOS is not accessible to application code.  However, if the application
 * writer wants to statically allocate the memory required to create a task then
 * the size of the task object needs to be known.  The StaticTask_t structure
 * below is provided for this purpose.  Its sizes and alignment requirements are
 * guaranteed to match those of the genuine structure, no matter which
 * architecture is being used, and no matter how the values in FreeRTOSConfig.h
 * are set.  Its contents are somewhat obfuscated in the hope users will
 * recognise that it would be unwise to make direct use of the structure members.
 */

type XSTATICTCB struct {
	PxDummy1  c.Pointer
	XDummy3   [2]StaticListItemT
	UxDummy5  UBaseTypeT
	PxDummy6  c.Pointer
	UcDummy7  [16]c.Uint8T
	PxDummy8  c.Pointer
	UxDummy12 [2]UBaseTypeT
	PvDummy15 [2]c.Pointer
	XDummy17  X_reent
	UlDummy18 [1]c.Uint32T
	UcDummy19 [1]c.Uint8T
	UxDummy20 c.Uint8T
	UcDummy21 c.Uint8T
}
type StaticTaskT XSTATICTCB

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the Queue structure used internally by
 * FreeRTOS is not accessible to application code.  However, if the application
 * writer wants to statically allocate the memory required to create a queue
 * then the size of the queue object needs to be known.  The StaticQueue_t
 * structure below is provided for this purpose.  Its sizes and alignment
 * requirements are guaranteed to match those of the genuine structure, no
 * matter which architecture is being used, and no matter how the values in
 * FreeRTOSConfig.h are set.  Its contents are somewhat obfuscated in the hope
 * users will recognise that it would be unwise to make direct use of the
 * structure members.
 */

type XSTATICQUEUE struct {
	PvDummy1 [3]c.Pointer
	U        struct {
		PvDummy2 c.Pointer
	}
	XDummy3         [2]StaticListT
	UxDummy4        [3]UBaseTypeT
	UcDummy5        [2]c.Uint8T
	UcDummy6        c.Uint8T
	PvDummy7        c.Pointer
	XDummyQueueLock PortMUXTYPE
}
type StaticQueueT XSTATICQUEUE
type StaticSemaphoreT StaticQueueT

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the event group structure used
 * internally by FreeRTOS is not accessible to application code.  However, if
 * the application writer wants to statically allocate the memory required to
 * create an event group then the size of the event group object needs to be
 * know.  The StaticEventGroup_t structure below is provided for this purpose.
 * Its sizes and alignment requirements are guaranteed to match those of the
 * genuine structure, no matter which architecture is being used, and no matter
 * how the values in FreeRTOSConfig.h are set.  Its contents are somewhat
 * obfuscated in the hope users will recognise that it would be unwise to make
 * direct use of the structure members.
 */

type XSTATICEVENTGROUP struct {
	XDummy1              TickTypeT
	XDummy2              StaticListT
	UcDummy4             c.Uint8T
	XDummyEventGroupLock PortMUXTYPE
}
type StaticEventGroupT XSTATICEVENTGROUP

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the software timer structure used
 * internally by FreeRTOS is not accessible to application code.  However, if
 * the application writer wants to statically allocate the memory required to
 * create a software timer then the size of the queue object needs to be known.
 * The StaticTimer_t structure below is provided for this purpose.  Its sizes
 * and alignment requirements are guaranteed to match those of the genuine
 * structure, no matter which architecture is being used, and no matter how the
 * values in FreeRTOSConfig.h are set.  Its contents are somewhat obfuscated in
 * the hope users will recognise that it would be unwise to make direct use of
 * the structure members.
 */

type XSTATICTIMER struct {
	PvDummy1 c.Pointer
	XDummy2  StaticListItemT
	XDummy3  TickTypeT
	PvDummy5 c.Pointer
	PvDummy6 TaskFunctionT
	UcDummy8 c.Uint8T
}
type StaticTimerT XSTATICTIMER

/*
 * In line with software engineering best practice, especially when supplying a
 * library that is likely to change in future versions, FreeRTOS implements a
 * strict data hiding policy.  This means the stream buffer structure used
 * internally by FreeRTOS is not accessible to application code.  However, if
 * the application writer wants to statically allocate the memory required to
 * create a stream buffer then the size of the stream buffer object needs to be
 * known.  The StaticStreamBuffer_t structure below is provided for this
 * purpose.  Its size and alignment requirements are guaranteed to match those
 * of the genuine structure, no matter which architecture is being used, and
 * no matter how the values in FreeRTOSConfig.h are set.  Its contents are
 * somewhat obfuscated in the hope users will recognise that it would be unwise
 * to make direct use of the structure members.
 */

type XSTATICSTREAMBUFFER struct {
	UxDummy1               [4]c.SizeT
	PvDummy2               [3]c.Pointer
	UcDummy3               c.Uint8T
	XDummyStreamBufferLock PortMUXTYPE
}
type StaticStreamBufferT XSTATICSTREAMBUFFER
type StaticMessageBufferT StaticStreamBufferT

/*
 * Definition of the only type of object that a list can contain.
 */

type XLIST struct {
	Unused [8]uint8
}

type XLISTITEM struct {
	XItemValue  TickTypeT
	PxNext      *XLISTITEM
	PxPrevious  *XLISTITEM
	PvOwner     c.Pointer
	PxContainer *XLIST
}
type ListItemT XLISTITEM

type XMINILISTITEM struct {
	XItemValue TickTypeT
	PxNext     *XLISTITEM
	PxPrevious *XLISTITEM
}
type MiniListItemT XMINILISTITEM
type ListT XLIST

/**
 *
 * Type by which tasks are referenced.  For example, a call to xTaskCreate
 * returns (via a pointer parameter) an TaskHandle_t variable that can then
 * be used as a parameter to vTaskDelete to delete the task.
 *
 * \ingroup Tasks
 */

type TskTaskControlBlock struct {
	Unused [8]uint8
}
type TaskHandleT *TskTaskControlBlock

// llgo:type C
type TaskHookFunctionT func(c.Pointer) BaseTypeT
type ETaskState c.Int

const (
	ERunning   ETaskState = 0
	EReady     ETaskState = 1
	EBlocked   ETaskState = 2
	ESuspended ETaskState = 3
	EDeleted   ETaskState = 4
	EInvalid   ETaskState = 5
)

type ENotifyAction c.Int

const (
	ENoAction                 ENotifyAction = 0
	ESetBits                  ENotifyAction = 1
	EIncrement                ENotifyAction = 2
	ESetValueWithOverwrite    ENotifyAction = 3
	ESetValueWithoutOverwrite ENotifyAction = 4
)

/*
 * Used internally only.
 */

type XTIMEOUT struct {
	XOverflowCount  BaseTypeT
	XTimeOnEntering TickTypeT
}
type TimeOutT XTIMEOUT

/*
 * Defines the memory ranges allocated to the task when an MPU is used.
 */

type XMEMORYREGION struct {
	PvBaseAddress   c.Pointer
	UlLengthInBytes c.Uint32T
	UlParameters    c.Uint32T
}
type MemoryRegionT XMEMORYREGION

/*
 * Parameters required to create an MPU protected task.
 */

type XTASKPARAMETERS struct {
	PvTaskCode     TaskFunctionT
	PcName         *c.Char
	UsStackDepth   c.Uint32T
	PvParameters   c.Pointer
	UxPriority     UBaseTypeT
	PuxStackBuffer *StackTypeT
	XRegions       [1]MemoryRegionT
}
type TaskParametersT XTASKPARAMETERS

/** Used with the uxTaskGetSystemState() function to return the state of each task
 * in the system. */

type XTASKSTATUS struct {
	XHandle              TaskHandleT
	PcTaskName           *c.Char
	XTaskNumber          UBaseTypeT
	ECurrentState        ETaskState
	UxCurrentPriority    UBaseTypeT
	UxBasePriority       UBaseTypeT
	UlRunTimeCounter     c.Uint32T
	PxStackBase          *StackTypeT
	UsStackHighWaterMark c.Uint32T
}
type TaskStatusT XTASKSTATUS
type ESleepModeStatus c.Int

const (
	EAbortSleep            ESleepModeStatus = 0
	EStandardSleep         ESleepModeStatus = 1
	ENoTasksWaitingTimeout ESleepModeStatus = 2
)

/**
 * Type by which queues are referenced.  For example, a call to xQueueCreate()
 * returns an QueueHandle_t variable that can then be used as a parameter to
 * xQueueSend(), xQueueReceive(), etc.
 */

type QueueDefinition struct {
	Unused [8]uint8
}
type QueueHandleT *QueueDefinition
type QueueSetHandleT *QueueDefinition
type QueueSetMemberHandleT *QueueDefinition
type SemaphoreHandleT QueueHandleT

/**
 * Type by which stream buffers are referenced.  For example, a call to
 * xStreamBufferCreate() returns an StreamBufferHandle_t variable that can
 * then be used as a parameter to xStreamBufferSend(), xStreamBufferReceive(),
 * etc.
 */

type StreamBufferDefT struct {
	Unused [8]uint8
}
type StreamBufferHandleT *StreamBufferDefT

// llgo:type C
type StreamBufferCallbackFunctionT func(StreamBufferHandleT, BaseTypeT, *BaseTypeT)
type MessageBufferHandleT StreamBufferHandleT

/**
 * Type by which software timers are referenced.  For example, a call to
 * xTimerCreate() returns an TimerHandle_t variable that can then be used to
 * reference the subject timer in calls to other software timer API functions
 * (for example, xTimerStart(), xTimerReset(), etc.).
 */

type TmrTimerControl struct {
	Unused [8]uint8
}
type TimerHandleT *TmrTimerControl

// llgo:type C
type TimerCallbackFunctionT func(TimerHandleT)

// llgo:type C
type PendedFunctionT func(c.Pointer, c.Uint32T)

/**
 *
 * Type by which event groups are referenced.  For example, a call to
 * xEventGroupCreate() returns an EventGroupHandle_t variable that can then
 * be used as a parameter to other event group functions.
 *
 * \ingroup EventGroup
 */

type EventGroupDefT struct {
	Unused [8]uint8
}
type EventGroupHandleT *EventGroupDefT
type EventBitsT TickTypeT

// llgo:type C
type TlsDeleteCallbackFunctionT func(c.Int, c.Pointer)

type DmaDescriptorS struct {
	Unused [8]uint8
}
type DmaDescriptorT DmaDescriptorS
type DmaDescriptorAlign4T DmaDescriptorT

type DmaDescriptorAlign8S struct {
	Unused [8]uint8
}
type DmaDescriptorAlign8T DmaDescriptorAlign8S

/**
 * @brief Power management config
 *
 * Pass a pointer to this structure as an argument to esp_pm_configure function.
 */

type EspPmConfigT struct {
	MaxFreqMhz       c.Int
	MinFreqMhz       c.Int
	LightSleepEnable bool
}
type EspPmConfigEsp32T EspPmConfigT
type EspPmConfigEsp32s2T EspPmConfigT
type EspPmConfigEsp32s3T EspPmConfigT
type EspPmConfigEsp32c3T EspPmConfigT
type EspPmConfigEsp32c2T EspPmConfigT
type EspPmConfigEsp32c6T EspPmConfigT
type EspPmLockTypeT c.Int

const (
	ESP_PM_CPU_FREQ_MAX   EspPmLockTypeT = 0
	ESP_PM_APB_FREQ_MAX   EspPmLockTypeT = 1
	ESP_PM_NO_LIGHT_SLEEP EspPmLockTypeT = 2
	ESP_PM_LOCK_MAX       EspPmLockTypeT = 3
)

type EspPmLock struct {
	Unused [8]uint8
}
type EspPmLockHandleT *EspPmLock
type PeriphInterrputT c.Int

const (
	ETS_WIFI_MAC_INTR_SOURCE              PeriphInterrputT = 0
	ETS_WIFI_MAC_NMI_SOURCE               PeriphInterrputT = 1
	ETS_WIFI_PWR_INTR_SOURCE              PeriphInterrputT = 2
	ETS_WIFI_BB_INTR_SOURCE               PeriphInterrputT = 3
	ETS_BT_MAC_INTR_SOURCE                PeriphInterrputT = 4
	ETS_BT_BB_INTR_SOURCE                 PeriphInterrputT = 5
	ETS_BT_BB_NMI_SOURCE                  PeriphInterrputT = 6
	ETS_LP_TIMER_SOURCE                   PeriphInterrputT = 7
	ETS_COEX_SOURCE                       PeriphInterrputT = 8
	ETS_BLE_TIMER_SOURCE                  PeriphInterrputT = 9
	ETS_BLE_SEC_SOURCE                    PeriphInterrputT = 10
	ETS_I2C_MASTER_SOURCE                 PeriphInterrputT = 11
	ETS_APB_CTRL_INTR_SOURCE              PeriphInterrputT = 12
	ETS_GPIO_INTR_SOURCE                  PeriphInterrputT = 13
	ETS_GPIO_NMI_SOURCE                   PeriphInterrputT = 14
	ETS_SPI1_INTR_SOURCE                  PeriphInterrputT = 15
	ETS_SPI2_INTR_SOURCE                  PeriphInterrputT = 16
	ETS_UART0_INTR_SOURCE                 PeriphInterrputT = 17
	ETS_UART1_INTR_SOURCE                 PeriphInterrputT = 18
	ETS_LEDC_INTR_SOURCE                  PeriphInterrputT = 19
	ETS_EFUSE_INTR_SOURCE                 PeriphInterrputT = 20
	ETS_RTC_CORE_INTR_SOURCE              PeriphInterrputT = 21
	ETS_I2C_EXT0_INTR_SOURCE              PeriphInterrputT = 22
	ETS_TG0_T0_LEVEL_INTR_SOURCE          PeriphInterrputT = 23
	ETS_TG0_WDT_LEVEL_INTR_SOURCE         PeriphInterrputT = 24
	ETS_CACHE_IA_INTR_SOURCE              PeriphInterrputT = 25
	ETS_SYSTIMER_TARGET0_INTR_SOURCE      PeriphInterrputT = 26
	ETS_SYSTIMER_TARGET1_INTR_SOURCE      PeriphInterrputT = 27
	ETS_SYSTIMER_TARGET2_INTR_SOURCE      PeriphInterrputT = 28
	ETS_SYSTIMER_TARGET0_EDGE_INTR_SOURCE PeriphInterrputT = 26
	ETS_SYSTIMER_TARGET1_EDGE_INTR_SOURCE PeriphInterrputT = 27
	ETS_SYSTIMER_TARGET2_EDGE_INTR_SOURCE PeriphInterrputT = 28
	ETS_SPI_MEM_REJECT_CACHE_INTR_SOURCE  PeriphInterrputT = 29
	ETS_ICACHE_PRELOAD0_INTR_SOURCE       PeriphInterrputT = 30
	ETS_ICACHE_SYNC0_INTR_SOURCE          PeriphInterrputT = 31
	ETS_APB_ADC_INTR_SOURCE               PeriphInterrputT = 32
	ETS_DMA_CH0_INTR_SOURCE               PeriphInterrputT = 33
	ETS_SHA_INTR_SOURCE                   PeriphInterrputT = 34
	ETS_ECC_INTR_SOURCE                   PeriphInterrputT = 35
	ETS_FROM_CPU_INTR0_SOURCE             PeriphInterrputT = 36
	ETS_FROM_CPU_INTR1_SOURCE             PeriphInterrputT = 37
	ETS_FROM_CPU_INTR2_SOURCE             PeriphInterrputT = 38
	ETS_FROM_CPU_INTR3_SOURCE             PeriphInterrputT = 39
	ETS_ASSIST_DEBUG_INTR_SOURCE          PeriphInterrputT = 40
	ETS_CORE0_PIF_PMS_SIZE_INTR_SOURCE    PeriphInterrputT = 41
	ETS_CACHE_CORE0_ACS_INTR_SOURCE       PeriphInterrputT = 42
	ETS_MAX_INTR_SOURCE                   PeriphInterrputT = 43
)

type SpiDevS struct {
	Cmd struct {
		Val c.Uint32T
	}
	Addr c.Uint32T
	Ctrl struct {
		Val c.Uint32T
	}
	Clock struct {
		Val c.Uint32T
	}
	User struct {
		Val c.Uint32T
	}
	User1 struct {
		Val c.Uint32T
	}
	User2 struct {
		Val c.Uint32T
	}
	MsDlen struct {
		Val c.Uint32T
	}
	Misc struct {
		Val c.Uint32T
	}
	DinMode struct {
		Val c.Uint32T
	}
	DinNum struct {
		Val c.Uint32T
	}
	DoutMode struct {
		Val c.Uint32T
	}
	DmaConf struct {
		Val c.Uint32T
	}
	DmaIntEna struct {
		Val c.Uint32T
	}
	DmaIntClr struct {
		Val c.Uint32T
	}
	DmaIntRaw struct {
		Val c.Uint32T
	}
	DmaIntSt struct {
		Val c.Uint32T
	}
	DmaIntSet struct {
		Val c.Uint32T
	}
	Reserved48 c.Uint32T
	Reserved4c c.Uint32T
	Reserved50 c.Uint32T
	Reserved54 c.Uint32T
	Reserved58 c.Uint32T
	Reserved5c c.Uint32T
	Reserved60 c.Uint32T
	Reserved64 c.Uint32T
	Reserved68 c.Uint32T
	Reserved6c c.Uint32T
	Reserved70 c.Uint32T
	Reserved74 c.Uint32T
	Reserved78 c.Uint32T
	Reserved7c c.Uint32T
	Reserved80 c.Uint32T
	Reserved84 c.Uint32T
	Reserved88 c.Uint32T
	Reserved8c c.Uint32T
	Reserved90 c.Uint32T
	Reserved94 c.Uint32T
	DataBuf    [16]c.Uint32T
	ReservedD8 c.Uint32T
	ReservedDc c.Uint32T
	Slave      struct {
		Val c.Uint32T
	}
	Slave1 struct {
		Val c.Uint32T
	}
	ClkGate struct {
		Val c.Uint32T
	}
	ReservedEc c.Uint32T
	Date       struct {
		Val c.Uint32T
	}
}
type SpiDevT SpiDevS

type SpiMemDevS struct {
	Cmd struct {
		Val c.Uint32T
	}
	Addr c.Uint32T
	Ctrl struct {
		Val c.Uint32T
	}
	Ctrl1 struct {
		Val c.Uint32T
	}
	Ctrl2 struct {
		Val c.Uint32T
	}
	Clock struct {
		Val c.Uint32T
	}
	User struct {
		Val c.Uint32T
	}
	User1 struct {
		Val c.Uint32T
	}
	User2 struct {
		Val c.Uint32T
	}
	MosiDlen struct {
		Val c.Uint32T
	}
	MisoDlen struct {
		Val c.Uint32T
	}
	RdStatus struct {
		Val c.Uint32T
	}
	Reserved30 c.Uint32T
	Misc       struct {
		Val c.Uint32T
	}
	TxCrc      c.Uint32T
	CacheFctrl struct {
		Val c.Uint32T
	}
	Reserved40 c.Uint32T
	Reserved44 c.Uint32T
	Reserved48 c.Uint32T
	Reserved4c c.Uint32T
	Reserved50 c.Uint32T
	Fsm        struct {
		Val c.Uint32T
	}
	DataBuf        [16]c.Uint32T
	FlashWaitiCtrl struct {
		Val c.Uint32T
	}
	FlashSusCtrl struct {
		Val c.Uint32T
	}
	FlashSusCmd struct {
		Val c.Uint32T
	}
	SusStatus struct {
		Val c.Uint32T
	}
	TimingCali struct {
		Val c.Uint32T
	}
	DinMode struct {
		Val c.Uint32T
	}
	DinNum struct {
		Val c.Uint32T
	}
	DoutMode struct {
		Val c.Uint32T
	}
	ReservedB8 c.Uint32T
	ReservedBc c.Uint32T
	IntEna     struct {
		Val c.Uint32T
	}
	IntClr struct {
		Val c.Uint32T
	}
	IntRaw struct {
		Val c.Uint32T
	}
	IntSt struct {
		Val c.Uint32T
	}
	ReservedD0 c.Uint32T
	ReservedD4 c.Uint32T
	ReservedD8 c.Uint32T
	ClockGate  struct {
		Val c.Uint32T
	}
	CoreClkSel struct {
		Val c.Uint32T
	}
	ReservedE4  c.Uint32T
	ReservedE8  c.Uint32T
	ReservedEc  c.Uint32T
	ReservedF0  c.Uint32T
	ReservedF4  c.Uint32T
	ReservedF8  c.Uint32T
	ReservedFc  c.Uint32T
	Reserved100 c.Uint32T
	Reserved104 c.Uint32T
	Reserved108 c.Uint32T
	Reserved10c c.Uint32T
	Reserved110 c.Uint32T
	Reserved114 c.Uint32T
	Reserved118 c.Uint32T
	Reserved11c c.Uint32T
	Reserved120 c.Uint32T
	Reserved124 c.Uint32T
	Reserved128 c.Uint32T
	Reserved12c c.Uint32T
	Reserved130 c.Uint32T
	Reserved134 c.Uint32T
	Reserved138 c.Uint32T
	Reserved13c c.Uint32T
	Reserved140 c.Uint32T
	Reserved144 c.Uint32T
	Reserved148 c.Uint32T
	Reserved14c c.Uint32T
	Reserved150 c.Uint32T
	Reserved154 c.Uint32T
	Reserved158 c.Uint32T
	Reserved15c c.Uint32T
	Reserved160 c.Uint32T
	Reserved164 c.Uint32T
	Reserved168 c.Uint32T
	Reserved16c c.Uint32T
	Reserved170 c.Uint32T
	Reserved174 c.Uint32T
	Reserved178 c.Uint32T
	Reserved17c c.Uint32T
	Reserved180 c.Uint32T
	Reserved184 c.Uint32T
	Reserved188 c.Uint32T
	Reserved18c c.Uint32T
	Reserved190 c.Uint32T
	Reserved194 c.Uint32T
	Reserved198 c.Uint32T
	Reserved19c c.Uint32T
	Reserved1a0 c.Uint32T
	Reserved1a4 c.Uint32T
	Reserved1a8 c.Uint32T
	Reserved1ac c.Uint32T
	Reserved1b0 c.Uint32T
	Reserved1b4 c.Uint32T
	Reserved1b8 c.Uint32T
	Reserved1bc c.Uint32T
	Reserved1c0 c.Uint32T
	Reserved1c4 c.Uint32T
	Reserved1c8 c.Uint32T
	Reserved1cc c.Uint32T
	Reserved1d0 c.Uint32T
	Reserved1d4 c.Uint32T
	Reserved1d8 c.Uint32T
	Reserved1dc c.Uint32T
	Reserved1e0 c.Uint32T
	Reserved1e4 c.Uint32T
	Reserved1e8 c.Uint32T
	Reserved1ec c.Uint32T
	Reserved1f0 c.Uint32T
	Reserved1f4 c.Uint32T
	Reserved1f8 c.Uint32T
	Reserved1fc c.Uint32T
	Reserved200 c.Uint32T
	Reserved204 c.Uint32T
	Reserved208 c.Uint32T
	Reserved20c c.Uint32T
	Reserved210 c.Uint32T
	Reserved214 c.Uint32T
	Reserved218 c.Uint32T
	Reserved21c c.Uint32T
	Reserved220 c.Uint32T
	Reserved224 c.Uint32T
	Reserved228 c.Uint32T
	Reserved22c c.Uint32T
	Reserved230 c.Uint32T
	Reserved234 c.Uint32T
	Reserved238 c.Uint32T
	Reserved23c c.Uint32T
	Reserved240 c.Uint32T
	Reserved244 c.Uint32T
	Reserved248 c.Uint32T
	Reserved24c c.Uint32T
	Reserved250 c.Uint32T
	Reserved254 c.Uint32T
	Reserved258 c.Uint32T
	Reserved25c c.Uint32T
	Reserved260 c.Uint32T
	Reserved264 c.Uint32T
	Reserved268 c.Uint32T
	Reserved26c c.Uint32T
	Reserved270 c.Uint32T
	Reserved274 c.Uint32T
	Reserved278 c.Uint32T
	Reserved27c c.Uint32T
	Reserved280 c.Uint32T
	Reserved284 c.Uint32T
	Reserved288 c.Uint32T
	Reserved28c c.Uint32T
	Reserved290 c.Uint32T
	Reserved294 c.Uint32T
	Reserved298 c.Uint32T
	Reserved29c c.Uint32T
	Reserved2a0 c.Uint32T
	Reserved2a4 c.Uint32T
	Reserved2a8 c.Uint32T
	Reserved2ac c.Uint32T
	Reserved2b0 c.Uint32T
	Reserved2b4 c.Uint32T
	Reserved2b8 c.Uint32T
	Reserved2bc c.Uint32T
	Reserved2c0 c.Uint32T
	Reserved2c4 c.Uint32T
	Reserved2c8 c.Uint32T
	Reserved2cc c.Uint32T
	Reserved2d0 c.Uint32T
	Reserved2d4 c.Uint32T
	Reserved2d8 c.Uint32T
	Reserved2dc c.Uint32T
	Reserved2e0 c.Uint32T
	Reserved2e4 c.Uint32T
	Reserved2e8 c.Uint32T
	Reserved2ec c.Uint32T
	Reserved2f0 c.Uint32T
	Reserved2f4 c.Uint32T
	Reserved2f8 c.Uint32T
	Reserved2fc c.Uint32T
	Reserved300 c.Uint32T
	Reserved304 c.Uint32T
	Reserved308 c.Uint32T
	Reserved30c c.Uint32T
	Reserved310 c.Uint32T
	Reserved314 c.Uint32T
	Reserved318 c.Uint32T
	Reserved31c c.Uint32T
	Reserved320 c.Uint32T
	Reserved324 c.Uint32T
	Reserved328 c.Uint32T
	Reserved32c c.Uint32T
	Reserved330 c.Uint32T
	Reserved334 c.Uint32T
	Reserved338 c.Uint32T
	Reserved33c c.Uint32T
	Reserved340 c.Uint32T
	Reserved344 c.Uint32T
	Reserved348 c.Uint32T
	Reserved34c c.Uint32T
	Reserved350 c.Uint32T
	Reserved354 c.Uint32T
	Reserved358 c.Uint32T
	Reserved35c c.Uint32T
	Reserved360 c.Uint32T
	Reserved364 c.Uint32T
	Reserved368 c.Uint32T
	Reserved36c c.Uint32T
	Reserved370 c.Uint32T
	Reserved374 c.Uint32T
	Reserved378 c.Uint32T
	Reserved37c c.Uint32T
	Reserved380 c.Uint32T
	Reserved384 c.Uint32T
	Reserved388 c.Uint32T
	Reserved38c c.Uint32T
	Reserved390 c.Uint32T
	Reserved394 c.Uint32T
	Reserved398 c.Uint32T
	Reserved39c c.Uint32T
	Reserved3a0 c.Uint32T
	Reserved3a4 c.Uint32T
	Reserved3a8 c.Uint32T
	Reserved3ac c.Uint32T
	Reserved3b0 c.Uint32T
	Reserved3b4 c.Uint32T
	Reserved3b8 c.Uint32T
	Reserved3bc c.Uint32T
	Reserved3c0 c.Uint32T
	Reserved3c4 c.Uint32T
	Reserved3c8 c.Uint32T
	Reserved3cc c.Uint32T
	Reserved3d0 c.Uint32T
	Reserved3d4 c.Uint32T
	Reserved3d8 c.Uint32T
	Reserved3dc c.Uint32T
	Reserved3e0 c.Uint32T
	Reserved3e4 c.Uint32T
	Reserved3e8 c.Uint32T
	Reserved3ec c.Uint32T
	Reserved3f0 c.Uint32T
	Reserved3f4 c.Uint32T
	Reserved3f8 c.Uint32T
	Date        struct {
		Val c.Uint32T
	}
}
type SpiMemDevT SpiMemDevS

/*
Stores a bunch of per-spi-peripheral data.
*/
type SpiSignalConnT struct {
	SpiclkOut      c.Uint8T
	SpiclkIn       c.Uint8T
	SpidOut        c.Uint8T
	SpiqOut        c.Uint8T
	SpiwpOut       c.Uint8T
	SpihdOut       c.Uint8T
	SpidIn         c.Uint8T
	SpiqIn         c.Uint8T
	SpiwpIn        c.Uint8T
	SpihdIn        c.Uint8T
	SpicsOut       [6]c.Uint8T
	SpicsIn        c.Uint8T
	SpidqsOut      c.Uint8T
	SpicdOut       c.Uint8T
	SpiclkIomuxPin c.Uint8T
	SpidIomuxPin   c.Uint8T
	SpiqIomuxPin   c.Uint8T
	SpiwpIomuxPin  c.Uint8T
	SpihdIomuxPin  c.Uint8T
	Spics0IomuxPin c.Uint8T
	Irq            c.Uint8T
	IrqDma         c.Uint8T
	Func           c.Int
	Hw             *SpiDevT
}

/** Group: configuration register */
/** Type of bt_select register
 *  GPIO bit select register
 */

type GpioBtSelectRegT struct {
	Val c.Uint32T
}

/** Type of out register
 *  GPIO output register
 */

type GpioOutRegT struct {
	Val c.Uint32T
}

/** Type of out_w1ts register
 *  GPIO output set register
 */

type GpioOutW1tsRegT struct {
	Val c.Uint32T
}

/** Type of out_w1tc register
 *  GPIO output clear register
 */

type GpioOutW1tcRegT struct {
	Val c.Uint32T
}

/** Type of sdio_select register
 *  GPIO sdio select register
 */

type GpioSdioSelectRegT struct {
	Val c.Uint32T
}

/** Type of enable register
 *  GPIO output enable register
 */

type GpioEnableRegT struct {
	Val c.Uint32T
}

/** Type of enable_w1ts register
 *  GPIO output enable set register
 */

type GpioEnableW1tsRegT struct {
	Val c.Uint32T
}

/** Type of enable_w1tc register
 *  GPIO output enable clear register
 */

type GpioEnableW1tcRegT struct {
	Val c.Uint32T
}

/** Type of strap register
 *  pad strapping register
 */

type GpioStrapRegT struct {
	Val c.Uint32T
}

/** Type of in register
 *  GPIO input register
 */

type GpioInRegT struct {
	Val c.Uint32T
}

/** Type of status register
 *  GPIO interrupt status register
 */

type GpioStatusRegT struct {
	Val c.Uint32T
}

/** Type of status_w1ts register
 *  GPIO interrupt status set register
 */

type GpioStatusW1tsRegT struct {
	Val c.Uint32T
}

/** Type of status_w1tc register
 *  GPIO interrupt status clear register
 */

type GpioStatusW1tcRegT struct {
	Val c.Uint32T
}

/** Type of pcpu_int register
 *  GPIO PRO_CPU interrupt status register
 */

type GpioPcpuIntRegT struct {
	Val c.Uint32T
}

/** Type of pcpu_nmi_int register
 *  GPIO PRO_CPU(not shielded) interrupt status register
 */

type GpioPcpuNmiIntRegT struct {
	Val c.Uint32T
}

/** Type of cpusdio_int register
 *  GPIO CPUSDIO interrupt status register
 */

type GpioCpusdioIntRegT struct {
	Val c.Uint32T
}

/** Type of pin0 register
 *  GPIO pin configuration register
 */

type GpioPinRegT struct {
	Val c.Uint32T
}

/** Type of status_next register
 *  GPIO interrupt source register
 */

type GpioStatusNextRegT struct {
	Val c.Uint32T
}

/** Type of in_sel_cfg register
 *  GPIO input function configuration register
 */

type GpioFuncInSelCfgRegT struct {
	Val c.Uint32T
}

/** Type of out_sel_cfg register
 *  GPIO output function select register
 */

type GpioFuncOutSelCfgRegT struct {
	Val c.Uint32T
}

/** Type of clock_gate_reg register
 *  GPIO clock gate register
 */

type GpioClockGateRegRegT struct {
	Val c.Uint32T
}

/** Type of reg_date_reg register
 *  GPIO version register
 */

type GpioRegDateRegRegT struct {
	Val c.Uint32T
}

type GpioDevT struct {
	BtSelect      GpioBtSelectRegT
	Out           GpioOutRegT
	OutW1ts       GpioOutW1tsRegT
	OutW1tc       GpioOutW1tcRegT
	Reserved010   [3]c.Uint32T
	SdioSelect    GpioSdioSelectRegT
	Enable        GpioEnableRegT
	EnableW1ts    GpioEnableW1tsRegT
	EnableW1tc    GpioEnableW1tcRegT
	Reserved02c   [3]c.Uint32T
	Strap         GpioStrapRegT
	In            GpioInRegT
	Reserved040   c.Uint32T
	Status        GpioStatusRegT
	StatusW1ts    GpioStatusW1tsRegT
	StatusW1tc    GpioStatusW1tcRegT
	Reserved050   [3]c.Uint32T
	PcpuInt       GpioPcpuIntRegT
	PcpuNmiInt    GpioPcpuNmiIntRegT
	CpusdioInt    GpioCpusdioIntRegT
	Reserved068   [3]c.Uint32T
	Pin           [25]GpioPinRegT
	Reserved0d8   [29]c.Uint32T
	StatusNext    GpioStatusNextRegT
	Reserved150   c.Uint32T
	FuncInSelCfg  [128]GpioFuncInSelCfgRegT
	Reserved354   [128]c.Uint32T
	FuncOutSelCfg [25]GpioFuncOutSelCfgRegT
	Reserved5b8   [29]c.Uint32T
	ClockGateReg  GpioClockGateRegRegT
	Reserved630   [51]c.Uint32T
	RegDateReg    GpioRegDateRegRegT
}
type PeriphModuleT c.Int

const (
	PERIPH_LEDC_MODULE           PeriphModuleT = 0
	PERIPH_UART0_MODULE          PeriphModuleT = 1
	PERIPH_UART1_MODULE          PeriphModuleT = 2
	PERIPH_I2C0_MODULE           PeriphModuleT = 3
	PERIPH_TIMG0_MODULE          PeriphModuleT = 4
	PERIPH_TIMG1_MODULE          PeriphModuleT = 5
	PERIPH_UHCI0_MODULE          PeriphModuleT = 6
	PERIPH_SPI_MODULE            PeriphModuleT = 7
	PERIPH_SPI2_MODULE           PeriphModuleT = 8
	PERIPH_RNG_MODULE            PeriphModuleT = 9
	PERIPH_WIFI_MODULE           PeriphModuleT = 10
	PERIPH_BT_MODULE             PeriphModuleT = 11
	PERIPH_WIFI_BT_COMMON_MODULE PeriphModuleT = 12
	PERIPH_BT_BASEBAND_MODULE    PeriphModuleT = 13
	PERIPH_BT_LC_MODULE          PeriphModuleT = 14
	PERIPH_AES_MODULE            PeriphModuleT = 15
	PERIPH_SHA_MODULE            PeriphModuleT = 16
	PERIPH_ECC_MODULE            PeriphModuleT = 17
	PERIPH_GDMA_MODULE           PeriphModuleT = 18
	PERIPH_SYSTIMER_MODULE       PeriphModuleT = 19
	PERIPH_SARADC_MODULE         PeriphModuleT = 20
	PERIPH_TEMPSENSOR_MODULE     PeriphModuleT = 21
	PERIPH_MODEM_RPA_MODULE      PeriphModuleT = 22
	PERIPH_ASSIST_DEBUG_MODULE   PeriphModuleT = 23
	PERIPH_MODULE_MAX            PeriphModuleT = 24
)

type SpiBusLockT struct {
	Unused [8]uint8
}

type SpiBusLockDevT struct {
	Unused [8]uint8
}
type SpiBusLockHandleT *SpiBusLockT
type SpiBusLockDevHandleT *SpiBusLockDevT

// llgo:type C
type BgCtrlFuncT func(c.Pointer)

// / Lock configuration struct
type SpiBusLockConfigT struct {
	HostId c.Int
	CsNum  c.Int
}

// / Child-lock configuration struct
type SpiBusLockDevConfigT struct {
	Flags c.Uint32T
}

type EspEtmChannelT struct {
	Unused [8]uint8
}
type EspEtmChannelHandleT *EspEtmChannelT

type EspEtmEventT struct {
	Unused [8]uint8
}
type EspEtmEventHandleT *EspEtmEventT

type EspEtmTaskT struct {
	Unused [8]uint8
}
type EspEtmTaskHandleT *EspEtmTaskT

/**
 * @brief ETM channel configuration
 */

type EspEtmChannelConfigT struct {
	Flags EtmChanFlags
}

type EtmChanFlags struct {
	Unused [8]uint8
}
type GdmaTriggerPeripheralT c.Int

const (
	GDMA_TRIG_PERIPH_M2M    GdmaTriggerPeripheralT = 0
	GDMA_TRIG_PERIPH_UHCI   GdmaTriggerPeripheralT = 1
	GDMA_TRIG_PERIPH_SPI    GdmaTriggerPeripheralT = 2
	GDMA_TRIG_PERIPH_I2S    GdmaTriggerPeripheralT = 3
	GDMA_TRIG_PERIPH_AES    GdmaTriggerPeripheralT = 4
	GDMA_TRIG_PERIPH_SHA    GdmaTriggerPeripheralT = 5
	GDMA_TRIG_PERIPH_ADC    GdmaTriggerPeripheralT = 6
	GDMA_TRIG_PERIPH_DAC    GdmaTriggerPeripheralT = 7
	GDMA_TRIG_PERIPH_LCD    GdmaTriggerPeripheralT = 8
	GDMA_TRIG_PERIPH_CAM    GdmaTriggerPeripheralT = 9
	GDMA_TRIG_PERIPH_RMT    GdmaTriggerPeripheralT = 10
	GDMA_TRIG_PERIPH_PARLIO GdmaTriggerPeripheralT = 11
	GDMA_TRIG_PERIPH_I3C    GdmaTriggerPeripheralT = 12
)

type GdmaChannelDirectionT c.Int

const (
	GDMA_CHANNEL_DIRECTION_TX GdmaChannelDirectionT = 0
	GDMA_CHANNEL_DIRECTION_RX GdmaChannelDirectionT = 1
)

type GdmaEtmEventTypeT c.Int

const (
	GDMA_ETM_EVENT_EOF GdmaEtmEventTypeT = 0
	GDMA_ETM_EVENT_MAX GdmaEtmEventTypeT = 1
)

type GdmaEtmTaskTypeT c.Int

const (
	GDMA_ETM_TASK_START GdmaEtmTaskTypeT = 0
	GDMA_ETM_TASK_MAX   GdmaEtmTaskTypeT = 1
)

type GdmaChannelT struct {
	Unused [8]uint8
}
type GdmaChannelHandleT *GdmaChannelT

/**
 * @brief Collection of configuration items that used for allocating GDMA channel
 *
 */

type GdmaChannelAllocConfigT struct {
	SiblingChan GdmaChannelHandleT
	Direction   GdmaChannelDirectionT
	Flags       struct {
		ReserveSibling c.Int
		IsrCacheSafe   c.Int
	}
}

/**
 * @brief Type of GDMA event data
 */

type GdmaEventDataT struct {
	Flags struct {
		AbnormalEof c.Uint32T
		NormalEof   c.Uint32T
	}
}

// llgo:type C
type GdmaEventCallbackT func(GdmaChannelHandleT, *GdmaEventDataT, c.Pointer) bool

/**
 * @brief Group of supported GDMA TX callbacks
 * @note The callbacks are all running under ISR environment
 */

type GdmaTxEventCallbacksT struct {
	OnTransEof GdmaEventCallbackT
	OnDescrErr GdmaEventCallbackT
}

/**
 * @brief Group of supported GDMA RX callbacks
 * @note The callbacks are all running under ISR environment
 */

type GdmaRxEventCallbacksT struct {
	OnRecvEof  GdmaEventCallbackT
	OnDescrErr GdmaEventCallbackT
	OnRecvDone GdmaEventCallbackT
}

/**
 * @brief Type of GDMA engine trigger
 * @note It's recommended to initialize this structure with `GDMA_MAKE_TRIGGER`.
 *
 */

type GdmaTriggerT struct {
	Periph     GdmaTriggerPeripheralT
	InstanceId c.Int
	BusId      c.Int
}

/**
 * @brief A collection of strategy item that each GDMA channel could apply
 *
 */

type GdmaStrategyConfigT struct {
	OwnerCheck        bool
	AutoUpdateDesc    bool
	EofTillDataPopped bool
}

/**
 * @brief Channel transfer configurations
 */

type GdmaTransferConfigT struct {
	MaxDataBurstSize c.Uint32T
	AccessExtMem     bool
}

/**
 * @brief GDMA transfer ability
 *
 * @note The alignment set in this structure is **not** a guarantee that gdma driver will take care of the nonalignment cases.
 *       Actually the GDMA driver has no knowledge about the DMA buffer (address and size) used by upper layer.
 *       So it's the responsibility of the **upper layer** to take care of the buffer address and size.
 *
 */

type GdmaTransferAbilityT struct {
	SramTransAlign  c.SizeT
	PsramTransAlign c.SizeT
}
